"#", "(C) 2014-2018 FrankHB.",
"NPLA1 script for building YSLib using SHBuild.";

$import! std.strings ++ string->symbol string-empty?,
$import! std.io load puts,
$import! std.system system-quote cmd-get-args,
$import! env_SHBuild_ SHBuild_EnsureDirectory_ SHBuild_TrimOptions_
	SHBuild_EchoVar SHBuild_SDot_;

"XXX", "'SHBuild_2*' depend on 'cygpath' optionally.";
$def! env_SHBuild_Common_ $provide! (
	$assert-nonempty
	$assert-absolute-path
	$env-de!
	$redef!
	SHBuild_2m
	SHBuild_2w
	SHBuild_EchoVar_N
	SHBuild_GetPlatformStrings
	build-with-conf-opt
	cons-cmd
	get_env_SHB_
	ld-ext-noadjust_
	safeenv-empty?
	safeenv-get
	safeenv-restore
	safeenv-set
	system-check
	system-or-puts
	putss
	win32?
) load ($let () ($import! std.system env-get; env-get "SHBuild_Common"));

$def! SHBuild_ToolDir safeenv-get "SHBuild_ToolDir";
$assert-absolute-path SHBuild_ToolDir;
$def! YSLib_BaseDir safeenv-get "YSLib_BaseDir";
$assert-absolute-path YSLib_BaseDir;

"NOTE", "Following variables can be specified by user.";
$env-de! SHBuild_BaseDir ++ SHBuild_ToolDir "/../SHBuild";
$env-de! SHBuild_SysRoot ++ YSLib_BaseDir "/" "sysroot";

$assert-absolute-path SHBuild_BaseDir, $assert-absolute-path SHBuild_SysRoot;

$def! YSLib_BuildDir safeenv-get "YSLib_BuildDir";
$assert-absolute-path YSLib_BuildDir;

"#", "Utility functions.";
$defl! SHBuild_EchoVar_E (env var) SHBuild_EchoVar var
	(eval (string->symbol (SHBuild_SDot_ var)) env);

"#", "Whole script variables.";
$def! extra-opts (rest (() cmd-get-args));
$def! (env-os env-arch) () SHBuild_GetPlatformStrings;
$assert-nonempty env-os, $assert-nonempty env-arch;
$def! SHBuild_Host_Platform $if (win32? env-os) "MinGW32" env-os;
$def! env-host-lib ++ SHBuild_Host_Platform "/lib-" env-arch;
$def! env_SHB_ get_env_SHB_ env-os;
$import! env_SHB_ e_S1_SHBuild_ BuildGCH_;

"#", "SR = SHBuild SysRoot.";
$def! SR_Prefix_ ++ SHBuild_SysRoot "/usr";
$def! SR_Bin_ ++ SR_Prefix_ "/bin";
$def! SR_Include_ ++ SR_Prefix_ "/include";
$def! SR_Lib_ ++ SR_Prefix_ "/lib";
$def! SR_Share_ ++ SR_Prefix_ "/share";
$def! SR_SHBuild_ ++ SHBuild_SysRoot "/.shbuild";

"#", "BD = YSLib Base Directory.";
$def! BD_3rdparty_ ++ YSLib_BaseDir "/3rdparty";
$def! BD_3rdparty_freetype_inc_ ++ BD_3rdparty_ "/freetype/include";
$def! BD_YFramework_ ++ YSLib_BaseDir "/YFramework";

"NOTE", "This is explicitly different to %SHBuild-BuildApp.sh where header",
	" directories of the dependency need not to be used saparatedly for",
	" 'INCLUDES_*'. Also note no flag like '-D' is needed for use of freetype2",
	" (unless it is been built, where 'module.cfg' copied to its source tree",
	" is used instead) normally, so it is safe here.";
$if (win32? env-os)
(
	$env-de! INCLUDES_freetype ++ "-I"
		(system-quote (SHBuild_2w env-os BD_3rdparty_freetype_inc_));
	$def! CFLAGS_freetype_other ""
)
(
	$def! INCLUDES_freetype system-or-puts env-os
		(cons-cmd "pkg-config" "--cflags-only-I" "freetype2") "";
	$def! CFLAGS_freetype_other system-or-puts env-os
		(cons-cmd "pkg-config" "--cflags-only-other" "freetype2") "";
);

SHBuild_EnsureDirectory_ YSLib_BuildDir;
$defl! skip-or-build_ (nskip dynamic debug) $let
(
	(target-name ++ ($if dynamic "dynamic " "static ") "libraries")
)
(
	$if debug ($redef! target-name ++ "debug " target-name);
	$if nskip ($let*
	(
		(repo-base SHBuild_2m env-os YSLib_BaseDir)
		(YF_SystemLibs
			$if (win32? env-os) "-lgdi32 -limm32" "-lxcb -lpthread")
		(DIR_YFramework ++ repo-base "/YFramework")
		(LIBS_YFramework SHBuild_TrimOptions_ (++ " -L\"" (SHBuild_2m env-os
			(++ DIR_YFramework "/" env-host-lib))
			"\" -lFreeImage -lfreetype " YF_SystemLibs))
	)
	(
		$defl! incsub (dir) ++ "-I\"" (SHBuild_2m env-os dir) "\"";
		$def! INCLUDES_YBase SHBuild_TrimOptions_
			(incsub (++ repo-base "/YBase/include"));
		$def! INCLUDES_YFramework SHBuild_TrimOptions_ (++
			(foldr1 ++ "" (map1 ($lambda (n) ++ (incsub (++ DIR_YFramework n
				"/include")) " ") (list "" "/Android" "/DS" "/Win32")))
			(incsub (++ repo-base "/3rdparty/include")) " " INCLUDES_freetype
			" " INCLUDES_YBase);
		for-each-ltr SHBuild_EchoVar_N (list "SHBuild");
		for-each-ltr ($lambda (var) SHBuild_EchoVar_E
			(() get-current-environment) var)
			(list "SHBuild_Host_Platform" "INCLUDES_YBase"
			"INCLUDES_YFramework" "LIBS_YFramework");
		$let ((outdir ++ YSLib_BuildDir "/.shbuild" ($if dynamic "-dll" "")
			($if debug "-debug" "")))
		(
			putss "Building " target-name " ...";
			build-with-conf-opt outdir env-os debug dynamic
				"-xid,alternative -xid,data -xid,include -xid,Android" #f
				ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
				(
					$if (safeenv-empty? "SHBuild_NoPCH")
					(
						BuildGCH_ (++ repo-base "/YBase/include/stdinc.h")
							(++ outdir "/stdinc.h") CXX
							(cons-cmd "-xc++-header" CXXFLAGS);
						$def! inc-pch list "-include"
							(++ "\"" outdir "/stdinc.h" "\"")
					)
					(
						puts "Skipped building precompiled file.";
						$def! inc-pch ()
					);
					$defl! libdname (lib) ++ lib ($if debug "d" "");
					$def! DFLAG_B_YB $if dynamic "-DYB_BUILD_DLL" "";
					$defl! build-lib (lib-name opt-list)
						system-check (apply cons-cmd (append (list e_S1_SHBuild_
						SHBOPT (++ "-xn," LIBPFX (libdname lib-name))) (rest
						(() cmd-get-args)) (list (++ repo-base "/" lib-name)
						CXXFLAGS) opt-list inc-pch));
					build-lib "YBase" (list DFLAG_B_YB INCLUDES_YBase);
					$if dynamic (safeenv-set "LIBS" (cons-cmd (++ "-L" outdir)
						(++ "-l" (libdname "YBase")) LIBS_YFramework));
					build-lib "YFramework"
						(list ($if debug ($if dynamic "-DYB_DLL" "") DFLAG_B_YB)
						($if dynamic "-DYF_BUILD_DLL" "") "-DFREEIMAGE_LIB"
						(SHBuild_TrimOptions_ (++ INCLUDES_YFramework " "
						CFLAGS_freetype_other)))
				)
			);
			putss "Finished building " target-name "."
		)
	))
	(putss "Skipped " target-name ".")
);

puts "Building YSLib libraries ...";
$let (
	(has-static safeenv-empty? "SHBuild_NoStatic")
	(has-dynamic safeenv-empty? "SHBuild_NoDynamic")
) $let ((
		build-conf $lambda (debug)
		(
			$def! conf-name $if debug "debug" "release";
			$if (safeenv-empty? ($if debug "SHBuild_UseDebug" "SHBuild_UseRelease"))
			(putss "Skipped building " conf-name " libraries.")
			(
				putss "Building " conf-name " libraries ...";
				skip-or-build_ has-static #f debug;
				skip-or-build_ has-dynamic #t debug;
				putss "Finished building " conf-name " libraries."
			)
		)
	))
(
	build-conf #t;
	build-conf #f
);
puts "Finished building YSLib libraries.";

"TODO", "Move following installation code elsewhere?";
$let ()
(
	puts "Installing headers and libraries ...";

	$def! (SR_DSO_Dest SR_DSO_Imp)
		$if (win32? env-os) (list SR_Bin_ ".a") (list SR_Lib_ "");

	$import! env_SHB_ InstInc InstLibS InstLibD InstSHBuild;
	$defl! SHB_InstInc (srcdir) InstInc srcdir SR_Include_;
	$defl! SHB_InstLibD (build-dir name)
		InstLibD build-dir name SR_Lib_ SR_DSO_Dest SR_DSO_Imp;

	for-each-ltr SHBuild_EnsureDirectory_
		(list SR_Bin_ SR_Include_ SR_Lib_ SR_Share_);

	$if (safeenv-empty? "SHBuild_No3rd")
	(
		$unless (string-empty? INCLUDES_freetype)
			SHB_InstInc (++ BD_3rdparty_freetype_inc_ "/");
		SHB_InstInc (++ BD_3rdparty_ "/include/")
	);
	for-each-ltr SHB_InstInc (list (++ YSLib_BaseDir "/YBase/include/")
		(++ BD_YFramework_ "/include/") (++ BD_YFramework_ "/DS/include/")
		(++ BD_YFramework_ "/Win32/include/"));

	$def! SR_S1_SHBuild ++ YSLib_BuildDir "/.shbuild";
	$def! SR_S1_SHBuild_debug ++ YSLib_BuildDir "/.shbuild-debug";
	$def! SR_S1_SHBuild_DLL ++ YSLib_BuildDir "/.shbuild-dll";
	$def! SR_S1_SHBuild_DLL_debug ++ YSLib_BuildDir "/.shbuild-dll-debug";

	$if (safeenv-empty? "SHBuild_UseDebug")
		(puts "Skipped installing debug libraries.")
	(
		$if (safeenv-empty? "SHBuild_NoStatic")
		(
			InstLibS SR_S1_SHBuild_debug SR_Lib_ "YBased";
			InstLibS SR_S1_SHBuild_debug SR_Lib_ "YFrameworkd"
		)
		(puts "Skipped installing debug static libraries.");
		$if (safeenv-empty? "SHBuild_NoDynamic")
		(
			SHB_InstLibD SR_S1_SHBuild_DLL_debug "YBased";
			SHB_InstLibD SR_S1_SHBuild_DLL_debug "YFrameworkd"
		)
		(puts "Skipped installing debug static libraries.");
	);
	$if (safeenv-empty? "SHBuild_UseRelease")
		(puts "Skipped installing release libraries.")
	(
		$if (safeenv-empty? "SHBuild_NoStatic")
		(
			InstLibS SR_S1_SHBuild SR_Lib_ "YBase";
			InstLibS SR_S1_SHBuild SR_Lib_ "YFramework"
		)
		(puts "Skipped installing release static libraries.");
		$if (safeenv-empty? "SHBuild_NoDynamic")
		(
			SHB_InstLibD SR_S1_SHBuild_DLL "YBase";
			SHB_InstLibD SR_S1_SHBuild_DLL "YFramework"
		)
		(puts "Skipped installing release static libraries.");
	);

	$if (safeenv-empty? "SHBuild_No3rd")
	(
		$let ((InstLib_YF_ $lambda (name) InstSHBuild "HardLink"
			(++ SR_Lib_ "/" name) (++ BD_YFramework_ "/" env-host-lib "/" name)))
		(
			$unless (string-empty? INCLUDES_freetype)
			(
				"TODO", "Check file existence even if optional in some cases.";
				InstLib_YF_ "libfreetype.a"
			);
			InstLib_YF_ "libFreeImage.a"
		)
	)
	(puts "Skipped installing 3rd party libraries.");
	puts "Finished installing headers and libraries."
);

"NOTE", "Following settings are shared by stage 2 builds.",
	"See https://bitbucket.org/FrankHB/yslib/wiki/Tools/Scripts.zh-CN.md.",
	"Only SHBuild environment variables not otherwise set need to be restored.";
safeenv-restore "LDFLAGS";
safeenv-set "LIBS" (SHBuild_TrimOptions_ (++ (safeenv-get "LIBS") " "
	(safeenv-get "LIBS_RPATH") " -L" (system-quote (SHBuild_2w env-os SR_Lib_))
	" -lYFramework -lYBase"));
$def! INCLUDES_ ++ (safeenv-get "INCLUDES") " -I"
	(system-quote (SHBuild_2m env-os SR_Include_));

$let ((target-name "Stage 2 SHBuild"))
(
	$let ((src-dir SHBuild_BaseDir))
	(
		putss "Building " target-name " ...";
		$assert-absolute-path src-dir;
		"XXX", "Extra options for SHBOPT are always empty now.";
		build-with-conf-opt SR_SHBuild_ env-os #f #t "" #t
			ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
				system-check (apply cons-cmd (append (list e_S1_SHBuild_ SHBOPT
					src-dir) extra-opts (list CXXFLAGS INCLUDES_))));
		putss "Finished building " target-name "."
	);
	putss "Installing " target-name " ...";
	$assert-absolute-path SHBuild_ToolDir;
	$import! env_SHB_ InstHardLinkExe InstNPLA1Module_ InstTool;
	$defl! SHB_InstNPLA1Module_ (name)
		InstNPLA1Module_ SHBuild_ToolDir SR_Bin_ name;
	$defl! SHB_InstTool (name)
		InstTool SHBuild_ToolDir SR_Bin_ name;
	InstHardLinkExe SR_SHBuild_ SR_Bin_ "SHBuild";
	SHB_InstNPLA1Module_ "SHBuild-YSLib-common.txt";
	for-each-ltr SHB_InstTool
		(list "SHBuild-common.sh" "SHBuild-common-options.sh"
		"SHBuild-common-toolchain.sh" "SHBuild-BuildApp.sh");
	putss "Finished installing " target-name "."
);

$if (safeenv-empty? "SHBuild_NoDev")
(
	puts "Building other development tools using stage2 SHBuild ...";
	$def! e_S2_SHBuild_ system-quote (++ SR_Bin_ "/SHBuild");
	$def! tools-list list "SXML2XML" "ProjectGenerator";
	build-with-conf-opt SR_SHBuild_ env-os #f #t "" #t
		ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX) for-each-ltr
			($lambda (name)
			system-check (apply cons-cmd (append (list e_S2_SHBuild_ SHBOPT
				(++ SHBuild_BaseDir "/../" name)) extra-opts
				(list CXXFLAGS INCLUDES_)))) tools-list);
	puts "Installing other development tools ...";
	$import! env_SHB_ InstHardLinkExe;
	for-each-ltr ($lambda (name) (
		InstHardLinkExe SR_SHBuild_ SR_Bin_ name
	)) tools-list;
	"XXX", "Version of Windows? Extract as a function?";
	$if (win32? env-os)
	(
		$import! env_SHB_ InstSHBuild InstUACManifestForExe;
		$def! uac-manifest ++ SR_Share_ "/FixUAC.manifest";
		InstSHBuild "File" uac-manifest
			(++ YSLib_BaseDir "/Data/FixUAC.manifest");
		InstUACManifestForExe uac-manifest SR_Bin_ "RevisionPatcher"
	);
	puts "Finished installing other development tools."
)
(puts "Skipped building and installing other development tools.");

puts "Done.";

