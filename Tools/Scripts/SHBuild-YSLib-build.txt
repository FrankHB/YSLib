"#", "(C) 2014-2018 FrankHB.",
"NPLA1 script for building YSLib using SHBuild.";

"XXX", "'SHBuild_2*' depend on 'cygpath' optionally.";

$def! env_SHBuild_Common_ $provide! (
	$assert-absolute-path
	$redef!
	SHBuild_2m
	SHBuild_BuildGCH
	SHBuild_EchoVar_N
	SHBuild_GetPlatformStrings
	SHB_GetToolPath
	build-with-conf-opt
	cons-cmd
	system-check
	putss
	win32?
) load (env-get "SHBuild_Common");

$def! YSLib_BuildDir env-get "YSLib_BuildDir";
$assert-absolute-path YSLib_BuildDir;
SHBuild_EnsureDirectory_ YSLib_BuildDir;
$def! (env-os env-arch) () SHBuild_GetPlatformStrings;
$defl! SHBuild_EchoVar_E (env var) SHBuild_EchoVar var
	(eval (string->symbol (SHBuild_SDot_ var)) env);
$defl! skip-or-build_ (nskip dynamic debug) $let
(
	(lname ++ ($if dynamic "dynamic " "static ") "libraries")
)
(
	$def! YSLib_BaseDir env-get "YSLib_BaseDir";
	$assert-absolute-path YSLib_BaseDir;
	$if debug ($redef! lname ++ "debug " lname);
	$if nskip ($let*
	(
		(SHBuild_Host_Platform $if (win32? env-os) "MinGW32" env-os)
		(repo-base SHBuild_2m env-os YSLib_BaseDir)
		(YF_SystemLibs
			$if (win32? env-os) "-lgdi32 -limm32" "-lxcb -lpthread")
		(DIR_YFramework ++ repo-base "/YFramework")
		(LIBS_YFramework SHBuild_TrimOptions_ (++ " -L\"" (SHBuild_2m env-os
			(++ DIR_YFramework "/" SHBuild_Host_Platform "/lib-" env-arch))
			"\" -lFreeImage -lfreetype " YF_SystemLibs))
	)
	(
		$defl! incsub (dir) ++ "-I\"" (SHBuild_2m env-os dir) "\"";
		$def! INCLUDES_YBase SHBuild_TrimOptions_
			(incsub (++ repo-base "/YBase/include"));
		$def! INCLUDES_YFramework SHBuild_TrimOptions_ (++
			(foldr1 ++ "" (map1 ($lambda (n) ++ (incsub (++ DIR_YFramework n
				"/include")) " ") (list "" "/Android" "/DS" "/Win32")))
			(incsub (++ repo-base "/3rdparty/include")) " "
			(env-get "INCLUDES_freetype") " " INCLUDES_YBase);
		for-each-ltr SHBuild_EchoVar_N (list "SHBuild");
		for-each-ltr ($lambda (var) SHBuild_EchoVar_E
			(() get-current-environment) var)
			(list "SHBuild_Host_Platform" "INCLUDES_YBase"
			"INCLUDES_YFramework" "LIBS_YFramework");
		$let
		(
			(shbuild () SHB_GetToolPath)
			(outdir ++ YSLib_BuildDir "/.shbuild" ($if dynamic "-dll" "")
				($if debug "-debug" ""))
		)
		(
			putss "Building " lname " ...";
			build-with-conf-opt outdir env-os debug dynamic
				"-xid,alternative -xid,data -xid,include -xid,Android" #f
				($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
				(
					$if (env-empty? "SHBuild_NoPCH")
					(
						SHBuild_BuildGCH
							(++ repo-base "/YBase/include/stdinc.h")
							(++ outdir "/stdinc.h")
							(++ CXX " -xc++-header " CXXFLAGS);
						$def! inc-pch list "-include"
							(++ "\"" outdir "/stdinc.h" "\"")
					)
					(
						puts "Skipped building precompiled file.";
						$def! inc-pch ()
					);
					$defl! libdname (lib) ++ lib ($if debug "d" "");
					$def! DFLAG_B_YB $if dynamic "-DYB_BUILD_DLL" "";
					$defl! build-lib (lib-name opt-list)
						system-check (apply cons-cmd (append (list shbuild
						SHBOPT (++ "-xn," LIBPFX (libdname lib-name))) (rest
						(() cmd-get-args)) (list (++ repo-base "/" lib-name)
						CXXFLAGS) opt-list inc-pch));
					build-lib "YBase" (list DFLAG_B_YB INCLUDES_YBase);
					$if dynamic (env-set "LIBS" (cons-cmd (++ "-L" outdir)
						(++ "-l" (libdname "YBase")) LIBS_YFramework));
					build-lib "YFramework"
						(list ($if debug ($if dynamic "-DYB_DLL" "") DFLAG_B_YB)
						($if dynamic "-DYF_BUILD_DLL" "") "-DFREEIMAGE_LIB"
						(SHBuild_TrimOptions_ (++ INCLUDES_YFramework " "
						(env-get "CFLAGS_freetype_other"))))
				)
			);
			putss "Finished building " lname "."
		)
	))
	(putss "Skipped " lname ".")
);

puts "Building YSLib libraries ...";
$let (
	(has-static env-empty? "SHBuild_NoStatic")
	(has-dynamic env-empty? "SHBuild_NoDynamic")
) $let ((
		build-conf $lambda (debug)
		(
			$def! conf-name $if debug "debug" "release";
			$if (env-empty? ($if debug "SHBuild_UseDebug" "SHBuild_UseRelease"))
			(putss "Skipped building " conf-name " libraries.")
			(
				putss "Building " conf-name " libraries ...";
				skip-or-build_ has-static #f debug;
				skip-or-build_ has-dynamic #t debug;
				putss "Finished building " conf-name " libraries."
			)
		)
	))
(
	build-conf #t;
	build-conf #f
);
puts "Finished building YSLib libraries.";

