"#", "(C) 2014-2023 FrankHB.",
"NPLA1 script for building YSLib using SHBuild.";

$import! std.strings ++ string->symbol string-empty?,
$import! std.io load puts,
$import! std.system env-get system-quote cmd-get-args create-directory*,
$import! env_SHBuild_ SHBuild_TrimOptions_ SHBuild_EchoVar SHBuild_SDot_;

"XXX", "'SHBuild_2*' depend on 'cygpath' optionally.";
$def! env_SHBuild_Common_ $provide! (
	$assert-nonempty
	$assert-absolute-path
	$env-de!
	$redef!
	SHBuild_2m
	SHBuild_CheckCXX
	SHBuild_EchoVar_N
	SHBuild_GetPlatformStrings
	SHBuild_GetSystemPrefix
	SHBuild_Platform_Detect
	build-with-conf-opt
	cons-cmd
	get_env_SHB_
	get-vcs-rev-info_
	ld-ext-noadjust_
	nul_dev_
	rmatch?
	safeenv-empty?
	safeenv-get
	safeenv-restore
	safeenv-set
	system-check
	system-ok
	system-or-puts
	system-quote-m_
	putss
	use-ubsan?
	win32?
) load (++ (env-get "SHBuild_ToolDir") "/SHBuild-YSLib-common.txt");

$def! SHBuild_ToolDir safeenv-get "SHBuild_ToolDir";
$assert-absolute-path SHBuild_ToolDir;
$def! YSLib_BaseDir safeenv-get "YSLib_BaseDir";
$assert-absolute-path YSLib_BaseDir;

"NOTE", "Following variables can be specified by user.";
$env-de! SHBuild_BaseDir ++ SHBuild_ToolDir "/../SHBuild";
$env-de! SHBuild_SysRoot ++ YSLib_BaseDir "/" "sysroot";

$assert-absolute-path SHBuild_BaseDir, $assert-absolute-path SHBuild_SysRoot;

$def! SHBuild_BuildDir safeenv-get "SHBuild_BuildDir";
$assert-absolute-path SHBuild_BuildDir;

"#", "Utility functions.";
$defl! SHBuild_EchoVar_E (env var) SHBuild_EchoVar var
	(eval (string->symbol (SHBuild_SDot_ var)) env);

"#", "Whole script variables.";
$def! extra-opts restv (() cmd-get-args);
$def! (host-arch host-os) () SHBuild_GetPlatformStrings;
$assert-nonempty host-arch,
$assert-nonempty host-os;
"XXX", "This is for the workaround in building YFramework on MinGW64,",
	" which does not support configurable via the environment variable.";
$def! host-platform_ SHBuild_Platform_Detect host-os host-arch;
$env-de! SHBuild_SystemPrefix SHBuild_GetSystemPrefix host-platform_;
$def! host-lib_ ++ host-platform_ "/lib";
$def! env_SHB_ get_env_SHB_ host-os;
$import! env_SHB_ e_S1_SHBuild_ BuildGCH_;

"#", "'SR' is short for SysRoot.";
$def! SR_Prefix_ ++ SHBuild_SysRoot SHBuild_SystemPrefix;
$def! SR_Bin_ ++ SR_Prefix_ "/bin";
$def! SR_Include_ ++ SR_Prefix_ "/include";
$def! SR_Lib_ ++ SR_Prefix_ "/lib";
$def! SR_Share_ ++ SR_Prefix_ "/share";
$def! SR_Share_NPLA1_ ++ SR_Prefix_ "/share/NPLA1";
$def! SR_Var_NPLA1_ ++ SR_Prefix_ "/var/NPLA1";
"#", "This does not pollute Sysroot.";
$def! SR_SHBuild_ ++ SHBuild_BuildDir "/.shbuild-dll";

"#", "BD = YSLib Base Directory.";
$def! BD_3rdparty_ ++ YSLib_BaseDir "/3rdparty";
$def! BD_3rdparty_freetype_inc_ ++ BD_3rdparty_ "/freetype/include";
$def! BD_YFramework_ ++ YSLib_BaseDir "/YFramework";

"NOTE", "This is explicitly different to %SHBuild-BuildApp.txt where header",
	" directories of the dependency need not to be used saparatedly for",
	" 'INCLUDES_*'. Also note no flag like '-D' is needed for use of freetype2",
	" (unless it is been built, where 'module.cfg' copied to its source tree",
	" is used instead) normally, so it is safe here.";
$if (win32? host-os)
(
	$env-de! INCLUDES_freetype
		++ "-I" (system-quote-m_ BD_3rdparty_freetype_inc_);
	$def! CFLAGS_freetype_other ""
)
(
	$def! INCLUDES_freetype system-or-puts
		(cons-cmd "pkg-config" "--cflags-only-I" "freetype2") "";
	$def! CFLAGS_freetype_other system-or-puts
		(cons-cmd "pkg-config" "--cflags-only-other" "freetype2") "";
);

$defl! get-lib-outdir_ (dynamic debug)
	++ SHBuild_BuildDir "/.shbuild" ($if dynamic "-dll" "")
		($if debug "-debug" "");

$defl! host-build-with-conf-opt_
	(outdir debug dynamic shbopt-ext app do-ld-ext do-build)
	build-with-conf-opt outdir host-arch host-os debug dynamic shbopt-ext app
		do-ld-ext do-build;

create-directory* SHBuild_BuildDir;
$defl! skip-or-build_ (nskip dynamic debug) $let
(
	(target-name ++ ($if dynamic "dynamic" "static") " libraries")
)
(
	$if debug ($redef! target-name ++ "debug " target-name);
	$defl! dnameof (lib) ++ lib ($if debug "d" "");
	$if nskip ($let*
	(
		(repo-base SHBuild_2m YSLib_BaseDir)
		(YF_SystemLibs $if (win32? host-os) "-lquadmath -lgdi32 -limm32"
			"-lxcb -lquadmath")
		(DIR_YFramework ++ repo-base "/YFramework")
		(LIBS_YFramework SHBuild_TrimOptions_ (++ " -L"
			(system-quote-m_ (++ DIR_YFramework "/" host-lib_))
			" -l" (dnameof "FreeImage") " -lfreetype " YF_SystemLibs))
	)
	(
		$defl! incsub (dir) ++ "-I" (system-quote-m_ dir);
		$def! INCLUDES_YBase SHBuild_TrimOptions_
			(incsub (++ repo-base "/YBase/include"));
		$def! INCLUDES_YFramework SHBuild_TrimOptions_ (++
			(foldr1 ++ "" (map1 ($lambda (n) ++ (incsub (++ DIR_YFramework n
				"/include")) " ") (list "" "/Android" "/DS" "/Win32")))
			(incsub (++ repo-base "/3rdparty/include")) " " INCLUDES_freetype
			" " INCLUDES_YBase);
		for-each-ltr SHBuild_EchoVar_N (list "SHBuild");
		for-each-ltr ($lambda (var) SHBuild_EchoVar_E
			(() get-current-environment) var)
			(list "SHBuild_BuildDir" "INCLUDES_YBase"
			"INCLUDES_YFramework" "LIBS_YFramework");
		$let ((outdir get-lib-outdir_ dynamic debug))
		(
			putss "Building " target-name " ...";
			"XXX", "No need to set %LDFLAGS, since it is always set in the",
				" call to 'build-with-conf-opt' for dynamic libraries.";
			$if dynamic (safeenv-restore "LIBS");
			host-build-with-conf-opt_ outdir debug dynamic
				"-xid,alternative -xid,data -xid,include -xid,Android" #f
				ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
				(
					$def! SHBuild_CXXFLAGS safeenv-get "SHBuild_CXXFLAGS";
					$if (safeenv-empty? "SHBuild_NoPCH")
					(
						BuildGCH_ (++ repo-base "/YBase/include/stdinc.h")
							(++ outdir "/stdinc.h") CXX (cons-cmd "-xc++-header"
							SHBuild_CXXFLAGS CXXFLAGS);
						$def! inc-pch list "-include"
							(system-quote-m_ (++ outdir "/stdinc.h"))
					)
					(
						puts "Skipped building precompiled file.";
						$def! inc-pch ()
					);
					$def! DFLAG_B_YB $if dynamic "-DYB_BUILD_DLL" "";
					$if dynamic ($def! base_LDFLAGS env-get "LDFLAGS");
					"NOTE", "The prefix 'lib' is explicit, see %InstLibD.";
					$defl! build-lib (lib-name inc-pch .opts)
						$let ((dname ++ (dnameof lib-name)))
						(
							"TODO", "Make import library output configurable.";
							$if ($and dynamic (win32? host-os))
								(safeenv-set "LDFLAGS"
									(cons-cmd (++ "-Wl,--out-implib,\""
										(SHBuild_2m
										(++ outdir "/lib" dname ".dll.a")) "\"")
										base_LDFLAGS));
							system-check (apply cons-cmd (append
								(list e_S1_SHBuild_ (++ repo-base "/" lib-name)
									SHBOPT (++ "-xn," LIBPFX dname))
								(restv (() cmd-get-args)) (list CXXFLAGS) opts
								inc-pch))
						);
					"XXX", "Workarounds.";
					$def! mingw32r $and (eqv? host-platform_ "MinGW32")
						(not? debug);
					build-lib "YBase" inc-pch DFLAG_B_YB INCLUDES_YBase
						($if mingw32r "-fno-lto" "");
					$if dynamic (safeenv-set "LIBS" (cons-cmd (++ "-L"
						(system-quote-m_ outdir))
						(++ "-l" (dnameof "YBase")) LIBS_YFramework));
					$def! release-rev_ "900";
					$def! (vcs bstr rev-str) () get-vcs-rev-info_;
					putss "INFO: Try using detected revision from VCS '" vcs
						"': " bstr ", '" rev-str "'.";
					$def! bnum-opt $if (string-empty? vcs) ""
					(
						$if (rmatch? bstr "[1-9]\\d*")
							(++ "-DYSL_BuildNumber=" bstr)
							(
								putss "WARNING: Build number string '" bstr
									"' is not a positive decimal integer"
									" without leading zero(es). Use the default"
									" value from the recent release '"
									release-rev_ "' instead.";
								++ "-DYSL_BuildNumber=" release-rev_
							)
					);
					$def! rev-opt $if (string-empty? vcs) ""
					(
						$import! std.io readable-nonempty-file?;

						$let ((dfile ++ outdir "/" LIBPFX (dnameof "YFramework")
							"/source/YSLib/Core/YCoreUtilities.cpp.d")
							(dep ++ YSLib_BaseDir ($if (eqv? vcs "hg")
								"/.hg/branch" "/.git/logs/HEAD")))
							$let ((ok system-ok
								(cons-cmd "sed -i" (++ "\"1a\\ " (($remote-eval
								regex-replace std.strings) dep (($remote-eval
								string->regex std.strings) " ") "\\ ")
								" \\\\\\\\\"")
								(system-quote-m_ dfile) "2>" nul_dev_)))
								putss ($if ok "INFO" "WARNING")
									": File '" dep "' " ($if ok "is added"
									"failed to add") " as the dependency into '"
									dfile "'.";
						++ "-DYSL_VCS_Revision=\"\\\"\\\\\\\"" rev-str
							"\\\\\\\"\\\"\""
					);
					"XXX", "Precompiled header is not available as it",
						" requires '-D__NO_INLINE__ -U__OPTIMIZE__'.";
					"XXX", "See $2020-10 @ doc/Workflow.txt.";
					$def! use-g++ eqv? (SHBuild_CheckCXX host-os CXX) "G++";
					$def! mingw64g
						$and use-g++ (eqv? host-platform_ "MinGW64");
					"XXX", "See $2020-12 @ doc/Workflow.txt.";
					$def! SHBuild_LDFLAGS safeenv-get "SHBuild_LDFLAGS";
					"XXX", "See $2022-12 @ doc/Workflow.txt.";
					$defl! add-fix-flags ()
						$cond
							(mingw64g "-Og -g -fno-var-tracking-assignments")
							(($and use-g++ (not? debug) dynamic
								(eqv? host-platform_ "Linux")
								($or (use-ubsan? SHBuild_CXXFLAGS)
								(use-ubsan? SHBuild_LDFLAGS)))
								"-fdisable-tree-einline -fno-lto")
							(mingw32r "-fno-lto")
							(#t "");
					$defl! add-fix-flags-w ()
					(
						$def! extra () add-fix-flags;
						$unless (string-empty? extra) (putss
							"WARNING: Additional options are prepended to work"
							" around the YFramework build: '" extra "'.");
						extra
					);
					build-lib "YFramework" ($if mingw64g () inc-pch)
						(() add-fix-flags-w) bnum-opt rev-opt
						($if dynamic "-DYB_DLL" "")
						($if dynamic "-DYF_BUILD_DLL" "") "-DFREEIMAGE_LIB"
						(SHBuild_TrimOptions_ (++ INCLUDES_YFramework " "
						CFLAGS_freetype_other))
				)
			);
			putss "Finished building " target-name "."
		)
	))
	(putss "Skipped " target-name ".")
);

puts "Building YSLib libraries ...";
$let (
	(has-static safeenv-empty? "SHBuild_NoStatic")
	(has-dynamic safeenv-empty? "SHBuild_NoDynamic")
) $let ((
		build-conf $lambda (debug)
		(
			$def! conf-name $if debug "debug" "release";
			$if (safeenv-empty?
				($if debug "SHBuild_UseDebug" "SHBuild_UseRelease"))
			(putss "Skipped building " conf-name " libraries.")
			(
				putss "Building " conf-name " libraries ...";
				skip-or-build_ has-static #f debug;
				skip-or-build_ has-dynamic #t debug;
				putss "Finished building " conf-name " libraries."
			)
		)
	))
(
	build-conf #t;
	build-conf #f
);
puts "Finished building YSLib libraries.";

"TODO", "Move following installation code elsewhere?";
$let ()
(
	puts "Installing headers and libraries ...";

	$def! (SR_DSO_Dest imp-sfx)
		$if (win32? host-os) (list SR_Bin_ ".a") (list SR_Lib_ "");

	$import! env_SHB_ InstInc InstLibS InstLibD InstSHBuild;
	$defl! SHB_InstInc (srcdir) InstInc srcdir SR_Include_;

	for-each-ltr create-directory* (list SR_Bin_ SR_Include_ SR_Lib_
		SR_Share_ SR_Share_NPLA1_ SR_Var_NPLA1_);

	$if (safeenv-empty? "SHBuild_No3rd")
	(
		$unless (string-empty? INCLUDES_freetype)
			(SHB_InstInc (++ BD_3rdparty_freetype_inc_ "/"));
		SHB_InstInc (++ BD_3rdparty_ "/include/")
	);
	for-each-ltr SHB_InstInc (list (++ YSLib_BaseDir "/YBase/include/")
		(++ BD_YFramework_ "/include/") (++ BD_YFramework_ "/DS/include/")
		(++ BD_YFramework_ "/Win32/include/"));

	$defl! inst_lib_ (build-dir dynamic lib) $if dynamic
		(InstLibD build-dir lib SR_Lib_ SR_DSO_Dest imp-sfx #t)
		(InstLibS build-dir SR_Lib_ lib);
	$defl! inst_libs_ (dynamic debug)
		for-each-ltr ($lambda (lib) inst_lib_ (get-lib-outdir_ dynamic debug)
			dynamic (++ lib ($if debug "d" ""))) (list "YBase" "YFramework");
	$def! use-debug not? (safeenv-empty? "SHBuild_UseDebug"),
	$def! use-release not? (safeenv-empty? "SHBuild_UseRelease");
	$if (use-debug)
	(
		$if (safeenv-empty? "SHBuild_NoStatic")
			(inst_libs_ #f #t)
			(puts "Skipped installing debug static libraries.");
		$if (safeenv-empty? "SHBuild_NoDynamic")
			(inst_libs_ #t #t)
			(puts "Skipped installing debug dynamic libraries.");
	) (puts "Skipped installing debug libraries.");
	$if (use-release)
	(
		$if (safeenv-empty? "SHBuild_NoStatic")
			(inst_libs_ #f #f)
			(puts "Skipped installing release static libraries.");
		$if (safeenv-empty? "SHBuild_NoDynamic")
			(inst_libs_ #t #f)
			(puts "Skipped installing release dynamic libraries.");
	) (puts "Skipped installing release libraries.");

	$if (safeenv-empty? "SHBuild_No3rd")
	(
		$let ((InstLib_YF_ $lambda (name) InstSHBuild "HardLink"
			(++ SR_Lib_ "/" name)
			(++ BD_YFramework_ "/" host-lib_ "/" name)))
		(
			$unless (string-empty? INCLUDES_freetype)
			(
				"TODO", "Check file existence even if optional in some cases.";
				$if ($or use-debug use-release) (InstLib_YF_ "libfreetype.a")
			);
			$if (use-debug) (InstLib_YF_ "libFreeImaged.a"),
			$if (use-release) (InstLib_YF_ "libFreeImage.a")
		)
	)
	(puts "Skipped installing 3rd party libraries.");
	puts "Finished installing headers and libraries."
);

"NOTE", "Following settings are shared by stage 2 builds.",
	"See user documentation Tools/Scripts.zh-CN.md.",
	"Only SHBuild environment variables not otherwise set need to be restored.";
safeenv-set "LIBS" (SHBuild_TrimOptions_ (cons-cmd (safeenv-get "LIBS") "-L"
	(system-quote-m_ SR_Lib_) "-lYFramework -lYBase"));
$def! INCLUDES_ ++ (safeenv-get "INCLUDES") " -I" (system-quote-m_ SR_Include_);

$let ((target-name "stage 2 SHBuild"))
(
	$let ((src-dir SHBuild_BaseDir))
	(
		putss "Building " target-name " ...";
		$assert-absolute-path src-dir;
		"XXX", "Extra options for SHBOPT are always empty now.";
		host-build-with-conf-opt_ SR_SHBuild_ #f #t "" #t
			ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
				system-check (apply cons-cmd (append (list e_S1_SHBuild_
					src-dir SHBOPT) extra-opts (list CXXFLAGS INCLUDES_))));
		putss "Finished building " target-name "."
	);
	putss "Installing " target-name " ...";
	$assert-absolute-path SHBuild_ToolDir;
	$import! env_SHB_ InstHardLinkExe InstNPLA1Module_ InstTool InstSHBuild;
	$defl! SHB_InstNPLA1Module_ (name)
		InstNPLA1Module_ SHBuild_ToolDir SR_Share_NPLA1_ name;
	$defl! SHB_InstTool (name)
		InstTool SHBuild_ToolDir SR_Bin_ name;
	InstHardLinkExe SR_SHBuild_ SR_Bin_ "SHBuild";
	SHB_InstNPLA1Module_ "SHBuild-YSLib-common.txt";
	SHB_InstNPLA1Module_ "SHBuild-BuildApp.txt";
	for-each-ltr SHB_InstTool
		(list "SHBuild-common.sh" "SHBuild-common-options.sh"
		"SHBuild-common-toolchain.sh" "SHBuild-BuildApp.sh"
		"SHBuild-BuildPkg.sh");
	putss "Finished installing " target-name "."
);

$if (safeenv-empty? "SHBuild_NoDev")
(
	puts "Building other development tools using stage 2 SHBuild ...";
	$def! e_S2_SHBuild_ system-quote (++ SR_Bin_ "/SHBuild");
	$def! tools-list list "RevisionPatcher" "SXML2XML" "ProjectGenerator";
	"XXX", "'SHBuild_BaseDir' is fixed in parallel to these directories of",
		" these tools, while 'SHBuild_ToolDir' is expected more portable.";
	host-build-with-conf-opt_ SR_SHBuild_ #f #t "" #t
		ld-ext-noadjust_ ($lambda (CXX CXXFLAGS SHBOPT LIBPFX)
		for-each-ltr ($lambda (name)
			system-check (apply cons-cmd (append
				(list e_S2_SHBuild_ (++ SHBuild_BaseDir "/../" name) SHBOPT)
				extra-opts (list CXXFLAGS INCLUDES_)))) tools-list);
	puts "Installing other development tools ...";
	$import! env_SHB_ InstHardLinkExe;
	for-each-ltr ($lambda (name) InstHardLinkExe SR_SHBuild_ SR_Bin_ name)
		tools-list;
	"XXX", "Version of Windows? Extract as a function?";
	$if (win32? host-os)
	(
		$import! env_SHB_ InstSHBuild InstUACManifestForExe;
		$def! uac-manifest ++ SR_Share_ "/FixUAC.manifest";
		InstSHBuild "File" uac-manifest
			(++ YSLib_BaseDir "/Data/FixUAC.manifest");
		InstUACManifestForExe uac-manifest SR_Bin_ "RevisionPatcher"
	);
	puts "Finished installing other development tools."
)
(puts "Skipped building and installing other development tools.");

puts "Done.";

