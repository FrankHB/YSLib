"#", "(C) 2014-2023 FrankHB.",
"NPLA1 script as common library.";

"XXX", "'SHBuild_2*' depend on 'cygpath' optionally.";
"XXX", "'SHBuild_CheckUName_*' depend on 'uname'.";

"NOTE", "Prelude:", "Unsafe functions not friendly to environment stability",
	" or dangerous to environments except 'move!', 'assign!' and",
	" 'lock-current-environment' are poisoned.";
$provide! (assign%! assign@! copy-environment lock-environment
	$defrec! $setrec! make-standard-environment derive-environment)
(
	$import! std.strings string->symbol symbol->string;

	$def! fns (unwrap list) move! assign%! assign@! copy-environment
		lock-environment $defrec! $setrec!;
	$defl/e! raise-error (make-environment std.strings) (&n)
		raise-error
			(++ "ERROR: Use of unsafe function '" n "' is not allowed.");
	$defl! poison-fn (&fn &env)
		eval (list $defl/e! (ensigil fn)
			(() make-standard-environment) (string->symbol ".") raise-error
			(symbol->string fn)) env;
	$defw! poison (fns) d for-each-ltr ($lambda (fn) poison-fn fn d) fns;
	poison fns;
	$def! nstd (() make-standard-environment);
	eval (list poison (list $quote fns)) nstd;
	$defl/e! &make-standard-environment nstd () () lock-current-environment,
	$def! &derive-environment
		($lambda/e nstd (&e) $lambda/e (() lock-current-environment) (.&envs)
			() ($lambda/e (append envs (list e)) ()
				() lock-current-environment)) (weaken-environment nstd)
);

$def! $redef! $def!;
$defv/e! $set-if-empty! (derive-environment std.strings) (&var .&body) d
	$if (string-empty? (eval% var d))
		(eval% (list% $set! d var (move! body)) d);
$defl/e! cons-cmd (derive-environment std.strings) (.&xs)
	apply ++ (map1 ($lambda (&str) $if (string-empty? str) "" (++ str " ")) xs);
$defl/e! rmatch? std.strings (&x &y) regex-match? x (string->regex y);
$defl/e! putss (derive-environment std.io std.strings) (.&xs)
	puts (apply ++ xs);
$defl/e! system-ok (derive-environment std.system) (&cmd) eqv? (system cmd) 0;
$defl/e! win32? (() make-standard-environment) (os) eqv? os "Win32";

$defl/e! cmd-fail (derive-environment std.strings) (&cmd)
	raise-error (++ "Failed to call command: " cmd ".");
$defl/e! system-check ($let ((mods () make-standard-environment))
	($set! mods (cmd-fail system-ok) list cmd-fail system-ok; (move! mods)))
	(cmd) $unless (system-ok cmd) (cmd-fail cmd);
$defv/e! $set-system-var! (() make-standard-environment) (&var &arg) d
(
	$import! std.system system-get;

	$unless (eval (list $binds1? d var) d)
		($let* ((cmd eval arg d) ((&rstr code .) system-get cmd))
			$if (eqv? code 0) (eval (list $def! var rstr) d)
				(cmd-fail cmd))
);
$defv/e! $assert (derive-environment std.strings env_SHBuild_)
	(&var &pred? &msg) d
	$unless ($and (eval (list $binds1? d var) d) ((eval pred? d) (eval var d)))
		(raise-error (++ "Variable " (SHBuild_QuoteS_ (symbol->string var))
			" shall " (eval msg d) "."));
$provide! ($assert-nonempty $assert-absolute-path)
(
	$def! mods derive-environment std.strings std.system;
	$set! mods $assert $assert;

	$defv/e! &$assert-nonempty mods (&var) d
		eval (list $assert var ($lambda (&x) $and (string? x)
			(not? (string-empty? x))) "be of a string of nonempty value") d,
	$defv/e! &$assert-absolute-path mods (&var) d
		eval (list $assert var ($lambda (&x) $and (string? x)
			(absolute-path? x)) "be of a string of absolute path") d
);

"NOTE", "Saving environments at first to avoid being overriden unexpectedly.";
$provide! (safeenv-get safeenv-set ss-verbose-puts)
(
	$import! std.system env-empty?;

	"NOTE", "Nonempty environment variable 'SS_*' would enable specifically.",
		"See user documentation Tools/Scripts.zh-CN.md.";
	$def! mods $let ((ss_DebugEnv not? (env-empty? "SS_DebugEnv")))
		$bindings/p->environment (std.strings std.system std.io)
		(emap () make-environment)
		(SS_DebugEnv ss_DebugEnv)
		(SS_Verbose not? (env-empty? "SS_Verbose"))
		(log-set $if ss_DebugEnv
			($lambda/e (make-environment env_SHBuild_ std.io) (name value)
				(puts "SS_DebugEnv: "; SHBuild_EchoVar name value))
			($lambda .));

	"TODO", "Optimize with continuations.";
	$defl/e! &safeenv-get mods (name)
		$letrec ((sym string->symbol name) (denv () get-current-environment))
			$if (eval (list $binds1? emap sym) denv)
				(eval (list sym) emap)
				($def! v env-get name; eval (list $set! emap sym v) denv; v),
	$defl/e! &safeenv-set mods (name val)
	(
		$letrec ((sym string->symbol name) (denv () get-current-environment))
			$unless (eval (list $binds1? emap sym) denv)
				(eval (list $set! emap sym (env-get name)) denv);
		log-set name val;
		env-set name val
	),
	$defl/e! &ss-verbose-puts mods (str) $if SS_Verbose (puts str)
);
$provide! (safeenv-empty? safeenv-restore)
(
	$def! mods derive-environment std.strings;
	$set! mods (safeenv-get safeenv-set) list safeenv-get safeenv-set;
	$defl/e! &safeenv-empty? mods (&n) string-empty? (safeenv-get n),
	$defl/e! &safeenv-restore mods (&n) safeenv-set n (safeenv-get n)
);
$provide! ($lazy-env-val $env-de!)
(
	$def! mods derive-environment std.strings std.promises std.system
		env_SHBuild_;
	$set! mods safeenv-get safeenv-get;

	$defv/e! &$lazy-env-val mods (&name .&body) d
		$lazy/d (() lock-current-environment)
			$let ((t safeenv-get name)) $if (string-empty? t)
				(eval (move! body) d) t,
	$defv/e! &$env-de! mods (&var .&body) d
		$let ((t safeenv-get (symbol->string (desigil var))))
			eval (list $def! var
				($if (string-empty? t) (list (unwrap eval) (move! body) d) t)) d
);

$provide! (SHBuild_Env_OS SHBuild_Env_Arch)
(
	$defl! SHBuild_CheckUName_Case_ (&x) $cond
		((rmatch? x ".*Darwin.*") "OS_X")
		(($or (rmatch? x ".*MSYS.*") (rmatch? x ".*MINGW.*")) "Win32")
		((rmatch? x ".*Linux.*") "Linux")
		(#t "unknown");
	$defl! SHBuild_CheckUNameM_Case_ (x) $cond
		((rmatch? x "x86_64|i.*86-64") "x86_64")
		((rmatch? x "i.*86") x)
		((rmatch? x "aarch64") x)
		(#t "unknown");

	"XXX", "'SHBuild_CheckUName_*' depend on the external command 'uname'";
	$env-de! &SHBuild_Env_OS ($set-system-var! SHBuild_Env_uname "uname";
		SHBuild_CheckUName_Case_ SHBuild_Env_uname),
	$env-de! &SHBuild_Env_Arch ($set-system-var! SHBuild_Env_uname_m "uname -m";
		SHBuild_CheckUNameM_Case_ SHBuild_Env_uname_m);
);
$defl! SHBuild_GetPlatformStrings ()
(
	$env-de! SHBuild_Host_OS SHBuild_Env_OS;
	"XXX", "See 'CARCH' in '/etc/msystem' distributed by MSYS2.";
	$env-de! SHBuild_Host_Arch $if (win32? SHBuild_Host_OS)
		($let ((msystem safeenv-get "MSYSTEM"))
			$cond
				((eqv? msystem "MINGW64") "x86_64")
				((eqv? msystem "MINGW32") "i686")
				((eqv? msystem "CLANG64") "x86_64")
				((eqv? msystem "CLANG32") "i686")
				((eqv? msystem "CLANGARM64") "aarch64")
				((eqv? msystem "UCRT64") "x86_64")
				(#t SHBuild_Env_Arch))
		SHBuild_Env_Arch;
	list SHBuild_Host_Arch SHBuild_Host_OS
);

$def! nul_dev_ $if (win32? SHBuild_Env_OS) "NUL" "/dev/null";
$def! cmd_noerr_ ++ "2> " nul_dev_;

$import! std.system system-get system-quote;

$defl! system-or-puts (cmd str) $let (((rstr code .)
	system-get (cons-cmd cmd (system-quote str) cmd_noerr_)))
	$if (eqv? code 0) rstr str;

"NOTE", "See https://stackoverflow.com/questions/27975969/27976653#27976653.";
"XXX", "Assume Win32 always uses cmd, not respecting to COMSPEC.";
$defl! system-qget (cmd)
	$if (win32? SHBuild_Env_OS)
		(system-get (system-quote cmd)) (system-get cmd);

$defl! SHBuild_2m (pth) system-or-puts "cygpath -m" pth;
$defl! SHBuild_2u (pth) system-or-puts "cygpath -au" pth;
$defl! SHBuild_2w (pth) system-or-puts "cygpath -w" pth;

$defl! system-quote-m_ (s) system-quote (SHBuild_2m s);

$defl! SHBuild_GetTempDir ()
(
	$defl! search (&x) $cond
		((null? x) SHBuild_2m "/tmp")
		((safeenv-empty? (first& x)) search (rest& x))
		(#t safeenv-get (first& x));
	search (list "TMPDIR" "TEMP" "TMP");
);

$import! std.strings ++;
$import! std.system make-temporary-filename;

$def! SHBuild_Env_TempDir () SHBuild_GetTempDir;
$defl! mktmp_ () make-temporary-filename (++ SHBuild_Env_TempDir "/") "";
"NOTE", "Suffix is now hard-coded. The suffix makes the output of the compiler",
	" driver same to the '-o' argument in the command line.";
$defl! mktmp_exe_ ()
	make-temporary-filename (++ SHBuild_Env_TempDir "/") ".exe";
"NOTE",
	"The output path cannot be '/dev/null'. See http://sourceforge.net/p/msys2/discussion/general/thread/2d6adff2/?limit=25.";
$defl/e! with-tmp-file_ (derive-environment std.system std.io) (tmp-file f)
(
	$def! r f tmp-file;
	$unless ($or (not? (readable-file? tmp-file)) (remove-file tmp-file))
		(putss "Warning: Failed to remove temporary file '" tmp-file "'");
	move! r
);

$defl/e! blank-string?_ std.strings (s)
	string-empty? (regex-replace s (string->regex "[ \n\r\t\v]") "");

$defl! split-multiline_ (str)
(
	$if (blank-string?_ str) (raise-error "Empty command found.")
	(
		$import! std.strings string-split regex-replace string->regex;

		string-split (regex-replace str (string->regex "([<>&|\"])") "^$1")
			"\r\n"
	)
);

"XXX", "Assume the shell supporting single quotes.";
$defl/e! expand-src_ std.strings (cmd) ++ " '" cmd "'";

$defl! compile-ok_ (src compile out opt)
(
	$import! std.strings string<-;

	$assert-nonempty compile;
	$if (safeenv-empty? "COMSPEC")
	(
		"XXX", "Not checking the existence of executable %compile.";
		system-ok (cons-cmd (++ "echo" (expand-src_ src)) "|"
			(system-quote compile) "-pipe" "-xc++" "-" "-o" (system-quote out)
			opt cmd_noerr_)
	)
	(
		with-tmp-file_ (make-temporary-filename (++ SHBuild_Env_TempDir "/")
			".cpp") ($lambda (tmp-src) (
			for-each-ltr ($lambda (s) ($remote-eval system std.system)
				(cons-cmd (++ "ECHO." s) ">> " tmp-src)) (split-multiline_ src);
			"XXX", "Not checking the existence of executable %compile.";
			system-ok (cons-cmd (system-quote compile) (system-quote tmp-src)
				"-pipe" "-o" (system-quote out) opt cmd_noerr_)
		))
	)
);
$defl! compile-ok-discard_ (src compile opt)
	with-tmp-file_ (() mktmp_exe_)
		($lambda (tmp-file) compile-ok_ src compile tmp-file opt);

$defl/e! SHBuild_EchoVar_N (derive-current-environment env_SHBuild_) (var)
	SHBuild_EchoVar var (safeenv-get (SHBuild_SDot_ var));

$defl! SHBuild_GetSystemPrefix (platform) $cond
	((eqv? platform "MinGW64") "/mingw64")
	((eqv? platform "MinGW32") "/mingw32")
	((eqv? platform "MinGW32") "/mingw32")
	((eqv? platform "MinGW_Clang64") "/clang64")
	((eqv? platform "MinGW_Clang32") "/clang32")
	((eqv? platform "MinGW_UCRT64") "/ucrt64")
	((eqv? platform "MinGW_ClangARM64") "/clangarm64")
	(#t "/usr");
$defl! SHBuild_Platform_Detect (os arch)
	$if (win32? os)
	(
		$env-de! MSYSTEM "";
		$cond
			((eqv? MSYSTEM "MINGW64") "MinGW64")
			((eqv? MSYSTEM "MINGW32") "MinGW32")
			((eqv? MSYSTEM "CLANG64") "MinGW_Clang64")
			((eqv? MSYSTEM "CLANG32") "MinGW_Clang32")
			((eqv? MSYSTEM "CLANGARM64") "MinGW_ClangARM64")
			((eqv? MSYSTEM "UCRT64") "MinGW_UCRT64")
			((eqv? arch "x86_64") "MinGW64")
			(#t "MinGW32")
	)
	os;

$def! SHBuild_CmdCache_ ();
$defl%! SHBuild_CmdCache_At_ (host-os) assv host-os SHBuild_CmdCache_;
$defl! SHBuild_CmdCache_GetEnv_ (host-os)
(
	$def! r SHBuild_CmdCache_At_ host-os;
	$if (null? r)
	(
		list-push-front! SHBuild_CmdCache_ (list host-os (() make-environment));
		assign! r (SHBuild_CmdCache_At_ host-os)
	);
	first (rest& r)
);

"XXX", "Not checking the existence of the output executable.";
$defl! compile-exec-output_ (src compile opt de)
	with-tmp-file_ (() mktmp_exe_)
		($lambda (tmp-file)
			$if (compile-ok_ src compile tmp-file opt)
				(system-or-puts tmp-file de) de);

$defl/e! make-compiler-version-string_ std.strings (major minor patch)
	++ major " * 10000L + " minor " * 100L + " patch;

$defl! get-cxx-version-string-expr_ (name)
	$cond ((eqv? name "Clang++") make-compiler-version-string_
		"__clang_major__" "__clang_minor__" "__clang_patchlevel__")
		((eqv? name "G++") make-compiler-version-string_
			"__GNUG__" "__GNUC_MINOR__" "__GNUC_PATCHLEVEL__")
		(#t "");

$defl! test-cxx-version_ (e sym)
	$let* ((name ($remote-eval force std.promises) (first (eval% sym e)))
		(ver get-cxx-version-string-expr_ name))
	(
		$import! std.strings string-empty? ++ symbol->string;

		$if (string-empty? ver) ""
		(
			compile-exec-output_ (++ "	
#include <cstdio>

int
main()
{
	std::printf(\"%ld\\n\", " ver ");
}
") (symbol->string sym) "" ""
		)
	);

$defl! access-cmd-cache-with-fn_ (host-os cxx fn)
(
	$import! std.strings string->symbol;

	$let ((e SHBuild_CmdCache_GetEnv_ host-os) (sym string->symbol cxx))
	(
		$import! std.promises $lazy/d;

		$unless (eval (list bound? cxx) e)
		(
			$let ((d () make-standard-environment))
				eval (list $def! sym list
					(list $lazy/d d
						$cond
							(list (list compile-ok-discard_
								"int main(){return __clang__;}" cxx "")
								"Clang++")
							(list (list compile-ok-discard_
								"int main(){return __GNUG__;}" cxx "")
								"G++")
							(list #t ""))
					(list $lazy/d d test-cxx-version_ e (list $quote sym))
				) e
		);
		fn (eval% sym e)
	)
);

$defl! SHBuild_CheckCXX (host-os cxx)
	access-cmd-cache-with-fn_ host-os cxx
		($lambda/e std.promises ((&prom .)) force prom);

$defw! SHBuild_CXX_Test (cxx src .opts) d
	compile-ok-discard_ src cxx (apply cons-cmd (list* "-pipe" "-xc++" opts) d);

$defw! SHBuild_CXX_TestSimple (cxx .opts) d
	apply SHBuild_CXX_Test (list* cxx "int main(){}" opts) d;

$defl! SHBuild_CXX_GetVersion (host-os cxx)
	access-cmd-cache-with-fn_ host-os cxx
		($lambda/e std.promises ((#ignore &prom .)) force prom);

$defl! SHBuild_Get_C_CXXFLAGS_WARNING (cxx-name cxx-version)
(
	"NOTE", "The minimal version is 2.95.3.";
	"XXX", "%w_suggest_attribute is for G++ only, but there is always some",
		" (partial) fallback for supported compilers.";
	$let ((opts_cc "")
		(w_deprecated "-Wdeprecated")
		(w_deprecated_declarations "-Wdeprecated-declarations")
		(w_double_promotion "-Wdouble-promotion")
		(w_extra "-Wextra")
		(w_format "-Wformat=2 -Wno-format-nonliteral")
		(w_float_equal "-Wfloat-equal")
		(w_invalid_pch "-Winvalid-pch")
		(w_missing_include_dirs "-Wmissing-include-dirs")
		(w_sign_conversion "-Wsign-conversion")
		(w_suggest_attribute cons-cmd "-Wsuggest-attribute=const"
			"-Wsuggest-attribute=noreturn" "-Wsuggest-attribute=pure"))
	(
		$import! std.math <?,
		$import! std.strings string<-;

		$cond ((eqv? cxx-name "Clang++") (
			$if (<? cxx-version 30800) (string<- w_double_promotion ""),
			string<- w_suggest_attribute "-Wmissing-noreturn"
		))
		((eqv? cxx-name "G++") (
			$def! w_logical_op "-Wlogical-op",
			$def! w_trampolines "-Wtrampolines";
			"XXX", "'-Wfloat-equal' is documented in GCC 3.0.4. Actually it is",
				" introduced earlier, see https://gcc.gnu.org/git/?p=gcc.git;a=commit;h=b843d2101e5b335f9ae87d5dea12372aca5fb5da.";
			$if (<? cxx-version 30000) (string<- w_float_equal ""),
			"XXX", "'-Wno-deprecated-declarations' is documented in GCC 3.1.0.",
			$if (<? cxx-version 30100) (string<- w_deprecated_declarations ""),
			$if (<? cxx-version 30400) (
				"XXX", "'-W' seems working since GCC 2.5.",
				string<- w_extra "-W",
				string<- w_format "-Wformat",
				string<- w_invalid_pch ""
			),
			$if (<? cxx-version 40000) (string<- w_missing_include_dirs ""),
			$if (<? cxx-version 40300) (
				string<- w_logical_op "",
				string<- w_sign_conversion ""
			),
			"XXX", "'-Wno-deprecated' is documented in GCC 4.4.0 for warnings.",
				" This was only for C/Obj-C++ previously.",
			$if (<? cxx-version 40400) (string<- w_deprecated ""),
			$if (<? cxx-version 40600) (
				"XXX", "This is not documented in GCC 5.1, but the alternative is",
					" already used since 4.6. See the default value initialized",
					" above.",
				string<- w_suggest_attribute "-Wmissing-noreturn",
				string<- w_double_promotion "",
				string<- w_trampolines ""
			);
			string<- opts_cc (cons-cmd w_logical_op w_trampolines)
		));
		cons-cmd "-Wall" "-Wcast-align" w_deprecated w_deprecated_declarations
			w_double_promotion w_extra w_float_equal w_format w_invalid_pch
			"-Wmissing-declarations" w_missing_include_dirs "-Wmultichar"
			"-Wredundant-decls" w_sign_conversion w_suggest_attribute "-Wshadow"
			opts_cc
	)
);

$defl! SHBuild_Get_CXXFLAGS_WARNING (cxx-name cxx-version
	C_CXXFLAGS_WARNING C_CXXFLAGS_IMPL_WARNING CXXFLAGS_IMPL_WARNING)
(
	"NOTE", "The minimal version is 2.95.3.";
	"XXX", "%w_no_missing_braces is a workaround for",
		" https://bugs.llvm.org/show_bug.cgi?id=21629. Although it is",
		" supported in G++ (documented in 3.0.4) and newer versions of",
		" Clang++, this is only enabled for affected versions of Clang++.";
	$let ((opts_cxx "")
		(w_deprecated "")
		(w_no_mismatched_tags "-Wno-mismatched-tags")
		(w_no_missing_braces "")
		(w_no_noexcept_type "-Wno-noexcept-type")
		(w_zero_as_null_pointer_constant "-Wzero-as-null-pointer-constant"))
	(
		$import! std.math <?,
		$import! std.strings string<-;

		$cond ((eqv? cxx-name "Clang++")
			$let ((w_no_deprecated_register "-Wno-deprecated-register")) (
			$if (<? cxx-version 30400) (string<- w_no_deprecated_register ""),
			"XXX", "Clang++ supports '-Wnoexcept-types' since 5.0. Clang++",
				" >= 4.0 warns against '-Wno-noexcept-type', though Clang++",
				" 3.0 not.",
			$if (<? cxx-version 50000) (
				string<- w_no_noexcept_type "",
				string<- w_zero_as_null_pointer_constant ""
			),
			"XXX", "See above.",
			$if (<? cxx-version 60000)
				(string<- w_no_missing_braces "-Wno-missing-braces");
			string<- opts_cxx (cons-cmd w_no_deprecated_register
				"-Wshorten-64-to-32" "-Wweak-vtables")
		))
		((eqv? cxx-name "G++") $let (
			(w_conditionally_supported "-Wconditionally-supported")
			(w_strict_null_sentinal "-Wstrict-null-sentinel")
			(w_suggest_final cons-cmd "-Wsuggest-final-methods"
				"-Wsuggest-final-types")) (
			$if (<? cxx-version 40100) (string<- w_strict_null_sentinal ""),
			"XXX", "'-Wno-deprecated' is documented in GCC 4.4.0 for warnings.",
				" This was only for C/Obj-C++ previously.",
			$if (<? cxx-version 40400) (string<- w_deprecated "-Wdeprecated"),
			$if (<? cxx-version 40900) (string<- w_conditionally_supported ""),
			$if (<? cxx-version 50100) (string<- w_suggest_final ""),
			"XXX", "G++ supports '-Wmismatch-tags' since 9.0. Although",
				" '-Wno-mismatched-tags' is just fine for previous versions,",
				" ignore it here.",
			$if (<? cxx-version 90000) (string<- w_no_mismatched_tags "");
			string<- opts_cxx (cons-cmd w_conditionally_supported
				w_strict_null_sentinal w_suggest_final)
		));
		cons-cmd C_CXXFLAGS_WARNING C_CXXFLAGS_IMPL_WARNING
			"-Wctor-dtor-privacy" w_deprecated w_no_mismatched_tags
			w_no_missing_braces w_no_noexcept_type "-Wnon-virtual-dtor"
			"-Woverloaded-virtual" "-Wsign-promo"
			w_zero_as_null_pointer_constant opts_cxx CXXFLAGS_IMPL_WARNING
	)
);

$defl! SHBuild_Extend_CallVariables ()
(
	$defv! $prepend (svar var) d
	(
		$import! std.strings string-empty? symbol->string;

		eval (list $env-de! svar "") d;
		$def! sval eval svar d;
		$unless (string-empty? sval)
		(
			$let* ((varn symbol->string var) (val env-get (eval varn d)))
			(
				safeenv-set varn (++ sval " " val);
				ss-verbose-puts (++ "Prepended " (symbol->string svar) " '" sval
					"' to the original " varn " '" val "'.")
			)
		)
	);
	$prepend SHBuild_LDFLAGS LDFLAGS;
	$prepend SHBuild_LIBS LIBS
);

$defl! SHBuild_ar_ok_ (ar)
	system-ok
		(cons-cmd (system-quote-m_ ar) "--help" "1>" (() mktmp_) cmd_noerr_);

$defl! get-thread-options_ (cxx)
(
	$defl! dmp-test (name) (system-ok (cons-cmd (system-quote-m_ cxx)
		"-dumpspecs 2>& 1 | grep" name ">" nul_dev_));
	$if (dmp-test "mthreads:") (list "-mthreads" "-mthreads")
	(
		$defl! compile-test (opt) SHBuild_CXX_TestSimple cxx opt;
		$cond
			((compile-test "-Werror -mthreads")
				list ($if (compile-test "-c -Werror -mthreads") "-mthreads"
					"-D_MT") "-mthreads")
			(($or (dmp-test "no-pthread:") (not? (compile-test "-pthread")))
				list "" "")
			(#t list "-pthread" "-pthread")
	)
);
$defl! get-SHBOPT_ (outdir shbopt-ext use-ld)
(
	$import! env_SHBuild_ SHBuild_TrimOptions_;

	$def! opt cons-cmd (++ "-xd,\"" outdir "\"") shbopt-ext;
	SHBuild_TrimOptions_ ($if use-ld (cons-cmd opt "-xmode,2") opt)
);
$defl! SHB_SetupPlatformVars_ (e host-os)
(
	$def! LIBPFX safeenv-get "LIBPFX";
	$def! DSOSFX safeenv-get "DSOSFX";
	$def! EXESFX safeenv-get "EXESFX";
	$if (win32? host-os)
	(
		$set-if-empty! DSOSFX ".dll";
		$set-if-empty! EXESFX ".exe"
	)
	(
		$set-if-empty! LIBPFX "lib";
		$set-if-empty! DSOSFX ".so";
	);
	$set! e (LIBPFX DSOSFX EXESFX) (list LIBPFX DSOSFX EXESFX)
);

$defl! ld-ext-noadjust_ #ignore "";
$defl! ld-ext-adjust_win32_subsystem_ (host-os)
(
	$import! std.strings string-empty?;

	$if ($and (win32? host-os)
		(string-empty? (safeenv-get "SHBuild_NoAdjustSubsystem")))
		(ss-verbose-puts "Added \"-mwindows\" to LDFLAGS."; "-mwindows")
		""
);

$defl! get-gcflags_ (host-os CXX)
(
	$env-de! C_CXXFLAGS_GC "-fdata-sections -ffunction-sections";
	"XXX", "%LDFLAGS_GC is used to the environment detection despite %use-ld.";
	$env-de! LDFLAGS_GC
		($if (eqv? host-os "OS_X") "-Wl,--dead-strip" "-Wl,--gc-sections");
	$if (compile-ok-discard_ "int main(){}" CXX
		(cons-cmd C_CXXFLAGS_GC LDFLAGS_GC)) (list C_CXXFLAGS_GC LDFLAGS_GC)
		(list "" "")
);

$defl! use-fsanitize? (name opt)
	rmatch? opt (++ ".*-fsanitize=[a-z,]*" name ".*");
$defl! use-san? (opt)
	use-fsanitize? "(address|thread|memory|undefined|leak)" opt;
$defl! use-asan? (opt) use-fsanitize? "address" opt;
$defl! use-tsan? (opt) use-fsanitize? "thread" opt;
$defl! use-msan? (opt) use-fsanitize? "memory" opt;
$defl! use-ubsan? (opt) use-fsanitize? "undefined" opt;
$defl! use-lsan? (opt) use-fsanitize? "leak" opt;

$defl! SHBuild_cxx_ ()
(
	$env-de! MSYSTEM "";
	$env-de! CXX $if (rmatch? MSYSTEM "CLANG(64|32|ARM64)") "clang++" "g++";
	$assert-nonempty CXX;
	CXX
);

$defw! test-libquadmath_ () d
	$if (SHBuild_CXX_Test (() SHBuild_cxx_) "#include <quadmath.h>
#ifndef QUADMATH_H
#	error \"QuadMath not found.\"
#endif

namespace fpq
{

using ::floorq;
using ::scalbnq;
using ::finiteq;
using ::powq;
using ::log2q;

} // namespace fpq;

int
main()
{
	return int(fpq::floorq(__float128(0.0)));
}
" "-lquadmath")
	(
		puts "Detected quadmath for linking.";
		"-lquadmath"
	)
	(
		puts "Not detected quadmath for linking.";
		""
	);

$defl! build-with-conf-opt (outdir host-arch host-os debug dynamic shbopt-ext
	app do-ld-ext do-build)
(
	$import! std.math string->number positive? integer? / number->string <?,
	$import! std.strings string<- string->symbol,
	$import! std.promises $lazy force,
	$import! env_SHBuild_ SHBuild_EchoVar SHBuild_QuoteS_ SHBuild_TrimOptions_;

	$def! use-ld $or dynamic app;
	(
	$def! CXX () SHBuild_cxx_;
	safeenv-set "CXX" CXX
	);
	$def! SHBuild_CXX_Name SHBuild_CheckCXX host-os CXX;
	$assert-nonempty SHBuild_CXX_Name;
	$def! SHBuild_CXX_Version SHBuild_CXX_GetVersion host-os CXX;
	$assert-nonempty SHBuild_CXX_Version;
	$def! cxx-version string->number SHBuild_CXX_Version;
	$unless ($and cxx-version (integer? cxx-version) (positive? cxx-version))
	(
		raise-error (++ "The detected raw compiler version '"
			SHBuild_CXX_Version
			"' is not a valid representation of a positive integer.");
	);
	$provide! (cxx-version-major cxx-version-minor cxx-version-patch)
	(
		$import! std.math floor/;

		$def! (cxx-version-major mq) floor/ cxx-version 10000;
		$def! (cxx-version-minor cxx-version-patch) floor/ mq 100;
		list cxx-version-major cxx-version-minor cxx-version-patch
	);
	putss "C++ compiler identification is " SHBuild_CXX_Name " "
		(number->string cxx-version-major) "." (number->string
		cxx-version-minor) "." (number->string cxx-version-patch) ".";
	($env-de! AR $cond
		(($and (eqv? SHBuild_CXX_Name "Clang++")
			(SHBuild_ar_ok_ "llvm-ar")) "llvm-ar")
		(($and (eqv? SHBuild_CXX_Name "G++")
			(SHBuild_ar_ok_ "gcc-ar")) "gcc-ar")
		(#t "ar");
	safeenv-set "AR" AR),
	($env-de! ARFLAGS "rcs"; safeenv-set "ARFLAGS" ARFLAGS),
	($env-de! LD CXX; safeenv-set "LD" LD);
	"TODO", "Add sanity checks.";
	$if use-ld
	(
		"NOTE", "See https://gcc.gnu.org/onlinedocs/gcc/Link-Options.html#Link-Options,",
			"also https://clang.llvm.org/docs/ClangCommandLineReference.html#linker-flags.";
		$def! prom_LDFLAGS_STRIP $lazy-env-val "LDFLAGS_STRIP" "-s";
		"#", "-Wl,--print-gc-sections"
	);
	$def! prom_gcflags_ $lazy get-gcflags_ host-os CXX;
	$def! host-win32 win32? host-os;
	$def! prom_C_CXXFLAGS_PIC
		$lazy-env-val "C_CXXFLAGS_PIC"
			$if host-win32 "" "-fPIC -fno-semantic-interposition";
	$def! prom_C_CXXFLAGS_EXT
		$lazy-env-val "C_CXXFLAGS_EXT"
			$if host-win32 "" "-D_POSIX_C_SOURCE=200809L";
	$def! prom_C_CXXFLAGS_COMMON
		$lazy-env-val "C_CXXFLAGS_COMMON" cons-cmd "-pipe"
			(first (force prom_gcflags_))
			(safeenv-get "C_CXXFLAGS_ARCH") "-pedantic-errors"
			(force prom_C_CXXFLAGS_EXT);
	$def! prom_C_CXXFLAGS_OPT_LV $lazy-env-val "C_CXXFLAGS_OPT_LV" "-O3";
	$def! prom_C_CXXFLAGS_WARNING $lazy-env-val "C_CXXFLAGS_WARNING"
		SHBuild_Get_C_CXXFLAGS_WARNING SHBuild_CXX_Name cxx-version;
	$def! prom_thread-options_ $lazy get-thread-options_ CXX;
	$def! prom_CXXFLAGS_IMPL_WARNING $lazy-env-val "CXXFLAGS_IMPL_WARNING" "";
	$def! prom_C_CXXFLAGS_COMMON_IMPL_
		$lazy-env-val "C_CXXFLAGS_COMMON_IMPL_" "";
	$def! prom_CXXFLAGS_IMPL_OPT $lazy-env-val "CXXFLAGS_IMPL_OPT" "";
	$def! prom_C_CXXFLAGS_IMPL_WARNING
		$lazy-env-val "C_CXXFLAGS_IMPL_WARNING" "";
	$if use-ld
		($def! prom_LDFLAGS_IMPL_OPT $lazy-env-val "LDFLAGS_IMPL_OPT" "");
	$def! use_lld_ #f;
	"NOTE", "The minimal versions are GCC 2.95.3 and Clang 3.0.0.";
	$cond
		((eqv? SHBuild_CXX_Name "Clang++")
		(
			"XXX", "This is needed for conformance, so not in",
				" %CXXFLAGS_IMPL_OPT. See also $2023-05 @ doc/Workflow.txt.";
			$redef! prom_C_CXXFLAGS_COMMON_IMPL_ $lazy-env-val
				"C_CXXFLAGS_COMMON_IMPL_" "-fno-merge-all-constants";
			"XXX", "LTO is disabled by default for compatibility to the",
				" prebuilt binaries. (by G++). If enabled, '-flto=auto' is ",
				" available since Clang++ 13.0";
			"#", "$set-if-empty! CXXFLAGS_IMPL_OPT", "-flto";
			$if use-ld
			(
				"#", "$set-if-empty! LDFLAGS_IMPL_OPT", "-flto";
				"XXX", "This is the only choice to support LTO on MinGW32 now.",
					"It is still not ready to run successfully for MinGW64 for",
					" Clang++ < 14.",
					"See https://github.com/msys2/MINGW-packages/issues/10547.";
				$redef! use_lld_ #t
			)
		))
		((eqv? SHBuild_CXX_Name "G++")
		(
			"XXX", "See $2023-05 @ doc/Workflow.txt.";
			$def! LTO_ "-flto=auto",
			$def! f_new_inheriting_ctors_ "-fnew-inheriting-ctors",
			$def! f_no_strong_eval_order_ "-fno-strong-eval-order",
			$def! f_no_enforce_eh_specs_ "-fno-enforce-eh-specs";

			$if (<? cxx-version 30000) (string<- f_no_enforce_eh_specs_ ""),
			$if (<? cxx-version 70100) (
				string<- f_new_inheriting_ctors_ "",
				string<- f_no_strong_eval_order_ ""
			),
			"XXX", "Despite the documentation, MinGW GCC 10 does not work with",
				" '-flto=auto'. See also",
				" https://gitlab.kitware.com/cmake/cmake/-/merge_requests/7559.",
			$if ($or (<? cxx-version 100100) ($and host-win32
				(<? cxx-version 110000))) (string<- LTO_ "-flto=jobserver");
			"NOTE", "The minimal version is 2.95.3, so",
				" '-fexpensive-optimizations' is always supported.";
			$redef! prom_CXXFLAGS_IMPL_OPT $lazy-env-val "CXXFLAGS_IMPL_OPT"
				cons-cmd "-fexpensive-optimizations" LTO_
				f_new_inheriting_ctors_ f_no_enforce_eh_specs_
				f_no_strong_eval_order_;
			$redef! prom_LDFLAGS_IMPL_OPT $lazy-env-val "LDFLAGS_IMPL_OPT"
				(++ "-fexpensive-optimizations " LTO_)
		));
	$if use-ld
	(
		"XXX", "Workaround for LTO bug on MinGW. See",
			" https://sourceware.org/bugzilla/show_bug.cgi?id=12762.";
		$def! prom_LDFLAGS_WKRD_ $lazy-env-val "LDFLAGS_WKRD_"
			($if ($and host-win32 (not? use_lld_))
				" -Wl,-allow-multiple-definition" "")
	);
	$def! prom_CFLAGS_STD $lazy-env-val "CFLAGS_STD" "-std=c11";
	$def! prom_CFLAGS_WARNING $lazy-env-val "CFLAGS_WARNING" cons-cmd
		(force prom_C_CXXFLAGS_WARNING) (force prom_C_CXXFLAGS_IMPL_WARNING);
	$def! prom_CXXFLAGS_IMPL_COMMON $lazy-env-val "CXXFLAGS_IMPL_COMMON"
		cons-cmd (first (force prom_thread-options_))
		"-U__GXX_TYPEINFO_EQUALITY_INLINE" "-D__GXX_TYPEINFO_EQUALITY_INLINE=1"
		"-U__GXX_MERGED_TYPEINFO_NAMES" ($if host-win32
		"-D__GXX_MERGED_TYPEINFO_NAMES=0" "-D__GXX_MERGED_TYPEINFO_NAMES=1");
	$def! prom_CXXFLAGS_STD $lazy-env-val "CXXFLAGS_STD" "-std=c++11";
	$def! prom_CXXFLAGS_WARNING $lazy-env-val "CXXFLAGS_WARNING"
		SHBuild_Get_CXXFLAGS_WARNING SHBuild_CXX_Name cxx-version
		(force prom_C_CXXFLAGS_WARNING) (force prom_C_CXXFLAGS_IMPL_WARNING)
		(force prom_CXXFLAGS_IMPL_WARNING);
	$def! prom_CXXFLAGS_OPT_DBG $lazy
		$if debug ("-O0 -g -D_GLIBCXX_DEBUG_PEDANTIC")
		(
			cons-cmd (force prom_C_CXXFLAGS_OPT_LV)
				($if (safeenv-empty? "CXXFLAGS_OPT_UseAssert") "-DNDEBUG" "")
				(force prom_CXXFLAGS_IMPL_OPT) "-fomit-frame-pointer"
		);
	"XXX", "Rename %CXXFLAGS_OPT_DBG -> CFLAGS_OPT_DBG/C_CXXFLAGS_OPT_DBG?";
	$env-de! CFLAGS cons-cmd (force prom_CFLAGS_STD) (force prom_C_CXXFLAGS_PIC)
		(force prom_C_CXXFLAGS_COMMON) (force prom_CFLAGS_WARNING)
		(force prom_C_CXXFLAGS_COMMON_IMPL_) (force prom_CXXFLAGS_OPT_DBG);
	$env-de! CXXFLAGS cons-cmd (force prom_CXXFLAGS_STD)
		(force prom_C_CXXFLAGS_PIC) (force prom_C_CXXFLAGS_COMMON)
		(force prom_CXXFLAGS_WARNING) (force prom_CXXFLAGS_IMPL_COMMON)
		(force prom_C_CXXFLAGS_COMMON_IMPL_) (force prom_CXXFLAGS_OPT_DBG);
	$def! SHBuild_CXXFLAGS safeenv-get "SHBuild_CXXFLAGS";
	$def! has-asan-opt $or (use-asan? CFLAGS) (use-asan? CXXFLAGS)
		(use-asan? SHBuild_CXXFLAGS);
	SHB_SetupPlatformVars_ (() get-current-environment) host-os;
	$if use-ld
	(
		"#", "%LDFLAGS_OPT_DBG is always set despite %debug configuration in",
			" the caller script.";
		$def! prom_LDFLAGS_OPT_DBG $lazy-env-val "LDFLAGS_OPT_DBG" $if debug ""
			(cons-cmd (force prom_LDFLAGS_STRIP) (force prom_LDFLAGS_IMPL_OPT)
			(first (restv (force prom_gcflags_))));
		$def! prom_LDFLAGS_DYN_BASE $lazy-env-val "LDFLAGS_DYN_BASE"
			++ "-shared" ($if ($and host-win32 (not? use_lld_))
				" -Wl,--dll" "");
		$def! prom_LIBS_RPATH $lazy-env-val "LIBS_RPATH"
			$if host-win32 ""
				(++ "-Wl,-rpath," (SHBuild_QuoteS_ "$ORIGIN:$ORIGIN/../lib"));
		"XXX", "Here '-Wl,' options are separated to improve compatibility for",
			" LLVM.";
		"XXX", "Dynamic symbol exports are only available for ELF targets";
		$def! prom_LDFLAGS_DYN_EXTRA $lazy-env-val "LDFLAGS_DYN_EXTRA"
			$if use_lld_
			(
				cons-cmd "-Wl,-undefined,error"
					($if host-win32 ""
						(++ "-Wl,--export-dynamic-symbol='_ZTS*'"
						" -Wl,--export-dynamic-symbol='_ZTI*'"))
			)
			(
				cons-cmd "-Wl,--no-undefined"
					(++ "-Wl,--dynamic-list-data,--dynamic-list-cpp-new,"
					"--dynamic-list-cpp-typeinfo");
			);
		$def! prom_LDFLAGS_DYN $lazy-env-val "LDFLAGS_DYN" cons-cmd
			(force prom_LDFLAGS_DYN_BASE) (force prom_LDFLAGS_DYN_EXTRA);
		"#", "Forced setting %LDFLAGS for debug configurations?";
		$env-de! LDFLAGS cons-cmd (force prom_C_CXXFLAGS_PIC)
			(first (restv (force prom_thread-options_)))
			(force prom_LDFLAGS_OPT_DBG) (force prom_LDFLAGS_WKRD_);
		"TODO", "Test and exclude Anrdoid?";
		$if use_lld_ ($redef! LDFLAGS cons-cmd "-fuse-ld=lld" LDFLAGS);
		"#", "%LDFLAGS_OPT_DBG is set to ' ' in the caller script.";
		"#", "Following settings are not in %SHBuild-common-options.sh.";
		$redef! LDFLAGS SHBuild_TrimOptions_ (cons-cmd LDFLAGS
			($if app (cons-cmd ($if dynamic (force prom_LIBS_RPATH) "")
			(do-ld-ext host-os)) ($if dynamic
			(cons-cmd (force prom_LDFLAGS_DYN)) "-Wl,--dn")));
		$unless has-asan-opt ($redef! has-asan-opt use-asan? LDFLAGS);
		"XXX", "Assume %LD has same style to %CXX when sanitizers are used";
		$if ($and (eqv? SHBuild_CXX_Name "Clang++")
			($or (use-san? CFLAGS) (use-san? CXXFLAGS)
			(use-san? SHBuild_CXXFLAGS)))
		(
			"NOTE", "This reverts '-Wl,--no-undefined' or '-Wl,-z,defs'.",
				" See https://sourceware.org/binutils/docs/ld/Options.html.",
				" This is required to use MSan,",
				" see https://clang.llvm.org/docs/MemorySanitizer.html.";
			$redef! LDFLAGS (++ LDFLAGS " -Wl,-z,undefs");
			ss-verbose-puts
				"NOTE: LDFLAGS has been adjusted for Clang++ with sanitizers."
		);
		safeenv-set "LDFLAGS" LDFLAGS
	);
	$if has-asan-opt
	(
		$def! fixed " -U_FORTIFY_SOURCE -fno-omit-frame-pointer -fno-common";
		$redef! CFLAGS (++ CFLAGS fixed),
		$redef! CXXFLAGS (++ CXXFLAGS fixed);
		ss-verbose-puts "NOTE: CFLAGS and CXXFLAGS have been adjusted for ASan."
	);
	$redef! CFLAGS SHBuild_TrimOptions_ CFLAGS,
	$redef! CXXFLAGS SHBuild_TrimOptions_ CXXFLAGS;
	$def! SHBOPT get-SHBOPT_ outdir shbopt-ext use-ld;
	$defw! echo-var (var) d
		SHBuild_EchoVar var ($if (bound? var) (eval (string->symbol var) d) "");
	"XXX", "The values of following variables may be overriden in 'do-build'.";
	"TODO", "Print actual values being used in 'do-build' as possible.";
	echo-var "CXXFLAGS";
	$if use-ld
	(
		() SHBuild_Extend_CallVariables;
		$redef! LDFLAGS (env-get "LDFLAGS");
		echo-var "LDFLAGS";
		$redef! LIBS (env-get "LIBS");
		echo-var "LIBS"
	);
	echo-var "SHBOPT";
	do-build CXX CXXFLAGS SHBOPT LIBPFX
);

"NOTE", "This requires 'hg' in PATH.";
$defl! get-hg-rev-info_ ()
(
	"XXX", "Do not use HG as it may be set by MSYS2 hg and unavailable in the",
		" default shell in Win32.";
	"XXX", "If the command is 'HG' which may contain spaces in its path, use",
		" 'system-qget' instead of 'system-get'.";
	$let (((bstr code .) system-get (cons-cmd "hg log -r \"p1()\" -T"
		(system-quote "{search('\d+', desc)}") cmd_noerr_)))
		$if (eqv? code 0)
		(
			$let (((rstr code2 .) system-get (cons-cmd "hg log -r \"p1()\" -T"
				(system-quote (++ "(hg {rev}:{fill(node, 8) | firstline} "
				"{date(date, '%Y-%m-%d')})\\n")) cmd_noerr_)))
				$if (eqv? code2 0) (list "hg" bstr (++ "b" bstr " " rstr))
					(list "" bstr "")
		) (list "" "" "")
);

"NOTE", "This requires 'git' in PATH.";
$defl! get-git-rev-info_ ()
(
	"XXX", "Assume 'sed' is always available. This is true in Git for Windows";
	$let (((bstr code .) system-get (cons-cmd "git log -1 --format=%s"
		cmd_noerr_ " | sed -E \"s/[^0-9]+([0-9]+).*/\1/\"" cmd_noerr_)))
		$if (eqv? code 0)
		(
			$let (((rstr code2 .) system-get (cons-cmd
				"git log -1 --date=short --format=\"(git %h %cd)\""
				cmd_noerr_)))
				$if (eqv? code2 0) (list "git" bstr (++ "b" bstr " " rstr))
					(list "" bstr "")
		) (list "" "" "")
);

$defl! get-vcs-rev-info_ () $cond
	((not? (safeenv-empty? "SHBuild_VCS_hg")) () get-hg-rev-info_)
	((not? (safeenv-empty? "SHBuild_VCS_git")) () get-git-rev-info_)
	(#t $let ((info () get-hg-rev-info_))
		$if (string-empty? (first info)) (() get-git-rev-info_) info);

$defl! get_env_SHB_ (host-os)
(
	SHB_SetupPlatformVars_ (() get-current-environment) host-os;

	"#", "Following private environment variables are used: SHBuild.",
		" This is expected to be stage 1";
	$def! e_S1_SHBuild_ () system-quote (safeenv-get "SHBuild");
	$defl! e_rm_ (pth)
	(
		$import! std.system system;

		"TODO", "Avoid deletion if possible?";
		"XXX", "This relies on 'rm'", "Error is ignored.";
		system (cons-cmd "rm" (system-quote pth) cmd_noerr_)
	);
	$if (win32? host-os) ($defl! e_add_x_ (#ignore));
	(
		$defl! e_add_x_ (pth)
		(
			"XXX", "This relies on 'chmod'", "Error is ignored.";
			system-check (cons-cmd "chmod" "+x" pth)
		)
	);
	$defl! InstSHBuild (type dst src)
	(
		$assert-nonempty dst,
		$assert-nonempty src;
		"TODO",
			"More specific error handling in system-check and SHBuild command";
		$cond
		((eqv? type "Link") (
			e_rm_ dst;
			$unless (system-ok (cons-cmd e_S1_SHBuild_
				"-xcmd,InstallSymbolicLink" dst src cmd_noerr_)) InstSHBuild
				"File" dst src
		))
		((eqv? type "HardLink") (
			e_rm_ dst;
			$unless (system-ok (cons-cmd e_S1_SHBuild_ "-xcmd,InstallHardLink"
				dst src cmd_noerr_)) InstSHBuild "File" dst src
		))
		(#t (system-check
			(cons-cmd e_S1_SHBuild_ (++ "-xcmd,Install" type) dst src);
			$if (eqv? type "Executable") (e_add_x_ dst))
		);
	);
	"NOTE",
		"This is basically same to %SHBuild_BuildGCH in %SHBuild-common.sh.",
		"Except the input path cannot have quotes and the function would",
		" always fail despite 'set -e' setting in shell scripts,",
		" and the tool would be quoted in the call.",
		"Params of %BuildGCH_:", "header = path of header to be copied",
		"inc = path of header to be included", "tool = tool to build header",
		"cmd = options for the tool";
	$defl! BuildGCH_ (header inc tool tool-opts)
	(
		$import! std.io readable-nonempty-file?,
		$import! std.system create-parent-directory*,
		$import! env_SHBuild_ SHBuild_TrimOptions_;

		$def! pch ++ inc ".gch";
		$def! qpch system-quote pch;
		$if (readable-nonempty-file? pch)
			(putss "PCH file " qpch " exists, skipped building.")
			(
				create-parent-directory* pch;
				putss "Building precompiled file " qpch " ...";
				InstSHBuild "HardLink" inc header;
				system-check (cons-cmd (system-quote tool) (SHBuild_TrimOptions_
					(cons-cmd tool-opts (system-quote header) (++ "-o" qpch))));
				putss "Building precompiled file " qpch " done."
			)
	);
	$defl! InstLibS (from-dir to-dir name)
	(
		$assert-nonempty from-dir,
		$assert-nonempty to-dir,
		$assert-nonempty name;
		InstSHBuild "HardLink" (++ to-dir "/lib" name ".a")
			(++ from-dir "/" LIBPFX name ".a")
	);
	$defl! InstLibD (from-dir name to-dir SR_DSO_Dest imp-sfx simulate-imp)
	(
		$assert-nonempty from-dir,
		$assert-nonempty SR_DSO_Dest,
		$assert-nonempty name;
		$def! target ++ LIBPFX name DSOSFX;
		$def! dest ++ SR_DSO_Dest "/" target;
		InstSHBuild "HardLink" dest (++ from-dir "/" target);
		"NOTE", "See $2020-11 @ doc/Workflow.txt.";
		$unless (string-empty? imp-sfx) ($assert-nonempty to-dir)
			($let ((inst-method $if (simulate-imp) "Link" "HardLink")
				(implib-src $if (simulate-imp) dest
					(++ from-dir "/" target imp-sfx)))
				InstSHBuild inst-method (++ to-dir "/lib" name DSOSFX imp-sfx)
					implib-src
			)
	);
	$defl! InstInc (from-dir to-dir)
	(
		$assert-nonempty from-dir,
		$assert-nonempty to-dir;
		InstSHBuild "Directory" to-dir from-dir
	);
	$defl! InstHardLinkExe (from-dir to-dir name)
	(
		$assert-nonempty name;
		$def! dst ++ to-dir "/" name EXESFX;
		$def! src ++ from-dir "/" name ".exe";
		InstSHBuild "HardLink" dst src;
		e_add_x_ dst
	);
	$defl! InstNPLA1Module_ (from-dir to-dir name)
	(
		$assert-nonempty name,
		$assert-nonempty to-dir,
		$assert-nonempty from-dir;
		InstSHBuild "File" (++ to-dir "/" name) (++ from-dir "/" name)
	);
	$defl! InstTool (from-dir to-dir name)
	(
		$assert-nonempty name,
		$assert-nonempty to-dir,
		$assert-nonempty from-dir;
		InstSHBuild "Executable" (++ to-dir "/" name) (++ from-dir "/" name)
	);
	$if (win32? host-os)
	(
		$defl! InstUACManifestForExe (from to-dir name)
			InstSHBuild "HardLink" (++ to-dir "/" name EXESFX ".manifest") from
	);

	() lock-current-environment
);

