/*
	© 2014 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha5.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha5 。
\version r1597
\author FrankHB <frankhb1989@gmail.com>
\since build 500
\par 创建时间:
	2014-05-29 19:30:47 +0800
\par 修改时间:
	2014-07-11 04:41 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha5
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b500, $now];

$now
(
	(
	/ DLD "template parameter %_tIter" @ "constructor template \
		%transformed_iterator" => "%_tIterOrig" @ %YBase.YStandardEx.Iterator;
	/ DLD "all template parameters %_tIterator" => "%_tIter" $effective
		@ %YBase.YStandardEx.(Iterator, AnyIterator);
	),
	/ %YBase.YStandardEx $=
	(
		/ %Algorithm $=
		(
			+ "function template %transform_n",
			* "missing header for %is_pod" $since b254
		),
		+ "function template %exchange" @ %Utilities
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ %TextBox $=
				(
					/ @ "class %TextPlaceholder" $=
					(
						+ "captured control pointer check"
							@ "function %BindByFocus",
						+ "function %GetCapturedPtr"
					),
					(
					* $lib "platform neutrality" @ "types %(SPos, SDst)"
						@ "member function %TextBox::GetCaretPosition" $since
						b484;
						// The calculation of width accidentally depended on \
							result of signed integers, which would turned to \
							be unsigned when the rank of %SDst is the greatest \
							value in the expression, e.g. 32-bit unsigned int \
							for platform %Win32.
					$dep_to "screen measurement platform neutrality"
					)
				),
				(
				* $lib "platform neutrality" @ "types %(SPos, SDst)"
					@ "member function %TextList::DrawItems" @ %TextList
					$since b346;
				$dep_to "screen measurement platform neutrality"
				)
			),
			* $lib "platform neutrality" @ "types %(SPos, SDst)" @ %YSLib $since
				$before b132 $=
			(
				// To eliminate [-Wsign-compare].
				* $design "signed and unsigned integer comparison"
					@ (("function %PutCharBase" @ %CharRenderer $since b372,
					"function %BlitBounds" @ %YBlit $since b438, "class \
					%TextRegion" $since $before b132, "functions %(PlotHLineSeg,
					PlotVLineSeg)" @ %YDraw $since $orig(%Core.YGDI) b135)
					@ %Service, "member function %TextList::InvalidateSelected"
					@ %UI.TextList $since b268),
				* "missing explicit template parameter" @ "member function \
					%TextBox::GetCaretPosition" @ %UI.TextBox $since b484;
				$dep_to "screen measurement platform neutrality"
			),
			/ "checked screen position value for Win32 API"
				^ "%YSLib::CheckPositiveScalar<SPos>"
				@ %'Helper_MinGW32'.Win32GUI,
		),
		/ %YCLib.Video $=
		(
			+ "static assertions for screen measurement types",
				// Now integer types are explicitly required.
			(
			$dep_from "screen measurement platform neutrality";
			/ "alias declarations of %(SDst, SPos)" ^ "%(long, unsigned long)"
				~ "%(std::int16_t, std::uint16_t) respectively"
				@ "%platform Win32";
			$dep_to "32-bit screen measurement types"
			)
		),
		(
		$dep_from "32-bit screen measurement types"
		/ DLD "simplified implementation by omitting explicit template argument"
			@ "member function %Environment::MapCursor" @ "%platform Win32"
			@ %Helper.Host
		)
	)
	/ %YReader $=
	(
		* "no effect when check box unchecked" @ %ShlExplorer $since b516,
		* "platform neutrality" @ "types %(SPos, SDst)" @ "member function \
			%HexViewArea::Refresh" @ %HexBrowser $since b253
	),
	* DLD "missing update search path"
		@ "Visual C++ project %YFramework_MinGW32" $since b493,
),

b516
(
	/ %YFramework.YSLib $=
	(
		/ %UI.TextBox $=
		(
			/ @ "class %TextBox" $=
			(
				- "collapsing" @ "handling event %LostFocus",
				* "wrong collapsing behavior when text selected" $since b514,
					// It wrongly used the direction determined by selection \
						rather than by cursor position. And now it is clear \
						that no %CollapseCaret should be called.
				(
				+ "data member 'ucs4_t MaskChar = ucs4_t();'",
				$dep_from %Core.YString;
				/ "displayed with text determined by %GenerateDisplayedResult \
					if nonnull"
					@ "functions %(Refresh, GetCaretLocation, GetCaretPosition)"
				),
				(
				+ "data member 'size_t MaxLength{-1};";
				/ "restricted %Text length with %MaxLength"
					@ "function %ReplaceSelection"
				)
			),
			+ "class %TextPlaceholder"
		),
		/ %Core $=
		(
			/ @ "class template %GHEvent" @ %YEvent $=
			(
				/ "supported null equality comparing" @ "comparer";
				+ "null pointer as default argument for 1 parameter \
					constructor as fit for %DefaultConstructible requirement",
				+ "using declarations %BaseType::operator bool"
			),
			+ "binary %operator* for %String" @ %Core.YString
		),
		- $revert(b419) DLB "special member functions as workaround for G++ \
			4.7.1" @ "class %Font" @ %Adaptor.Font;
	),
	/ @ "class %ShlExplorer" @ %YReader.ShlExplorer $=
	(
		$dep_from %YFramework.YSLib.UI.TextBox;
		+ "protected 'TextPlaceholder tpDefault{};'";
		+ "mask character, max length and text placeholder tests for text box"
	)
),

b515
(
	/ @ %Tools $=
	(
		/ @ %SHBuild $=
		(
			/ @ "(build.sh, self-host.sh)" $=
			(
				/ DLD "separated flags",
				/ $build "removed dependencies on installed files" $=
					// For convenient implementation of bootstrap in future.
				(
					^ DLB "header files in repository" ~ "installed headers",
					^ DLB "source files in repository" ~ "installed libraries"
				),
				^ $build "static linked builds",
				+ DLB '-Wl,--gc-sections' @ "linker flags"
			),
			/ "include directories" -> "project directories"
				~ "installed directories" @ "SHBuild-YSLib.sh",
			+ "%IntException handling" @ %Main $since b477
				// The concrete value is only for internal use.
		),
		+ "install-headers.sh",
			// Testing script to copy/update headers in default location \
				(/usr/include) using rsync. Currently it would overwrite 3rd \
				party headers.
	),
	/ %YFramework $=
	(
		* $build "run 'SHBuild-YSLib' failed" $since b492 $=
		(
			* "wrong '#error' directive" @ "!YCL_Android" @ %'Helper_(Android)'
				$since b502,
			* "wrong '#error' directive" @ "!YCL_Android" @ %'YCLib_(Android)'
				$since b492
		),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/%YDraw $=
				(
					* $revert(b514) "wrong assertion"
						@ "non-inline function %FillRect",
					- "redundant assertion for context"
						@ "functions %(DrawHLineSeg, DrawVLineSeg, DrawLineSeg)"
						// This assertion should be hold by underlying pointer \
							nonnull assertion properly.
				),
				+ "parameter 'const Padding& = DefaultMargin'"
					@ "all 2 constructors" @ "class %TextState" @ %TextBase
			),
			/ %UI $=
			(
				(
				$dep_from "function %FillRect" @ %Service.YDraw;
				* "assertion failure" @ "filling widget background across \
					top-level boundary" $since b514
					// The function templates %FillRectRaw should be \
						boundary-safe because of %Blit.
				),
				(
				* "missing ensuring clip area be subset of target boundary"
					@ "function %BufferedRenderer::Validate" @ %YRenderer $since
					b488;
					// Since %Documentation::YSLib @5.2.1.3 guarantees the \
						clip area can be directly use, it should be ensured.
				* $comp "assertion failure" @ "drawing widget background \
					across top-level boundary" $since b452
					// The function templates %DrawRect and other %'Draw*' \
						might cause the failure.
				),
				/ "default value of %ActiveBorder color" -> '{86, 157, 229}'
					~ 'ColorSpace::Aqua' @ "constructor %Palette" @ %YStyle,
				/ @ "class %MLabel" $=
				(
					(
					+ "functions %GetAlignedPenOffset";
					/ DLD "simplified function %DrawText"
					),
					/ "parameter list" @ "virtual function %DrawClippedText"
						-> '(const Graphics&, const Rect&, Drawing::TextState&)'
						~ '(const PaintContext&, Drawing::TextState&)'
				),
				/ @ "class %TextBox" @ %TextBox $=
				(
					(
					/ "function %TextBox::DrawClippedText",
					+ "protected data member 'Point ptPenOffset'";
					* "missing cursor position adjust with text alignment"
						$since b485
					),
					/ DLD "reduced invalidation area"
						@ "%InvalidateDefaultCaret"
				)
			),
			(
			/ DLD "parameter %bounds" @ "function %DrawClippedText"
				@ %Service.TextRenderer => "%r";
			/ DLD "parameter %mask" @ "functions" => "%bounds" $effective
				@ %(Service.TextRenderer, UI.(Label, TextList, Menu, TextBox))
				// "%mask" is for any complex area being blending or not \
					clipping.
			)
		)
	)
),

b514
(
	/ %YBase.YStandardEx.CCharacterType $=
	(
		(
		+ "functions %iswspace";
		/ "implemented functions %iswspace" ^ "%ystdex::iswspace"
			~ "%std::iswspace"
		),
		* DLD "wrong guard macro" $since b513,
		+ "%yconstfn function %isdigit"
	),
	(
	$dep_from "%ystdex::iswspace" @ %YBase.YStandardEx.CCharacterType;
	* $comp $since "several characters still unprinted" @ "platform %Android"
		b492
		// Because of broken Unicode support on Android NDK r9, some \
			characters like “稍”(U+7A0D) and “选”(U+9009) still missed by \
			wrongly returning '8' from 'iswspace' calls.
	),
	/ $doc "extended file name pattern of README DOCUMENTS" @ "%LICENSE.TXT",
	/ %YFramework $=
	(
		/ @ "namespace %Windows" @ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			+ 'using MessageMap = std::map<unsigned, \
				YSLib::GEvent<void(::WPARAM, ::LPARAM)>>;'
			/ DLD "simplified data member declaration %HostWindow::MessageMap"
		),
		/ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			$dep_from %'YCLib_(MinGW32)';
			/ @ "member function %Host::Window::BindDefaultWindowProc"
				@ %HostWindow
				-> "function %BindDefaultWindowProc" @ %Win32GUI
		),
		/ @ "enum %Categtory" @ %YCLib.Keys $=
		(
			* $revert_ex(b490) "underlying type" $since b489
				$= (/ 'KeyIndex' -> 'std::uint_least32_t'),
			* "key category wrongly overlapped for value greater than enumerator
				%Lock" $since b489
				// Though they should not be determinately mutually exlusive,
					it is only safe to seperate them in different kinds for \
					bitand operation.
		),
		/ %YSLib $=
		(
			* "missing updating key state when external input focus is not null"
				@ "member function %GUIState::UpdateChar" @ %YGUI $since b511,
			/ @ "class %TextBox" @ %TextBox $=
			(
				(
				$dep_from %YCLib.Keys;
				* $comp "no effect for Shift with navigation key"
					@ "class %TextBox" $since b489
					// Though the effect is not quite right, see below.
				),
				(
				$dep_from %YGUI;
				* $comp "potentionally wrong behavior with modifier key held"
					$since b511;
					// Wrong key held state updated so the initial delay would \
						be ignored. Note if the bug of key category exists, \
						there would actually be no effect.
				+ "functions %RestoreCaretTimer;
				/ "restored caret timer on modifying caret position or \
					collapsing caret"
				),
				/ "function %UpdateCaret" => "%ExportCaretPosition",
				/ "function %CollapsedAndUpdateCaret" => "%CollapseCaret"
			),
			+ "boundary check assertion" @ "non-inline function %FillRect"
				@ %Service.YDraw
		)
	)
),

b513
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "traces" @ "member function %StyleMap::Switch" @ %YStyle $=
			(
				+ "quote marks around style name",
				* "missing space when default style found" @ "2nd trace"
			),
			* "missing some characters to print" @ %Service.TextRenderer
				@ ("%platform %MinGW32" $since b296,
				"platform %Android" $since b492) $=
				// For example, “←”(U+2190) and “⑨”(U+2468) on Windows, and \
					some more characters missing on Android 2.3.1.
			(
				$dep_from %(YCommon, YBase.YStandardEx.CWideCharacterType);
				/ $design "implementation" ^ "%ystdex::iswgraph"
					~ "%std::iswgraph"
			)
		),
		* $design "spelling error" @ "trace string" @ "constructor %NativeHost"
			@ %'Helper_(Android)'.AndroidHost $since b504
			$= (/ 'Wating' -> 'Waiting'),
		/ %Helper $=
		(
			* "missing key state indirection" @ "platform %Android" @ %Input
				$since b492,
				// So key state tracked would be wrong in \
					%Helper::InputManager after touching down.
			* "wrong desktop pointer selected to response"
				@ "member function %ShlDS::OnGotMessage" $since b502,
				// Though displaying was normal, the input had not been sent \
					to the right place.
			* "missing calculating with hosted window input bounds"
				@ "platform %Android"
				@ "member function %Environment::MapCursor" @ %Host $since b509
		),
		* "function %IsPrint" @ %YCommon $since b512 $=
		(
			$dep_from %YBase.YStandardEx.CWideCharacterType;
			/ $design "implementation" ^ "%ystdex::iswprint"
		)
	),
	/ "example command line" @ %Tools.CreationTimeManager.Readme,
		// Hidden files should not be ignored generally. So added '/A' for \
			'DIR'.
	/ %YBase.YStandardEx $=
	(
		+ %CCharacterType $=
		(
			+ "%yconstfn functions %((iscntrl_C0; iscntrl_ASCII, \
				(iscntrl_ISO8859_11; iscntrl_ISO8859_1; isprint)), iscntrl_C1)",
			+ "%yconstfn functions %(isprint_ASCII, isprint_ISO8859_1, isprint)"
		),
		+ %CWideCharacterType
			$= (+ "functions %(iswprint, iswgraph)")
	),
	(
	$dep_from %YFramework.YSLib.Service;
	* $comp "missing rendering left and right arrows on buttons"
		@ %YReader.ShlTextReader $since b299
	)
),

b512
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				(
					/ @ "class %GUIState" @ %YGUI $=
					(
						+ "data member %CaretLocation"
						/ "clear caret location state" @ "function %Reset",
					);
					/ @ "class %TextBox" @ %TextBox $=
					(
						(
						+ "function %GetCaretLocation";
						/ DLD "simplified implementation"
							@ "static function %InvalidateDefaultCaret"
						),
						+ "functions %(UpdateCaret; CollapsedAndUpdateCaret)";
						/ "updated caret location to GUI state after caret \
							position changes"
					)
				),
				+ "trace" @ "function %InitExStyles" @ %ExStyle,
				+ "trace" @ "member function %StyleMap::Switch" @ %YStyle
			),
			/ %Adaptors $=
			(
				$dep_from %YCLib.YCommon;
				+ 'using platform::IsPrint;' @ "namespace %YSLib::Text"
					@ %YTextBase,
				- $revert($since $before b132) "special process for '\t'"
					@ "member function %Font::GetAdvance" @ %Font
					// The width of tab character should be determinated in \
						concrete contexts.
			),
			(
			$dep_from %Adaptor.YTextBase;
			^ "%IsPrintf" ~ "%std::iswprint";
			$dep_to "print character check"
			)
		),
		/ %Helper $=
		(
			/ @ "platform %Win32" @ "class %InputManager" @ %InputManager $=
			(
				+ DLD "text input focus pointer cache";
				* $comp "missing clearing coposite string after switch text \
					input focus" $since b511,
				/ @ "function %DispatchInput" $=
				(
					(
					$dep_from "hosted caret";
					/ "supported hosted IME following text input focus"
					),
					/ DLD "put host input process at the end" @ "implementation"
				),
				+ "caret location caching; %UpdateCandadateWindowLocation",
				(
				$dep_from "print character check";
				* $comp "'\t' wrongly handled for text input" $since b511
					// Now correctly as no-op. Press tab key in text box is \
						with no action.
				)
			),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				(
				+ DLD "fake caret to support IME candidate window locating";
				+ "function %UpdateCandidateWindowLocation";
				+ "window caret location caching";
				+ "support of caret update by moving hosted window",
					// Currently it works on Windows 7 but not on Windows 2012 \
						R2.
				+ "support of caret update on composing the input string";
					// Ditto.
				$dep_to "hosted caret"
				)
				+ "function %BindDefaultWindowProc";
				/ DLD "simplified implementation" @ "constructor"
					^ "function %BindDefaultWindowProc"
			),
			^ DLD "macro %YFM_DS_Helper_Shell_DS" @ %Shells
		),
		/ DLD "simplified implementation" @ "all 5 inline functions"
			@ "%CHRLib.CharacterMapping" ^ "%(PDefH, ImplRet),
		+ "(2 function, 1 template) %IsPrint" @ %YCLib.YCommon
	),
	/ DLD "all '::UINT'" -> 'unsigned',
	+ DLB "dynamic library dependency %imm32" @ "DLL configurations"
		@ "Code::Blocks project %YFramework_MinGW32",
	+ DLB "static library dependency %imm32" @ "non-DLL configurations"
		@ "Code::Blocks project %YSTest_MinGW32",
	/ %YReader $=
	(
		(
		$dep_from %YFramework.YAdaptor.YTextBase;
		^ "%IsPrintf" ~ "%std::iswprint" @ %DSReader
		),
		+ "function %FetchDefaultShellDirectory;
		/ "default argument" @ "class %ShlExplorer"
			-> 'FetchDefaultShellDirectory()'
			~ 'IO::FetchCurrentWorkingDirectory()'
			// For Android it is the data directory, since access the working \
				directory is possibly to be rejected. For other platforms it
				is unchanged.
		+ "debug trace" @ "constructor %ShlExplorer" @ %ShlExplorer;
	)
),

b511
(
	/ %YFramework $=
	(
		/ @ "platform %Win32" @ %Helper $=
		(
			/ "data member %RawMouseButton" @ "class %Environment"
				@ %Host >> ("class %Host::Window" @ %HostWindow),
			/ DLD "%WM_INPUT handling" @ "window procedure" >> ("constructor"
				@ "class %Host::Window" @ %HostWindow),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				+ DLD "private input state";
				+ "%WM_CHAR handling which save the Unicode character to \
					private state",
				+ "function template %AccessInputString"
			),
			(
			$dep_from %YSLib.UI.YGUI;
			/ "supported cross-thread text input" @ "platform %Win32"
				@ "member function %InputManager::DispatchInput" @ %InputManager
			)
		),
		/ %YSLib.UI $=
		(
			/ @ %YGUI $=
			(
				+ "2 functions %CallInputEvent",
				/ @ "class %GUIState" $=
				(
					+ "data member %ExteralTextInputFocusPtr";
					/ "clear character input states"
						@ "functions %(Reset, CleanupReferences)",
					/ "function %SendInput" $=
					(
						+ "various overloaded functions",
						/ "alternated behavior when external text input focus \
							is set"
							// Call %TextInput event directly without calling \
								%UpdateChar. Note the old behavior is also \
								dropped. Call %CallInputEvent instead to get \
								the old behavior.
					),
					/ "directly return without performing any operation when \
						external text input focus is set"
						@ "function %UpdateChar"
				)
			),
			/ %TextBox $=
			(
				/ "set and clear text input focus with caret animation"
					@ "class %Caret" ^ "%GUIState::ExteralTextInputFocusPtr",
				/ @ "constructor %TextBox" $=
				(
					/ DLD "%SendInput call",
					/ "handled space character only when external text input \
						focus is not set",
					+ "invalidation after replacing text" @ "handler"
						@ "event %TextInput",
					/ "explicitly performed no-op for horizontal tab character"
						// To avoid width problem.
				)
			)
		)
	)
),

b510
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				(
				* "missing resetting view" @ "constructor" @ "listbox" $since
					b193;
					// This would cased abnormal state immediately after \
						initialization of an object of %ListBox or derived \
						types.
				$dep_to "missing resetting listbox view"
				),
				(
				+ "member function %GUIState::SendInput" @ %YGUI;
				/ DLD "simplified constructor %TextBox"
					^ "%GUIState::SendInputChar"
				)
			),
			/ %Core $=
			(
				+ "constructor template %String with initializer list parameter"
					@ %YString,
				(
				$dep_from %Adaptor;
				+ "unexpected exception logging" @ "!defined %NDEBUG"
					@ "member function %Application::OnGotMessage"
					@ %YApplication
				)
			),
			+ "using %platform::(Logger, FetchCommonLogger)"
				@ %Adaptor.YAdaptor
		),
		/ %Helper.ShellHelper
		(
			/ "debug trace" @ "class %DebugTimer"
				^ "%YTraceDe, %Debug" ~ "%std::fprintf";
				// Not display by default for %Debug priority.
			* "possible interleaved multithreaded timer output"
				@ "platform %MinGW32" $since b378
		),
		/ "class %Logger" @ "hosted platforms" @ %YCLib.Debug $=
		(
			* "missing explicitly %std::flush call at end"
				@ "function %DefaultSendLogger" $since b498
				// Though nothing to do with default %stderr stream, once the \
					buffer is set, it might go wrong.
			* "possible interleaved logging for exception" $since b498
		)
	),
	(
	$dep_from "missing resetting listbox view";
	* $comp "invalid invisible or wrongly rendered vertical scrollbar state"
		@ %YReader.BookmarkUI $since b392 $=
	(
		* "assertion failed after scrolling in empty list"
			@ "debug configurations" $=
		(
			* "scrolling by dragging",
			* "scrolling by event %CursorWheel" $since b443
		),
		* "wrong state after scrolling" @ "release configurations",
	)
	),
	(
	$dep_from %YFramework.YSLib.Core.YString;
	/ DLD "simplified implementation" ^ "initializer list"
		~ "explicit %ucs2string construction" $effective @ ("friend function \
		%to_string for %Path", "member function %Path::Parse"
		@ %YFramework.YSLib.Service.FileSystem;
	),
	/ DLD "all 'char()' which can be distinguished to actual type" -> '{}'
		$effective %(YCLib.Keys, NPL.Lexical)
),

b509
(
	/ "implementation" @ "macro %YB_NORETURN" @ %YBase.YDefinition
		^ '[[noreturn]]' @ 'YB_IMPL_GNUCPP >= 40800',
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ DLD %YGDIBase $=
				(
					- "explicit 'yconstfn'" @ "explicitly defaulted default \
						constructor" @ "class %Rect",
					/ @ "class template %GBinaryGroup" $=
					(
						/ "implementation" @ "functions %operator(-, +=, -=)"
							^ "macro %(PDefHOp, ImplRet)",
						/ "implementation" @ "all 2 functions %GetRef"
							^ "macro %(PDefH, ImplRet)"
					)
				),
				/ DLD @ "class template %GEvent" @ %YEvent $=
				(
					/ "implementation" @ "all non-overloaded operator functions \
						with explicitly declared 'inline'"
						^ "macro %(PDefH, ImplRet)",
					/ "implementation" @ "all overloaded operator functions \
						with explicitly declared 'inline'"
						^ "macro %(PDefHOp, ImplRet)"
				)
			),
			* "wrong implementation" @ "all 2 member functions \
				%MIMEBiMapping::operator-=" @ Service.ContentType $since b450,
				// These member functions wrongly performed insertion instead \
					of deletion.
			/ %UI $=
			(
				/ $revert(b494) "functions %(SetLocationOf, SetSizeOf; $comp \
					SetBoundsOf) would trigger events even if the parameter \
					value is equal to the old value" @ %YWidget
				* $comp "missing listbox scrollbars sometimes" $since b494
					// For example, switching file list back to make scrollbar \
						be shown.
			)
		),
		* "no effect on offset argument"
			@ "member function %ScreenRegionBuffer::UpdateTo" @ %Android
			@ %'Helper_(Android)'.Android $since b499
			// All offset values were treated as 'Point()'.
		/ %Helper $=
		(
			* "spelling error" @ %Initialization $since b303
				$= (/ "%InitializeEnviornment" => "%InitializeEnvironment"),
			(
			+ "function %MapCursor" @ "class %Environment" @ %Host;
			/ DLD "simplified implementation" @ "member function
				%InputManager::Update" @ 'defined(YF_Hosted)' @ %InputManager
			)
		)
	),
	/ DLD "implementation as possible when no return type are deduced"
		^ "braced-init-list" ~ "%make_pair" $=
	(
		@ "function template %search_map" @ %YBase.YStandardEx.Container,
		/ %YFramework.YSLib $=
		(
			@ "member function %Palette::GetPair" @ %UI.YStyle,
			@ "function %AddMIMEItems" @ % Service.ContentType
		),
		@ "constructor %ShlExplorer" @ %YReader.ShlExplorer
	),
	/ DLD "implementation when appropriate" ^ "container emplacing"
		~ "insertion" $=
	(
		// Since G++ 4.8.2 has supported all of them.
		^"member function %map::emplace" ~ "%(make_pair, map::insert)"
			@ "member functions" $effective @ %YFramework,
		^ "member function %multimap::emplace"
			~ "%(make_pair, multimap::insert)" @ "member functions"
			$effective @ %YFramework.YSLib,
		^ "member function %vector::emplace_back"
			~ "%(make_pair, vector::push_back)" @ "functions" $effective
			@ %YFramework.YSLib,
		(
		$effective @ %YFramework.YSLib;
		^ "member function %set::emplace_hint" ~ "%set::insert"
			@ "member function %ValueNode::operator[]" @ %Core.ValueNode,
		^ "member function %map::emplace_hint" ~ "%map::insert"
			@ "function %GetEvent" @ %UI.YWidgetEvent
		)
	),
	/ DLD "simplified some %YSLib::Drawing::Size argument passing"
		^ "brace-init-list" ~ "explicit use of postfix-expression",
	+ 'android:theme="@android:style/Theme.NoTitleBar.Fullscreen"'
		@ "application configuration" @ "%AndroidManifest.xml"
),

b508
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "overrode recursive %TransformNPLA1 call for children nodes"
					@ "function %TransformNPLA1",
					// Now the input of the mapper function is AST instead of \
						semantics tree. This allows the AST transformation \
						being overridden. Order of AST terms can be directly \
						reserved.
				+ "function %ParseNPLANodeString"
			),
			/ %Lexical $=
			(
				/ "function %MakeEscape" -> "function %Unescape" $=
				(
					/ DLD "reserved space of %string object at first"
						@ "implementation",
					* "missing unescaping quotes characters" $since b335,
					* "missing unescaping characters with prefix backslash"
						$since b335,
						// The result would be wrongly escaped when containing \
							unexpected escape sequences.
					/ "avoided adding trailing backslash when unescapable"
						// It is useful for literal only. See %UnescapeLiteral.
				),
				+ "function %UnescapeLiteral"
					// It would add backslash when necessary.
			),
			/ $revert(b343) "unescaped node name" @ "%operator<<"
				@ %Configuration
		),
		* "missing several '\n'" @ "tracing" @ %Helper.Initialization
			$since b506
	),
	/ %YReader $=
	(
		/ "avoided literal conversion for unescaping names" @ "member \
			functions %ShlReader::(LoadBookmarks, SaveBookmarks)" @ %ShlReader,
			// Now only escaped names would be stored by NPLA1 configuration, \
				so explicit unescaping in user code is usually redundant. \
				However, quotes would not be automatically added.
		$dep_from ("function %Unescape" @ %YFramework.NPL.Lexical,
			%YFramework.NPL.Configuration);
		* $comp "saved escaped file path for bookmark entry" @ %YReader.Bookmark
			$since b392
			// Loading bookmark would fail when the path containing NPL \
				escapable sequence.
	)
),

b507
(
	/ %YBase.YStandardEx $=
	(
		(
		+ %BitSegment;
		/ "class template %bitseg_iterator" @ %Iterator >> %BitSegment
		),
		+ "meta operation templates %((sequence_split_n; sequence_split_n_t),
			(sequence_fold; vseq_fold))" @%Variadic,
		(
		$dep_from (%ystdex::sequence_split_n @ %Variadic);
		+ "meta operation specializations %sequence_split_n @ %Tuple
		),
		(
		$dep_from (%ystdex::sequence_fold @ %Variadic);
		+ "meta operation specializations %sequence_fold @ %Tuple
		),
		+ "binary functors %(plus, multiply)" @ %Functional
			// Only added associative built-in operations.
	),
	/ %YFramework $=
	(
		/ @ %YCLib.Video $=
		(
			/ @ "struct %XYZATrait" @ %YCLib.Video $=
			(
				- "static data member %(GAligned, RAligned)",
				(
				/ "using alias %IntegerType" ^ "%BitsN" ~ "%UIntBitsN",
				- "static data member %Width";
				- "static data member %UIntBitsN"
				)
			),
			(
			+ "class templates %XYZAMaskTrait;
			/ @ "class templates %(BGRA, RGBA)" $=
			(
				+ "using alias %MaskTrait"
				/ "colors mask values" ^ "%MaskTrait" ~ "%Trait";
			);
			- "data members %(AMask, XMask, YMask, ZMask)"
				@ "class template %XYZATrait"
			),
			+ "class templates %(AXYZMaskTrait; ARGB)",
			* "pixel RGB component wrongly reversed" @ "platform %Android"
				@ %Video $since b492
			(
				/ "macro definition %YCL_PIXEL_FORMAT_XYZ888 with value"
					-> '0xAABBCCDD' ~ '0xAADDCCBB',
				/ "using alias %PixelType" -> "%RGBA<8, 8, 8, 8>"
					~ "%BGRA<8, 8, 8, 8>",
				/ "implementation of functions %FetchOpaque"
			)
		)
	)
),

b506
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %LoadNPLA1File" $=
				(
					+ "debug trace after configuration creation",
					+ "error description" @ "exception thrown when failed \
						writing file"
				),
				+ "trace" @ "function %ReadConfiguration",
				+ "default configuration" @ "platform %Android",
				/ "working root path located at runtime",
				/ @ "function %HandleFatalError" $=
				(
					/ "log level" -> 'Emergent' ~ 'Notice',
					- "separator lines" @ "error message" @ "platforms !%DS"
				),
				+ "trace for character mapping file path"
					@ "function %LoadComponents"
			),
			+ "support for platform %Android" @ "constructor %DSApplication"
				@ %DSMain
		),
		/ %YSLib $=
		(
			* "missing null pointer check" @ "encoding detection"
				@ "class %TextFile" @ %TextFile $since b290,
			+ "32-bit ABGR pixel conversion support" @ "class %HBitmap"
				@ %Adaptor.Image
		)
		+ "function %Android::FetchDefaultWindow"
			@ %'Helper_(Android)'.AndroidHost
	)
),

b505
(
	/ %YFramework $=
	(
		* "wrong condition for defining macro %YAssert" @ %YCLib.Debug $since b499
			$= ('ifdef YAssert' -> 'ifdef YB_Use_YAssert'),
			// This caused unintended assertions for release configurations.
		/ %Helper $=
		(
			+ "debug trace" @ "constructor %Environment" ^ 'YCL_Trace' @ %Host,
			+ "debug trace" @ "function %Devices::InitDSScreen" ^ 'YTraceDe'
				@ %DSScreen,
			/ @ %Initialization $=
			(
				/ "trace output" @ ^ "%YTraceDe"
					~ "directly use of standard function"
					// For platform %Android the level is "%Notice" in normal \
						cases and "%Err" in catch blocks. For other platforms, \
						the level is ignored and there should be no behavior \
						changed.
				+ "trace output" @ "function %Uninitialize",
				+ "debug trace output" @ "function %(LoadNPLA1File, \
					WriteConfiguration)" ^ "%YTraceDe"
			)
		),
		/ %Service $=
		(
			/ @ "class %File" @ %File $=
			(
				* "missing clean file pointer" @ "function %Close" $since
					$before b132,
				+ "trace" @ "function %(Open, Close), destructor" ^ "%YTraceDe"
			),
			* "missing check file pointer before writing BOM"
				@ "constructor %TextFile" @ %TextFile $since b341
				// Assertion failure.
		)
	)
	/ "assert string" @ "%YAssertNonnull" -> "Null reference found."
		~ "Null pointer found." @ %YBase.YStandardEx.CAssert,
	/ "all nonnull handle, shell handle, array pointer, buffer pointer, text \
		buffer pointer or updater assertions" ^ "%YAssertNonnull" ~ "YAssert",
	/ %Main $=
	(
		- "explicit 'return 0;'" @ "function ::main";
			// So both function 'int main()' with implicit 'return 0;' and \
				entry point function with void return type can be simply \
				coexisted without modifying return statement. Note that now \
				the program is still not fully supported so it would crash \
				intentionally.
		/ "merged entry point function %::y_android_main with function %::main"
			^ "conditional inclusion",
		+ "debug trace" @ "function %::main" ^ 'YTraceDe' @ %Main
	),
	* DLB "missing dependency for target %OUTPUTSO on .a files" @ "makefile"
		@ "platform %Android" $since b497
),

b504
(
	/ %YFramework $=
	(
		/ "simplified semantics tree mapping" @ %NPL.NPLA1 $=
		(
			/ $lib "accepted null mapper" @ "function %TransformNPLA1";
				// No-op.
			/ "default mapper argument" -> '{}' ~ 'MapNPLA1Node' @ "functions \
				%(TransformNPLA1, LoadNPLA1), function template %LoadNPLA1";
				// Default behavior changed. Now no children are dropped on \
					default.
			- "function %MapNPLA1Node"
		),
		/ %'Helper_(Android)' $=
		(
			/ %AndroidHost $=
			(
				/ "window creating now on native window resizing"
					~ "on native window creating",
				* "invalid native window access on termination" $since b502
					$= (+ "waiting for screen object release"
					@ "native window destroying"),
				(
				$dep_from "class %Devices::AndroidScreen";
				* "hard-coded screen size initialized" @ "class %NativeHost"
					@ %AndroidHost $since b502
				)
			),
			/ %AndroidScreen $=
			(
				+ "constructor 'AndroidScreen(::ANativeWindow&);'"
					@ "class %Devices::AndroidScreen"
				- "function %Android::FetchScreenSize
			)
		)
	),
	(
	$dep_from %YFramework.NPL.NPLA1;
	/ "logging" ^ 'YTraceDe' @ "functions %(LoadBookmarks, \
		LoadGlobalConfiguration, SaveBookmarks, SaveGlobalConfiguration)"
		@ "class %ShlReader" @ %YReader
	)
),

b503
(
	/ %Main_ARM9 => %Main,
	/ %YFramework $=
	(
		/ %Helper_(DS) $=
		(
			* DLD "missing parameter" @ "submodule names" $since b431,
			+ DLD '\ingroup DS' @ "private submodlues"
		),
		+ "2 function %SetChildren" @ "class %ValueNode"
			@ %YSLib.Core.ValueNode,
		(
		* "implementation" @ "function %WriteConfiguration"
			@ %Helper.Initialization $since b502;
			$dep_to "saving empty configuration"
		),
		/ %Helper_(Android) $=
		(
			/ %AndroidScreen $=
			(
				/ @ "constructor %AndroidScreen" $=
				(
					* "hard-coded screen buffer size" @ $since b502,
					+ "debug trace for size",
					- "hard-coded default argument"
					// It is worse that the default argument of the window \
						size was not the same as the previously hard-coded \
						screen buffer size. The width and height were \
						occasionally swapped.
				),
				+ "function %FetchScreenSize"
					// Not implemented by returning still hard-coded value \
						'{480, 800}'.
			),
			/ @ "class %NativeHost" @ %AndroidHost $=
			(
				+ "function %GetActivityRef",
				/ DLD "member initializer" @ "%p_desktop"
					-> ("initialization" @ "constructor")
					// To avoid invalid use of incomplete type.
			)
		)
	),
	/ %YReader.ShlReader $=
	(
		/ @ "class %ShlReader" $=
		(
			/ "simplified implementation" @ "function %SaveBookmarks",
			* "wrongly cleared all content on saving"
				@ "static function %SaveGlobalConfiguration" $since b502;
		),
		(
		$dep_from "saving empty configuration",
		$dep_from "%ShlReader::SaveGlobalConfiguration";
		* $comp "saving empty configuration exiting reader shell"
		)
	),
	/ %YBase.YStandardEx $=
	(
		* "missing workaround for Visual C++2013" @ "move constructor"
			@ "class template %transformed_iterator" @ %Iterator $since b415,
		/ @ "workaround for Visual C++2013" %Utilities $=
		(
			- DLD "redundant ';' after move constructor definition",
			* "missing defaulted default and copy constructors" $since b483
		),
		/ @ "explicit speclization" @ "class template %sequence_project" $=
		(
			/ DLD "implementation" ^ "using alias declaration",
				// It might improve some performance.
			* $revert_ex(b477) "missing workaround for Visual C++2013"
				$since b477
		),
		/ %Any $=
		(
			+ "binary type traits %is_aligned_storable",
			/ @ "class template %value_handler" $=
			(
				(
				/ DLD "implementation" @ "function %get_pointer"
					^ "template specialization" ~ "conditional expression";
				$dep_to "eliminated storage access overrun evaluation"
				),
				(
				$dep_from "%is_aligned_storable";
				/ $dev "simplified default template argument"
					@ "class template %value_handler" ^ "%is_aligned_storable"
				)
			),
			/ @ "class template %pod_storage" @ %Any $=
			(
				* "cv-qualifier not removed for access"
					@ "copy constructor, %operator=" $since b352
					$= (/ "implementation" ^ "%decay_t"
						~ "%remove_reference_t"),
				+ DLD 'inline' @ "all user-defined function templates",
				(
				+ "function template %assign";
				/ "implementation" @ "function template %operator=" ^ "%assign";
				* $comp "workaround of Visual C++ 2013 warning C4717"
				),
				(
				$dep_from "eliminated storage access overrun evaluation";
					// Otherwise static assertion would fail.
				+ $dev "static assertion for size and alignment constraints"
					@ "2 function templates %access"
				),
				+ "explicitly defaulted (copy constructor, copy %operator=)"
			)
		)
	)
),

b502
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %ValueNode $=
				(
					/ @ "class %ValueNode" $=
					(
						/ "inline function %GetContainer"
							-> "non-inline function %GetContainerRef",
						(
						+ "children container data member";
						/ DLD "constructor implementation for children node",
						/ DLD "children node access implementation"
							@ "functions %(at, begin, end)",
						/ DLD "implementation" @ "operator(bool, !)",
							// For backward compatibility, only treated as \
								empty node when both value and container are \
								empty.
						/ "copy constructor implementation" ^ "non-inline \
							function" ~ "explicitly defaulted function",
						/ "2 operator=" -> "unifying operator=",
						+ "constructor 'ValueNode(unique_ptr<Container>)'",
						+ "constructor 'ValueNode(Container)'",
						+ "2 constructor templates specifying all data members \
							being initialized";
						$dep_to "split value node children container"
						),
						(
						$dep_from "split value node children container";
						/ DLD "implementation" @ "function template %PackNodes"
						)
					)
				),
				+ "function templates %(CheckScalar; CheckNonnegativeScalar,
					CheckPositiveScalar)" @ %YSLib.Core.YCoreUtilities
			),
			/ %UI $=
			(
				(
				$dep_from "split value node children container";
				/ DLD "implementation" @ "member function \
					%WidgetLoader::TransformUILayout" @ %Loader
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\brief'
					@ "class %InvalidationUpdater" @ %Animation $=
				(
					* @ "data member %Invalidate" $since b457,
					* @ "static function %DefaultInvalidate" $since b462,
					* @ "data member %Invalidate" $since b482
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\since'
					@ "data member %TextBox::CaretBrush" @ %TextBox $since b484
			)
		),
		(
		$dep_from "split value node children container";
		/ DLD "implementation" @ "function %TransformNPLA1" @ %NPLA1
		),
		/ %'YCLib_(Android)'.Android $=
		(
			* "missing tracking cursor position for motion event"
				@ "function %SaveInput" @ "platform %Android" $since b501,
			+ "class %platform_ex::InputQueue"
			- "entry function definition ::ANativeActivity_onCreate"
				>> %'Helper_(Android)'.AndroidHost
		),
		/ %Helper $=
		(
			/ @ "platform %Android" @ %InputManager $=
			(
				/ "implemented cursor position forwarding"
					@ "member function %InputManager::Update",
				(
				$dep_from "Android host declarations";
				/ "implemented default widget pointer returning"
					@ "member function %InputManager::Update"
					// So %GUIShell is now are usable.
				),
				(
				$dep_from %YSLib.Core.CoreUtilities;
				/ DLD "simplified implementation" ^ "%CheckPositiveScalar"
				)
			),
			/ %Host $=
			(
				/ "class %Host" @ "namespace %YSLib::Host"
					>> "namespace %YSLib",
				* "missing 'YF_API'" @ "class %Environment" @ %Host
					$since b431;
				/ @ "platform %Android" $=
				(
					+ "class name declaration %AndroidScreen"
						@ "namespace %Devices",
					+ "class name declaration %NativeHost"
						@ "namespace %Android";
					$dep_to "Android host declarations"
				)
			),
			+ "macro %YFM_Android_Helper_AndroidHost" @ %YModule
		),
		+ %'Helper_(Android)' $=
		(
			+ "screen implementation unit",
			+ %AndroidHost $=
			(
				+ "struct ConfigurationDeleter; class %NativeHost";
				+ "native host implementation",
				+ "function %(FetchNativeHost, FetchDefaultDesktop)"
			)
		),
	),
	+ "entry point function definition %::y_android_main" @ "platform %Android"
		@ %Main_ARM9
		// Still not fully supported.
),

b501
(
	/ $doc "Doxygen comments" @ %YFramework $=
	(
		* "wrong directive '\def' used" ~ '\brief' @ "macro %YCL_KEYSTATE_DIRECT"
			@ %YCLib.Input $since b321,
		* "wrong directive '\param' used" ~ '\note' @ "function %FetchNativeLooper"
			@ %'YCLib_(Android)'.Android $since b499,
		* "wrong directive '\param' used" ~ '\note'
			@ "member function %TextBox::GetCaretPosition"
			@ %YSLib.UI.TextBox $since b484
	),
	* "crash on setting saving" @ %YReader.ReaderSettingUI $since b500 $=
		(* $dev "wrong widget path accessed" $since b500),
		// This might corrupt the configuration file, which cause big trouble \
			on DS.
	/ %YFramework $=
	(
		/ %NPL.NPLA1 $=
		(
			+ 'using NodeMapper = ValueNode(const ValueNode&);';
			+ "function %MapNPLA1Node;
			+ "parameter with default argument 'std::function<NodeMapper> \
				= MapNPLA1Node' @ %(TransformNPLA1Node, LoadNPLA1), function \
				template %LoadNPLA1)"
		)
		/ %YSLib.Core.ValueNode $=
		(
			/ @ "class %ValueNode" $=
			(
				+ "function %swap",
				/ $dev "member %Vaule" ^ "member initializer '{}'",
				/ DLD "functions operator%=" -> "non-inline functions"
			),
			(
			$dep_from "member function %ValueNode:swap";
			+ "function %swap for %ValueNode"
			),
			/ "implementation" @ "inline functions %(AccessNode, AccessNodePtr)"
				^ "macros %(PDefH, ImplRet)"
		),
		/ "implemented key tapping up and down for motion events"
			@ "platform %Android" @ %YCLib.Input
	),
	+ $dev $repo "tags ('PreAlpha', 'V0.5') to revision 372",
	/ "all 'return nullptr'" -> 'return {}'
),

b500
(
	/ %YFramework,
	(
		/ %YSLib.UI $=
		(
			* "missing clip area intersection for arrow rendering"
				@ "member function" ("%DropDownList::Refresh" @ %ComboList,
				"%Menu::DrawItem" @ %Menu) $since b452;
				// An obvious example is in the reader setting UI @ YReader, \
					moving over or dragging the scroll time setting drop down \
					list, the arrow of behind drop down button would be \
					wrongly rendered visible, rather than hiding hehind.
			(
			/ "implemented arrow rendering" ^ "function %Drawing::DrawArrow"
				~ "function %UI::DrawArrow" @ "member function \
				%AScrollBar::InitializeArrowPainters" @ %Scroll;
			* $comp "wrong arrow might be rendered" $since b452,
				// Ditto.
			- "function %UI::DrawArrow" @ %YWidget
			),
			/ DLD "simplified implementation" @ "function %RectDrawArrow"
				@ %YStyle
		),
		/ "default configuration" @ "platform %Win32" @ %Helper.Initialization
			$=
		(
			/ "default root directory macro %ROOTW" -> "." ~ "H:\\NDS\\EFSRoot",
			/ "default font path macro %DEF_FONT_PATH"
				-> "C:\\Windows\\Fonts\\SimSun.ttc"
				~ 'ROOTW "\\Font\\FZYTK.TTF"',
			/ "default font directory macro %DEF_FONT_DIRECTORY"
				-> 'ROOTW "\\Font\\"' ~ 'ROOTW "\\"',
			/ "default data directory macro %DEF_DATA_DIRECTORY"
				-> 'ROOTW "\\Data\\"' ~ 'ROOTW "\\"'
		)
	),
	/ %YReader $=
	(
		/ %ShlExplorer $=
		(
			/ "test widget location"
			/ @ "class %ShlExplorer"  $=
			(
				+ "default text" @ "test label",
				/ "avoided potentional leak for %unique_ptr setting"
					^ "%make_unique"~ "member function %unique_ptr::reset"
					@ "%yunseq segments",
				/ @ "animation test" $=
				(
					* "animated wrongly by irrevalent invalidation" $since b451,
					/ "refined test animation in test tab page"
						~ "in setting panel"
				)
			)
		),
		+ "function %AddButtonTabBar" @ %Shells,
		+ "rearranged setting UI in 3 tab pages" @ %ReaderSettingUI
	),
	/ $doc "updated Doxygen file" $=
	(
		^ "Doxygen 1.8.7" ~ "Doxygen 1.8.2",
		/ 'YFramework/include/freetype YFramework/include/ft2build.h'
			@ "%EXCLUDE" -> '.git Data Tools',
		/ "set %SHORT_NAMES" -> 'YES' ~ 'NO'
			// Workaround of error: 'could not open file for writing' with a \
				name containing a tab.
	)
);

////

