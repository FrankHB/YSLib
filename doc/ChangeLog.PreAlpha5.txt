/*
	© 2014 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha5.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha5 。
\version r4821
\author FrankHB <frankhb1989@gmail.com>
\since build 500
\par 创建时间:
	2014-05-29 19:30:47 +0800
\par 修改时间:
	2014-10-14 22:55 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha5
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b500, $now];

$now
(
	/ %YFramework $=
	(
		+ "class template %GRecursiveCallContext" @ %YSLib.Core.YFunc,
		* "wrong 'ynothrow'" @ "all exception class" $effective
			@ %(YSLib.Core.Exception $revert(b319) $since b319, YCLib.Host
			$since b492, YCLib_(MinGW32).MinGW32 $since b427),
			// Since the underlying string construction could throw (though \
				rarely), no exception guarantee is not hold.
		/ @ "class %Exception" @ %YCLib.Host $=
		(
			/ "base class %YSLib::LoggedEvent" -> "%std::system_error",
			/ "default level argument" ^ "%YSLib::Emergent" ~ '{}',
			+ "%std::error_code parameter" @ "constructor",
			+ "constructor with %int and 'const std::error_category&' \
				parameters",
			+ "function %GetLevel"
		),
		/ @ "class %Win32Exception" @ %YCLib_(MinGW32).MinGW32 $=
		(
			+ "static member function %GetErrorCategory",
			/ "default level argument" ^ "%YSLib::Emergent" ~ '{}',
		),
		/ %NPL.Lexical $=
		(
			* "wrong function name" $since b508 $=
			(
				/ $revert_ex(b508) "%Unescape" => "%Escape",
				/ "%UnescapeLiteral" => "%EscapeLiteral",
			),
			+ 'using YSLib::vector;',
			+ "class %UnescapeContext",
			+ "function %NPLUnescape",
			/ @ "class %LexicalAnalyzer" $=
			(
				/ DLD "implemented intermediate list state of unescaping \
					position" ^ "%vector" ~ "%list",
					// Some performance improved.
				(
				$dep_from 'using YSLib::vector;';
				/ "return value" @ "function %GetQuotes"
					-> 'const vector<size_t>&' ~ 'const list<size_t>&'
				),
				(
				$dep_from %"class %UnescapeContext";
				/ DLD "implemented unescaping" ^ "%UnescapeContext";
				- "limitation of max character number of escaped sequence; \
					data member %MaxEscapeLength"
				),
				(
				+ "alias declaration %Unescaper",
				$dep_from "%NPLUnescape";
				+ "unescaper parameter with default argument %NPLUnescape"
					@ "function %ParseByte",
				+ "function %ParseQuoted"
				),
				* "missing concatenating with backslash at end of lines" $since
					b335,
					// Unimplemented previously, but wrongly documented as \
						feature.
				/ DLD "implemented function %Decompose" ^ "range-based \
					%ystdex::split_l" ~ "iterators-based %ystdex::split_l"
			)
		),
		/ "thrown %std::runtime_error" ~ "%Exception" @ %YCLib_(Android).Android
			// Because the constructors are changed, now they can not be \
				directly constructed without error code.
	)
	/ %SHBuild.Main $=
	(
		(
		/ $dep_from %YFramework.YSLib.YFunc;
		/ DLD "implemented by recursive context"
		),
		+ "timestamp check for static linking",
		+ "environment variable settings" @ "usage"
	),
	/ DLD $re_ex(b470) "reduced redundant 'return std::move' usage" $effective
		@ %(YBase.YStandardEx.Algorithm,
		YFramework.YSLib.(Service.YFileSystem, UI.UIContainer))
	/ %YBase.YStandardEx $=
	(
		+ "function template %(pop_back_val, pop_front_val)" @ %Container,
		+ 2 "function templates %split_if_iter" @ %String
	)
),

b544
(
	/ %YFramework $=
	(
		/ %YCLib.FileSystem $=
		(
			/ @ "class %HDirectory" @ %YCLib.FileSystem $=
			(
				(
				* "wrong invariant" $since b543;
					// The initial state is not correct.
				* $comp "assertion failed" @ "startup" @ "platform %DS" $since
					b543
					// Strangely, though the source code was same, it was not \
						reproduced on platform %Android.
				),
				/ DLD "simplified some assertions for invariant"
					@ "member functions",
				* "wrong file type filtered" @ "function %GetNodeCategory"
					@ "!platform %Win32" $since b543
					// The 'DT_*' is not bitmask.
			),
			/ @ "function template %ufexists" $=
			(
				/ DLD $revert(b413) "implemented" !^ "macros %(PDefH, ImplRet)",
				* "non overloaded non-class argument selected" $orig @ %YCommon
					$since b305
			),
			+ "(3 functions; 1 function template) %GetFileModificationTimeOf"
		),
		+ "function %ConvertTime" @ %YCLib_(MinGW32).MinGW32,
		/ DLD "implementation" ^ "%ystdex::ntctslen"
			~ "%std::char_traits::length" $effective
			@ %(CHRLib::CharacterProcessing, YSLib.Adaptor.Image)
		/ %CHRLib.CharacterProcessing $=
		(
			/ "function template %ucsdup"
				-> "%MakeUCS2LE with non-constructible constraint",
			+ "function template %MakeUCS2LE for direct forwarding with \
				constructible constraint",
			(
			/ "function templates %MakeUCS2LEString" => "%MakeUCS2LE"
			+ "default argument 'std::basic_string<char16_t>'" @ "template \
				parameter %_tDst" @ "all function templates %MakeUCS2LE"
			),
			/ DLD "simplified UCS-2 directly construction implementation",
				// Not to be copy any longer.
			- "all function %ucsdup",
			+ "5 function templates %MakeUTF8",
			- "all functions and function template %strdup"
		)
	),
	/ $dev @ "Visual C++ projects" $=
	(
		/ DLD "united all VC++ include directories with NMake include search \
			paths (if any)",
		/ "merged All platforms based on platform %MinGW32 for IntelliSense"
			@ "project %YFramework"
		* "wrong NMake include search paths" @ "project %YBase"
			@ "platform %Android" $since b492,
		/ @ "platform %MinGW32" $=
		(
			/ "updated new version of toolchain",
			* "empty paths" @ "configuration %debug" $since b518
		)
	),
	/ %YBase.YStandardEx.CString $=
	(
		+ "unary type trait %is_char_specialized_in_std",
		/ $lib $design "specified implementation"
			@ "function template %ntctslen to call %std::char_traits::length \
			if the specilization are mendated by ISO C++"
			// This may be better for optimization.
	),
	/ %SHBuild.Tools $=
	(
		/ @ "class %BuildContext" $=
		(
			+ "timestamp check for direct dependency of object file"
				@ "function %Search",
				// Only one dependency is support, i.e. source file for .o file.
			+ $lib $design "ending dot for 'absolute path recognized' message"
				@ "function %Build"
		),
		- DLD "all 'u8' for string literal"
			// The source file is already guaranteed to be encoded as UTF-8.
	)
),

b543
(
	/ %YFramework $=
	(
		* DLB "wrong %CC exported" @ "Makefile" @ "platform %Android"
			$since b492
			// No C source files are currently compiled so no wrong behavior \
				has been detected.
			$= (/ "value '$(PREFIX)g'" -> '$(PREFIX)gcc'),
		/ %YCLib_(MinGW32) $=
		(
			/ %Win32GUI $=
			(
				+ "function %GetBounds" @ "class %WindowReference";
				+ 'using WindowReference::GetBounds;' @ "class %HostWindow"
			),
			/ "all assertions" ^ ("%(YAssert, YAssertNonnull)"
				@ %YCLib.Debug ~ "%yconstraint" $effective @ %COM,
			/ DLD "implemented inline functions %EnsureNonNull" @ %COM
				^ "macros %(PDefH, ImplExpr)"
		),
		/ DLD "simplified implementation" @ "constructor template %WindowThread"
			@ %HostRenderer !^ "%std::mem_fn" @ %Helper.HostRenderer,
		/ %YCLib $=
		(
			/ %YCLib.FileSystem $=
			(
				/ $dev "all conditional inclusive with %YCL_Win32 as first \
					branch",
					// Regardless of %YCL_API_FILESYSTEM_POSIX defined or not.
				/ DLD "simplified directory data implementation"
					@ "platform %Win32",
				/ @ "class %HDirectory" $=
				(
					+ "move constructor to ensure moved object has a clear \
						state and avoid redundant copy on platform %Win32";
					+ "invariant guarantee for availability of member",
						// Otherwise null pointer could be wrongly used.
					+ "invariant check assertions" @ "member functions",
					/ "supported detecting file category other than regular \
						and directory" @ "function %GetNodeCategory"
				),
				(
				(
				$dep_from %YBase.YStandardEx.Path;
				/ "enum class %NodeCategory" $=
				(
					!^ "%ystdex::path_category for enumerators",
					^ "std::uint_least32_t as underlying type" ~ "%PathCategory",
					(
					/ "made %Special synonymous of 'Directory | Missing'",
					- "%(HardLink, Reparse)",
						// %HardLink is irrelevant to single file system node. \
							%Reparse is too specific to the implementation \
							(i.e. NTFS).
					(
					+ "enumerator %MountPont";
					/ "made %Junction synonymous of %MountPoint",
						// In NTFS, junctions are implemented by reparse \\
							points sharing same tag with mount point. See \
							http://www.codeproject.com/Articles/21202/Reparse-Points-in-Vista .
					/ "made %Link cover %(SymbolinkLink, MountPoint)"
					);
					/ "made enumerators %(Directory, Link, Missing) orthogonal \
						with other categories of values",
					)
				),
				/ %YSLib.Adpator.YAdaptor;
				- "enum class %PathCategory"
				),
				+ "bitmask operations for %NodeCategory"
			),
			/ "all assertions" ^ ("%(YAssert, YAssertNonnull)"
				@ %Debug) ~ "%(yconstraint, yassume)"
				$effective @ %(FileSystem, Keys)
		),
		/ %YSLib $=
		(
			- "function %ClassifyPath" @ %Service.FileSystem;
			- 'using platform::PathCategory;' @ %Adaptor.YAdaptor
		);

	),
	/ %YBase $=
	(
		/ %LibDefect.String $=
		(
			/ "allowed %std::(stof, stod) defined"
				@ '!(defined(__clang__) && defined(__BIONIC__))',
				// OK for G++ 4.8.2 on Android. Though %std::stold is still \
					missing.
			/ @ "namespace %std" @ "defined %__BIONIC__" $=
			(
				+ 'using ::strtoll;',
				+ 'using ::strtoull;';
				/ "allowed %(stoll, stoull) defined"
			)
		),
		/ %YBase.YStandardEx $=
		(
			- $dev $revert(b542) "workaround for platform %Android"
				@ "implementation" @ "%ston" @ %String @ "defined %__BIONIC__"
				$dep_from "%std::(stoll, stoull)" @ %LibDefect.String,
			/ %Concurrency $=
			(
				+ "entering and exiting callbacks as parameter"
					@ "constructors %(thread_pool; task_pool)",
				/ @ "class %task_pool" @  $=
				(
					+ "function templates %(poll, poll_for, poll_until)";
					/ DLD "simplified function templates %(wait, wait_for, 
						until)" ~ "%(poll, poll_for, poll_until)"
				),
				+ "function %to_string for %std::thread::id"
			),
			+ "enum class %path_category; function template %classify_path"
				@ %Path
		),
	),
	/ $doc %Documentation $=
	(
		+ %LanguageConvention
			$= (+ "interoperability rules");
		/ %CommonRules $=
		(
			/ "language specific rules" >> %LanguageConvention,
			/ "updated references"
		)
	),
	/ %Tools $=
	(
		* "spelling error" @ "comment" @ "%make-clang-android.sh" $since b497,
		* "possible interleave output across threads" @ %Tools.SHBuild.Main
			$since b519
			$= (* "missing '-mthreads'" @ "default value" @ "%CXXFLAGS"
				@ "%common-bootstrap.sh" $since b538 $orig @ ("%CXXFLAGS"
				$since b515 $orig @ "G++ command" $since b474) @ "%build.sh"))
	)
),

b542
(
	/ %Tools.SHBuild.Main $=
	(
		/ "only specified archive linked"
			$= (/ "passed path among recursive calls of %BuildContext::Search")
		/ "exception message output" $=
		(
			^ "raw number" ~ "hexadecimal number";
			^ $re_ex(b541) "%to_string" ~ "%ystdex::sfmt"
		),
		/ @ "class %Build Context" $=
		(
			/ @ "function %Search" $=
			(
				/ DLD "ignored directory early in enumerating children nodes \
					at first time",
				/ $dev "parameters" ^ "%Path" ~ "%string"
			),
			/ @ "member function %Build" $=
			(
				$dep_from %YFramework.YSLib.Service.FileSystem;
				/ DLD "simplified implementation" ^ "%MakeNormalizedAbsolute"
				- $comp "check for empty %SRCPATH input"
			)
		),
		/ DLD "simplified parameter type" @ "function %PrintUsage",
		/ DLD "simplified %main" ^ $dep_from ("%MakeWConsole"
			@ %YFramework.YCLib_(MinGW32).Consoles),
		/ DLD "implemented option parsing" ^ $dep_from
			("%ystdex::(ston, filter_prefix)" @ %YBase.YStandardEx.String)
		/ "message output" $=
		(
			+ "%Debug level with %DarkGreen",
			/ "%Informative level color" -> "%Magenta" ~ "%DarkGreen",
			/ "%Notice level color" -> "%Cyan" ~ "%Magenta",
			+ "output for to be currently built",
				// To allow inspect the file built with detail command output \
					disabled.
			/ "level of command output" -> "%Debug" ~ "%Informative",
			/ "level of counting for objects and ignoring files"
				-> "%Informative" ~ "%Notice"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service.FileSystem $=
			(
				+ 'yconstexpr size_t MaxPathLength(yimpl(1 << 10))';
				/ $dev "default arguments"
					@ "function %FetchCurrentWorkingDirectory"
					^ "%MaxPathLength" ~ '1 << 10',
				+ "function %MakeNormalizedAbsolute"
			),
			/ %UI $=
			(
				/ %YGUI $=
				(
					* "missing activation of timer" $orig @ "member function \
						%InputTimer::RefreshClick" $since b416,
					/ @ "member function %GUIState::RefreshTap" $=
					(
						/ "swapped 2nd and 3rd parameter",
							// The duration are more likely default value to \
								be simple. This is also good on compatibility \
								after refactor once the duration setting is \
								stored.
						* "missing update of tap location on interruption from \
							timer" $since b541,
						* "returned wrong value when tap area check failed"
							$since b541,
							// Now it specified to be 0, not 1.
						* "missing update of tap counter when tap area check \
							failed" $since b541,
						* "wrong relative tap area origin" $since b541
							// It should be (TapArea.Width / 2, TapArea.Height \
								/ 2) rather than (0, 0).
					)
				),
				/ @ "class %TextBox" @ %TextBox $=
				(
					+ "function %SelectAll",
					/ @ "handling event %TouchDown" $=
					(
						/ "performed no-op if move not detected" @ "%TouchHeld";
							// This is only an optimization previously, \
								however necessary for multiple taps now, \
								otherwise the operation of %TouchDown would be \
								overriden by %TouchHeld unconditionally, \
								eventually.
						+ "selecting all on triple tap",
						+ "selecting one character on double tap"
					)
				)
			)
		),
		+ "function %MakeWConsole" @ %YCLib_(MinGW32).Consoles
	),
	/ @ %YBase $=
	(
		/ DLD "all macros for implementation" @ %YSandardEx
			-> "prefixed with %YB_Impl" $effective @ %(Operators, AnyIterator,
			Rational),
		/ DLD "all macros for implementation" @ %LibDefect
			-> "prefixed with %YB_LibDefect" $effective @ %String,
		+ "function templates %ston, filter_prefix" @ %YStandardEx.String;
	),
	/ "double click to auto scroll" ^ "%TouchDown handler" ~ "%Click handler"
		%YReader.ShlReader;
		// This is still slow in debug configurations. So sometimes it would \
			be no effect.
),

b541
(
	/ $dev "differentiate general callable types and function object types"
		@ "template type parameters" $=
	(
		(
		/ "animation updater" ^ "%_fUpdater" ~ "%_fCallable"
			@ %YFramework.YSLib.UI.Animation;
		/ "other types not suited for pointer to members" -> "%_func"
			~ "%_fCallable" $effective @ %(YBase.(YStandardEx.(Algorithm, Cache,
			Container, Exception, Functional, Utility), YTest.(Test, Timing)),
			YFramework.(Helper.(HostedUI, HostedRenderer, HostedWindow),
			YSLib.(Adaptor.Image, Core.(Task, YApplication, YEvent, YFunc),
			Service.FileSystem, UI.(Animation, YWidgetEvent))))
		),
		/ "member type %callable_type" @ "class template %thunk"
			@ %YBase.YStandardEx.Functional => "%caller_type"
	),
	* DLD "missing EOL normalization" @ %YTest.Timing $since b538,
	/ %YFramework $=
	(
		/ DLD "implemented inline functions" ("%GetHostRendererPtrOf"
			@ %Helper.HostedUI, ("%is_undereferenceable" @ %Adaptor.Image,
			"%FetchShellHandle" @ %Core.YApplication) @ %YSLib)
			^ "macros %(PDefH, ImplRet)",
		/ %YSLib.UI $=
		(
			/ @ "class %TreeList" @ %TreeView $=
			(
				/ "functions %(CollapseNode, ExpandNode) returned previous \
					node state" ~ "boolean value",
				+ "support for handling left and right key to collapse or \
					expand the node and then switch the selected position if \
					possible",
				(
				/ $dep_from %YGUI;
				+ "support for double tap to collapse or expand item like \
					single indent box tap"
				)
			),
			/ %YGUI $=
			(
				/ "function %RefreshClick" => "RefreshTap"
					@ "class %InputTimer",
				/ @ "class %GUIState" $=
				(
					* "missing reset tap count" @ "function %Reset" $since b540,
					(
					+ 'Size TapArea{4, 4}',
					(
					+ "tap location state";
					+ "function %TapLocation"
					);
					+ "tap maximum value, location memorization and timeout \
						duration support" @ "function %RefreshTap"
					)
				)
			)
		),
		* "wrong 'ynothrow' exception specification" @ "constructor %HDirectory"
			@ %YCLib.FileSystem $since b411
			// The implementation would throw if failed, which violates the \
				exception specification.
	),
	(
	/ $dep_from %YFramework.YSLib.UI.YGUI;
	/ "restricted double tap area" @ %YReader.ShlReader
	),
	/ %Tools.SHBuild.Main $=
	(
		/ "ensuring output directory implementation" $=
		(
			/ "merged with exception of int \
				value as original top level and message string as original \
				recursive search on error",
			+ "message output"
		),
		/ @ "member function %BuildContext::Search" $=
		(
			- "purging files before compiling",
				// Now the output directory is not guaranteed to be clean for \
					only containing the files built.
			/ DLD "stored list of files to built",
				// To make the correct output after removed purging, the files \
					list for the linker is recorded. This may introduce a \
					command line out of host limit, to be fixed future.
			/ "split search for directories and files",
				// Now recursive search of subdirectories are always previous \
					than the files in the same parent directory.
			+ "message output for count of files to be built",
			/ "created out directory only if there exists file to be built",
			* "non-regular files treated as directories" $since b474,
			* $re_ex(b539) "missing quoting compiler output object paths"
				$since b474
				// If the path contained space, the command was then wrong.
		),
		/ DLD "all message output except for hexadecimal number" ^ "%to_string"
			~ "%ystdex::sfmt"
	)
),

b540
(
	/ %YFramework $=
	(
		/ %YCLib_(MinGW32) $=
		(
			+ "3 inline functions %(WCSToUTF8, UTF8ToWCS)" @ %MinGW32,
			/ @ "class %WConsole" @ %YCLib_(MinGW32).Consoles $=
			(
				* "missing limit 4-bit value for color components"
					@ "function %ComposeAttributes" $since b519,
				- "style component" @ "static functions %(ComposeAttributes, \
					DecomposeAttributes)",
					// The 2 color components are now 4-bit with dark/bright \
						style.
				- "functions %(UpdateStyle; SetStyle)",
				- "function %SetColor"
					// Use %Update with argument instead.
			)
		),
		(
		$dep_from %YCLib_(MinGW32).MinGW32;
		/ DLD "simplified Unicode conversion" @ "platform %Win32"
			@ %YCLib.FileSystem ^ (("%platform_ex::UCS8ToWCS"
			~ "%CHRLib::ucsdup"), ("%platform_ex::WCSToUTF8"
			~ "%CHRLib::strdup"));
		),
		/ %YSLib $=
		(
			+ "function template %NormalizeDirecoryPathTail"
				@ %Service.FileSystem,
			/ %UI $=
			(
				/ @ "class %GUIState" @ %YGUI $=
				(
					+ 'InputTimer TapTimer{};',
					+ "function %RefreshTap";
					+ "implemented tap state refreshing";
					+ "function %GetTapCount"
				),
				/ @ "class %TreeList" @ %TreeView $=
				(
					/ DLD "split node collapse and expanding implementation";
					+ "functions %(CollapseNode, ExpandNode)"
				)
			)
		)
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			+ "build directory switching support",
			(
			/ DLD "simplified namespace scope using-directives";
			* DLB $comp "ambiguity when %string in %YSLib and %std is not the \
				same" $since b538
				// Default is the same, configured in \
					%YFramework::YSLib::Adaptor::YContainer.
			),
			* "unhandled exception if console object failed to construct" $since
				b520,
				// For example, when the output is redirected.
			/ "message output" $=
			(
				+ "fill '0'" @ "hexadecimal error code output",
				/ DLD "implemented" ^ "C standard I/O" ~ "I/O streams",
					// This make some implementation simpler and leads to \
						significantly smaller binary file.
				/ "executed command echo" ^ "%PrintInfo"
					~ "directly standard I/O",
				/ "reset color attributes for error code output",
				+ "more colored output for different levels"
					// %Magenta for %Notice and %DarkGreen for %Informative.
			),
			/ DLD "simplified command call" ^ "%platform::usystem"
				~ "%::_wsystem",
			+ '-MMD' @ "compiler command"
				// To generate .d file for dependencies.
		),
		/ DLB "build scripts" $=
		(
			(
			+ "%SHBuild-options.sh" $=
			(
				+ "split %(CFLAGS_WARNING, CXXFLAGS_STD, CXXFLAGS_WARNING, \
					CXXFLAGS_COMMON, CXXFLAGS_OPT_DBG) from %COMMON_CFLAGS"
					@ "%SHBuild-YSLib.sh";
				/ "allowing overriding for all variables",
				+ '-Wsign-promo' @ "%CFLAGS_WARNING",
				+ '-Wctor-dtor-privacy' @ "%CFLAGS_WARNING"
					// To make it same as DS Makefile. '-Wnoexcept' is not \
						added now because the lambda to pointer conversion \
						would issue.
			);
			/ DLD "implemented %SHBuild-YSLib.sh" ^ "%SHBuild-options.sh" $=
			(
				- "%COMMON_CFLAGS";
				/ "explicitly unset %(CXXFLAGS_OPT_DBG, CXXFLAGS_COMMON, \
					CXXFLAGS, LDFLAGS) and then specified %LDFLAGS"
					// Use default values in %SHBuild-options.sh for unset \
						variables.
			)
			),
			/ DLD "simplified %SHBuild_BaseDir implemented by one assignment",
			(
			/ "only set value of %SHBuild_BuildDir when not set"
				@ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)";
			/ "set default value of %SHBuild_ToolDir as '${SHBuild_Build_Dir}'"
				@ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)";
				// The default tool is used within build directory.
			/ "differentiate tools directory variable as %SHBuild_ToolDir"
				~ "%SHBuild_BaseDir" @ "%(common-bootstrap.sh; build.sh, \
				self-host.sh, SHBuild-YSLib.sh)",
			/ "%SHBuild calls" ^ '${SHBuild_ToolDir}/SHBuild' ~ './shbuild'
				@ "%SHBuild-YSLib.sh",
			),
			/ DLD $revert_ex(b539) "simplified toolchain setting"
				@ "%SHBuild-YSLib.sh" $=
			(
				+ 'export AR=gcc-ar',
				+ 'source ${SHBuild_ToolDir}/common-toolchain.sh';
				- "'AR=gcc-ar' before commands"
			),
			- "all unused %SHBuild_Me",
			/ @ "%common-bootstrap.sh" $=
			(
				+ 'export AR="gcc-ar"',
				+ 'export' @ "default value setting" @ "%(CXXFLAGS, LDFLAGS)",
				+ "%AR echo"
			)
		)
	),
	+ DLB '-Wsign-promo -Wctor-dtor-privacy' @ "options"
		@ "Code::Blocks projects" @ "platform %MinGW32",
	/ $dev $lib @ "class %ShlTextReader" @ %YReader.ShlReader $=
	(
		$dep_from %YFramework.YSLib.UI.YGUI;
		/ "double click implementation" ^ 'FetchGUIState().TapTimer'
			~ "%ShlTextReader::tmrInput"
		- "protected data members %ShlTextReader::(tmrInput, nClick)"
	)
),

b539
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			(
			/ DLD ^ "timer initialization" ^"%GetTicks" ~ "%StartTicks"
				%Service.Timer;
			- 'using platform::StartTicks;' @ %Adaptor.YAdaptor
			),
			/ %Core.YCoreUtilities $=
			(
				/ DLB "file %ycutil.h" => "%YCoreUtilities.h",
				+ DLB "file %YCoreUtilities.cpp";
				+ "function %WriteEnvironmentVariable"
			)
		),
		/ %YCLib $=
		(
			/ %Timer $=
			(
				- "function %StartTicks",
					// For platform %DS, this is implicit called when \
						necessary. For other platforms this is not needed.
				/ $lib "implemented timer" @ "platform %Win32" $=
				(
					^ "%std::chrono::steady_clock" ~ "multimedia and QPC APIs";
					* $comp "missing call to '::timeEndPeriod' on exit" $orig
						@ %YCommon $since b298
				),
				/ $lib "implemented timer" @ "platform %Android"
					^ "%std::chrono::steady_clock" ~ "::clock_gettime"
			),
			+ "function %platform::usystem" @ %YCommon
		),
		/ @ "platform %MinGW32" $=
		(
			$dep_from "platform %Win32" @ %YFramework.YCLib.Timer;
			- "linked library %winmm" @ "Code::Blocks projects"
		)
	),
	- $doc "issues" @ %Documentation::Meta;
		// Issues are now fully tracked on \
			https://bitbucket.org/FrankHB/yslib/issues .
	/ %YBase.YStandardEx $=
	(
		/ %Concurrency $=
		(
			* "wrong return type"
				@ "function templates %(pack_task, pack_shared_task)"
				$since b358;
			/ @ "class %thread_pool" $=
			(
				$dep_from "%pack_shared_task"
				/ DLD "implemented function template %wait_to_enqueue"
					 ^ "%pack_shared_task"
				+ "function templates %(wait, wait_until)" @ "class %task_pool"
			)
		),
		/ @ "function template %boxed_value" @ %Utilities $=
		(
			* "missing excluding of 'boxed_value&'"
				@ "constructor template with 1 function parameter"
				$since b477
				$= (/ "constructor template" -> "explicitly defaulted \
					(default, copy, move) constructors and 2 constructor \
					templates"),
			+ "explicitly default (copy, move) %operator="
		),
		/ %Exception $=
		(
			* $revert_ex "function template %raise_exception" @ %Exception
				$since b538,
			/ DLD 'typename' @ "parameter"
				@ "function template %get_nested_exception_ptr" -> 'class',
			+ "function template %handle_nested"
		),
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			/ @ "class %BuildContext" $=
			(
				(
				/ "parallel build" @ "function %Call" $=
				(
					/ "stopped launching new task once non-zero result is met",
					+ "parameter and default argument to allow force \
						serialized build"
				),
				+ "function %CheckResult";
				+ "function %CallWithException"
				),
				+ "function %GetLastResult",
				/ @ "function %Search" $=
				(
					* "broken archive output for parallel build" $since b520 $=
					(
						(
						$dep_from "functions %(GetLastResult, CheckResult)",
						* "missing check for non-zero result to raising \
							exception after compiling and before linking" $since
							b520
							// Missing objects which failed to compile as the \
								linked result.
						),
						* "missing synchronization after linking with children"
							$since b520,
							// Probable missing to link some linker output of \
								children.
						(
						- $revert_ex(b538)
							"showing number unfinished waiting tasks";
							// The total number of unfinished tasks can not be \
								fetched in general if no counter elsewhere.
						* "missing waiting of unfinished tasks not in queue"
							$since b538
							// The reset operation of task pool should be \
								performed unconditionally.
						)
					),
					(
					$dep_from "function %CallWithException";
					/ DLD "simplified exception handling" ^ "%CallWithException"
						~ "%Call"
					)
					+ "logged for numbers of scanned .a and .o files"
				)
			),
			/ "all failure exit code" -> 'EXIT_FAILURE' ~ '3',
			/ @ "function %main" $=
			(
				- "handler with return value other than 'EXIT_FAILURE' or '0'",
					// Now the exit code of the program is 0 on success, \
						otherwise %EXIT_FAILURE.
				- "multilevel try blocks",
				/ "merged %IntException handling" -> "function %PrintException"
			),
			(
			+ "function template %raise_exception";
			(
			/ "explicitly stated command failure" @ "function %raise_exception";
			/ "alias declaration %IntException" ^ "%std::runtime_error"
				~ "%std::exception";
			),
			/ DLD "some printed information before exception throwing"
				-> "exception messages"
			),
			* "missing set %Err as log argument" @ "function %PrintException"
				$since b538,
			/ @ "function %PrintException" $=
			(
				- "throw clause" @ "handlers",
				$dep_from "%ystdex::handle_nested"
					@ %YBase.YStandardEx.Exception;
				/ "nested exception handling" ^ "%ystdex::handle_nested"
					~ "%std::rethrow_if_nested"
			),
			/ DLD "simplified command line calls",
			- "magic number to make offset of error code",
			(
			+ 'string AR = "ar"' @ "class %BuildContext";
			+ "print value of %(CC, CXX, AR) before build",
			(
			$dep_from %YFramework.YSLib.Core.YCoreUtilities;
			+ "read environment setting for %(CC, CXX, AR) before build";
			$dep_to "support overwriting command name"
			)
			),
			* "missing quoting linked object paths" $since b474
				// If the path contained space, the command was then wrong.
		),
		/ DLB @ "%SHBuild-YSLib.sh" $=
		(
			- '-ffat-lto-objects' @ "%COMMON_CXXFLAGS",
			(
			$dep_from "support overwriting command name",
			+ "'AR=gcc-ar' before command"
				// Otherwise further linking using the output would probable \
					fail due to lack of '-ffat-lto-objects'
			),
			+ '-xid,Android' @ "%SHBOPT"
				// Make it same as the Code::Blocks project.
		),
		(
		+ "%common-toolchain.sh"
			$= (+ "setting of %LD");
		/ DLB "merged toolchain setting" @ "%common-bootstrap.sh"
			-> "%common-toolchain.sh",
		/ DLB "build" @ "%self-host.sh" ^ "%LD" ~ "%CXX"
		)
	),
	- DLB "all '-ffat-lto-objects'" @ "all release configurations"
		@ "platform %MinGW32" @ "Code::Blocks projects";
		// 'gcc-ar' with linker plugin support must be used instead of 'ar'. \
			And size of the output static library would be less.
),

b538
(
	+ "2 test cases for %ystdex::compose" @ %Test.YBase,
	/ %Tools.SHBuild $=
	(
		(
		+ $dev "%common.sh" $=
		(
			+ "functions %(SHBuild_Pushd, SHBuild_Popd) for silently \
				restoring directory",
			+ "function %SHBuild_EchoVar to output colored variable value",
		);
		+ "%common-bootstrap.sh" $=
		(
			+ "shell variable definitions for building",
			+ "colored variable value output",
			+ "allowed overriding %(CXX, CXXFLAGS, LDFLAGS)"
		);
		$dep_to "common build scripts"
		),
		/ @ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)" $=
		(
			* $build "linking failure" $since b535,
			(
			$dep_from "common build scripts";
			/ "implemented" ^ "common build scripts";
			+ $comp "support for variable value output"
			)
		),
		/ %Main $=
		(
			(
			$dep_from "%TraverseChildren" @ %YFramework.YSLib.FileSystem;
			/ DLD "simplified traverse implementation" ^ "%TraverseChildren",
			)
			+ $dev "data members for setting compiler" @ "class %BuildContext",
			+ "printed message when ignored non source files for compiling",
			(
			$dep_from %YBase.YStandardEx.Concurrency;
			/ $dev "simplified implementation of job control"
				^ "%ystdex::task_pool",
			(
			* "missing parallel compiling synchronization with linking" $since
				b520;
				// Thus the 'ar' command might or might not be executed.
			+ "printed message for unfinished tasks"
			)
			),
			- $dev "static assertions for character types",
				// %YFramework.YCLib.FileSystem is already included.
			/ "simplified message printing" $=
			(
				/ @ "function %PrintInfo" $=
				(
					+ DLD "level parameter with default argument 'Notice'",
					^ "implemented" ^ "%FetchCommonLogger" ~ "%YTraceDe"
						// This trace is for users rather than developers, so \
							the source line information is not needed. The \
							source line is now to be not shown regardless of \
							the build configuration.
				),
				- DLD "function %PrintError",
					// Use %PrintInfo instead.
				* "duplicate call of %MBCSToMBCS to perform encoding \
					conversion from UTF-8 to current code page" $=
				(
					@ "function %PrintException" $since b519,
					@ "function %PrintInfo" $since b520
					// Since the logger has taken over the output and \
						converted the output in custom handler, there should \
						be no redundant conversion elsewhere.
				),
				/ DLD "warning message" ^ "logging" ~ "direct use of %cerr",
				/ "logging for warning message" $=
				(
					^ "%cerr" ~ "%cout",
					^ "colored %platform::Consoles::Yellow output"
				)
			),
			* "missing newline at end of some options" @ "function %PrintUsage"
				$since b520,
			/ @ "function %PrintException" $=
			(
				* "wrong %FileOperationFailure handling" $since b477,
					// Probably infinite recursive until stack overflow.
				- "transparent handling %std::bad_cast"
			)
		)
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %Concurrency $=
			(
				/ $dev "improved strict ISO C++ code compatibility"
					$= (+ "including <functional>, <memory> and <mutex>"),
					// For %std::make_shared and %std::bind used in \
						implementation in template. The program temporarily is \
						not ill-formed even if these headers are missing when \
						instantiated, for libstdc++'s <thread> and <future> \
						including <functional>, <thread> including <memory>, \
						<condition_variable> and <future> including <mutex>.
				(
				+ "alias template %packed_task_t";
				+ "function templates %(pack_task, pack_shared_task)"
				),
				(
				+ "function template %wait_to_enqueue, function %size_unlocked"
					@ "class %thread_pool";
				+ "class %task_pool"
				)
			),
			* $dev "wrong %yconstfn" @ "function templates %chain_apply"
				@ %Functional $since b537,
			* $dev $build "constructor templates" @ "class %mixin" @ %Mixin
				$since  b477 $=
				// G++ 4.9.1 did not detect these errors but Clang++ 3.5 \
					complained.
			(
				* "missing base class pack expansion" @ "ctor-initializer"
					@ "constructor template with 1 argument",
				* "%enable_if depended with no template parameters of 4 \
					constructors"
					$= (+ "'sizeof(tp)' before operand of 'sizeof...(_tBases)'")
			),
			- DLD "redundant second template argument" @ "%enable_if_t"
				$effective @ "%(String, Functional)",
				// Multiple overloading with %enable_if_t are not touched to \
					avoid ambiguity.
			/ "default template argument" @ "alias template
				%exclude_self_ctor_t" @ %TypeOperations -> 'void' ~ 'int',
				// To be as same as %enable_if_t.
			/ %Exception $=
			(
				* "%std::terminate called if there is exception uncaught"
					@ "function template %raise_exception" $since b522,
				+ "function templates %(iterate_exceptions, \
					get_nested_exception_ptr)"
			),
			/ @ "class template %used_list_cache" @ %Cache $orig
				@ "class template %GMRUCache" @ %YFramework.YSLib.Core.Cache $=
			(
				* "argument ignored" @ "function %set_max_use" $since b521 $orig
					"function %SetMaxUse" $since b461,
				* "missing erasing inserted of cache item when throwing"
					@ "function template %emplace" $since b461
			)
		),
		/ %Test.Timing $=
		(
			* DLD "missing 'std::' for 'clock()' call"
				@ "function templates %once_c, total_c" $since b319,
			+ "function templates %(average_elapsed, average_in_duration)"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "default argument '""' for string parameter"
				@ "constructor %LoggedEvent" @ %Core.YException,
			/ "constructor" @ ("class %UnsupportedImageFormat" @ %Adaptor.Image,
				"class %MessageException" @ %Core.YMessage, "class %BadEvent"
				@ %UI.YWidgetEvent)
				-> "inherited constructor %LoggedEvent::LoggedEvent",
				// See revision b471.
			/ %Service.FileSystem $=
			(
				+ "4 function templates %Traverse";
				+ "function template %TraverseChildren",
				/ @ "function %ListDirectory" $=
				(
					(
					$dep_from "%Traverse";
					/ DLD "implemented" ^ "%Traverse",
					),
					* "missing 'YF_API'" $orig $since b414 @ %YFileSystem
				),
				+ "2 functions %DeleteTree"
			)
		),
		/ %YCLib_(MinGW32).MinGW32GUI $=
		(
			+ "function %GetParent" @ "class %WindowReference";
			+ 'using WindowReference::GetParent;' @ "class %HostWindow"
		),
		/ "selection of string parameters for overloads" @ "function templates \
			%(strdup, ucsdup)" @ %CHRLib.CharacterProcessing $=
		(
			/ "limited selected parameter to be class instance"
				^ DLD 'ystdex::enable_string_class_t',
			^ "subscription" ~ "%c_str";
			* $comp "non overloaded non-class argument selected" $since b535
		),
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				+ $dev "static assertions for character types",
				(
				/ @ "class %FileOperationFailure" $=
				(
					/ "inherited %std::system_error" ~ "%std::runtime_error";
					/ "constructor"
						-> "inherited constructor %system_error::system_error";
					/ $comp "single empty message is not allowed and made the \
						class not meet %DefaultConstructible"
				);
				/ "distinguished error code thrown with exception \
					%FileOperationFailure"
				),
				/ @ "function %u16getcwd_n" $=
				(
					/ "set %errno to %EINVAL when buffer pointer is null or \
					size \
						is zero",
					/ @ "!platform %Win32" $=
					(
						/ "set %errno to %ERANGE when size is too small to \
							contain the converted string",
						/ "set %errno to %ENOMEM when allocation failed",
						* "memory leak" $since b304 $orig @ %YCommon
					)
				)
			);
			(
			$dep_from "%FileOperationFailure" @ %FileSystem;
			/ "distinguished error code thrown with exception \
				%FileOperationFailure" @ "constructor %MappedFile"
				@ %MemoryMapping
			)
		)
	)
),

b537
(
	/ %YReader $=
	(
		/ "key %X handling" @ "class %ShlExplorer" $=
		(
			(
			/ "responded by %KeyDown" ~ "KeyPress";
			* $comp "no response on key %X when focused in file list" $since
				b531
			),
			/ "explicitly request focus"
				// This would cause the menu to be hidden, distinctive with \
					than previous behavior.
		),
		/ DLD %(ShlExplorer, ShlReader) $=
		(
			$dep_from "removal of menu ownership";
			/ "owned menu objects by data members of %unique_ptr instances";
			/ "menu access" ^ "data members" ~ "%MenuHost member functions";
			$dep_to "removal of menu access from host"
		)
	),
	/ %YFramework.YSLib $=
	(
		/ @ "class template %GHandlerAdaptor" %Core.YEvent $=
		(
			+ "template specialization for parameter %_type with \
				%void";
			+ $design "simplified main template by inheritance %void \
				specialization",
			+ "explicitly defaulted (copy, move) (constructor, %operator=)"
		),
		/ %UI $=
		(
			/ %YMenu $=
			(
				+ 'yconstexpr' @ "object %DefaultMenuZOrder",
				/ @ "class %MenuHost" $=
				(
					(
					- "%operator+= with %ValueType parameter";
					- "alias declaration %ValueType"
					),
					(
					- "ownership of menus";
					* $comp "menu object leak" @ "%operator+=" $since b214;
					$dep_to "removal of menu ownership"
					),
					(
					^ DLD "implemented" ^ "%MLinearUIContainer";
					- "protected data member %mMenus";
					- "using alias %(MenuMap; ItemType)"
					),
					(
					/ "type of data member %Roots"
						-> 'map<IWidget*, Menu*>' ~ 'map<IWidget*, Menu::ID>',
					(
					$dep_from "removal of menu access from host";
					- "function %operator[]",
					/ "parameter %Menu::ID" @ "functions %(operator-=, \
						IsShowing, Contains)" -> 'Menu&',
					- "functions %(Show, Hide) with %Menu::ID parameter"
					);
					$dep_to "removal %Menu::ID @ %MenuHost"
					),
					/ DLD "initialized %Roots" ^ "brace-initializer"
						~ "ctor-initializer",
					- 'virtual' @ "destructor",
					+ "assertions" @ "function %(Show, Hide) with 'Menu&' \
						parameter"
				),
				/ @ "class %Menu" $=
				(
					(
					- "member function %GetID",
					- "%ID parameter" @ "constructor",
					- DLD "menu identifier",
					$dep_from "removal %Menu::ID @ %MenuHost";
					- "using alias %ID"
					),
					/ "function %operator[]" -> "%at"
						// To conform the exception handling style of standard \
							library API.
				)
			),
			/ @ "classes %(MLinearUIContainer, MUIContainer)" %YUIContainer $=
			(
				/ "access control of all protected (constructors, \
					member functions)" -> 'public',
				* $lib $design "missing updating assertion strings"
					@ "member function %operator-=",
				+ "member function %clear"
			)
		),
	),
	/ %YBase.YStandardEx.Functional $=
	(
		+ 'const' @ "2 member functions %operator()"
			@ "2 specializations @ class template %xcrease_t",
		+ "2 function templates %chain_apply",
		(
		+ "class template %composed",
		+ "function template %compose"
		),
		+ "class template %(addressof_op, mem_get)"
	)
),

b536
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ %GUI $=
			(
				/ @ "class %GUIState" $=
				(
					* "spelling error" @ "data member" $since b511
						$= (/ "%ExteralTextInputFocusPtr"
							=> "%ExternalTextInputFocusPtr"),
					/ $lib $design @ "member functions %(ResponseCursorBase, \
						ResponseKeyBase)" $=
					(
						^ $dev "%std::ref" ~ "direct use of pointer for \
							iteration",
						- "assertion for null pointer after iteration for \
							%Tunnel routed event"
					)
				)
				/ DLD "implemented inline functions %IsFocusedByShell" @ %YGUI
					^ "macros %(PDefH, ImplRet)",
			),
			/ %YUIContainer $=
			(
				^ DLD "%std::ref" ~ "direct use of pointer for iteration"
					@ "all 2 functions %FetchTopLevel",
				/ @ "classes %(MLinearUIContainer, MUIContainer)" $=
				(
					/ 'using ItemType = IWidget*;'
						-> 'using ItemType = std::reference_wrapper<IWidget>;',
					- $lib $design "assertion for null pointer",
					/ DLD "implemented functions %Contains" ~ "%std::find",
					/ DLD "simplified indirection implementation"
				)
			)
		),
		/ DLD "implemented function %Contains" @ "class template %GEvent"
			@ %Core.YEvent ^ "%std::count" ~ "%std::find",
		/ @ "functions %(OnKey_Bound_TouchUp, \
			OnKey_Bound_TouchDown, OnKey_Bound_Click)" @ %YControl $=
		(
			/ DLD "reused common implementation",
			/ "allowed %std::function and %std::cast propogation out of \
				%Control::BoundControlPtr"
		)
	),
	/ %YBase.YStandardEx $=
	(
		+ "3 function %operator()" @ "struct %is_equal" @ %Functional,
		/ %Iterator $=
		(
			+ "function template %get" @ "namespace %iterator_transformation",
			+ 'yconstexpr struct get_tag{} get_get{};';
			+ "function template %operator| for %get_tag"
		)
	)
),

b535
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ $dev $doc "explicitly allowing ADL calls"
				@ "function templates %(Blend, Composite)" @ %Service.YPixel,
			/ %UI $=
			(
				* "wrongly reset view when handling %TouchDown"
					@ "class %TreeList" @ %TreeView $since b534
					$= (/ "implemented" ^ "%UpdateView" ~ "%ResetView"),
				/ %ListControl $=
				(
					* "missing committing invalidation of unit control"
						@ "function %UpdateView" @  $since b530,
						// Only effective when buffered renderer is set.
					$dep_from %Viewer,
					* $comp "missing invalidating first line when %ResetView \
						called" @ "class %MTextList" @ %ListControl $since b530
						// Because the shared index is buffered, it would be \
							checked to perform iteration only when the new \
							value is not equal to old one. If it was 0 and not \
							reset, the text of line with index 0 would not be \
							updated.
				),
				* "missing reset shared index" @ "member function \
					%AMUnitList::ResetView" @ %Viewer $orig(%TextList)
					$since b527
			)
		),
		/ %CHRLib.CharacterProcessing $=
		(
			* "buffer overrun" @ "function %strdup" $since b475,
			/ @ "(functions, function templates) %(strdup, ucsdup)" $=
			(
				+ "functions with %size_t parameter";
				/ "functions without %size_t but %Encoding"
					-> "inline functions",
				/ @ "function templates" $=
				(
					+ "%Encoding parameter",
					/ "implemented" ^ "%length"
				)
			),
			- "function %ucsdup to copy UCS-2 string"
				// This is redundant, just use constructor of \
					%basic_string<ucs2_t> instead.
		)
	)
	/ $dev $doc "normalized Doxygen comments by explicitly filtered regular \
		expression '\\(defgroup|ingroup|name|def|fn|author|par|sa|since|version\
) .*[，、：；—“”‘’。]'" $=
		// %Documentation::Designation @6.1.3.
	(
		* "wrong directive '\since' used" ~ '\brief' @ "Doxygen comments"
			@ "member %BorderResizer::Margin" @ %YFramework.YSLib.UI.Border
			$since b444,
		/ "remove '。' at end of the directives" $effective
			@ %(YBase.YStandardEx.(Any, Functional, Iterator),
			YFrameowrk.Helper_(Android, DS))
	),
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ "macros %(__has_builtin; YB_ABORT; YB_ASSUME)",
			+ DLD "prefix '_'" @ "macro parameters"
		),
		/ @ "macro definitions %(yconstraint, yassume)" @ % CAssert $=
		(
			/ "explicitly required exactly one macro parameter",
			(
			$dep_from "%YB_ASSUME";
			/ "expanded" ^ "%YB_ASSUME" @ "!defined %NDEBUG"
			),
			/ "macro definition %YAssert" @ "!defined %YB_Use_YAssert" $=
			(
				/ "expanded" ^ "%yassume";
				* $comp "wrong argument of %assert" $since b495
					// This is OK when the macro %assert of C standard library \
						is used because ISO C specified it is not used.
			)
		)
	)
),

b534
(
	/ %YFramework.YSLib.UI $=
	(
		/ %TreeView $=
		(
			/ @ "class %TreeList" $=
			(
				/ $lib "optimized non branch or expanded %CursorOver handling",
					// This reduces unnecessary highlight invalidation on \
						indent boxes.
				+ "default argument '= size_t(-1)'" @ "function %Bind",
				+ "function %BindView"
			),
			+ "class %TreeView"
		),
		+ "nonnull assertion" @ "functions %(GetController, GetRenderer, \
			GetView)" @ "class %Widget" @ %YWidget,
		/ @ "class %ListBox" @ %ComboList $=
		(
			/ "implemented content control data member"
				^ "%unique_ptr<TextList>" ~ "%TextList";
			+ "protected constructor with parameter %unique_ptr<TextList>&&",
			(
			+ "function %GetTextListRef";
			/ "implemented member functions" ^ "%GetTextListRef"
				~ "content control data member"
			- "all 'ynothrow'" @ "member functions calling %GetTextListRef"
			)
		),
		* "missing call of %ResetView after expanding or collapsing branches"
			@ "class %TreeList" $since b531
	),
	/ $dev $doc $term "normalized" $=
	(
		/ "all 7 '额外说明', 19 '另有说明', 11 '另行说明', 2 '另外说明'"
			-> '另行约定',
		/ "all 3 '附加说明' exception in Doxygen directive" -> '另行约定',
		/ "normalized by explicitly filtered regular expression \
			pattern '[^ （，例形]如[^ 上下何果]', \
			'若无[^法效(歧义)(容器)(父部件)]'" $=
		(
			/ "all 20 '如无'" -> '若无';
			(
			/ "all '若无另行'" -> '除非另行';
			/ "other 3 '若无'" -> '除非',
			),
			/ "other prepositions rewriting performed"
				// E.g. "'如' as prefix of a sentence" -> ('若'|'例如').
		),
		/ "all '特别(说明|指明)'" -> '另行约定',
		/ "all 4 '统一赋值'" -> '合一赋值'
			// To be same as in %Documentation::CommonRules;
	),
	/ %YReader $=
	(
		(
		$dep_from %YFramework.YSLib.UI.TreeView;
		+ "classes %(TreeList, TreeView) support"
			@ "function %FetchWidgetLoader" @ %Shells
		),
		/ @ "constructor %ShlExplorer" @ %ShlExplorer $=
		(
			* $design "spelling error" @ "trace string" $since b512,
			(
			$dep_from %Shells;
			+ "test for class %TreeView"
			)
		)
	)
),

b533
(
	/ %YFrameowrk.YSLib.UI $=
	(
		/ @ "class %GUIState" @ %YGUI $=
		(
			* $doc "wrong comment on %WidgetIdentity",
				// Actually not reset after distinguishing shared widgets.
			/ "member function %GetOldWidgetIdentity"
				=> "%GetSharedWidgetIdentity",
			/ @ "handling event %CursorOver"
			(
				/ "implemented" ^ "recording %FetchTopLevel state"
					~ "%LocateForWidget",
				* $comp "wrong %Enter position for shared widget" $since b532
			)
		),
		/ %YUIContainer $=
		(
			/ DLD "implemented inline function %LocateContainerOffset"
				^ "macros %(PDefH, ImplRet)",
			(
			+ "functions %(FetchTrace; LocateForTrace)";
			/ DLD "implemented function %LocateForWidget as inline function"
				^ "%(LocateForTrace, PDefH, ImplRet)"
				// To be generally slightly efficient to use %vector instead \
					of %list.
			)
		),
		/ @ "class %TreeList" @ %TreeView $=
		(
			(
			+ "function %GetIndentBoxSize";
			/ "implemented function %GetIndentBox" ^ "%GetIndentBoxSize",
			+ "function %GetIndentBoxBounds"
			),
			/ $lib "optimized %CursorOver handling"
				// Now the CPU time is not dedicate to invalidating and \
					repainting.
		)
	)
);

b532
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "function template %CollectNodes with parameter \
				'initializer_list<_type>'" @ %Core.ValueNode,
			/ %UI $=
			(
				+ %TreeView $=
					(+ "class %TreeList"),
				+ "macro %YFM_Android_Helper_AndroidHost" @ %YModule,
				/ @ "class %GUIState" @ %YGUI $=
				(
					/ $design "data member order",
						// Now all by alphabetical.
					(
					/ DLD "data members %(KeyHeldState, TouchHeldState, \
						DraggingOffset, HeldTimer, CursorLocation, Colors, \
						Styles) initialization" ^ "brace-or-equal-initializer";
					- "default constructor"
						// Not it is implicitly defaulted. Old 'ynothrow' \
							exception specification should be also removed.
					),
					(
					+ 'size_t WidgetIdentity = size_t(-1);';
					+ "member function %GetOldWidgetIdentity",
					/ "supported distinguishing shared widget by \
						%WidgetSwitched even if the pointer is equal";
					$dep_to "distinguishing shared widget"
					)
				),
				(
				$dep_from "distinguishing shared widget";
				+ "set switched widget state" @ "member function \
					%AMUnitControlList::MakeIterator" @ %ListControl
				)
			)
		),
		(
		$dep_from %YSLib.UI;
		+ '#include YFM_YSLib_UI_TreeView' @ %YSBuild
		)
	),
	/ %YBase.YStandardEx $=
	(
		+ "4 function templates %make_container" @ %Container,
		+ %Array,
		/ @ "class template %transformed_iterator" @ %Iterator $=
		(
			/ DLD $revert(b494) "simplified %transformer_type" !^ "%decay_t"
				// Since b529 it had been already decayed.
			(
			+ "3rd template parameter 'typename _tReference = void'";
			/ "%reference" ^ "%_tReference"
			// See $2014-09 @ %Documentation::Workflow::Annual2014.
			),
			(
			$dep_from %Array;
			/ "function templates %(make_array, forward_as_array, 4 to_array)"
				>> %Array
			)
		),
		/ $dev $design "trailing-return-type"
			@ "function template %make_move_iterator_pair" @ %Iterator
			^ "member function" ~ "ADL-based function call",
			// This is a workaround to coordinate with %(string_begin, \
				string_end) in %String. Wait for ISO C++14 to eliminate use of \
				trailing-return-type.
		+ "function templates %(insert_ordered, insert_ordered_reversed)"
			@ %Container,
		* "missing predicate binding" @ "function template %stable_unique"
			@ %Algorithm $since b531,
			// Clang++ warning: unused parameter 'pred' [-Wunused-parameter].
		+ "function template %erase_n for %iterator member" @ %Container
			// Only %iterator rather than %const_iterator is required to be \
				the parameter type of member %erase in container requirement.
	),
	+ "'using std::begin;', 'using std::end'" @ "all ADL-enabled %(begin, end) \
		calls" $effective @ %(YBase.YStandardEx.(Container, Iterator),
		YFramework.YSLib.(Core.ValueNode, UI.YStyle)),
	/ $dev $doc $term "normalized by explicitly filtered regular expression \
		pattern '[^大小等同始终多少早晚高低快慢长短先后难易由关用处位置属介适基至限\
过碍便利在(等价)(包含)(相似)(平行)(垂直)(取决)(独立)(特定)(相当)]于[^ ]'" $=
	(
		// All matching '于' as single preposition is also matching '于 '.
		/ "all 238 '对于'" -> '对',
			// Including 60 '相对于' -> '相对'.
		/ "all 3 '起始于'" -> '始于',
		/ "all 1 '终止于'" -> '终于',
		/ "all 1 '相较于'" -> '相较',
		/ "all 1 '鉴于'" -> '由于',
		/ "all 3 '保存于'" -> '保存在',
		/ $re_ex(b527) "all 2 '依赖（(.*)）于'" -> "'依赖（$1）'",
		/ "all 1 '适合于'" -> '适于',
		/ "all 1 '适应于'" -> '适应',
		/ "all 5 '对应于'" -> '对应',
		/ "all 5 '兼容于'" -> '兼容',
		/ "other prepositions rewriting performed"
			// E.g. '于' -> '在'.
	)
),

b531
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ %ListControl $=
			(
				* "%Move wrongly called for switch unit control" @ ("member \
					function %AMUnitControlList::MakeIterator" $orig("member \
					function template %AMUnitList::MakeIterator")) $since b528;
				* $comp "automatically invalidation even no cursor operations \
					performed on %TextList except when the cursor is over the \
					first line" $since b530;
					// Thus %InvalidateParent in handler of %Move for %Control \
						would be called and cause serious performance \
						regression.
			),
			* "redundant call for %UpdateView" @ "handling events %(TouchDown, \
				TouchHeld)" @ "class %TextList" $orig("events %(TouchDown, \
				TouchMove)" @ "class %YMenu" @ %Menu $since b203),
				// Also a serious performance problem due to call of \
					%Invalidate the whole control in %UpdateView. And The \
					%ViewChanged would be also called leading to misconception.
			* "handled twice %KeyDown after touch" @ "class %TextBox" @ %TextBox
				$since b530
				$= (/ "set 'e.Handled = true;'"),
			/ $lib "extracted all macro %EventT" @ %ComboList,
			* $comp "missing '&&'" @ "event argument %ScrollEventArgs \
				inherited from %UIEvent" @ "event %ATrack::Scroll" $since b201,
				// This would cause redundant copy of event argument.
			* "line segment 1 pixel than shorter than specified"
				@ "function %RectDrawArrowOutline" @ %YStyle $since b522,
			+ 'const' @ "functions %(IsShowing, Contains)" @ "class %MenuHost"
				@ %Menu
		)
		/ "assertion string" @ "member function %HBitmap::operator[]"
			@ %Adaptor.Image,
		/ %Core $=
		(
			/ %ValueNode $=
			(
				+ "2 functions %at for %ValueNode",
				/ DLD "implemented all 2 functions %UnpackToNode"
					^ "macros %(PDefH, ImplRet)",
				+ "2 function templates %at for range-access of %ValueNode"
			),
			(
			$dep_from %UI.(ComboList, Scroll),
			$dep_from "removal use of %(DeclDelegate, DeclEvent)";
			- "macros %(DeclDelegate, DeclEvent)" @ %Core.YEvent;
			)
		),
		* DLD "wrong template parameter name %_tIter did not reflecting \
			refined %InputIterator requirements for %std::accumulate",
			@ "function %FetchMaxTextWidth" @ %TextLayout $since b530
		/ "passing dereferenced value" ^ 'decltype(*first)' ~ 'decltype(*first)&'
			$effective @ ("constructor template %MIMEBiMapping" @ %ContentType,
			"member functions" ("%GEvent::operator-=" @ %YEvent,
			"%MessageQueue::Merge" @ %YMessage) @ %Core,
			"function %FetchMaxTextWidth" @ %Service.TextLayout)
	),
	(
	/ $lib "extracted all macros %(DeclDelegate, DeclEvent)" $effective
		@ (%YFramework.YSLib.UI.(ListControl, Scroll, Selector),
		YReader.HexBrowser),
	- "all redundant alias declaration %'H*Event' not occured elsewhere"
		$effective @ (%YFramework.YSLib.UI.(ComboList.ListControl, Scroll,
		Selector), YReader.HexBrowser);
	/ $dep_to "removal use of %(DeclDelegate, DeclEvent)"
	),
	/ DLD "implemented readonly iteration for non-templated containers"
		^ "%(cbegin, cend)" ~ "%(begin, end)" $effective @ (%YFramework.(
		YSLib.((Core.(YEvent, YMessage), Service.(AccessHistory,TextManager)),
		Adaptor.(YNew, Font), UI.(YUIContainer, YPanel)), NPL.SContext,
		'Helper_(Android)'.AndroidHost), YReader.(BookmarkUI, HexBrowser)),
		// See $2014-08 @ %Documentation::Workflow::Annual2014.
	/ %YBase.YStandardEx $=
	(
		+ "function templates %(qualify, unqualify)" @ %Cast,
		/ %Algorithm $=
		(
			(
			+ $dev $doc "Doxygen groups %(nonmodifying_algorithms, \
				mutating_algorithms)" @ "group %algorithms";
			/ $dev $doc "adjusted all current function templates"
				@ "group %algorithms" >> @ "group %mutating_algorithms",
			),
			/ "function template %stable_range_unique"
				-> "2 function templates %stable_unique",
			+ "function templates %(for_each_equal, for_each_if)"
		),
		+ "function template %make_reverse_iterator" @ %Iterator,
		/ @ "function templates %hash_range" @ %Functional $=
		(
			/ "parameter 'size_t&'" -> 'size_t',
			/ DLD ^ "implemented" ^ "%std::accumulate"
		),
		/ %Container $=
		(
			/ "function template %sort_unique for range" >> %Algorithm,
			* "redundant %sort_unique call and wrong %last call"
				@ "function template %sort_unique for container" $since b286,
			/ DLD "all function parameter %c" => "%con",
			/ DLD "all template parameter %_tRange" => "%_tCon",
				// No real non-container range is appeared here.
			+ "function template %replace_value for associative containers",
			+ "function template %erase_n"
		)
	)
),

b530
(
	/ %YFramework.YSLib $=
	(
		/ "function template %FetchMaxTextWidth" @ %Service.TextLayout $=
		(
			/ $revert_ex(b529) DLD "implemented" ^ "%(std::accumulate, max)"
				~ "%(std::max_element, ystdex::make_transform)";
				// To eliminate redundant evaluation with calls of \
					%FetchStringWidth.
			* $comp "wrong value calculated" $since b529
				// See $2014-08 @ %Documentation::Workflow::Annual2014.
		),
		/ "member function %Clear" => "%clear" @ ("class templates \
			%(GEvent, GDependencyEvent)" @ %Core.YEvent;
			// To necessarily meet associative container requirements.
		/ %UI $=
		(
			/ %YStyle $=
			(
				/ "split rectangle parameter to boundary and bounding box \
					parameters" @ "function %DrawArrow",
				/ "split rectangle parameter to boundary and location \
					parameters" @ "function %DrawCornerArrow"
			),
			* "position of arrow wrongly decided by clip area" @ "member \
				function %InitializeArrowPainters" @ "class %ScrollBar"
				@ %Scroll $orig("class %AScrollBar" $since b453);
			- "function %CheckConfirmed" @ "class %Menu" @ %Menu,
			/ @ "class %TextList" $=
			(
				(
				+ "member functions %(begin, end; GetChildren)";
				/ DLD "implemented control events for items"
					^ "unit control events" ~ "container control events"
				);
				(
				$dep_from %Menu;
				/ DLD "implemented %InvokeConfirmed" !^ "%CheckConfirmed";
				- "function %CheckConfirmed"
				),
				- "function %(SetSelected; CheckPoint) with 'const Point&' \
					parameter"
			)
		)
	)
),

b529
(
	/ %YBase.YStandardEx $=
	(
		(
		/ "metafunction %is_decayable" @ %TypeOperation -> "%is_decayed";
			// The new one is the opposite of the old one, which meaning is \
				more explicit.
		/ DLD "simplified static assertion" @ "implementation"
			@ "class template %thunk" @ %Functional ^ "%is_decayed"
		),
		/ %Iterator $=
		(
			/ @ "class template %transformed_iterator" $=
			(
				/ "base class",
				+ "2 static assertions to forbid template parameters not \
					decayed" ^ "%is_delayed",
				/ "simplified using aliases %(iterator_type, transformed_type, \
					reference)",
				/ "using alias %difference_type" ^ "%std::iterator_traits",
				+ "explicitly defaulted copy and move constructors"
			),
			/ "return type" @ "function template %make_transformed"
				^ "%decay_t" ~ "%array_type_decay"
		),
		/ %Memory $=
		(
			- $revert(b298) "function template %make_shared as replacement of \
				%std::make_shared",
				// See $2014-08 @ %Documentation::Workflow::Annual2014.
			+ "function template %make_shared for instances of \
				$std::initializer as parameter"
				// For convenience.
		)
	),
	/ %YFramework.YSLib $=
	(
		/ DLD "implemented function template %FetchMaxTextWidth"
			@ %Service.TextLayout
			^ "%(ystdex::make_transform, std::max_element)",
		/ %UI $=
		(
			/ %ListControl $=
			(
				/ $revert_ex(b528) 'using MTextList::GetLabelRef'
					-> 'using MTextList::LabelBrush;' @ "class %TextList",
				/ @ "class %MTextList" $=
				(
					/ "function %GetLabelRef" -> "data member %LabelBrush",
					/ $dev "unit control" -> "%Control" ~ "%Label"
				),
				(
				/ "alias declaration %IndexEventArgs" ^ "%size_t"
					~ "%MTextList::IndexType";
					// At least currently they are compatible.
				$dep_to
					"eliminating dependency of %IndexEventArgs on %MTextList"
				),
				/ @ "class %TextList" $=
				(
					/ "access control" @ "base class %MTextList" -> 'public'
						~ 'protected',
					(
					$dep_from "eliminating dependency of %IndexEventArgs on \
						%MTextList";
					/ "members %(ViewArgs, HViewEvent, ViewChanged, Selected, \
						Confirmed)" >> "class %AMUnitControlList"
					),
					- "all using aliases from %MTextList",
				),
				/ @ "class %AMUnitControlList $=
				(
					/ "access control" @ "base class %AMUnitList" -> 'protected'
						~ 'public',
					+ 'using AMUnitList::GetFullViewHeight;',
					+ 'GEvent<void(size_t)> Iterated;'
				),
				(
				- "function template %AMUnitList::MakeIterator"
					@ "class %AMUnitList";
				/ "class %AMUnitList" >> %Viewer
				),
				/ @ "class %MTextList" $=
				(
					$dep_from "%AMUnitControlList::Iterated";
					/ "function %MakeIterator" >> "class %AMUnitControlList",
					+ "assertion for index on unit widget iteration"
				)
			),
			/ @ "class %Menu" @ %Menu $=
			(
				$dep_from "%AMUnitControlList::Iterated";
				+ "enablility setting on iteration";
				/ "unit widget painting accroding to enablility of unit widget"
					// The state of item is set indirectly and client code now \
						has opportunity to modify this default behavior.
			),
			/ DLD %ComboList $=
			(
				^ "%DefGetterMem" @ "class %DropDownList"
					~ "%DefEventGetterMem",
				^ "%DefGetter" @ "class %ListBox" ~ "%DefEventGetter"
			),
			/ DLD @ "class %ATrack" @ %Scroll $=
			(
				/ "access Control" @ "events %(ThumbDrag, Scroll)" -> 'public'
					~ 'private',
				- "member functions %(GetThumbDrag, GetScroll)"
			)
		),
		+ 'using std::make_shared' @ %Adaptor.YReference,
		/ %Core.YEvent $=
		(
			- $revert(b195) "all 3 macros 'DefDepEventGetter*'",
			(
			$dep_from %UI.(ComboList, Scroll);
			- $revert(b162) "all 3 macros 'DefEventGetter*'"
			),
			- $revert(b195) "macros %(DeclEventRef, DeclDepEventRef, \
				DeclIDepEventEntry, DeclDepEvent)",
			- $revert(b162) "macro %DeclIEventEntry"
		)
	),
	/ DLD "all call of 'ystdex::make_shared'" -> "call of 'make_shared'"
),

b528
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ %TextList => %ListControl $=
				(
					(
					- 'using MTextList::GetItemPtr;' @ "class %TextList";
						// Use %GetList and its interface instread.
					- "all 2 member function %MTextList::GetItemPtr"
					),
					(
					+ "function template %MakeIterator" @ "class %MUnitList";
					/ DLD "implemented function %MTextList::MakeIterator"
						^ "%MUnitList::MakeIterator"
					),
					+ "functions %(GetSharedIndex, GetTopOffset, CheckPoint)"
						@ "class %AMUnitList",
					/ @ "class %MTextList" $=
					(
						/ "function %GetLastLabelIndex" >> "class %AMUnitList",
						+ "function %GetLabelRef",
						(
						$dep_from "class %AMUnitControlList";
						/ "base class %AMUnitList" -> "%AMUnitControlList";
						/ "function %GetUnitRef" >> "class %AMUnitControlList",
						/ DLD "text unit implementation",
						$dep_from "removal of %Unit";
						- "data member %Unit"
						),
						(
						$dep_from "removal of %GetMaxTextWidth";
						- $revert($orig(b282))
							"member function %GetMaxTextWidth" $orig(%Label)
						)
					),
					/ @ "class %TextList" $=
					(
						(
						$dep_from "function %MTextList::CheckPoint";
						/ "merged 2 functions %CheckPoint"
							^ "%AMUnitList::CheckPoint"
						),
						/ "merged 2 functions %SetSelected for point as with \
							parameter 'const Point&'",
						/ DLD "simplified implementation" @ "function %Refresh",
						(
						$dep_from "%MTextList::GetLabelRef";
						/ 'using MTextList::Unit'
							-> 'using MTextList::GetLabelRef';
						$dep_to "removal of %Unit"
						),
						(
						- 'using MTextList::GetMaxTextWidth;';
						$dep_to "removal of %GetMaxTextWidth"
						)
					),
					+ "class %AMUnitControlList"
				),
				/ "macro %YFM_YSLib_UI_TextList" @ %UI.YModule
					=> "%YFM_YSLib_UI_ListControl"
			),
			/ %Core.YGDIBase $=
			(
				/ "all parameter type %int" @ "member functions \
					%Rect::(Contains, ContainsStrict)" -> "%SPos",
				/ $re_ex(b509) DLD "implemented all 2 functions %Size::GetRef"
					^ "macros %(PDefH, ImplRet)"
			)
		),
		^ "ADL for %is_undereferenceable" @ %YFramework $effective @ ("3 \
			function templates %(FetchStringOffsets, FetchStringWidth)"
			@ %YSLib.Service.TextLayout, "2nd constructor" @ "class %Session"
			@ %NPL.SContext)
	)
),

b527
(
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			/ %TextList $=
			(
				+ "class %AMUnitList",
				/ @ "class %TextList" $=
				(
					$dep_from "%MTextList::Unit";
					+ 'using MTextList::Unit;'
				),
				/ @ "class %MTextList" $=
				(
					/ "protected data member %lblShared" -> "public %Unit",
					/ DLD "implementation" @ "function %Refresh"
						// Note now the unit widget state is not updated on \
							%Refresh.
					- $revert(b524) "data member %(Font, Margin)",
						// Just use members of 'Unit' instead.
					(
					$dep_from "class %AMUnitList";
					+ "public base class %AMUnitList";
						// With polymorphic methods.
					/ "data member %vwText" => "%vwList";
					/ "protected data members %(CyclicTraverse, vwText, \
						uTopOffset, idxShared), functions %(GetFullViewHeight, \
						GetViewPosition, GetUnitLocation, \
						AdjustOffsetForHeight, AdjustViewForContent, \
						AdjustViewLengthForHeight, ResetView)"
						>> "class %AMUnitList";
					/ "data member %CyclicTraverse" -> "using declaration",
					/ DLD "simplified implementing functions %'Adjust*'",
					/ "implemented function %GetItemHeight as overrider",
					+ "function %(GetTotal, GetUnitRef) as overriders",
					- "function %AdjustViewLengthForHeight"
					),
					- "2nd and 3rd parameter" @ "constructor"
				),
				/ $revert(b395) "base class %MHighlight"
					@ "class %MTextList" >> "class %TextList",
				- $revert(b523) "function %ResetView"
			),
			/ %Scroll $=
			(
				+ 'ynothrow' @ "abstract method %GetOrientation"
					@ "class %ATrack",
				(
				/ "merged classes %(AScrollBar, HorizontalScrollBar, \
					VerticalScrollBar)" -> "class %ScrollBar";
				* $comp $dev "wrong 'ImplI(ATrack)'" @ "member function \
					%GetOrientation" @ "classes %(HorizontalScrollBar, \
					VerticalScrollBar)" @ %Scroll $since b205 $orig("classes \
					%(YHorizontalScrollBar, YVerticlaScrollBar)"
					@ %YGUIComponent $since b171),
				* $comp "non-abstract class %AScrollBar named with prefix 'A'"
					$since b171,
					// The old abrstract class inherited %ATrack before b171.
				/ "swapped 2nd and 3rd parameter" @ "constructor %ScrollBar"
				)
			)
		),
		/ $dev "replacement" @ "macro %ImplI(...)" -> 'override' ~ 'virtual'
			@ %YBaseMacro,
		/ $dev $design / "adjust 'ImplI'" @ "member function declarations"
			!^ 'override'
	),
	/ %YBase.YStandardEx.Functional $=
	(
		+ "constructor with 'std::reference_wrapper<value_type>' parameter"
			@ "class template %thunk";
		* "ambiguity overloading resolution for callable type" $since b526 $=
		(
			/ "constructor for callable type" -> "constructor template",
			+ "constructor template for instances of 'std::reference_wrapper'",
			+ DLD 'explicit' @ "base class constructors"
		)
	),
	/ $dev $doc $term $re_ex(b462) "all '依赖于'" -> '依赖'
),

b526
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ "text drawing" @ "class %TextBox" $=
			(
				/ "performed no-op when %Text is empty",
				* "missing check for %Text and %Selection.Range" $since b485
					// Since %Text is public, the selection range can be out \
						of bounds.
			),
			(
			$dep_from %YBase.YStandardEx.Utilities;
			/ DLD "implemented member function %(TextBox, Button)::Refresh"
				@ %TextBox
				^ "lazy evaluated lambda expression";
			),
			/ %Label $=
			(
				- "base class %noncopyable" @ "class %MLable",
					// Thus it meets to %UIBrush requirement.
				(
				+ "function %GetItemHeight" @ "class %MLabel";
				+ 'using MLabel::GetAlignedPenOffset;' @ "class %Label"
				),
				+ 'using MLabel::GetItemHeight;' @ "class %Label"
			),
			* "probably range out of bounds for drawing routines like \
				%DrawHLineSeg"
				@ "function DrawTrackBackground" @ %Scroll $since b452,
				// The bounds intersection for drawing area is missing.
			/ @ %ComboList $=
			(
				/ DLD "implemented %DropDownList"
					!^ "member function %ListBox::Find";
				- $revert(b316) "member function %ListBox::Find"
			),
			/ %TextList $=
			(
				/ @ "class %TextList" $=
				(
					$dep_from %ComboList;
					- $revert(b316) 'using MTextList::Find;';
					$dep_to "removal of %TextList::Find"
				),
				/ @ "class %MTextList" $=
				(
					/ DLD "implementation" @ "member function %Refresh"
						// Note now the unit widget state is not updated on \
							%Refresh.
					(
					$dep_from "removal of %TextList::Find";
					- $revert(b316) "function %Find"
						// Just use 'std::find' on 'GetList()' instead.
					),
					- $revert(b523) "function %GetChildrenByIndices",
					+ "assertion for nonzero check" @ "function %GetItemHeight"
				)
			)
		),
		/ DLD "all local variables initialized by %ClipArea" $=
		(
			/ $re_ex(b489) "%r" => "%bounds" $effective @ (("function \
				%DrawRectRoundCorner" @ %YStyle, "member function %Refresh"
				@ ("class %ProgressBar" @ %Progress, "class %BufferedTextArea"
				@ %TextArea, "class %TextList" @ %TextArea), "function \
				template %UpdatePixels, static member function \
				%ImageBrush::DefaultUpdate" @ %YBrush, "member function \
				%BufferedRenderer::UpdateTo" @ %YRenderer) @ %UI, "function \
				templates %(BlitGlyphLines, BlitGlyphPixels)"
				@ %Service.CharRenderer),
				// To eliminate possible misunderstanding.
			/ 'const auto&' -> 'const Rect&'
				// See %Documentation::CommonRules @5.7.9. Note '::RECT' is \
					not the case.
		)
	),
	/ %YBase.YStandardEx $=
	(
		+ "constructor template to support lazy evaluation by callable object \
			as argument" @ "class template %swap_guard and its partial \
			specialization" @ %Utilities,
		+ "function templates %make_unique_default_init" @ %Memory,
		/ %Functional $=
		(
			/ @ "class template %thunk" $=
			(
				- "2nd template parameter",
				/ "fixed %operator() with no parameters",
				+ "%operator return_type"
			),
			+ "2 function template %make_thunk"
		)
	),
	(
	$dep_from %YFramework.YSLib.Scroll;
	* $comp "assertion failed when dragging color setting box"
		@ %YReader.ReaderSettingUI $since b452
		// If there is any %Track moved out of the target bounds (e.g. ones in \
			YReader text color setting box), the assertion failed.
	)
),

b525
(
	/ %YFramework.YSLib.UI $=
	(
		/ %TextList $=
		(
			/ @ "class %TextList" $=
			(
				/ DLD "simplified item background drawing" ^ "%FillRect"
					~ "%FillRectRaw";
				- "protected function %DrawItemBackground"
				(
				- $revert($orig(b205)) 'using MTextList::RefreshTextState;';
				$dep_to "removal of %RefreshTextState call of %TextList"
				),
				(
				- DLD "%MTextList::(GetTotal, SetContainer) calls";
				$dep_to "removal containers of viewer"
				),
				(
				- 'using MTextList::ViewerType;' @ "class %Textist";
				$dep_to "removal of %ViewerType";
				)
			),
			/ @ "class %MTextList" $=
			(
				(
				/ DLD "implemented function %GetItemHeight"
					^ 'GetVerticalOf(Margin)' ~ 'LineGap',
				(
				$dep_from ("removal of %RefreshTextState call of %TextList",
					"removal of %RefreshTextState call of %Menu";
				- "function %RefreshTextState"
				)
				),
				- $revert(b524) "data member %LineGap",
				(
				$dep_from "removal of %ViewerType";
				- "alias declaration %ViewerType" @ "class %MTextList"
				),
				(
				$dep_from %Viewer;
				/ "function %CheckSelected" -> ("member function \
					%SequenceViewer::CheckSelected" @ %Viewer)
				)
			),
			/ DLD "viewer calls"
		),
		(
		- DLD "calls of %MTextList::RefreshTextState" @ "classes %(TextList, \
			Menu)",
		$dep_to "removal of %RefreshTextState of %Menu"
		),
		/ %Viewer $=
		(
			/ "class template %GSequenceViewer" -> "class %SequenceViewer" $=
			(
				(
				(
				- "'GetTotal()' calls" @ "functions %(RestrictSelected, \
					RestrictView, Contains)",
				(
					- "all prefix and postfix %operator(++, --)",
					- "functions %(DecreaseHead, DecreaseSelected);
					/ "implemented functions %(SetHeadIndex, \
						MoveViewerToEnd, \
						SetSelectedIndex, AdjustForContent, GetValid, \
						IncreaseHead, IncreaseSelected)"
						^ "extra parameter 'total'" ~ "'GetTotal()' calls"
				);
				- "function %GetTotal"
				),
				(
				$dep_from "removal containers of viewer"
				- "function %SetContainer",
				)
				/ DLD "data member initialization"
					^ "brace-or-equal-initializer";
				/ "explicit constructor" -> "non-explicit explicitly defaulted \
					constructor";
				- DLD "container pointer state"
				),
				(
				$map ($lambda(T, G)(
				- "static assertion for %SizeType";
				/ T -> G;
				- "alias declaration %SizeType"
				))(("%SizeType", "%size_type"), ("%DifferenceType",
					"%ptrdiff_t"));
				- "alias declaration %ContainerType"
				),
				/ "functions %(GetLength, SetLength)" -> "data member %Length"
			),
			/ DLD "header names"
			+ DLD ".cpp file for member function implementation"
		),
		/ @ %YBrush $=
		(
			+ $dev $doc "Doxygen group %UIBrushes" @ "group %UI",
			/ @ "alias template %GBrushUpdater" $=
			(
				/ "supported variadic template arguments",
				/ "implemented" ^ "%GHEvent" ~ "%std::function"
					// This means now omitting redundant parameters is \
						supported.
			),
			- $revert(b441) "assertion" @ "function %ImageBrush::operator()"
		),
		/ @ "class %MLabel" @ %Label $=
		(
			/ "virtual function %DrawClippedText" -> "static function \
				%DefaultUpdateClippedText; data member %UpdateClippedText",
			- "virtual destructor"
				// Thus %MLabel is not a polymorphic class any longer.
			/ DLD "initialized %(VerticalAlignment, AutoWrapLine, Text, \
				Margin)" ^ "brace-or-equal-initializer" ~ "ctor-initializer",
			/ @ "function %DrawText" $=
			(
				- "color parameter",
					// Member %ForeColor is used instead.
				+ 'const'
			),
			+ "member function %operator()"
		),
		/ %TextBox $=
		(
			/ DLD "initialization" @ "%ForeColor"
				@ "class template %TextPlaceholder"
				@ %TextBox ^ "brace-init-list" ~ "= initializer-clause",
			/ "overrider function %DrawClippedText" @ "class %TextBox"
				-> "function %UpdateTextBoxClippedText"
		),
		(
		$dep_from %YBase.YStandardEx.Utilities;
		/ "explictly supported strong exception guarantee"
			@ "%(TextBox, Button, CheckButton, RadioButton)::Refresh"
			^ "%ystdex::swap_guard";
			// Thus all GUI rendering meets strong exception safety guarantee.
		),
		(
		(
		+ "data member %ForeColor" @ "class %MLabel";
		+ "color as 2nd parameter" @ "constructors %(MLabel, Button)",
		+ 'using MLabel::ForeColor;'
			@ "classes %(Label, Button, CheckButton, RadioButton, TextBox)",
		/ "foreground color directly initialized for text state rather than \
			data member %ForeColor"
			@ "constructors %(TextArea, BufferedTextArea)" @ %TextArea
		),
		+ "data member %ForeColor"
			@ "classes %(ProgressBar, Thumb, TextList, AScrollBar)",
		- "foreground color parameter" @ "constructors %(Control, Widget)";
		- "data member %ForeColor" @ "class Widget"
		),
		(
			$dep_from "%MLabel::operator()";
			/ DLD "implemented %(TextBox, Label, Button, CheckButton, \
				RadioButton)::Refresh" ^ "%MLabel::operator()"
				~ "%MLabel::DrawText"
		)
	),
	/ DLD "all 'C++14'" -> 'C++1y' !@ %Documentation::CommonRules,
		// The standard is not published yet. Do not modify rules to \
			minimalize future modification.
	/ %YBase.YStandardEx $=
	(
		/ @ %Functional $=
		(
			/ "data member %Caller" @ "template class %expanded_caller"
				=> "%caller",
			(
			+ "metafunction %wrapped_traits_t";
			+ "class template %thunk"
			)
		),
		(
		$dep_from "%wrapped_traits_t" @ %Functional;
		/ DLD "simplified implementation" @ %AnyIterator
			^ 'wrapped_traits_t<_type>' ~ 'typename wrapped_traits<_type>::type'
		),
		+ "class template %swap_guard and its partial specialization" %Utilities
	)
),

b524
(
	+ DLB '-pipe' @ "compliler and linker options" @ "Code::Blocks projects"
		@ "platform %MinGW32",
		// To get rid of most issues with size limitation of temporary \
			directory (e.g. on RAM disk).
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ $revert_ex(b523) "allowed null container pointer"
					@ "function %GetTotal" @ "class template %GSequenceViewer"
					@ %Viewer,
					// If container pointer is null, the result is zero.
				/ %TextList $=
				(
					/ @ "class %MTextList" $=
					(
						(
						+ "data members %(lblShared, idxShared); functions \
							%(GetChildrenByIndices, GetLastLabelIndexClipped, \
							MakeIterator)";
						$dep_to "text list children iterations"
						),
						(
						+ "data member %LineGap";
						/ DLD "implemented function %RefreshTextState"
							^ "%LineGap" ~ "%tsList.LineGap";
						/ "initialized function %GetItemHeight" ^ "%(Font, \
							LineGap)" ~ '%GetTextLineHeightExOf(tsList)';
						- "data member %tsList",
						),
						(
						$dep_from "removal of redundant members";
						/ "base class %MLabel" -> "data members %(Font, Margin)"
						)
					),
					/ @ "class %TextList" $=
					(
						(
						$dep_from "text list children iterations"
						+ "function %GetLastLabelIndex",
						+ 'using MTextList::MakeIterator;',
						/ "implemented function %Refresh" ^ "widget iteration \
							and function %PaintVisibleChildAndCommit";
						$dep_to "text list refresh"
						),
						(
						- "using declarations %(HorizontalAlignment, \
							VerticalAlignment, Text) from %MTextList",
						$dep_to "removal of redundant members";

						)
					)
				),
				(
				$dep_from "text list refresh";
				/ "shared widget painting event handlers" @ "constructor"
					@ "class %Menu" @ %Menu;
				- "member function %(Menu; TextList)::DrawItem";
				)
			),
			/ %Service $=
			(
				* $doc "missing parameter name for directive '\param'"
					@ "Doxygen comments" @ "function %Switch" @ "class \
					template %GAccessList" @ %AccessHistory $since b404,
				* $doc "outdated parameter name %blit for directive '\param'"
					~ "%shader" @ "Doxygen comments"
					@ "function template %BlitPixels" @ %YBlit $since b442,
				/ DLD @ "class %TextState" @ %TextBase $=
				(
					/ DLD "initialized data member %LineGap"
						^ "brace-or-equal-initializer '= 0'"
						~ "ctor-initializer",
					/ DLD "initialized data member %Pen"
						^ "braced-init-list '{}'" ~ "ctor-initializer"
				)
			)
		),
		/ %YCLib $=
		(
			(
			$dep_from %YBase.YDefinition;
			+ 'YB_NONNULL(1, 3)' @ "function %LogWithSource" @ %Debug
			),
			* $revert_ex(b501) $dev $doc "missing '\def' directive" @ "Doxygen \
				comments" @ "macro %YCL_KEYSTATE_DIRECT" @ %Input $since b501
		)
	),
	/ %YBase $=
	(
		+ "macro %YB_NONNULL" @ %YDefinition,
		/ %YStandardEx $=
		(
			(
			$dep_from %YDefinition;
			+ 'YB_NONNULL(1)' @ "function template specialization %sfmt<char>"
				@ %String
			),
			* $doc "wrong directive '\breif' used" ~ '\brief'
				@ "Doxygen comments" @ "function %iswgraph"
				@ %CWideCharacterType $since b513
		)
	),
	* "missing atomic member initialization" $effective %YFramework.Helper
		$= (^ "braced-init-list" ~ "empty ctor-initializer")
		@ ("class %Environment" @ %Environment $orig(%Host) $since b399,
		"class %WindowThread" @ %HostRenderer $orig(%Helper $impl) b428);
		// See $2014-08 @ %Documentation::Workflow::Annual2014. Similar as fix \
			@ b491. 
),

b523
(
	/ DLD "updated header search paths" @ "Visual C++ projects" $=
	(
		/ "order" @ "project %YFramework_Android",
		* "redundant slash" @ "project %YFramework" $since b518,
	),
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			/ %TextList $=
			(
				/ @ "class %MTextList" $=
				(
					(
					+ "alias declaration %ViewerType; protected data members \
						%(vwText, uTopOffset), functions \
						%(AdjustViewLengthForHeight, AdjustOffsetForHeight, \
						AdjustViewForContent, CheckSelected, ResetView)";
					$dep_to "text list model members"
					),
					/ @ "constructor" $=
					(
						+ "parameter of highlight color pair",
						/ "access control" -> 'public' ~ 'protected'
					),
					+ "function %GetUnitLocation" @ "%MTextList"
				),
				/ @ "class %TextList" $=
				(
					/ "all data members and protected base classes except \
						%MTextList" >> "%MTextList",
					+ 'using MTextList::ViewerType;',
					(
					/ "functions %(GetViewPosition, GetFullViewHeight)"
						>> "class %MTextList";
					+ "using declarations %MTextList::(GetViewPosition, \
						GetFullViewHeight)"
					),
					/ DLD "simplified implementation" $=
					(
						$dep_from "text list model members";
						/ @ "function %AdjustViewForContent"
							^ "macros %(PDefH, ImplExpr), \
							function %MTextList::AdjustViewForContent",
						/ @ "function %AdjustViewLength" ^ "macros %(PDefH, \
							ImplExpr), function %AdjustViewLengthForHeight",
						/ @ "function %CheckConfirmed" ^ "macros %(PDefH, \
							ImplExpr), function %MTextList::CheckSelected",
						/ @ "function %CheckPoint for %Point parameter"
							^ "macros %(PDefH, ImplRet)",
						/ @ "function %ResetView"
							^ "function %(MTextList::ResetView, UpdateView)",
						/ @ "function %SetSelected for %Point parameter"
							^ "macros %(PDefH, ImplRet)"
					),
					(
					$dep_from "%MTextList::GetUnitLocation";
					/ DLD "simplified implementation"
						@ "function %GetUnitBounds" ^ "function \
						%MTextList::GetUnitBounds, macros %(PDefH, ImplRet)",
					+ 'using MTextList::GetUnitLocation;'
					)
				)
			),
			+ "assertion for nonnull container pointer" @ "function %GetTotal"
				@ "class template %GSequenceViewer" @ %Viewer
		),
		* "application not exited after global application instance destruction"
			@ "platform %Android" $since b502 $=
			// And when the application reentered, it would failed on \
				assertion for nonnull pointer check for instance on debug \
				configuration or just crash on release configuration.
			$= (+ "%::ANativeActivity_finish call after %::y_android_main call"
				@ "host thread"  @ %'Helper_(Android)'.AndroidHost)
	)
),

b522
(
	/ %YBase.YStandardEx $=
	(
		+ %Exception
			$= (+ "function template %raise_exception");
		/ %Iterator $=
		(
			/ @ "class template %subscriptive_iterator" $=
			(
				/ DLD "simplified type name" @ "member function %equals"
					^ "template-name" ~ "simple-template-id",
				/ "constructor" ^ 'container_type' ~ '_tCon'
			),
			(
			+ "class template %prototyped_iterator";
			+ "function templates %operator(==, !=) for %prototyped_iterator",
			+ "function template %make_prototyped_iterator"
			)
		)
	),
	(
	$dep_from %YBase.YStandardEx.Exception;
	/ %Tools.SHBuild.Main
		$= (/ DLD "simplified implementation" ^ %YBase.YStandardEx.Exception)
	),
	/ %YFramework.YSLib $=
	(
		+ "assertions for the boundary argument"
			@ "functions %(DrawCircle, FillCircle)" @ %Service.YDraw,
			// As %(DrawPoint, DrawHLineSeg, DrawVLineSeg).
		/ %UI $=
		(
			/ %YStyle $=
			(
				+ "function %RectDrawArrowOutline",
				+ "last parameter 'bool = {}' to specify drawing outline only"
					@ "function %DrawArrow",
				+ "assertion for rotation value"
					@ "functions %(RectDrawArrow, RectDrawArrowOutline)",
				+ "functions %(RectDrawCornerArrow, \
					RectDrawCornerArrowOutline; DrawCornerArrow)"
			),
			/ $doc "explicitly allowed %IWidget::GetChildren to optimize out \
				children out of boundary",
			/ "class %TextList" @ %TextList $=
			(
				/ "function %DrawItems merged to %Refresh",
				/ DLD "member functions order",
				+ "member function %GetUnitBounds"
			),
			/ DLD "implemented member function %Renderer::CommitInvalidation"
				@ %YRenderer ^ "%(PDefH, ImplRet)",
			/ %YWidget $=
			(
				+ "function %PaintChildAndClip";
				/ "function %PaintVisibleChild"
					-> "inline function %PaintVisibleChildAndClip"
			),
			/ "class %MTextList" @ %Label >> %TextList
		),
		/ "explicitly specified unsigned integer type as underlying type"
			@ "enum %Rotation" @ %Core.YGDIBase
	)
),

b521
(
	/ %YFramework $=
	(
		/ @ "platform %Win32" @ %YCLib.NativeAPI $=
		(
			+ "macro definition %NOMINMAX when undefined before including \
				<Windows.h>",
				// To get rid of macros %(min, max) pollution.
			/ "macro definition %mkdir" -> '#undef mkdir',
			/ "function 'int makedir(char const* dir, ::mode_t)'"
				@ "namespace %platform_replace"
				-> "function 'int makedir(char const* dir, ::mode_t = 0777)'"
		);
		/ %Helper $=
		(
			(
			/ %Host => %Environment
				$= (/ "class %Host::Environment" -> "%YSLib::Environment with \
					minimal support for non-hosted platforms");
			/ @ %GUIApplication $=
			(
				/ "call of functions from %Initialization"
					>> "class %Environment"
				/ "function 'Environment& GetHost()'" @ 'YF_Hosted'
					-> "'Environment& GetEnvironment() ynothrow' regardless of \
					%YF_Hosted",
				/ "function %Host::FetchEnvironment" >> "namespace %YSLib",
			)
			),
			+ $dev "declaration of class %Environment" @ '!YF_Hosted'
				@ %YGlobal,
			+ DLD "environment support" @ "class %InputManager"
				@ %InputManager,
			/ "macro %YFM_Helper_Host" @ %YModule => "%YFM_Helper_Environment",
			/ "class %Environment" @ %Environment $=
			(
				/ "static function %HostLoop"
					>> ("class %WindowThread" @ %HostRenderer);
					// Hosted environment only.
				/ DLD "implemented function %EnterWindowThread"
					^ "macros %(PDefH, ImplExpr)"
			),
			* "DS implementation hack" @ "platform %Android" $since b385 $=
				// The screen mapping is specific for platform %DS. Though \
					since b385 it is a 'FIXME', but there is even no support \
					for earlier version.
			(
				/ "class %Environment" @ %Environment $=
				(
					+ "data member %MapPoint";
					/ "implemented %MapCursor" ^ "%MapPoint"
				);
				/ DLD "set environment %MapPoint handler"
					@ "class %DSApplication" @ %DSMain
			)
		)
	),
	(
	/ %YFramework.YSLib.Core.Cache
		-> %YBase.YStandardEx.Cache $=
	(
		/ "name of header %Cache.hpp" => "cache.hpp",
		/ "class template %YSLib::GMRUCache" -> "%ystdex::used_list_cache" $=
		(
			/ "type alias %UseList" => "%used_list",
			/ "type alias %UseCache" => "%used_cache",
			/ "type alias %Map" => "%map_type",
			DLD !^ "%DefDeMoveCtor",
			/ "function %GetMaxUse" => "%get_max_use" !^ "%DefGetter",
			/ "function %SetMaxUse" => "%set_max_use",
			DLD ^ "%yassume" ~ "%YAssert",
			/ DLD "minority member renaming"
				// To conform the naming convention.
		),
		/ "function template %YSLib::CacheLookup" -> "%ystdex::cache_lookup"
			$= (/ "thrown exception %LoggedEvent" -> "%std::runtime_error")
	);
	- "macro %YFM_YSLib_Core_Cache" @ %YFramework.YSLib.Core.YModule
	)
),

b520
(
	/ %YFramework $=
	(
		/ %'YCLib_(MinGW32)' $=
		(
			+ %Consoles @ 
				$= (+ "class %WConsole"),
			- DLD "unused redundant internal function" @ %Win32GUI,
			* DLD "missing specifying return type" @ "lambda expression with \
				multiple return statements" @ "constructor %Win32Exception"
				@MinGW32 $since b435,
			+ "macro %YFM_MinGW32_YCLib_Consoles" @ %YModule
		)
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ DLD "simplified implementation"
					@ "checkbox background drawing" @ %Selector,
					// Removed unnecessary calculation.
				- DLD "unused redundant internal constant object" @ %TextList
			),
			/ %Core.YEvent $=
			(
				/ "member function %operator==" @ "class template %GHEvent"
					-> "friend function",
				+ "2 function template %operator(==, !=) for %GHEvent with \
					%std::nullptr_t",
				+ "function template %operator!= for %GHEvent"
			),
			* "wrong return type" @ "member function %TextFile::GetBOMSize"
				@ %Service.TextFile $orig(%Core.YFile_(Text)) $since b138
				$= (/ "return type" -> "%size_t" ~ "%u8")
				// The member type had been already changed ago but the getter \
					wasn't be synchronized.
		),
		/ %YCLib $=
		(
			+ "(struct %HandleDeleter; alias declaration %UniqueHandle; \
				function %MakePipe)" @ %Host,
			/ $dev "distinguished Win64 from 32-bit Windows platforms"
				@ %Platform $=
			(
				+ "platform %Win64 with macro %YF_Platform_Win64 capable with \
					%(YCL_Win32, YCL_MinGW, YF_Hosted)",
				(
				+ "platform %MinGW64 with macro %YF_Platform_MinGW64 capable \
					with %(YCL_Win64, YCL_Win32, YCL_MinGW, YF_Hosted)";
				+ $doc "Doxygen group definition" @ "platform %MinGW64"
				)
			),
			/ "static assertion for screen measurement types" @ %Video $=
			(
				/ "implementation" ^ "%ystdex::integer_width"
					~ "%std::numeric_limits::max";
				/ $comp $workaround "support for implementation without \
					constexpr member functions of instants \
					%std::numeric_limits",
					// Though constexpr functions are mandated already by ISO \
						C++11, some implementations are still conforming now.
				/ $comp "eliminated signed and unsigned integer comparing"
					// Otherwise it may issue a warning which is hard to \
					overcome.
			)
		),
		* DLB "ill-formed code due to narrow conversion when %std::size_t \
			converted to 'unsigned long'" (@ %'YCLib_(MinGW32)'.MinGW32
			$orig(%Helper)) $since b387,
			// It would fail to compile for Win64.
		/ DLD "simplified implementation" @ "member function \
			%InputManager::DispatchInput" @ %Helper.InputManager
			// Also to eliminate Visual C++ warning C4457.
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			(
			$dep_from %'YCLib_(MinGW32)'.Consoles;
			/ DLD "implementation of colored printing"
				^ "%platform_ex::WConsole" ~ "Windows API";
			* $comp "color pollution of external console" $since b519
			),
			/ "always set logging handler in spite of number of command line \
				arguments",
				// Because the "catch" clause was also using logging.
			/ "log level output" $=
			(
				/ DLD "implementation" ^ "std::showbase",
				/ "shown uppercase in hexadecimal numbers"
			),
			/ "explicitly allowed multiple occurrence of options"
				@ "usage information",
			(
			+ "option '-xid,'";
			$dep_to "subdirectory ignorance"
			),
			(
			$dep_from %YBase.YStandardEx.Concurrency;
			+ "refactored" ^ "context class with %ystdex::thread_pool";
			+ "option '-xj,' for multitasking with max number of paralleled \
				jobs" ^ "threading"
			),
			* DLD "inconsistent use of 'u8' prefix for output" $since b519
			- DLD "assertion for arguments number"
		),
		/ $lib @ "%SHBuild-YSLib.sh" $=
		(
			(
			* "wrong options for build static libraries"
				$since b474 $=
			(
				- '-DYB_BUILD_DLL' @ "%YBase build command" $=
				/ @ "%YFramework build command" $=
				(
					- '-DYB_DLL -DYF_BUILD_DLL',
					- '-lYBase'
				)
			),
			+ "synchronized options with Code::Blocks projects setting" $=
			(
				+ "options '-Wcast-align -Winit-self -Wmain \
					-Wmissing-declarations -Wmissing-include-dirs \
					-Wnon-virtual-dtor -Wredundant-decls -ffat-lto-objects' \
					for all 2 build commands",
					// But no '-Wno-literal-suffix -Wno-unused-local-typedefs'.
				+ "option '-pedantic-error'" @ "%YFramework build command"
			);
			/ DLD "extracted common options"
			),
			(
			$dep_from "subdirectory ignorance";
			/ "ignored by options '-xid,alternative -xid,data -xid,include'";
			* $comp "'alternative' directory wronly compiled into library \
				%YFramework" $since b474
			),
			+ DLB "parameter support"
			+ "option echo"
		)
	),
	/ %YBase $=
	(
		/ 'using raw_tag = empty_base<>;' @ %YBase.YDefinition
			-> "empty struct %raw_tag",
			// Otherwise the constructor of %YSLib::Thumb::UI using this type \
				would make GCC 4.9.0 or GCC 4.9.1 crash (segmentation fault).
		/ %YStandardEx $=
		(
			* "wrongly ignored predictor %comp" @ "function template \
				%begins_with" @ %YStandardEx.String $since b519,
				// Though default behavior is not affected.
			+ %Concurrency
				$= (+ "class %thread_pool");
				// Currently only hosted implementation of G++ and libstdc++ \
					is supported.
		),
		/ DLD %YTest $=
		(
			* "missing UTF-8 BOM" @ "header %test.h" $since b519,
				// Since there is "©" which is non representable by ANSI \
					codepage, Visual Studio would issue a warning.
			* "missing UTF-8 BOM" @ "header %timing.h" $since b319,
			/ $doc "Doxygen group definition" @ %Timing >> %Test
		)
	),
	/ $dev $build "toolchain and library using" @ "platform %MinGW32" $=
	(
		$dep_from %YBase.YDefinition;
		// Libraries have to be rebuilt, otherwise the LTO version would be \
			incompatible, as: "lto1.exe: fatal error: bytecode stream \
			generated with LTO version 2.2 instead of the expected 3.0".
		^ $dev $build $re_ex(b453) "MinGW[gcc version 4.9.1 (Rev1, Built by \
			MSYS2 project)] mingw32/mingw-w64-i686-gcc-4.9.1-1"
			~ "MinGW[gcc version 4.8.2 (Rev7, Built by MSYS2 \
			project)] mingw32/mingw-w64-i686-gcc-4.8.2-7";
			@ "platform %MinGW32",
			// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
				Exceptions implementation: Dwarf2.
		/ "recompiled library %FreeType",
		/ "recompiled library %FreeImage" $=
		(
			/ "updated base library 3.16.0" ~ "3.15.4";
			/ "merged old modification",
			* "wrong location of file %GetType.cpp" $since b431
				// Thus ignored by build script since it used precise list of \
					files.
				$= ("%Source/GetType.cpp" >> "%Source/FreeImage"),
			/ "updated file %Makefile.mingw as base version 3.16.0" $=
			(
				/ 'LIBRARIES = -lwsock32 -lws2_32' -> 'LIBRARIES = -lws2_32',
				+ '-DDISABLE_PERF_MEASUREMENT' @ "%CFLAGS"
			),
			/ 'VER_MINOR = 15.4' -> 'VER_MINOR = 16.0' @ "file %Makefile.srcs",
			^ "libpng-1.6.12 with old libpng-1.6.3 standard configuration \
				header file %Source/LibPNG/pnglibconf.h" ~ "libpng-1.6.10",
			^ "libjpeg-turbo 1.3.1 with old configuration headers"
				~ "libjpeg-9a"
		),
		/ @ "Code::Blocks projects" $=
		(
			+ '-ffat-lto-objects' @ "release configurations",
				// See $2014-07 @ %Documentation::Workflow::Annual2014.
			/ "made '-flto=jobserver' only effective in release configurations"
		)
	),
	/ "updated %Readme.zh-CN.txt with information test project and %SHBuild",
	/ @ "made sure 'inline' is not omitted for all \
		extension-namespace-definition of inline namespaces" $effective
		%platform_ex::Windows @ %'YCLib_(MinGW32)',
		// See %Documentation::CommonRules @5.5.8.3. Clang++ still complains \
			about it.
	/ DLB "workaround possible ambiguity" $effective @ %YFramework.YSLib $=
	(
		// Clang++ complains about them.
		/ $effective @ %Service.YPixel $=
		(
			/ "explicitly specified functional notation of conversion to \
				'_tAlpha'" @ "function templates %CompositeComponentOver"
				@ "class templates and specializations %(GPixelCompositor,
				GPixelCompositor<1, _vSrcAlphaBits>, GPixelCompositor<1, 1>, \
				GPixelCompositor<_vDstAlphaBits, 1>)",
			/ "explicitly specified functional notation of conversion to \
				'_tSrcAlpha'" @ "function templates %CompositeComponentOver"
				@ "class templates and specializations %(GPixelCompositor, \
				GPixelCompositor<_vDstAlphaBits, 1>)"
		),
		/ "explicitly specified functional notation of conversion to 'HSL'"
			$effective @ "functions %(HSLToColor, RollColor)" @ %UI.YStyle
	),
	/ DLD %YReader $=
	(
		* "wrong use of 'yconstexpr' on closure object"
			@ "constructor %SettingPanel" @ %ReaderSettingUI $since b390,
		/ %ShlExplorer $=
		(
			* "missing explicit conversion on enumerator of scoped enumeration"
				$since b410,
			- "unused redundant internal constant object"
		)
	),
	* $dev $build "wrong format string used in call of function '*printf'"
		@ "strict ISO C++ code compatibility" $=
	(
		* @ ("function %InitializeSystemFontCache" @ %Helper.Initialization
			$since $before b132, ("member function %MemoryList::Print"
			@ %YSLib.Adaptor.YNew $since b173) $effective @ %YFramework
			// The %std::allocator uses %std::size_t as %size_type, which is \
				%size_t in ISO C standard library and fit for '%zu' for
				%fprintf.
			$= (/ "format" ^ '%zu' ~ '%u'),
		* @ "function %OnExit_DebugMemory_print" @ %Main $since
			$orig("function %OnExit_DebugMemory" @ %platform.DS.Main) b300
			$= (/ "format" ^ '%zu' ~ '%i'),
		/ $effective %YReader $=
		(
			* @ "member function %HexViewArea::Refresh" @ %HexBrowser $since
				b253
				$= (/ "format" ^ '%tX' ~ '%X'),
			* @ "member function %ReaderBox::UpdateData" @ %ShlReader $since
				b271 $=
			(
				/ "format" ^ '%2zu' ~ '%2u',
				/ "argument" ^ "explicitly cast to %std::size_t"
			)
		)
	),
	* DLB "wrong implementation due to ill-formed code when %std::size_t is 
		not alias of 'unsigned' causing no suitable %min found"
		@ (%YFramework.YSLib.Service.TextFile $since b290,
		%YReader.Shells $since b183)
	// It would fail to compile for Win64.
	/ "macro %YCL_MinGW32" => "%YCL_MinGW"
		// See $2014-07 @ %Documentation::Workflow::Annual2014.
),

b519
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ DLD "simplified input boundary calculation" @ "DS host window"
				@ "platform %Win32";
			- "member function %Host::Window::GetInputBounds" @ %HostWindow
		),
		/ %YSLib $=
		(
			/ DLD "implementation" @ "constructor %Typeface" @ %Adaptor.Font
				!^ "%platform::yprintf",
				// Error code is now embedded to the description string in \
					exception object.
			/ DLD @ "functions %(PlotHLineSeg, PlotVLineSeg)" @ %Service.YDraw
				$=
			(
				/ "implementation of screen metrics" ^ "%SPos" ~ 'auto',
					// All arguments of %RestrictInInterval should be the same \
						type.
				/ $revert(b517) !^ "cast to 'SDst' for comparison"
					// To eliminate [-Wsign-compare].
			),
			/ %UI $=
			(
				/ DLD "implemented function %DrawTrackBackground" @ %Scroll
					^ "cast to 'SPos'",
				/ @ "member function %TextList::LocateViewPosition" @ %TextList
					$=
				(
					* "wrong value restricted when view height is less than or 
						equal to the height" $since b261;
					* $comp "wrong value restricted when view height is zero"
						$since $orig(%UI.YMenu) b203
				)
			),
			/ @ "function template %RestrictInInterval" @ %Core.YCoreUtilities
				$=
			(
				$dep_from %(Service, UI);
				/ "all 2 parameters 'int'" -> 'const _type&';
				* $comp "possible undesired implementation-defined truncation \
					of value when '_type' being instantiated as unsigned type"
					$since b263
					// To eliminate [-Wsign-compare].
			)
		),
		(
		$dep_from %YReader.Shells,
		/ "implemented debug screen directly only for platform %DS"
			^ "%YConsoleInit" ~ "call of %(YDebugSetStatus, YDebugBegin) on \
			without platform restriction" @ ("function %HandleFatalError"
			@ %Helper.Initialization, "main function" @ %Main,
			"function %ShowFatalError" @ %DSMain);
			// Actually only on DS is valid.
		$dep_to "removal of DS debug call"
		),
		/ %YCLib.Debug $=
		(
			(
			// Log class is preferred.
			(
			$dep_from %YSLib.Adaptor.Font;
			- "function %yprintf"
			),
			- "all 2 functions %YDebug",
			- "function %YDebugGetStatus",
			$dep_from "removal of DS debug call";
			- "functions %(YDebugSetStatus, YDebugBegin)"
			),
			/ "member function %Logger::SetWriter" => "%SetSender"
		),
		* DLD "missing specifying return type" @ "lambda expression with \
			multiple return statements" @ "member function \
			%GUIApplication::DealMessage" @ Helper.GUIApplication $since b481
	),
	- 'using platform::YDebugSetStatus;' @ %YReader.Shells,
	/ DLD "all 'return false' out of marco definition with no 'auto' deduction"
		-> 'return {}',
		// Return type of these functions are already specified.
	(
	/ %Documentation $=
	(
		+ %Dependencies;
		/ "dependencies descriptions" %Designation >> %Dependencies 
	);
	/ $doc "updated build notice" @ "%Readme.zh-CN.txt"
		$= (+ "runtime dependency description")
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "strict ISO C++ code compatibility" $since b352
				$= (* "missing including <new>" @ %Any),
				// The program temporarily is not ill-formed for libstdc++'s \
					<memory> including <new>.
			/ @ %String $=
			(
				+ "3 function templates %(string_begin, string_end)",
				(
				/ "all 2 function templates %start_width" => "%begin_with";
				* "spelling error" @ %String $since b450
				),
				/ @ "function templates %string_length" $=
				(
					/ DLD "dispatched with class templates to be able to \
						distinguish array lvalues from pointer type arguments";
					+ "overloading for array types"
						// Now it is based on the length of array but not \
							compared like NTCTSs.
				);
				/ "all function templates implementation" ^ ("%string_begin"
					~ "%begin", "%string_end" ~ "%end"),
					// The behavior of prefix comparing algorithm is now \
						adjust to the same as %boost::starts_with for array \
						types.
				/ DLD "prefix comparing" ^ "%std::equal" %String;
					// See $2014-07 @ %Documentation::Workflow::Annual2014.
			),
			* DLD "wrong specifier order" @ "function templates %get"
				@ "class templates %variadic_param" @ %Functional $since b412,
				// See %Documentation::CommonRules @5.5.10.
			* "comparing for signed 'wchar_t'" @ "function %iswprint"
				@ %CWideCharacterType $since b513
				// To eliminate [-Wsign-compare].
		)
		+ %Test @ %YTest $=
		(
			+ "function template %expect",
			+ "class %group_guard"
		),
	),
	+ %Test $=
	(
		+ %YBase $=
		(
			$dep_from %YStandardEx.YTest;
			+ "2 test cases for %ystdex::transform_n",
			(
			$dep_from %YBase.YStandardEx.String;
			+ "11 test cases for %ystdex::(string_length, begins_with, \
				ends_with)"
			)
		);
		+ "test script %test.sh"
	),
	/ %Tools.SHBuild.Main $=
	(
		/ "implemented printing" ^ "%YSLib::Logger"
			~ "global character streams",
		+ "option '-xlogfl,'",
		+ "colored output"
	)
),

b518
(
	/ DLD "updated header search paths" @ "Visual C++ projects" $=
	(
		/ "missing %Android inline module and %YBase paths"
			@ "project %YFramework_Android" $since b492,
		/ "missing %DS inline module path" @ "project %YFramework_DS" $since
			b431,
		/ "missing %Android inline module path" @ "project %YFramework_MinGW32"
			$since b492,
		/ "simplified and reordered paths",
		- "all '$(NMakeIncludeSearchPath)'"
			// NMake was already useless since Visual Studio 2010.
	),
	/ %YFramework $=
	(
		/ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			+ "member function %WindowReference::GetCursorLocation",
			/ @ "class %HostWindow" $=
			(
				(
				$dep_from "%WindowReference::GetCursorLocation";
				+ 'using WindowReference::GetCursorLocation' 
				),
				+ "virtual function %MapPoint",
				(
				$dep_from "removal of bounds limit";
				- $revert(b427) "data member %BoundsLimited"
				)
			),
			* "missing 'YF_API'" @ "function %BindDefaultWindowProc" $since b518
		),
		/ %Helper $=
		(
			/ @ "platform %Win32" @ %Host $=
			(
				$dep_from %'YCLib_(MinGW32)'.Win32GUI;
				/ DLD "simplified implementation" @ "member function \
					%Environment::MapCursor"
			),
			(
			$dep_from "%HostWindow::MapPoint" @ %'YCLib_(MinGW32)'.Win32GUI;
			- "simplified DS window input boundary implementation"
				@ "platform %Win32";
			$dep_to "removal of bounds limit"
			),
			/ "class %Host::Window" @ %HostWindow $=
			(
				/ @ "member function %GetInputBounds" $=
				(
					/ "return type" -> "%YSLib::Drawing::Rect"
						~ "%pair<YSLib::Drawing::Point, YSLib::Drawing::Point>",
					- 'ynothrow'
				),
				/ @ "platform %Win32" $=
				(
					* "missing transforming coordinate for client area"
						@ "member function \
						%UpdateCandidateWindowLocationUnlocked" $since b512,
					+ "virtual function %UpdateTextInputFocus",
					/ "member function %UpdateCandidateWindowLocation kept \
						away input boundary transformation"
				)
			),
			/ @ "platform %Win32" $=
			(
				/ @ "class %InputManager" @ %InputManager $=
				(
					* "missing transforming coordinate for top level widget"
						"function %DispatchInput" @ %Helper.InputManager
						$since b512,
					/ DLD "implementation" @ "class %InputManager"
						^ "'UI::IWidget*' as text input focus cached pointer"
						~ 'void*',
					/ DLD "simplified text input focus update"
				),
				(
				$dep_from "%Host::Window::UpdateTextInputFocus";
				+ DLD "DS window of text input focus transformation"
				)
			);
		),
		* "wrong blue value initialized" @ "constructor %ARGB" @ %YCLib.Video
			$since b507,
		/ "member function %TextBox::ExportCaretPosition" @ %TextBox @ %YSLib.UI
			=> "%ExportCaretLocation"
	)
	- "name pollution list" @ %Documentation::Definitions,
	/ $doc "updated build notice" @ "%Readme.zh-CN.txt",
	/ $dev $build "updated makefile" @ "platform %Android" $=
	(
		/ "updated %ANDROID_SDKVER value" -> "20.0.0" ~ "19.0.3",
			// This is the Android SDK Build-tools version.
		/ "updated zipalign path" @ "target $(OUTPUT_FINAL)"
			// The new SDK moved zipalign to the Build-tools.
	)
),

b517
(
	(
	/ DLD "template parameter %_tIter" @ "constructor template \
		%transformed_iterator" => "%_tIterOrig" @ %YBase.YStandardEx.Iterator;
	/ DLD "all template parameters %_tIterator" => "%_tIter" $effective
		@ %YBase.YStandardEx.(Iterator, AnyIterator);
	),
	/ %YBase.YStandardEx $=
	(
		/ %Algorithm $=
		(
			+ "function template %transform_n",
			* "missing header for %is_pod" $since b254
		),
		+ "function template %exchange" @ %Utilities
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ %TextBox $=
				(
					/ @ "class %TextPlaceholder" $=
					(
						+ "captured control pointer check"
							@ "function %BindByFocus",
						+ "function %GetCapturedPtr"
					),
					(
					* $lib "platform neutrality" @ "types %(SPos, SDst)"
						@ "member function %TextBox::GetCaretPosition" $since
						b484;
						// The calculation of width accidentally depended on \
							result of signed integers, which would turned to \
							be unsigned when the rank of %SDst is the greatest \
							value in the expression, e.g. 32-bit unsigned int \
							for platform %Win32.
					$dep_to "screen measurement platform neutrality"
					)
				),
				(
				* $lib "platform neutrality" @ "types %(SPos, SDst)"
					@ "member function %TextList::DrawItems" @ %TextList
					$since b346;
				$dep_to "screen measurement platform neutrality"
				)
			),
			* $lib "platform neutrality" @ "types %(SPos, SDst)" @ %YSLib $since
				$before b132 $=
			(
				// To eliminate [-Wsign-compare].
				* $design "signed and unsigned integer comparison"
					@ (("function %PutCharBase" @ %CharRenderer $since b372,
					"function %BlitBounds" @ %YBlit $since b438, "class \
					%TextRegion" $since $before b132, "functions %(PlotHLineSeg,
					PlotVLineSeg)" @ %YDraw $since $orig(%Core.YGDI) b135)
					@ %Service, "member function %TextList::InvalidateSelected"
					@ %UI.TextList $since b268),
				* "missing explicit template parameter" @ "member function \
					%TextBox::GetCaretPosition" @ %UI.TextBox $since b484;
				$dep_to "screen measurement platform neutrality"
			),
			/ "checked screen position value for Win32 API"
				^ "%YSLib::CheckPositiveScalar<SPos>"
				@ %'Helper_MinGW32'.Win32GUI,
		),
		/ %YCLib.Video $=
		(
			+ "static assertions for screen measurement types",
				// Now integer types are explicitly required.
			(
			$dep_from "screen measurement platform neutrality";
			/ "alias declarations of %(SDst, SPos)" ^ "%(long, unsigned long)"
				~ "%(std::int16_t, std::uint16_t) respectively"
				@ "%platform Win32";
			$dep_to "32-bit screen measurement types"
			)
		),
		(
		$dep_from "32-bit screen measurement types"
		/ DLD "simplified implementation by omitting explicit template argument"
			@ "member function %Environment::MapCursor" @ "%platform Win32"
			@ %Helper.Host
		)
	)
	/ %YReader $=
	(
		* "no effect when check box unchecked" @ %ShlExplorer $since b516,
		* "platform neutrality" @ "types %(SPos, SDst)" @ "member function \
			%HexViewArea::Refresh" @ %HexBrowser $since b253
	),
	* DLD "missing update header search paths"
		@ "Visual C++ project %YFramework_MinGW32" $since b493,
),

b516
(
	/ %YFramework.YSLib $=
	(
		/ %UI.TextBox $=
		(
			/ @ "class %TextBox" $=
			(
				- "collapsing" @ "handling event %LostFocus",
				* "wrong collapsing behavior when text selected" $since b514,
					// It wrongly used the direction determined by selection \
						rather than by cursor position. And now it is clear \
						that no %CollapseCaret should be called.
				(
				+ "data member 'ucs4_t MaskChar = ucs4_t();'",
				$dep_from %Core.YString;
				/ "displayed with text determined by %GenerateDisplayedResult \
					if nonnull"
					@ "functions %(Refresh, GetCaretLocation, GetCaretPosition)"
				),
				(
				+ "data member 'size_t MaxLength{-1};";
				/ "restricted %Text length with %MaxLength"
					@ "function %ReplaceSelection"
				)
			),
			+ "class %TextPlaceholder"
		),
		/ %Core $=
		(
			/ @ "class template %GHEvent" @ %YEvent $=
			(
				/ "supported null equality comparing" @ "comparer";
				+ "null pointer as default argument for 1 parameter \
					constructor as fit for %DefaultConstructible requirement",
				+ "using declarations %BaseType::operator bool"
			),
			+ "binary %operator* for %String" @ %Core.YString
		),
		- $revert(b419) DLB "special member functions as workaround for G++ \
			4.7.1" @ "class %Font" @ %Adaptor.Font;
	),
	/ @ "class %ShlExplorer" @ %YReader.ShlExplorer $=
	(
		$dep_from %YFramework.YSLib.UI.TextBox;
		+ "protected 'TextPlaceholder tpDefault{};'";
		+ "mask character, max length and text placeholder tests for text box"
	)
),

b515
(
	/ @ %Tools $=
	(
		/ @ %SHBuild $=
		(
			/ @ "(build.sh, self-host.sh)" $=
			(
				/ DLD "separated flags",
				/ $build "removed dependencies on installed files" $=
					// For convenient implementation of bootstrap in future.
				(
					^ DLB "header files in repository" ~ "installed headers",
					^ DLB "source files in repository" ~ "installed libraries"
				),
				^ $build "static linked builds",
				+ DLB '-Wl,--gc-sections' @ "linker flags"
			),
			/ "include directories" -> "project directories"
				~ "installed directories" @ "SHBuild-YSLib.sh",
			+ "%IntException handling" @ %Main $since b477
				// The concrete value is only for internal use.
		),
		+ "install-headers.sh",
			// Testing script to copy/update headers in default location \
				(/usr/include) using rsync. Currently it would overwrite 3rd \
				party headers.
	),
	/ %YFramework $=
	(
		* $build "run 'SHBuild-YSLib' failed" $since b492 $=
		(
			* "wrong '#error' directive" @ "!YCL_Android" @ %'Helper_(Android)'
				$since b502,
			* "wrong '#error' directive" @ "!YCL_Android" @ %'YCLib_(Android)'
				$since b492
		),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/%YDraw $=
				(
					* $revert(b514) "wrong assertion"
						@ "non-inline function %FillRect",
					- "redundant assertion for context"
						@ "functions %(DrawHLineSeg, DrawVLineSeg, DrawLineSeg)"
						// This assertion should be hold by underlying pointer \
							nonnull assertion properly.
				),
				+ "parameter 'const Padding& = DefaultMargin'"
					@ "all 2 constructors" @ "class %TextState" @ %TextBase
			),
			/ %UI $=
			(
				(
				$dep_from "function %FillRect" @ %Service.YDraw;
				* "assertion failure" @ "filling widget background across \
					top-level boundary" $since b514
					// The function templates %FillRectRaw should be \
						boundary-safe because of %Blit.
				),
				(
				* "missing ensuring clip area be subset of target boundary"
					@ "function %BufferedRenderer::Validate" @ %YRenderer $since
					b488;
					// Since %Documentation::YSLib @5.2.1.3 guarantees the \
						clip area can be directly use, it should be ensured.
				* $comp "assertion failure" @ "drawing widget background \
					across top-level boundary" $since b452
					// The function templates %DrawRect and other %'Draw*' \
						might cause the failure.
				),
				/ "default value of %ActiveBorder color" -> '{86, 157, 229}'
					~ 'ColorSpace::Aqua' @ "constructor %Palette" @ %YStyle,
				/ @ "class %MLabel" $=
				(
					(
					+ "functions %GetAlignedPenOffset";
					/ DLD "simplified function %DrawText"
					),
					/ "parameter list" @ "virtual function %DrawClippedText"
						-> '(const Graphics&, const Rect&, Drawing::TextState&)'
						~ '(const PaintContext&, Drawing::TextState&)'
				),
				/ @ "class %TextBox" @ %TextBox $=
				(
					(
					/ "function %TextBox::DrawClippedText",
					+ "protected data member 'Point ptPenOffset'";
					* "missing cursor position adjust with text alignment"
						$since b485
					),
					/ DLD "reduced invalidation area"
						@ "%InvalidateDefaultCaret"
				)
			),
			(
			/ DLD "parameter %bounds" @ "function %DrawClippedText"
				@ %Service.TextRenderer => "%r";
			/ DLD "parameter %mask" @ "functions" => "%bounds" $effective
				@ %(Service.TextRenderer, UI.(Label, TextList, Menu, TextBox))
				// "%mask" is for any complex area being blending or not \
					clipping.
			)
		)
	)
),

b514
(
	/ %YBase.YStandardEx.CCharacterType $=
	(
		(
		+ "functions %iswspace";
		/ "implemented functions %iswspace" ^ "%ystdex::iswspace"
			~ "%std::iswspace"
		),
		* DLD "wrong guard macro" $since b513,
		+ "%yconstfn function %isdigit"
	),
	(
	$dep_from "%ystdex::iswspace" @ %YBase.YStandardEx.CCharacterType;
	* $comp "several characters still unprinted" @ "platform %Android" $since
		b492
		// Because of broken Unicode support on Android NDK r9, some \
			characters like “稍”(U+7A0D) and “选”(U+9009) still missed by \
			wrongly returning '8' from 'iswspace' calls.
	),
	/ $doc "extended file name pattern of README DOCUMENTS" @ "%LICENSE.TXT",
	/ %YFramework $=
	(
		/ @ "namespace %Windows" @ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			+ 'using MessageMap = std::map<unsigned, \
				YSLib::GEvent<void(::WPARAM, ::LPARAM)>>;'
			/ DLD "simplified data member declaration %HostWindow::MessageMap"
		),
		/ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			$dep_from %'YCLib_(MinGW32)';
			/ @ "member function %Host::Window::BindDefaultWindowProc"
				@ %HostWindow
				-> "function %BindDefaultWindowProc" @ %Win32GUI
		),
		/ @ "enum %Categtory" @ %YCLib.Keys $=
		(
			* $revert_ex(b490) "underlying type" $since b489
				$= (/ 'KeyIndex' -> 'std::uint_least32_t'),
			* "key category wrongly overlapped for value greater than enumerator
				%Lock" $since b489
				// Though they should not be determinately mutually exlusive,
					it is only safe to seperate them in different kinds for \
					bitand operation.
		),
		/ %YSLib $=
		(
			* "missing updating key state when external input focus is not null"
				@ "member function %GUIState::UpdateChar" @ %YGUI $since b511,
			/ @ "class %TextBox" @ %TextBox $=
			(
				(
				$dep_from %YCLib.Keys;
				* $comp "no effect for Shift with navigation key"
					@ "class %TextBox" $since b489
					// Though the effect is not quite right, see below.
				),
				(
				$dep_from %YGUI;
				* $comp "potentionally wrong behavior with modifier key held"
					$since b511;
					// Wrong key held state updated so the initial delay would \
						be ignored. Note if the bug of key category exists, \
						there would actually be no effect.
				+ "functions %RestoreCaretTimer;
				/ "restored caret timer on modifying caret position or \
					collapsing caret"
				),
				/ "function %UpdateCaret" => "%ExportCaretPosition",
				/ "function %CollapsedAndUpdateCaret" => "%CollapseCaret"
			),
			+ "boundary check assertion" @ "non-inline function %FillRect"
				@ %Service.YDraw
		)
	)
),

b513
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "traces" @ "member function %StyleMap::Switch" @ %YStyle $=
			(
				+ "quote marks around style name",
				* "missing space when default style found" @ "2nd trace"
			),
			* "missing some characters to print" @ %Service.TextRenderer
				@ ("%platform %MinGW32" $since b296,
				"platform %Android" $since b492) $=
				// For example, “←”(U+2190) and “⑨”(U+2468) on Windows, and \
					some more characters missing on Android 2.3.1.
			(
				$dep_from %(YCommon, YBase.YStandardEx.CWideCharacterType);
				/ $design "implementation" ^ "%ystdex::iswgraph"
					~ "%std::iswgraph"
			)
		),
		* $design "spelling error" @ "trace string" @ "constructor %NativeHost"
			@ %'Helper_(Android)'.AndroidHost $since b504
			$= (/ 'Wating' -> 'Waiting'),
		/ %Helper $=
		(
			* "missing key state indirection" @ "platform %Android" @ %Input
				$since b492,
				// So key state tracked would be wrong in \
					%Helper::InputManager after touching down.
			* "wrong desktop pointer selected to response"
				@ "member function %ShlDS::OnGotMessage" $since b502,
				// Though displaying was normal, the input had not been sent \
					to the right place.
			* "missing calculating with hosted window input bounds"
				@ "platform %Android"
				@ "member function %Environment::MapCursor" @ %Host $since b509
		),
		* "function %IsPrint" @ %YCommon $since b512 $=
		(
			$dep_from %YBase.YStandardEx.CWideCharacterType;
			/ $design "implementation" ^ "%ystdex::iswprint"
		)
	),
	/ "example command line" @ %Tools.CreationTimeManager.Readme,
		// Hidden files should not be ignored generally. So added '/A' for \
			'DIR'.
	/ %YBase.YStandardEx $=
	(
		+ %CCharacterType $=
		(
			+ "%yconstfn functions %((iscntrl_C0; iscntrl_ASCII, \
				(iscntrl_ISO8859_11; iscntrl_ISO8859_1; isprint)), iscntrl_C1)",
			+ "%yconstfn functions %(isprint_ASCII, isprint_ISO8859_1, isprint)"
		),
		+ %CWideCharacterType
			$= (+ "functions %(iswprint, iswgraph)")
	),
	(
	$dep_from %YFramework.YSLib.Service;
	* $comp "missing rendering left and right arrows on buttons"
		@ %YReader.ShlTextReader $since b299
	)
),

b512
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				(
					/ @ "class %GUIState" @ %YGUI $=
					(
						+ "data member %CaretLocation"
						/ "clear caret location state" @ "function %Reset",
					);
					/ @ "class %TextBox" @ %TextBox $=
					(
						(
						+ "function %GetCaretLocation";
						/ DLD "simplified implementation"
							@ "static function %InvalidateDefaultCaret"
						),
						+ "functions %(UpdateCaret; CollapsedAndUpdateCaret)";
						/ "updated caret location to GUI state after caret \
							position changes"
					)
				),
				+ "trace" @ "function %InitExStyles" @ %ExStyle,
				+ "trace" @ "member function %StyleMap::Switch" @ %YStyle
			),
			/ %Adaptors $=
			(
				$dep_from %YCLib.YCommon;
				+ 'using platform::IsPrint;' @ "namespace %YSLib::Text"
					@ %YTextBase,
				- $revert($since $before b132) "special process for '\t'"
					@ "member function %Font::GetAdvance" @ %Font
					// The width of tab character should be determinated in \
						concrete contexts.
			),
			(
			$dep_from %Adaptor.YTextBase;
			^ "%IsPrintf" ~ "%std::iswprint";
			$dep_to "print character check"
			)
		),
		/ %Helper $=
		(
			/ @ "platform %Win32" @ "class %InputManager" @ %InputManager $=
			(
				+ DLD "text input focus pointer cache";
				* $comp "missing clearing coposite string after switch text \
					input focus" $since b511,
				/ @ "function %DispatchInput" $=
				(
					(
					$dep_from "hosted caret";
					/ "supported hosted IME following text input focus"
					),
					/ DLD "put host input process at the end" @ "implementation"
				),
				+ "caret location caching; %UpdateCandadateWindowLocation",
				(
				$dep_from "print character check";
				* $comp "'\t' wrongly handled for text input" $since b511
					// Now correctly as no-op. Press tab key in text box is \
						with no action.
				)
			),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				(
				+ DLD "fake caret to support IME candidate window locating";
				+ "function %UpdateCandidateWindowLocation";
				+ "window caret location caching";
				+ "support of caret update by moving hosted window",
					// Currently it works on Windows 7 but not on Windows 2012 \
						R2.
				+ "support of caret update on composing the input string";
					// Ditto.
				$dep_to "hosted caret"
				)
				+ "function %BindDefaultWindowProc";
				/ DLD "simplified implementation" @ "constructor"
					^ "function %BindDefaultWindowProc"
			),
			^ DLD "macro %YFM_DS_Helper_Shell_DS" @ %Shells
		),
		/ DLD "simplified implementation" @ "all 5 inline functions"
			@ "%CHRLib.CharacterMapping" ^ "%(PDefH, ImplRet),
		+ "(2 function, 1 template) %IsPrint" @ %YCLib.YCommon
	),
	/ DLD "all '::UINT'" -> 'unsigned',
	+ DLB "dynamic library dependency %imm32" @ "DLL configurations"
		@ "Code::Blocks project %YFramework_MinGW32",
	+ DLB "static library dependency %imm32" @ "non-DLL configurations"
		@ "Code::Blocks project %YSTest_MinGW32",
	/ %YReader $=
	(
		(
		$dep_from %YFramework.YAdaptor.YTextBase;
		^ "%IsPrintf" ~ "%std::iswprint" @ %DSReader
		),
		+ "function %FetchDefaultShellDirectory;
		/ "default argument" @ "class %ShlExplorer"
			-> 'FetchDefaultShellDirectory()'
			~ 'IO::FetchCurrentWorkingDirectory()'
			// For Android it is the data directory, since access the working \
				directory is possibly to be rejected. For other platforms it
				is unchanged.
		+ "debug trace" @ "constructor %ShlExplorer" @ %ShlExplorer;
	)
),

b511
(
	/ %YFramework $=
	(
		/ @ "platform %Win32" @ %Helper $=
		(
			/ "data member %RawMouseButton" @ "class %Environment"
				@ %Host >> ("class %Host::Window" @ %HostWindow),
			/ DLD "%WM_INPUT handling" @ "window procedure" >> ("constructor"
				@ "class %Host::Window" @ %HostWindow),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				+ DLD "private input state";
				+ "%WM_CHAR handling which save the Unicode character to \
					private state",
				+ "function template %AccessInputString"
			),
			(
			$dep_from %YSLib.UI.YGUI;
			/ "supported cross-thread text input" @ "platform %Win32"
				@ "member function %InputManager::DispatchInput" @ %InputManager
			)
		),
		/ %YSLib.UI $=
		(
			/ @ %YGUI $=
			(
				+ "2 functions %CallInputEvent",
				/ @ "class %GUIState" $=
				(
					+ "data member %ExteralTextInputFocusPtr";
					/ "clear character input states"
						@ "functions %(Reset, CleanupReferences)",
					/ "function %SendInput" $=
					(
						+ "various overloaded functions",
						/ "alternated behavior when external text input focus \
							is set"
							// Call %TextInput event directly without calling \
								%UpdateChar. Note the old behavior is also \
								dropped. Call %CallInputEvent instead to get \
								the old behavior.
					),
					/ "directly return without performing any operation when \
						external text input focus is set"
						@ "function %UpdateChar"
				)
			),
			/ %TextBox $=
			(
				/ "set and clear text input focus with caret animation"
					@ "class %Caret" ^ "%GUIState::ExteralTextInputFocusPtr",
				/ @ "constructor %TextBox" $=
				(
					/ DLD "%SendInput call",
					/ "handled space character only when external text input \
						focus is not set",
					+ "invalidation after replacing text" @ "handler"
						@ "event %TextInput",
					/ "explicitly performed no-op for horizontal tab character"
						// To avoid width problem.
				)
			)
		)
	)
),

b510
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				(
				* "missing resetting view" @ "constructor" @ "listbox" $since
					b193;
					// This would cased abnormal state immediately after \
						initialization of an object of %ListBox or derived \
						types.
				$dep_to "missing resetting listbox view"
				),
				(
				+ "member function %GUIState::SendInput" @ %YGUI;
				/ DLD "simplified constructor %TextBox"
					^ "%GUIState::SendInputChar"
				)
			),
			/ %Core $=
			(
				+ "constructor template %String with initializer list parameter"
					@ %YString,
				(
				$dep_from %Adaptor;
				+ "unexpected exception logging" @ "!defined %NDEBUG"
					@ "member function %Application::OnGotMessage"
					@ %YApplication
				)
			),
			+ "using %platform::(Logger, FetchCommonLogger)"
				@ %Adaptor.YAdaptor
		),
		/ %Helper.ShellHelper
		(
			/ "debug trace" @ "class %DebugTimer"
				^ "%YTraceDe, %Debug" ~ "%std::fprintf";
				// Not display by default for %Debug priority.
			* "possible interleaved multithreaded timer output"
				@ "platform %MinGW32" $since b378
		),
		/ "class %Logger" @ "hosted platforms" @ %YCLib.Debug $=
		(
			* "missing explicitly %std::flush call at end"
				@ "function %DefaultSendLogger" $since b498
				// Though nothing to do with default %stderr stream, once the \
					buffer is set, it might go wrong.
			* "possible interleaved logging for exception" $since b498
		)
	),
	(
	$dep_from "missing resetting listbox view";
	* $comp "invalid invisible or wrongly rendered vertical scrollbar state"
		@ %YReader.BookmarkUI $since b392 $=
	(
		* "assertion failed after scrolling in empty list"
			@ "debug configurations" $=
		(
			* "scrolling by dragging",
			* "scrolling by event %CursorWheel" $since b443
		),
		* "wrong state after scrolling" @ "release configurations",
	)
	),
	(
	$dep_from %YFramework.YSLib.Core.YString;
	/ DLD "simplified implementation" ^ "initializer list"
		~ "explicit %ucs2string construction" $effective @ ("friend function \
		%to_string for %Path", "member function %Path::Parse"
		@ %YFramework.YSLib.Service.FileSystem;
	),
	/ DLD "all 'char()' which can be distinguished to actual type" -> '{}'
		$effective %(YCLib.Keys, NPL.Lexical)
),

b509
(
	/ "implementation" @ "macro %YB_NORETURN" @ %YBase.YDefinition
		^ '[[noreturn]]' @ 'YB_IMPL_GNUCPP >= 40800',
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ DLD %YGDIBase $=
				(
					- "explicit 'yconstfn'" @ "explicitly defaulted default \
						constructor" @ "class %Rect",
					/ @ "class template %GBinaryGroup" $=
					(
						/ DLD "implemented functions %operator(-, +=, -=)"
							^ "macros %(PDefHOp, ImplRet)",
						/ DLD "implemented all 2 functions %GetRef"
							^ "macros %(PDefH, ImplRet)"
					)
				),
				/ DLD @ "class template %GEvent" @ %YEvent $=
				(
					/ "implemented all non-overloaded operator functions \
						with explicitly declared 'inline'"
						^ "macros %(PDefH, ImplRet)",
					/ "implemented all overloaded operator functions with \
						explicitly declared 'inline'"
						^ "macros %(PDefHOp, ImplRet)"
				)
			),
			* "wrong implementation" @ "all 2 member functions \
				%MIMEBiMapping::operator-=" @ Service.ContentType $since b450,
				// These member functions wrongly performed insertion instead \
					of deletion.
			/ %UI $=
			(
				/ $revert(b494) "functions %(SetLocationOf, SetSizeOf; $comp \
					SetBoundsOf) would trigger events even if the parameter \
					value is equal to the old value" @ %YWidget
				* $comp "missing listbox scrollbars sometimes" $since b494
					// For example, switching file list back to make scrollbar \
						be shown.
			)
		),
		* "no effect on offset argument"
			@ "member function %ScreenRegionBuffer::UpdateTo" @ %Android
			@ %'Helper_(Android)'.Android $since b499
			// All offset values were treated as 'Point()'.
		/ %Helper $=
		(
			* "spelling error" @ %Initialization $since b303
				$= (/ "%InitializeEnviornment" => "%InitializeEnvironment"),
			(
			+ "function %MapCursor" @ "class %Environment" @ %Host;
			/ DLD "simplified implementation" @ "member function
				%InputManager::Update" @ 'defined(YF_Hosted)' @ %InputManager
			)
		)
	),
	/ DLD "implementation as possible when no return type are deduced"
		^ "braced-init-list" ~ "%make_pair" $=
	(
		@ "function template %search_map" @ %YBase.YStandardEx.Container,
		/ %YFramework.YSLib $=
		(
			@ "member function %Palette::GetPair" @ %UI.YStyle,
			@ "function %AddMIMEItems" @ % Service.ContentType
		),
		@ "constructor %ShlExplorer" @ %YReader.ShlExplorer
	),
	/ DLD "implementation when appropriate" ^ "container emplacing"
		~ "insertion" $=
	(
		// Since G++ 4.8.2 has supported all of them.
		^"member function %map::emplace" ~ "%(make_pair, map::insert)"
			@ "member functions" $effective @ %YFramework,
		^ "member function %multimap::emplace"
			~ "%(make_pair, multimap::insert)" @ "member functions"
			$effective @ %YFramework.YSLib,
		^ "member function %vector::emplace_back"
			~ "%(make_pair, vector::push_back)" @ "functions" $effective
			@ %YFramework.YSLib,
		(
		$effective @ %YFramework.YSLib;
		^ "member function %set::emplace_hint" ~ "%set::insert"
			@ "member function %ValueNode::operator[]" @ %Core.ValueNode,
		^ "member function %map::emplace_hint" ~ "%map::insert"
			@ "function %GetEvent" @ %UI.YWidgetEvent
		)
	),
	/ DLD "simplified some %YSLib::Drawing::Size argument passing"
		^ "brace-init-list" ~ "explicit use of postfix-expression",
	+ 'android:theme="@android:style/Theme.NoTitleBar.Fullscreen"'
		@ "application configuration" @ "%AndroidManifest.xml"
),

b508
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "overrode recursive %TransformNPLA1 call for children nodes"
					@ "function %TransformNPLA1",
					// Now the input of the mapper function is AST instead of \
						semantics tree. This allows the AST transformation \
						being overridden. Order of AST terms can be directly \
						reserved.
				+ "function %ParseNPLANodeString"
			),
			/ %Lexical $=
			(
				/ "function %MakeEscape" -> "function %Unescape" $=
				(
					/ DLD "reserved space of %string object at first"
						@ "implementation",
					* "missing unescaping quotes characters" $since b335,
					* "missing unescaping characters with prefix backslash"
						$since b335,
						// The result would be wrongly escaped when containing \
							unexpected escape sequences.
					/ "avoided adding trailing backslash when unescapable"
						// It is useful for literal only. See %UnescapeLiteral.
				),
				+ "function %UnescapeLiteral"
					// It would add backslash when necessary.
			),
			/ $revert(b343) "unescaped node name" @ "%operator<<"
				@ %Configuration
		),
		* "missing several '\n'" @ "tracing" @ %Helper.Initialization
			$since b506
	),
	/ %YReader $=
	(
		/ "avoided literal conversion for unescaping names" @ "member \
			functions %ShlReader::(LoadBookmarks, SaveBookmarks)" @ %ShlReader,
			// Now only escaped names would be stored by NPLA1 configuration, \
				so explicit unescaping in user code is usually redundant. \
				However, quotes would not be automatically added.
		$dep_from ("function %Unescape" @ %YFramework.NPL.Lexical,
			%YFramework.NPL.Configuration);
		* $comp "saved escaped file path for bookmark entry" @ %YReader.Bookmark
			$since b392
			// Loading bookmark would fail when the path containing NPL \
				escapable sequence.
	)
),

b507
(
	/ %YBase.YStandardEx $=
	(
		(
		+ %BitSegment;
		/ "class template %bitseg_iterator" @ %Iterator >> %BitSegment
		),
		+ "meta operation templates %((sequence_split_n; sequence_split_n_t),
			(sequence_fold; vseq_fold))" @%Variadic,
		(
		$dep_from (%ystdex::sequence_split_n @ %Variadic);
		+ "meta operation specializations %sequence_split_n @ %Tuple
		),
		(
		$dep_from (%ystdex::sequence_fold @ %Variadic);
		+ "meta operation specializations %sequence_fold @ %Tuple
		),
		+ "binary functors %(plus, multiply)" @ %Functional
			// Only added associative built-in operations.
	),
	/ %YFramework $=
	(
		/ @ %YCLib.Video $=
		(
			/ @ "struct %XYZATrait" @ %YCLib.Video $=
			(
				- "static data member %(GAligned, RAligned)",
				(
				/ "alias declaration %IntegerType" ^ "%BitsN" ~ "%UIntBitsN",
				- "static data member %Width";
				- "static data member %UIntBitsN"
				)
			),
			(
			+ "class templates %XYZAMaskTrait;
			/ @ "class templates %(BGRA, RGBA)" $=
			(
				+ "alias declaration %MaskTrait"
				/ "colors mask values" ^ "%MaskTrait" ~ "%Trait";
			);
			- "data members %(AMask, XMask, YMask, ZMask)"
				@ "class template %XYZATrait"
			),
			+ "class templates %(AXYZMaskTrait; ARGB)",
			* "pixel RGB component wrongly reversed" @ "platform %Android"
				@ %Video $since b492
			(
				/ "macro definition %YCL_PIXEL_FORMAT_XYZ888 with value"
					-> '0xAABBCCDD' ~ '0xAADDCCBB',
				/ "alias declaration %PixelType" -> "%RGBA<8, 8, 8, 8>"
					~ "%BGRA<8, 8, 8, 8>",
				/ "implementation of functions %FetchOpaque"
			)
		)
	)
),

b506
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %LoadNPLA1File" $=
				(
					+ "debug trace after configuration creation",
					+ "error description" @ "exception thrown when failed \
						writing file"
				),
				+ "trace" @ "function %ReadConfiguration",
				+ "default configuration" @ "platform %Android",
				/ "working root path located at runtime",
				/ @ "function %HandleFatalError" $=
				(
					/ "log level" -> 'Emergent' ~ 'Notice',
					- "separator lines" @ "error message" @ "platforms !%DS"
				),
				+ "trace for character mapping file path"
					@ "function %LoadComponents"
			),
			+ "support for platform %Android" @ "constructor %DSApplication"
				@ %DSMain
		),
		/ %YSLib $=
		(
			* "missing null pointer check" @ "encoding detection"
				@ "class %TextFile" @ %TextFile $since b290,
			+ "32-bit ABGR pixel conversion support" @ "class %HBitmap"
				@ %Adaptor.Image
		)
		+ "function %Android::FetchDefaultWindow"
			@ %'Helper_(Android)'.AndroidHost
	)
),

b505
(
	/ %YFramework $=
	(
		* "wrong condition for defining macro %YAssert" @ %YCLib.Debug $since b499
			$= ('ifdef YAssert' -> 'ifdef YB_Use_YAssert'),
			// This caused unintended assertions for release configurations.
		/ %Helper $=
		(
			+ "debug trace" @ "constructor %Environment" ^ 'YCL_Trace' @ %Host,
			+ "debug trace" @ "function %Devices::InitDSScreen" ^ 'YTraceDe'
				@ %DSScreen,
			/ @ %Initialization $=
			(
				/ "trace output" @ ^ "%YTraceDe"
					~ "directly use of standard function"
					// For platform %Android the level is "%Notice" in normal \
						cases and "%Err" in catch blocks. For other platforms, \
						the level is ignored and there should be no behavior \
						changed.
				+ "trace output" @ "function %Uninitialize",
				+ "debug trace output" @ "function %(LoadNPLA1File, \
					WriteConfiguration)" ^ "%YTraceDe"
			)
		),
		/ %Service $=
		(
			/ @ "class %File" @ %File $=
			(
				* "missing clean file pointer" @ "function %Close" $since
					$before b132,
				+ "trace" @ "function %(Open, Close), destructor" ^ "%YTraceDe"
			),
			* "missing check file pointer before writing BOM"
				@ "constructor %TextFile" @ %TextFile $since b341
				// Assertion failure.
		)
	)
	/ "assertion string" @ "%YAssertNonnull" -> "Null reference found."
		~ "Null pointer found." @ %YBase.YStandardEx.CAssert,
	/ "all nonnull handle, shell handle, array pointer, buffer pointer, text \
		buffer pointer or updater assertions" ^ "%YAssertNonnull" ~ "YAssert",
	/ %Main $=
	(
		- "explicit 'return 0;'" @ "function ::main";
			// So both function 'int main()' with implicit 'return 0;' and \
				entry point function with void return type can be simply \
				coexisted without modifying return statement. Note that now \
				the program is still not fully supported so it would crash \
				intentionally.
		/ "merged entry point function %::y_android_main with function %::main"
			^ "conditional inclusion",
		+ "debug trace" @ "function %::main" ^ 'YTraceDe' @ %Main
	),
	* DLB "missing dependency for target %OUTPUTSO on .a files" @ "makefile"
		@ "platform %Android" $since b497
),

b504
(
	/ %YFramework $=
	(
		/ "simplified semantics tree mapping" @ %NPL.NPLA1 $=
		(
			/ $lib "accepted null mapper" @ "function %TransformNPLA1";
				// No-op.
			/ "default mapper argument" -> '{}' ~ 'MapNPLA1Node' @ "functions \
				%(TransformNPLA1, LoadNPLA1), function template %LoadNPLA1";
				// Default behavior changed. Now no children are dropped on \
					default.
			- "function %MapNPLA1Node"
		),
		/ %'Helper_(Android)' $=
		(
			/ %AndroidHost $=
			(
				/ "window creating now on native window resizing"
					~ "on native window creating",
				* "invalid native window access on termination" $since b502
					$= (+ "waiting for screen object release"
					@ "native window destroying"),
				(
				$dep_from "class %Devices::AndroidScreen";
				* "hard-coded screen size initialized" @ "class %NativeHost"
					@ %AndroidHost $since b502
				)
			),
			/ %AndroidScreen $=
			(
				+ "constructor 'AndroidScreen(::ANativeWindow&);'"
					@ "class %Devices::AndroidScreen"
				- "function %Android::FetchScreenSize
			)
		)
	),
	(
	$dep_from %YFramework.NPL.NPLA1;
	/ "logging" ^ 'YTraceDe' @ "functions %(LoadBookmarks, \
		LoadGlobalConfiguration, SaveBookmarks, SaveGlobalConfiguration)"
		@ "class %ShlReader" @ %YReader
	)
),

b503
(
	/ %Main_ARM9 => %Main,
	/ %YFramework $=
	(
		/ %Helper_(DS) $=
		(
			* DLD "missing parameter" @ "submodule names" $since b431,
			+ DLD '\ingroup DS' @ "private submodlues"
		),
		+ "2 function %SetChildren" @ "class %ValueNode"
			@ %YSLib.Core.ValueNode,
		(
		* "implemented function %WriteConfiguration" @ %Helper.Initialization
			$since b502;
			$dep_to "saving empty configuration"
		),
		/ %Helper_(Android) $=
		(
			/ %AndroidScreen $=
			(
				/ @ "constructor %AndroidScreen" $=
				(
					* "hard-coded screen buffer size" @ $since b502,
					+ "debug trace for size",
					- "hard-coded default argument"
					// It is worse that the default argument of the window \
						size was not the same as the previously hard-coded \
						screen buffer size. The width and height were \
						occasionally swapped.
				),
				+ "function %FetchScreenSize"
					// Not implemented by returning still hard-coded value \
						'{480, 800}'.
			),
			/ @ "class %NativeHost" @ %AndroidHost $=
			(
				+ "function %GetActivityRef",
				/ DLD "member initializer" @ "%p_desktop"
					-> ("initialization" @ "constructor")
					// To avoid invalid use of incomplete type.
			)
		)
	),
	/ %YReader.ShlReader $=
	(
		/ @ "class %ShlReader" $=
		(
			/ "simplified implementation" @ "function %SaveBookmarks",
			* "wrongly cleared all content on saving"
				@ "static function %SaveGlobalConfiguration" $since b502;
		),
		(
		$dep_from "saving empty configuration",
		$dep_from "%ShlReader::SaveGlobalConfiguration";
		* $comp "saving empty configuration exiting reader shell"
		)
	),
	/ %YBase.YStandardEx $=
	(
		* "missing workaround for Visual C++ 2013" @ "move constructor"
			@ "class template %transformed_iterator" @ %Iterator $since b415,
		/ @ "workaround for Visual C++ 2013" %Utilities $=
		(
			- DLD "redundant ';' after move constructor definition",
			* "missing defaulted default and copy constructors" $since b483
		),
		/ @ "explicit speclization" @ "class template %sequence_project" $=
		(
			/ DLD "implementation" ^ "alias declaration",
				// It might improve some performance.
			* $revert_ex(b477) "missing workaround for Visual C++ 2013"
				$since b477
		),
		/ %Any $=
		(
			+ "binary type traits %is_aligned_storable",
			/ @ "class template %value_handler" $=
			(
				(
				/ DLD "implemented function %get_pointer"
					^ "template specialization" ~ "conditional expression";
				$dep_to "eliminated storage access overrun evaluation"
				),
				(
				$dep_from "%is_aligned_storable";
				/ $dev "simplified default template argument"
					@ "class template %value_handler" ^ "%is_aligned_storable"
				)
			),
			/ @ "class template %pod_storage" @ %Any $=
			(
				* "cv-qualifier not removed for access"
					@ "copy constructor, %operator=" $since b352
					$= (/ "implementation" ^ "%decay_t"
						~ "%remove_reference_t"),
				+ DLD 'inline' @ "all user-defined function templates",
				(
				+ "function template %assign";
				/ "implemented function template %operator=" ^ "%assign";
				* $comp "workaround of Visual C++ 2013 warning C4717"
				),
				(
				$dep_from "eliminated storage access overrun evaluation";
					// Otherwise static assertion would fail.
				+ $dev "static assertion for size and alignment constraints"
					@ "2 function templates %access"
				),
				+ "explicitly defaulted (copy constructor, copy %operator=)"
			)
		)
	)
),

b502
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %ValueNode $=
				(
					/ @ "class %ValueNode" $=
					(
						/ "inline function %GetContainer"
							-> "non-inline function %GetContainerRef",
						(
						+ "children container data member";
						/ DLD "constructor implementation for children node",
						/ DLD "children node access implementation"
							@ "functions %(at, begin, end)",
						/ DLD "implementation" @ "operator(bool, !)",
							// For backward compatibility, only treated as \
								empty node when both value and container are \
								empty.
						/ "copy constructor implementation" ^ "non-inline \
							function" ~ "explicitly defaulted function",
						/ "2 operator=" -> "unifying operator=",
						+ "constructor 'ValueNode(unique_ptr<Container>)'",
						+ "constructor 'ValueNode(Container)'",
						+ "2 constructor templates specifying all data members \
							being initialized";
						$dep_to "split value node children container"
						),
						(
						$dep_from "split value node children container";
						/ DLD "implementation" @ "function template %PackNodes"
						)
					)
				),
				+ "function templates %(CheckScalar; CheckNonnegativeScalar,
					CheckPositiveScalar)" @ %YSLib.Core.YCoreUtilities
			),
			/ %UI $=
			(
				(
				$dep_from "split value node children container";
				/ DLD "implementation" @ "member function \
					%WidgetLoader::TransformUILayout" @ %Loader
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\brief'
					@ "class %InvalidationUpdater" @ %Animation $=
				(
					* @ "data member %Invalidate" $since b457,
					* @ "static function %DefaultInvalidate" $since b462,
					* @ "data member %Invalidate" $since b482
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\since'
					@ "data member %TextBox::CaretBrush" @ %TextBox $since b484
			)
		),
		(
		$dep_from "split value node children container";
		/ DLD "implementation" @ "function %TransformNPLA1" @ %NPLA1
		),
		/ %'YCLib_(Android)'.Android $=
		(
			* "missing tracking cursor position for motion event"
				@ "function %SaveInput" @ "platform %Android" $since b501,
			+ "class %platform_ex::InputQueue"
			- "entry function definition ::ANativeActivity_onCreate"
				>> %'Helper_(Android)'.AndroidHost
		),
		/ %Helper $=
		(
			/ @ "platform %Android" @ %InputManager $=
			(
				/ "implemented cursor position forwarding"
					@ "member function %InputManager::Update",
				(
				$dep_from "Android host declarations";
				/ "implemented default widget pointer returning"
					@ "member function %InputManager::Update"
					// So %GUIShell is now are usable.
				),
				(
				$dep_from %YSLib.Core.CoreUtilities;
				/ DLD "simplified implementation" ^ "%CheckPositiveScalar"
				)
			),
			/ %Host $=
			(
				/ "class %Host" @ "namespace %YSLib::Host"
					>> "namespace %YSLib",
				* "missing 'YF_API'" @ "class %Environment" @ %Host
					$since b431;
				/ @ "platform %Android" $=
				(
					+ "class name declaration %AndroidScreen"
						@ "namespace %Devices",
					+ "class name declaration %NativeHost"
						@ "namespace %Android";
					$dep_to "Android host declarations"
				)
			),
			+ "macro %YFM_Android_Helper_AndroidHost" @ %YModule
		),
		+ %'Helper_(Android)' $=
		(
			+ "screen implementation unit",
			+ %AndroidHost $=
			(
				+ "struct ConfigurationDeleter; class %NativeHost";
				+ "native host implementation",
				+ "function %(FetchNativeHost, FetchDefaultDesktop)"
			)
		),
	),
	+ "entry point function definition %::y_android_main" @ "platform %Android"
		@ %Main_ARM9
		// Still not fully supported.
),

b501
(
	/ $doc "Doxygen comments" @ %YFramework $=
	(
		* "wrong directive '\def' used" ~ '\brief'
			@ "macro %YCL_KEYSTATE_DIRECT" @ %YCLib.Input $since b321,
		* "wrong directive '\param' used" ~ '\note' @ "function \
			%FetchNativeLooper" @ %'YCLib_(Android)'.Android $since b499,
		* "wrong directive '\param' used" ~ '\note'
			@ "member function %TextBox::GetCaretPosition"
			@ %YSLib.UI.TextBox $since b484
	),
	* "crash on setting saving" @ %YReader.ReaderSettingUI $since b500 $=
		(* $dev "wrong widget path accessed" $since b500),
		// This might corrupt the configuration file, which cause big trouble \
			on DS.
	/ %YFramework $=
	(
		/ %NPL.NPLA1 $=
		(
			+ 'using NodeMapper = ValueNode(const ValueNode&);';
			+ "function %MapNPLA1Node;
			+ "parameter with default argument 'std::function<NodeMapper> \
				= MapNPLA1Node' @ %(TransformNPLA1Node, LoadNPLA1), function \
				template %LoadNPLA1)"
		)
		/ %YSLib.Core.ValueNode $=
		(
			/ @ "class %ValueNode" $=
			(
				+ "function %swap",
				/ $dev "member %Vaule" ^ "member initializer '{}'",
				/ DLD "functions operator%=" -> "non-inline functions"
			),
			(
			$dep_from "member function %ValueNode:swap";
			+ "function %swap for %ValueNode"
			),
			/ "implementation" @ "inline functions %(AccessNode, AccessNodePtr)"
				^ "macros %(PDefH, ImplRet)"
		),
		/ "implemented key tapping up and down for motion events"
			@ "platform %Android" @ %YCLib.Input
	),
	+ $dev $repo "tags ('PreAlpha', 'V0.5') to revision 372",
	/ "all 'return nullptr'" -> 'return {}'
),

b500
(
	/ %YFramework,
	(
		/ %YSLib.UI $=
		(
			* "missing clip area intersection for arrow rendering"
				@ "member function" ("%DropDownList::Refresh" @ %ComboList,
				"%Menu::DrawItem" @ %Menu) $since b452;
				// An obvious example is in the reader setting UI @ YReader, \
					moving over or dragging the scroll time setting drop down \
					list, the arrow of behind drop down button would be \
					wrongly rendered visible, rather than hiding hehind.
			(
			/ "implemented arrow rendering" ^ "function %Drawing::DrawArrow"
				~ "function %UI::DrawArrow" @ "member function \
				%AScrollBar::InitializeArrowPainters" @ %Scroll;
			* $comp "wrong arrow might be rendered" $since b452,
				// Ditto.
			- "function %UI::DrawArrow" @ %YWidget
			),
			/ DLD "simplified implementation" @ "function %RectDrawArrow"
				@ %YStyle
		),
		/ "default configuration" @ "platform %Win32" @ %Helper.Initialization
			$=
		(
			/ "default root directory macro %ROOTW" -> "." ~ "H:\\NDS\\EFSRoot",
			/ "default font path macro %DEF_FONT_PATH"
				-> "C:\\Windows\\Fonts\\SimSun.ttc"
				~ 'ROOTW "\\Font\\FZYTK.TTF"',
			/ "default font directory macro %DEF_FONT_DIRECTORY"
				-> 'ROOTW "\\Font\\"' ~ 'ROOTW "\\"',
			/ "default data directory macro %DEF_DATA_DIRECTORY"
				-> 'ROOTW "\\Data\\"' ~ 'ROOTW "\\"'
		)
	),
	/ %YReader $=
	(
		/ %ShlExplorer $=
		(
			/ "test widget location"
			/ @ "class %ShlExplorer"  $=
			(
				+ "default text" @ "test label",
				/ "avoided potentional leak for %unique_ptr setting"
					^ "%make_unique"~ "member function %unique_ptr::reset"
					@ "%yunseq segments",
				/ @ "animation test" $=
				(
					* "animated wrongly by irrevalent invalidation" $since b451,
					/ "refined test animation in test tab page"
						~ "in setting panel"
				)
			)
		),
		+ "function %AddButtonTabBar" @ %Shells,
		+ "rearranged setting UI in 3 tab pages" @ %ReaderSettingUI
	),
	/ $doc "updated Doxygen file" $=
	(
		^ "Doxygen 1.8.7" ~ "Doxygen 1.8.2",
		/ 'YFramework/include/freetype YFramework/include/ft2build.h'
			@ "%EXCLUDE" -> '.git Data Tools',
		/ "set %SHORT_NAMES" -> 'YES' ~ 'NO'
			// Workaround of error: 'could not open file for writing' with a \
				name containing a tab.
	)
);

////

