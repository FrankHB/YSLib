/*
	© 2014 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha5.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha5 。
\version r638
\author FrankHB <frankhb1989@gmail.com>
\since build 500
\par 创建时间:
	2014-05-29 19:30:47 +0800
\par 修改时间:
	2014-06-15 12:00 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha5
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b500, $now];

$now
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "overrode recursive %TransformNPLA1 call for children nodes"
					@ "function %TransformNPLA1",
					// Now the input of the mapper function is AST instead of \
						semantics tree. This allows the AST transformation \
						being overridden. Order of AST terms can be directly \
						reserved.
				+ "function %ParseNPLANodeString"
			),
			/ %Lexical $=
			(
				/ "function %MakeEscape" -> "function %Unescape" $=
				(
					/ DLD "reserved space of %string object at first"
						@ "implementation",
					* "missing unescaping quotes characters" $since b335,
					* "missing unescaping characters with prefix backslash"
						$since b335,
						// The result would be wrongly escaped when containing \
							unexpected escape sequences.
					/ "avoided adding trailing backslash when unescapable"
						// It is useful for literal only. See %UnescapeLiteral.
				),
				+ "function %UnescapeLiteral"
					// It would add backslash when necessary.
			),
			/ $revert(b343) "unescaped node name" @ "%operator<<"
				@ %Configuration
		),
		* "missing several '\n'" @ "tracing" @ %Helper.Initialization
			$since b506
	),
	/ %YReader $=
	(
		/ "avoided literal conversion for unescaping names" @ "member \
			functions %ShlReader::(LoadBookmarks, SaveBookmarks)" @ %ShlReader,
			// Now only escaped names would be stored by NPLA1 configuration, \
				so explicit unescaping in user code is usually redundant. \
				However, quotes would not be automatically added.
		$dep_from ("function %Unescape" @ %YFramework.NPL.Lexical,
			%YFramework.NPL.Configuration);
		* $comp "saved escaped file path for bookmark entry" @ %YReader.Bookmark
			$since b392
			// Loading bookmark would fail when the path containing NPL \
				escapable sequence.
	)
),

b507
(
	/ %YBase.YStandardEx $=
	(
		(
		+ %BitSegment;
		/ "class template %bitseg_iterator" @ %Iterator >> %BitSegment
		),
		+ "meta operation templates %((sequence_split_n; sequence_split_n_t),
			(sequence_fold; vseq_fold))" @%Variadic,
		(
		$dep_from (%ystdex::sequence_split_n @ %Variadic);
		+ "meta operation specializations %sequence_split_n @ %Tuple
		),
		(
		$dep_from (%ystdex::sequence_fold @ %Variadic);
		+ "meta operation specializations %sequence_fold @ %Tuple
		),
		+ "binary functors %(plus, multiply)" @ %Functional
			// Only added associative built-in operations.
	),
	/ %YFramework $=
	(
		/ @ %YCLib.Video $=
		(
			/ @ "struct %XYZATrait" @ %YCLib.Video $=
			(
				- "static data member %(GAligned, RAligned)",
				(
				/ "using alias %IntegerType" ^ "%BitsN" ~ "%UIntBitsN",
				- "static data member %Width";
				- "static data member %UIntBitsN"
				)
			),
			(
			+ "class templates %XYZAMaskTrait;
			/ @ "class templates %(BGRA, RGBA)" $=
			(
				+ "using alias %MaskTrait"
				/ "colors mask values" ^ "%MaskTrait" ~ "%Trait";
			);
			- "data members %(AMask, XMask, YMask, ZMask)"
				@ "class template %XYZATrait"
			),
			+ "class templates %(AXYZMaskTrait; ARGB)",
			* "pixel RGB component wrongly reversed" @ "platform %Android"
				@ %Video $since b492
			(
				/ "macro definition %YCL_PIXEL_FORMAT_XYZ888 with value"
					-> '0xAABBCCDD' ~ '0xAADDCCBB',
				/ "using alias %PixelType" -> "%RGBA<8, 8, 8, 8>"
					~ "%BGRA<8, 8, 8, 8>",
				/ "implementation of functions %FetchOpaque"
			)
		)
	)
),

b506
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %LoadNPLA1File" $=
				(
					+ "debug trace after configuration creation",
					+ "error description" @ "exception thrown when failed \
						writing file"
				),
				+ "trace" @ "function %ReadConfiguration",
				+ "default configuration" @ "platform %Android",
				/ "working root path located at runtime",
				/ @ "function %HandleFatalError" $=
				(
					/ "log level" -> 'Emergent' ~ 'Notice',
					- "separator lines" @ "error message" @ "platforms !%DS"
				),
				+ "trace for character mapping file path"
					@ "function %LoadComponents"
			),
			+ "support for platform %Android" @ "constructor %DSApplication"
				@ %DSMain
		),
		/ %YSLib $=
		(
			* "missing null pointer check" @ "encoding detection"
				@ "class %TextFile" @ %TextFile $since b290,
			+ "32-bit ABGR pixel conversion support" @ "class %HBitmap"
				@ %Adaptor.Image
		)
		+ "function %Android::FetchDefaultWindow"
			@ %'Helper_(Android)'.AndroidHost
	)
),

b505
(
	/ %YFramework $=
	(
		* "wrong condition for defining macro %YAssert" @ %YCLib.Debug $since b499
			$= ('ifdef YAssert' -> 'ifdef YB_Use_YAssert'),
			// This caused unintended assertions for release configurations.
		/ %Helper $=
		(
			+ "debug trace" @ "constructor %Environment" ^ 'YCL_Trace' @ %Host,
			+ "debug trace" @ "function %Devices::InitDSScreen" ^ 'YTraceDe'
				@ %DSScreen,
			/ @ %Initialization $=
			(
				/ "trace output" @ ^ "%YTraceDe"
					~ "directly use of standard function"
					// For platform %Android the level is "%Notice" in normal \
						cases and "%Err" in catch blocks. For other platforms, \
						the level is ignored and there should be no behavior \
						changed.
				+ "trace output" @ "function %Uninitialize",
				+ "debug trace output" @ "function %(LoadNPLA1File, \
					WriteConfiguration)" ^ "%YTraceDe"
			)
		),
		/ %Service $=
		(
			/ @ "class %File" @ %File $=
			(
				* "missing clean file pointer" @ "function %Close" $since
					$before b132,
				+ "trace" @ "function %(Open, Close), destructor" ^ "%YTraceDe"
			),
			* "missing check file pointer before writing BOM"
				@ "constructor %TextFile" @ %TextFile $since b341
				// Assertion failure.
		)
	)
	/ "assert string" @ "%YAssertNonnull" -> "Null reference found."
		~ "Null pointer found." @ %YBase.YStandardEx.CAssert,
	/ "all nonnull handle, shell handle, array pointer, buffer pointer, text \
		buffer pointer or updater assertions" ^ "%YAssertNonnull" ~ "YAssert",
	/ %Main $=
	(
		- "explicit 'return 0;'" @ "function ::main";
			// So both function 'int main()' with implicit 'return 0;' and \
				entry point function with void return type can be simply \
				coexisted without modifying return statement. Note that now \
				the program is still not fully supported so it would crash \
				intentionally.
		/ "merged entry point function %::y_android_main with function %::main"
			^ "conditional inclusion",
		+ "debug trace" @ "function %::main" ^ 'YTraceDe' @ %Main
	),
	* DLB "missing dependency for target %OUTPUTSO on .a files" @ "makefile"
		@ "platform %Android" $since b497
),

b504
(
	/ %YFramework $=
	(
		/ "simplified semantics tree mapping" @ %NPL.NPLA1 $=
		(
			/ $lib "accepted null mapper" @ "function %TransformNPLA1";
				// No-op.
			/ "default mapper argument" -> '{}' ~ 'MapNPLA1Node' @ "functions \
				%(TransformNPLA1, LoadNPLA1), function template %LoadNPLA1";
				// Default behavior changed. Now no children are dropped on \
					default.
			- "function %MapNPLA1Node"
		),
		/ %'Helper_(Android)' $=
		(
			/ %AndroidHost $=
			(
				/ "window creating now on native window resizing"
					~ "on native window creating",
				* "invalid native window access on termination" $since b502
					$= (+ "waiting for screen object release"
					@ "native window destroying"),
				(
				$dep_from "class %Devices::AndroidScreen";
				* "hard-coded screen size initialized" @ "class %NativeHost"
					@ %AndroidHost $since b502
				)
			),
			/ %AndroidScreen $=
			(
				+ "constructor 'AndroidScreen(::ANativeWindow&);'"
					@ "class %Devices::AndroidScreen"
				- "function %Android::FetchScreenSize
			)
		)
	),
	(
	$dep_from %YFramework.NPL.NPLA1;
	/ "logging" ^ 'YTraceDe' @ "functions %(LoadBookmarks, \
		LoadGlobalConfiguration, SaveBookmarks, SaveGlobalConfiguration)"
		@ "class %ShlReader" @ %YReader
	)
),

b503
(
	/ %Main_ARM9 => %Main,
	/ %YFramework $=
	(
		/ %Helper_(DS) $=
		(
			* DLD "missing parameter" @ "submodule names" $since b431,
			+ DLD '\ingroup DS' @ "private submodlues"
		),
		+ "2 function %SetChildren" @ "class %ValueNode"
			@ %YSLib.Core.ValueNode,
		(
		* "implementation" @ "function %WriteConfiguration"
			@ %Helper.Initialization $since b502;
			$dep_to "saving empty configuration"
		),
		/ %Helper_(Android) $=
		(
			/ %AndroidScreen $=
			(
				/ @ "constructor %AndroidScreen" $=
				(
					* "hard-coded screen buffer size" @ $since b502,
					+ "debug trace for size",
					- "hard-coded default argument"
					// It is worse that the default argument of the window \
						size was not the same as the previously hard-coded \
						screen buffer size. The width and height were \
						occasionally swapped.
				),
				+ "function %FetchScreenSize"
					// Not implemented by returning still hard-coded value \
						'{480, 800}'.
			),
			/ @ "class %NativeHost" @ %AndroidHost $=
			(
				+ "function %GetActivityRef",
				/ DLD "member initializer" @ "%p_desktop"
					-> ("initialization" @ "constructor")
					// To avoid invalid use of incomplete type.
			)
		)
	),
	/ %YReader.ShlReader $=
	(
		/ @ "class %ShlReader" $=
		(
			/ "simplified implementation" @ "function %SaveBookmarks",
			* "wrongly cleared all content on saving"
				@ "static function %SaveGlobalConfiguration" $since b502;
		),
		(
		$dep_from "saving empty configuration",
		$dep_from "%ShlReader::SaveGlobalConfiguration";
		* $comp "saving empty configuration exiting reader shell"
		)
	),
	/ %YBase.YStandardEx $=
	(
		* "missing workaround for Visual C++2013" @ "move constructor"
			@ "class template %transformed_iterator" @ %Iterator $since b415,
		/ @ "workaround for Visual C++2013" %Utilities $=
		(
			- DLD "redundant ';' after move constructor definition",
			* "missing defaulted default and copy constructors" $since b483
		),
		/ @ "explicit speclization" @ "class template %sequence_project" $=
		(
			/ DLD "implementation" ^ "using alias declaration",
				// It might improve some performance.
			* $revert_ex(b477) "missing workaround for Visual C++2013"
				$since b477
		),
		/ %Any $=
		(
			+ "binary type traits %is_aligned_storable",
			/ @ "class template %value_handler" $=
			(
				(
				/ DLD "implementation" @ "function %get_pointer"
					^ "template specialization" ~ "conditional expression";
				$dep_to "eliminated storage access overrun evaluation"
				),
				(
				$dep_from "%is_aligned_storable";
				/ $dev "simplified default template argument"
					@ "class template %value_handler" ^ "%is_aligned_storable"
				)
			),
			/ @ "class template %pod_storage" @ %Any $=
			(
				* "cv-qualifier not removed for access"
					@ "copy constructor, %operator=" $since b352
					$= (/ "implementation" ^ "%decay_t"
						~ "%remove_reference_t"),
				+ DLD 'inline' @ "all user-defined function templates",
				(
				+ "function template %assign";
				/ "implementation" @ "function template %operator=" ^ "%assign";
				* $comp "workaround of Visual C++ 2013 warning C4717"
				),
				(
				$dep_from "eliminated storage access overrun evaluation";
					// Otherwise static assertion would fail.
				+ $dev "static assertion for size and alignment constraints"
					@ "2 function templates %access"
				),
				+ "explicitly defaulted (copy constructor, copy %operator=)"
			)
		)
	)
),

b502
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %ValueNode $=
				(
					/ @ "class %ValueNode" $=
					(
						/ "inline function %GetContainer"
							-> "non inline function %GetContainerRef",
						(
						+ "children container data member";
						/ DLD "constructor implementation for children node",
						/ DLD "children node access implementation"
							@ "functions %(at, begin, end)",
						/ DLD "implementation" @ "operator(bool, !)",
							// For backward compatibility, only treated as \
								empty node when both value and container are \
								empty.
						/ "copy constructor implementation" ^ "non inline \
							function" ~ "explicitly defaulted function",
						/ "2 operator=" -> "unification operator=",
						+ "constructor 'ValueNode(unique_ptr<Container>)'",
						+ "constructor 'ValueNode(Container)'",
						+ "2 constructor templates specifying all data members \
							being initialized";
						$dep_to "split value node children container"
						),
						(
						$dep_from "split value node children container";
						/ DLD "implementation" @ "function template %PackNodes"
						)
					)
				),
				+ "function templates %(CheckScalar; CheckNonnegativeScalar,
					CheckPositiveScalar)" @ %YSLib.Core.YCoreUtilities
			),
			/ %UI $=
			(
				(
				$dep_from "split value node children container";
				/ DLD "implementation" @ "member function \
					%WidgetLoader::TransformUILayout" @ %Loader
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\brief'
					@ "class %InvalidationUpdater" @ %Animation $=
				(
					* @ "data member %Invalidate" $since b457,
					* @ "static function %DefaultInvalidate" $since b462,
					* @ "data member %Invalidate" $since b482
				),
				* $doc "wrong Doxygen directive '\build'" ~ '\since'
					@ "data member %TextBox::CaretBrush" @ %TextBox $since b484
			)
		),
		(
		$dep_from "split value node children container";
		/ DLD "implementation" @ "function %TransformNPLA1" @ %NPLA1
		),
		/ %'YCLib_(Android)'.Android $=
		(
			* "missing tracking cursor position for motion event"
				@ "function %SaveInput" @ "platform %Android" $since b501,
			+ "class %platform_ex::InputQueue"
			- "entry function definition ::ANativeActivity_onCreate"
				>> %'Helper_(Android)'.AndroidHost
		),
		/ %Helper $=
		(
			/ @ "platform %Android" @ %InputManager $=
			(
				/ "implemented cursor position forwarding"
					@ "member function %InputManager::Update",
				(
				$dep_from "Android host declarations";
				/ "implemented default widget pointer returning"
					@ "member function %InputManager::Update"
					// So %GUIShell is now are usable.
				),
				(
				$dep_from %YSLib.Core.CoreUtilities;
				/ DLD "simplified implementation" ^ "%CheckPositiveScalar"
				)
			),
			/ %Host $=
			(
				/ "class %Host" @ "namespace %YSLib::Host"
					>> "namespace %YSLib",
				* "missing 'YF_API'" @ "class %Environment" @ %Host
					$since b431;
				/ @ "platform %Android" $=
				(
					+ "class name declaration %AndroidScreen"
						@ "namespace %Devices",
					+ "class name declaration %NativeHost"
						@ "namespace %Android";
					$dep_to "Android host declarations"
				)
			),
			+ "macro %YFM_Android_Helper_AndroidHost" @ %YModule
		),
		+ %'Helper_(Android)' $=
		(
			+ "screen implementation unit",
			+ %AndroidHost $=
			(
				+ "struct ConfigurationDeleter; class %NativeHost";
				+ "native host implementation",
				+ "function %(FetchNativeHost, FetchDefaultDesktop)"
			)
		),
	),
	+ "entry point function definition %::y_android_main" @ "platform %Android"
		@ %Main_ARM9
		// Still not fully supported.
),

b501
(
	/ $doc "Doxygen comments" @ %YFramework $=
	(
		* "wrong directive '\def' used" ~ '\brief' @ "macro %YCL_KEYSTATE_DIRECT"
			@ %YCLib.Input $since b321,
		* "wrong directive '\param' used" ~ '\note' @ "function %FetchNativeLooper"
			@ %'YCLib_(Android)'.Android $since b499,
		* "wrong directive '\param' used" ~ '\note'
			@ "member function %TextBox::GetCaretPosition"
			@ %YSLib.UI.TextBox $since b484
	),
	* "crash on setting saving" @ %YReader.ReaderSettingUI $since b500 $=
		(* $dev "wrong widget path accessed" $since b500),
		// This might corrupt the configuration file, which cause big trouble \
			on DS.
	/ %YFramework $=
	(
		/ %NPL.NPLA1 $=
		(
			+ 'using NodeMapper = ValueNode(const ValueNode&);';
			+ "function %MapNPLA1Node;
			+ "parameter with default argument 'std::function<NodeMapper> \
				= MapNPLA1Node' @ %(TransformNPLA1Node, LoadNPLA1), function \
				template %LoadNPLA1)"
		)
		/ %YSLib.Core.ValueNode $=
		(
			/ @ "class %ValueNode" $=
			(
				+ "function %swap",
				/ $dev "member %Vaule" ^ "member initializer '{}'",
				/ DLD "functions operator%=" -> "non-inline functions"
			),
			(
			$dep_from "member function %ValueNode:swap";
			+ "function %swap for %ValueNode"
			),
			/ "implementation" @ "inline functions %(AccessNode, AccessNodePtr)"
				^ "macros %(PDefH, ImplRet)"
		),
		/ "implemented key tapping up and down for motion events"
			@ "platform %Android" @ %YCLib.Input
	),
	+ $dev $repo "tags ('PreAlpha', 'V0.5') to revision 372",
	/ "all 'return nullptr'" -> 'return {}'
),

b500
(
	/ %YFramework,
	(
		/ %YSLib.UI $=
		(
			* "missing clip area intersection for arrow rendering"
				@ "member function" ("%DropDownList::Refresh" @ %ComboList,
				"%Menu::DrawItem" @ %Menu) $since b452;
				// An obvious example is in the reader setting UI @ YReader, \
					moving over or dragging the scroll time setting drop down \
					list, the arrow of behind drop down button would be \
					wrongly rendered visible, rather than hiding hehind.
			(
			/ "implemented arrow rendering" ^ "function %Drawing::DrawArrow"
				~ "function %UI::DrawArrow" @ "member function \
				%AScrollBar::InitializeArrowPainters" @ %Scroll;
			* $comp "wrong arrow might be rendered" $since b452,
				// Ditto.
			- "function %UI::DrawArrow" @ %YWidget
			),
			/ DLD "simplified implementation" @ "function %RectDrawArrow"
				@ %YStyle
		),
		/ "default configuration" @ "platform %MinGW32" @ %Helper.Initialization
			$=
		(
			/ "default root directory macro %ROOTW" -> "." ~ "H:\\NDS\\EFSRoot",
			/ "default font path macro %DEF_FONT_PATH"
				-> "C:\\Windows\\Fonts\\SimSun.ttc"
				~ 'ROOTW "\\Font\\FZYTK.TTF"',
			/ "default font directory macro %DEF_FONT_DIRECTORY"
				-> 'ROOTW "\\Font\\"' ~ 'ROOTW "\\"',
			/ "default data directory macro %DEF_DATA_DIRECTORY"
				-> 'ROOTW "\\Data\\"' ~ 'ROOTW "\\"'
		)
	),
	/ %YReader $=
	(
		/ %ShlExplorer $=
		(
			/ "test widget location"
			/ @ "class %ShlExplorer"  $=
			(
				+ "default text" @ "test label",
				/ "avoided potentional leak for %unique_ptr setting"
					^ "%make_unique"~ "member function %unique_ptr::reset"
					@ "%yunseq segments",
				/ @ "animation test" $=
				(
					* "animated wrongly by irrevalent invalidation" $since b451,
					/ "refined test animation in test tab page"
						~ "in setting panel"
				)
			)
		),
		+ "function %AddButtonTabBar" @ %Shells,
		+ "rearranged setting UI in 3 tab pages" @ %ReaderSettingUI
	),
	/ $doc "updated Doxygen file" $=
	(
		^ "Doxygen 1.8.7" ~ "Doxygen 1.8.2",
		/ 'YFramework/include/freetype YFramework/include/ft2build.h'
			@ "%EXCLUDE" -> '.git Data Tools',
		/ "set %SHORT_NAMES" -> 'YES' ~ 'NO'
			// Workaround of error: 'could not open file for writing' with a \
				name containing a tab.
	)
);

////

