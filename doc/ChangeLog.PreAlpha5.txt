/*
	© 2014-2015 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.PreAlpha5.txt
\ingroup Documentation
\brief 版本更新历史记录 - PreAlpha5 。
\version r9757
\author FrankHB <frankhb1989@gmail.com>
\since build 500
\par 创建时间:
	2014-05-29 19:30:47 +0800
\par 修改时间:
	2015-02-04 08:45 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::PreAlpha5
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b500, $now];

$now
(
	/ %YFramework $=
	(
		/ $dev @ "platform %Win32" @ %YCLib.NativeAPI $=
		(
			- "macro %NAME_MAX",
			/ "defined macro %S_IFIFO only when undefined"
				// To be compatible with MSys.
		),
		/ %YSLib $=
		(
			/ @ "class template %GEvent" @ %Core.YEvent $=
			(
				/ "alias %SizeType" => "%size_type",
				* "missing parameter" @ "function %count" $since b572,
				+ "aliases %(const_reference, reference, value_type)",
				(
				+ "alias %iterator";
				/ "simplified return type" @ "%(begin, end)",
				),
				(
				+ "aliases %reverse_iterator";
				+ "member functions %(rbegin, rend)"
				),
				(
				+ "alias %const_iterator";
				+ "member functions" @ "%(cbegin, cend)"
				),
				(
				+ "alias %const_reverse_iterator";
				+ "member functions" @ "%(crbegin, crend)"
				),
				/ "function %GetSize" >> "%size"
			),
			/ %UI $=
			(
				+ "function %LocateForTopOffset" @ %YUIContainer,
				/ @ "class %TimedHoverState" @ %Hover $=
				(
					+ $dev "brace-or-equal-initializer '{DefaultLocate}'"
						@ "%Locator",
					/ DLD "all 'Drawing::Point'" -> 'Point',
					/ "parameter" @ "function signature"
						@ "%(Locator, DefaultLocate)"
						-> 'const CursorEventArgs&' ~ 'const Point&',
					+ "static function %LocateForOffset"
				),
				/ %Label $=
				(
					+ "static member function %CalculateBounds"
						@ "class %Label",
					+ "functions %(MakeLabel, SetupContentsOf)"
				),
				/ "class name declaration 'class Window;'" -> 'class Panel;'
					@ "namespace %UI" @ %YComponent,
				/ @ "class %MenuHost" @ %Menu $=
				(
					/ "type" @ "data member %Frame" -> 'Panel&' ~ 'Window&',
					/ "parameter type" @ "constructor" -> 'Panel&' ~ 'Window&'
				)
			)
		),
		/ %Helper.HostedUI $=
		(
			+ "function %BindTimedTips" @ "hosted platforms !%Android",
			/ @ "function template %ActOnHover_ShowTopLevel" $=
			(
				+ "parameter 'int wstyle_ex = WS_EX_LAYERED | WS_EX_TOOLWINDOW";
				/ "extra style" ^ "parameter %wstyle_ex";
				/ $comp "shown without appearance in task bar"
			),
			/ "made defined" @ "hosted platforms !%Android"
				@ "function template %ActOnHover_ShowTopLevelAt",
				// However, only implemented for %Win32, others are with no-op.
			- $revert(b567) "functions %BindHoverControl",
			+ "function %SetupTimedTips"
		)
	),
	/ @ "class ImageControl" @ %YDE.ImageBrowser.ImageControl $=
	(
		+ "protected member 'Label lblCloseTips{};'";
		+ "tool tip for close button"
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%yuicont.cpp"
		=> "%YUIContainer.cpp", "label.h" => "%Label.h", "%label.cpp"
		=> "%Label.cpp", "%menu.h" => "%Menu.h", "%menu.cpp" => "%Menu.cpp")
		@ YFramework.YSLib.UI
),

b572
(
	/ DLD "simplified YSLib dependent implementation" ^ 'to_string'
		~ 'std::to_string' @ %YFramework $effective @ %(Helper.(Environment,
		HostRenderer), NPL.NPLA1, YSLib.Core.ValueNode),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ @ "class %InputTimer" @ %YGUI $=
				(
					/ @ "function %ResetInput" $=
					(
						+ "parameter with default argument \
							'const Duration& = DefaultDuration'",
						/ $dev $lib "implemented as inlined function"
							^ "%(PDefH, ImplExpr)"
					),
					+ DLD 'const' @ "declaration"
						@ "static yconstexpr data member %DefaultDuration"
						// This should be OK after G++ 4.6.
				),
				/ "all event types" %(YWidgetEvent, YControl)
					^ "event member type %FuncType" ~ "%Event",
				+ "class %TimedHoverInfo" @ %Hover,
				* "missing renaming for %yfocus.h" @ %YModules $since b571
			),
			/ %Service $=
			(
				/ %YTimer $=
				(
					/ @ "class %HighResolutionClock" $=
					(
						/ $dev $lib "member type %time_point"
							^ 'std::chrono::nanoseconds' ~ 'duration',
							// The %time_point here is always signed.
						/ "member type %duration" ^ "signed type as %rep"
							~ "unsigned type as %std::chrono::nanoseconds"
					),
					/ @ "friend function %Activate for class %Timer" $=
					(
						- "zero interval check",
						/ $dev $lib "implemented as inlined function"
							^ "%(PDefH, ImplExpr)"
					)
				),
				/ %YGDI $=
				(
					/ @ "class %Padding" $=
					(
						(
						+ DLD "brace-or-equal-initializer ' = 0'"
							@ "all data members";
						/ DLD "simplified default constructor"
							^ "macro %DefDeCtor",
						),
						/ DLD "implemented function %operator+="
							^ "macros %(PDefHOp, ImplRet)",
						+ "function %operator(-=, *=)"
					),
					/ DLD "implemented 'yconstfn' function %operator+"
						^ "macros %(PDefHOp, ImplRet)",
					+ "'yconstfn' functions (unary and binary %operator-, \
						%operator*) for %Padding",
					+ "function %operator- for %Rect and %Padding"
				)
			),
			+ 'ynothrow' @ ("all 2 functions %operator-=, \
				function %ClearContainers" @ "class %FontCache", \
				"member function %FontFamily::operator-=)") @ %Adaptor.Font,
			/ %Core.YEvent $=
			(
				/ @ "class template %GEvent" $=
				(
					(
					+ "2 functions %Insert";
					/ DLD "simplfied 2 functions %Add" ^ "%Insert",
					+ "2 function templates %Insert"
					),
					+ 'ynothrow' @ "function %clear",
					+ "2 functions %(begin, end)",
					+ "2 functions %(count, empty)",
					- "public data member %List"
				),
				- "macro %EventT" $dep_from %UI.(YWidgetEvent, YControl)
			)
		),
		/ $dev "all 'const Duration&' parameter" -> 'Duration'
			$effective %(YSLib.Service.Timer, UI.YGUI),
			// See $2015-01 @ %Documentation::Workflow::Annual2015. 
		/ $lib $design "simplified type of data member %Environment::MapPoint"
			@ "platform %Android" @ %Helper.Environment ^ $dep_from \
			("%ystdex::id_func_clr_t" @ %YBase.YStandardEx.Functional)
	),
	* "missing zero interval check on enabling automatic scrolling"
		@ "function %StartAutoScroll" $since b416 $orig (@ "function \
		%OnKeyDown" $since b405) @ "class %ShlReader" @ %YReader.ShlReader,
		// It would cause assertion failed when interval is set to zero after \
			enabling automatic scrolling.
	/ %YBase.YStandardEx $=
	(
		+ "meta operation templates %(sequence_join_n; sequence_join_n_t"
			@%Variadic;
		+ "meta operation specializations %sequence_join_n" @ %Tuple,
		/ %Functional $=
		(
			+ "meta operation templates %(make_function_type; \
				make_function_type_t)";
			+ "meta operation templates %(id_func_t; id_func_clr_t, \
				id_func_rr_t)" $dep_from %Tuple
		)
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ (("%ytimer.h" => "%YTimer.h",
		"%ytimer.cpp" => "%YTimer.cpp") @ %Service, ("%ygui.h" => "%YGUI.h",
		"ygui.cpp" => "%YGUI.cpp", "%ycontrol.h" => "%YControl.h",
		"%ywgtevt.h" => "%YWidgetEvent.h") @ %UI) @ YFramework.YSLib
),

b571
(
	* "wrong DS extension file paths" @ "platform %MinGW32"
		@ "Visual C++ project" $since b433,
	/ %YFramework $=
	(
		/ %Helper $=
		(
			+ "function %Wait" @ "class %HostRenderer" @ %HostRenderer;
			/ DLD "simplified implementation" @ "function %WaitForHostWindow"
				^ "%HostRenderer::Wait",
			/ @ "function %InputManager::Update" @ %InputManager $=
			(
				/ DLD "cursor mapping" !^ "window pointer argument",
				/ "record key state even if no foreground window found"
			),
			/ @ "class %Environment" @ %Environment $=
			(
				/ @ "platform %Win32" $=
				(
					+ "data member 'std::function<pair<Host::Window*, \
						Drawing::Point>(const Drawing::Point&)> MapPoint{};'",
					+ "function %MapTopLevelWindowPoint",
					+ "data member 'UI::Panel Desktop{};'"
				),
				/ "function %MapCursor" $=
				(
					- "parameter" $dep_from %InputManager,
					- $revert(b568) "host window pointer selected"
						@ "return type",
					/ "call %MapPoint if it is nonnull before returning"
						$dep_from "%MapPoint"
				),
				+ "root desktop support" $dep_from %Desktop
			),
			/ @ "class %HostRenderer" @ %HostRenderer $=
			(
				// Currently both widget view initialization and destruction \
					are implemented only for platform %Win32.
				+ "view initialization"
					// Set %Windows::UI::ControlView as view for platform \
						%Win32.
				+ "destructor",
				/ "supported resizing only for view of type %UI::View"
					@ "function %Update"
				(
				+ "data member 'bool RootMode{};'";
				+ "initialized %RootMode to true only if determined the view \
					is of the root widget"
					// Currently only %View detected.
				)
			),
			/ %HostedUI $=
			(
				- "set view location to origin" @ "function %ShowTopLevel"
					@ "platform %Win32",
				(
				/ @ "function %DragWindow" $=
				(
					/ "adjust host window bounds" @ "platform %Win32"
						^ "%Host::Window::(MoveClient, GetClientLocation)"
						~ "%Host::Window::(Move, GetLocation)",
					+ "3rd parameter 'bool = {}' to support switching root mode"
				);
				/ "bound root mode" @ "function %ShowTopLevelDraggable"
				)
			)
		),
		+ "initialization of %Environment::MapPoint"
			@ "constructor %DSApplication" @ "platform %Win32"
			@ %'Helper_(DS)'.DSMain $dep_from %Helper.Environment,
		/ %YSLib.UI $=
		(
			/ "data member %BorderResizer::HostMode" => "%RootMode" @ %Border,
			/ @ "function %DoRequestFocus" @ %YFocus $=
			(
				/ $design "unnecessary %IsFocused call function %DoRequestFocus"
					-> "assertion",
				/ DLD "removed unnecessary %DoReleaseFocus call when second \
					parameter is %true"
			),
			/ "swapped data members between new and old views before set view \
				pointer" @ "%Widget::SetView" @ %YWidget,
			+ "member function %AView::swap" @ %YWidgetView,
			/ "function %Caret::Check" @ %TextBox $=
			(
				* "false positive of assertion failure" $since b483
					$= (- "assertion for cascade focus");
					// Because the indirect parent widget focus can not \
						detected efficiently and use of raw focus API should \
						not be forbidden, the assertion here is not appropriate.
				+ "call %Stop to stop caret when cascade focus check failed"
			)
		)
	),
	/ @ %YDE.ImageBrowser $=
	(
		/ %ImageControl $=
		(
			/ "turned off border host mode" @ "constructor",
			+ "member function %ImageControl::SetRootMode" $dep_from
				%YFramework.YSLib.UI.Border
		);
		/ "set root mode according to host renderer state" @ %Main $dep_from
			%YFramework.Helper.HostRenderer
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%yfocus.h" => "%yfocus.h",
		"%yfocus.cpp" => "%YFocus.cpp") @ YFramework.YSLib.UI
),

b570
(
	/ DLD "header inclusion" ^ 'YFM_DS_Helper_DSMain' ~ '<Helper/DSMain.h>'
		@ %YReader.DSReader,
	/ %YFramework $=
	(
		+ %Helper_(MinGW32) $=
			(+ %Win32Control $=
				(+ "classes %(ViewSignal; ControlView)")),
		/ %Helper $=
		(
			/ "member function %Window::GetHost" => "%GetEnvrionmentRef"
				@ %HostWindow,
			/ "member function 'Environment& GetEnvironment() ynothrow'"
				-> 'Environment& GetEnvironmentRef() const ynothrow'
				@ "class %GUIApplication" @ %GUIApplication,
			/ @ "function %ShowTopLevel" @ "platform %Win32" @ %HostedUI $=
			(
				/ "set widget location if and only if not %Point::Invalid",
				/ "set widget location for client area" ~ "host window",
				- $revert(b548) "last parameter"
			),
			/ DLD "implemented constructors %HostRenderer by private \
				delegating constructor" @ %HostRenderer
		),
		/ "platform %Win32" @ %YCLib.HostedGUI $=
		(
			(
			+ "member function %WindowReference::(MoveClient, SetBounds)";
			/ $design $comp
				"exception string for %SetWindowPos on move operations",
			+ ('using WindowReference::MoveClient;',
				'using WindowReference::SetBounds;') @ "class %HostWindow"
			),
			/ "no redrawing would be performed" @ "functions %(Resize, \
				ResizeClient, SetClientBounds)" @ "class %WindowReference"
		),
		/ %YSLib.UI $=
		(
			* "wrong offset used when the painted widget is not the child of \
				the widget which owns the buffered renderer"
				@ "member function %BufferedRenderer::Validate" @ %Renderer
				$since b278,
			- $re_ex(b406) '&&' @ "parameter"
				@ "member function %Widget::SetView" @ %YWidget,
				// See $2015-01 @ %Documentation::Workflow::Annual2015.
		)
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective
		@ ("%yrender.cpp" => "%YRenderer.cpp") @ YFramework.YSLib.UI;
),

b569
(
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			/ "virtual destructor" @ "class %Renderer" @ %Renderer
				-> "base class %ystdex::cloneable",
			(
			/ %YWidgetView $=
			(
				+ "abstract class %AView with base class %ystdex::cloneable",
				/ @ "class %View"
				(
					/ "all public data members" >> "class %AView",
					(
					+ "implemented base class %AView";
					/ "removed 'const &'" @ "return type"
						@ "functions %(GetLocation, GetSize) as overriders",
					+ "overrider %(GetBounds, SetBounds)",
					/ "functions %(SetX, SetY, SetWidth, SetHeight)"
						-> "overriders"
					),
					/ "functions %(GetLocation, GetSize, GetX, GetY, \
						GetHeight, GetWidget, SetLocation#2, SetSize#2)"
						>> "class %AView"
				),
				+ "functions %(SwapLocationOf, SwapSizeOf)"
			);
			/ %YWidget $=
			(
				/ @ "return type" @ "abstract method %GetView"
					@ "interface %IWidget" -> 'AView&' ~ 'View&',
				- 'const &' @ "return type"
					@ "functions %(GetLocationOf, GetSizeOf)",
				/ @ "class %Widget" $=
				(
					/ DLD "widget pointer type" -> 'unique_ptr<AView>'
						~ 'unique_ptr<View>',
					/ "return type" @ "member function %GetView" -> 'AView&'
						~ 'View&',
					/ "parameter type" @ "member function %SetView"
						-> 'unique_ptr<AView>&&' ~ 'unique_ptr<View>&&'
				)
			)
			)
		),
		/ @ "platform %Win32" @ %YCLib.HostedGUI $=
		(
			+ "function %IsVisible" @ "class %WindowReference";
			+ 'using WindowReference::IsVisible' @ "class %HostWindows"
		),
		/ @ "namespace %YSLib" @ %Helper.YGlobal $=
		(
			+ "namespace %Windows" @ "platforms %Win32",
			/ "namespace %MinGW32" -> "namespace %MinGW" @ "platforms %MinGW"
		)
	),
	/ %YBase.YStandardEx.Utilities $=
	(
		+ "class template %state_guard";
		/ "class template %swap_guard" -> "alias template"
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%ywidget.h"
		=> "%YWidget.h", "%ywidget.cpp" => "%YWidget.cpp", "%scroll.cpp"
		=> "%Scroll.cpp") @ %YSLib.UI, ("%yglobal.h" => "%YGlobal.h" @ %Helper)
		@ YFramework
),

b568
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			* "member function %InputManager::Update wrongly ignored key input"
				@ "platform %Android",
			/ @ "platform %Win32" @ %Helper $=
			(
				/ "member function %Environment::MapCursor" @ %Environment $=
				(
					/ "supported non active window when the parameter is null"
						!^ "%WindowReference::GetCursorLocation",
					+ "host window pointer selected" @ "return type"
				),
				/ "supported non active window" @ "%InputManager::Update"
					@ %InputManager
			)
		),
		/ @ "platform %Win32" @ %YCLib.HostedGUI $=
		(
			/ DLD "simplified Win32 API calls",
			/ "all Win32 exceptions now attached with called function names",
			* "missing failure check" @ "member function \
				%WindowReference::GetCursorLocation" $since b518
				// Now throw if Win32 API calls failed.
		),
		- "macros %(ImplBodyBase, ImplBodyMem)" %YBaseMacro,
		/ %YSLib $=
		(
			/ DLD "implemented member function %ValueHolder::operator=="
				@ %Core.YObject ^ "%macros %(PDefHOp, ImplRet)",
			/ %UI $=
			(
				/ %YWidgetView $=
				(
					/ @ "class %Visual" $=
					(
						/ "private data members"
							-> "public data member %(Visible, Bounds)",
						+ "explicitly defaulted constructor",
						- "default argument" @ "user-defined constructor",
						- "functions %(IsVisible, SetVisible, GetX, GetY, \
							GetWidth, GetHeight, GetLocation, GetSize, \
							GetLocationRef, GetSizeRef, SetX, SetY, SetWidth, \
							SetHeight, 2 SetLocation, 2 SetSize)"
					),
					/ DLD "implemented 2 %operator=" @ "class %View"
						^ "macros %(PDefHOp, ImpRet)"
				),
				/ $dev "simplified defaulted special member functions"
					^ "macro %DefDeCopyMoveCtorAssignment"
					~ "%(DefDeCopyCtor, DefDeMovector)"
					@ "class %(Renderer, PseudoRenderer)" @ %YRenderer
			)
		)
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective
		@ ("%ystorage.hpp" => "%YStorage.hpp") @ YFramework.YSLib.Core
),

b567
(
	/ %YFramework $=
	(
		/ %YSLib.Core.YStorage $=
		(
			/ "function templates %(FetchStaticRef, FetchPrototype)"
				^ "storage from %parameterize_static_object#2 with empty \
				arguments as parameter pack",
			/ "class templates %GLocalStaticCache"
				^ "storage from %parameterize_static_object#1 with single \
				class type argument as parameter pack",
			/ $dev @ "class templates %(GStaticCache, GLocalStaticCache)" $=
			(
				/ $lib "private default constructor"
					-> "public explicitly deleted default constructor",
				+ "private base class %noncopyable",
				/ "return type" @ "static function" -> 'const PointerType&'
					~ 'PointerType'
					// To allow move-only type as pointer.
			),
			* DLD "redundant static member pointer object"
				@ "class %GLocalStaticCache" $orig (@ %Static $since b195)
		),
		/ %YCLib.Host $=
		(
			(
			* "missing 'const' on 1st parameter type"
				@ "function %FetchCommandOutput" $since b566,
			+ 'yconstexpr size_t DefaultCommandBufferSize(yimpl(4096));';
			/ "default argument" @ "function %FetchCommandOutput"
				^ "%DefaultCommandBufferSize",
			+ "alias declaration %CommandCache; functions %(LockCommandCache, \
				(FetchCachedCommandResult; FetchCachedCommandString))";
			/ "cached terminal calls" @ "platform %Linux" @ %Host
				^ "%FetchCachedCommandString"
			),
			/ @ "class %Terminal" $=
			(
				/ "creating terminal data only when for TTY";
					// See $2015-01 @ %Documentation::Workflow::Annual2015.
				* $comp "escape sequence output even if underlying stream \
					redirected" @ "!platform %Win32" $since b560
			)
		),
		/ %Helper $=
		(
			/ @ "platform %Win32" @ %HostedUI $=
			(
				+ "function templates %(ActOnHover_ShowTopLevel; \
					ActOnHover_ShowTopLevelAt)";
				+ "2 functions BindHoverControl"
			),
			/ "member function %Environment::MapCursor accepte host window \
				pointer as argument with default null pointer argument"
				@ %Environment,
				// Ignored on platform %Android.
			/ "member function %InputManager::Update now would not return when \
				the window is not the foreground window and only process key \
				input when the window is foreground window"
				@ "all hosted platforms" @ InputManager
		)
	),
	/ %YBase.YStandardEx.Container $=
	(
		/ "function template %search_map with function object parameter \
			changed to pass iterator hint",
		+ "2 function templates %trail",
		* "swapped implementations"
			@ "function templates %(pop_back_val, pop_front_val)" @ $since b545
	),
	/ %Tools $=
	(
		/ "%FixUAC.manifest" >> %Data,
		/ @ "%install-sysroot.sh" $=
		(
			+ "install 'share' directory for runtime data";
			+ "%FixUAC.manifest to 'share' directory" $dep_from
				"%FixUAC.manifest";
			* "hard linked directly from 'Tools' directory and set execution \
				bit in installation" $since b565,
				// This is wrong, even if 'chmod +x' has no explicit impact on \
					Windows file system.
			/ "moved library build intermediate directories" -> "%build"
				~ "%Tools/SHBuild" $dep_from %Scripts
		),
		/ "moved library and self host build intermediate directories"
			-> "%build" ~ "%Tools/SHBuild" @ %Scripts $effective @
			"%(SHBuild-YSLib-common.sh, SHBuild-YSLib.sh, \
			SHBuild-YSLib-debug.sh, SHBuild-self-host.sh, \
			SHBuild-self-host-DLL.sh)",
		/ DLD "merged function %PrintUsage" -> "%::main" @ %SHBuild.Main
	),
	* $re_ex(b563) "non-canonical English use" @ "log" ^ 'began'
		~ 'beginned' $effective @ (%YReader.ShlExplorer $since b534,
		%YFramework.(Helper.(Environment $orig (@ %Host $since b381)),
		'Helper_(DS)'.DSMain $orig (@ %Helper.DSMain) $since b383)),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective
		@ ("%ystorage.hpp" => "%YStorage.hpp") @ YFramework.YSLib.Core
),

b566
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %Debug $=
			(
				(
				+ "'ynothrow' guarantee" @ "function %LogWithSource";
					// Use calling of %ystdex::ytrace as fallback.
				/ "guaranteed nothrow from call of macro expansion %YCL_Trace"
				),
				(
				+ "function template %CheckIter";
				/ "function template %Deref" ^ "%CheckIter" ~ "%Nonnull"
				)
			),
			+ "trace for catching all exceptions" @ "destructor %WindowClass"
				@ "platform %Win32" @ %HostedGUI,
			(
			+ "function %upclose, 2 functions %upopen" @ %FileSystem;
			+ "function %FetchCommandOutput" @ %Host
			),
			/ "member function %ScreenBuffer::GetContext" @ "platforms \
				%(Android, ^XCB)" @ %HostGUI -> 'YSLib::Drawing::Graphics'
				~ 'const YSLib::Drawing::Graphics&'
		),
		/ @ "destructor %WindowThread" @ %Helper.HostRenderer $=
		(
			* $comp "probable terminated by throwing out of destructor with \
				nothrow exception specification due to trace calls" $since b498
				$dep_from %YCLib.Debug,
			/ "stated destructor name"
				@ "trace string for catching all exceptions"
		),
		+ "trace for catch-clause" @ (("member function \
			%Win32Exception::FormatMessage" @ %MinGW32,
			"function %FetchDBCSOffset" @ %NLS) @ %'YCLib_(MinGW32)',
			"member function %FontCache::LoadTypefaces" @ %YSLib.Adaptor.Font),
		/ %YSLib $=
		(
			/ %Adaptor.YAdaptor $=
			(
				+ 'using platform::CheckIter;' $dep_from
					("%CheckIter" @ %YCLib.Debug),
				+ 'using platform::upclose', 'using platform::upopen' $dep_from
					%YCLib.FileSystem,

			),
			/ %Core $=
			(
				- DLD "including %YFunc" @ %YShell,
				/ %YGDIBase $=
				(
					/ "explicitly allowed pointer with ownership"
						@ "class template %GGraphics" $=
					(
						/ $dev "static assertion of nothrow copyable check on \
							pointer" -> "nothrow movable check",
						/ $dev "pixel type deduction" ^ '[0]' ~ "indirection",
						/ DLD "operation for pointer type parameter"
							@ "constructors" ^ "moving" ~ "copying"
						/ "return type" @ "function %GetBufferPtr"
							-> 'const PointerType&' ~ 'PointerType'
					),
					/ "return type" @ "abstract method %IImage::GetContext"
						-> 'Graphics' ~ 'const Graphics&' @ %YCLib.HostGUI
						// To allow returning temporary.
				)
			),
			/ "return type" @ "method %GetContext" @ "static interface \
				template %GTextRendererBase and all derived classes"
				@ %Service.TextRenderer -> 'Graphics' ~ 'const Graphics&',
			/ "return type" @ "member function %BufferedRenderer::Context"
				@ %UI.Renderer -> 'Graphics' ~ 'const Graphics&',
				// To allow returning temporary.
			/ %Service.YGDI $=
			(
				/ @ "class %CompactPixmap" $=
				(
					(
					- "base class %BasicImage",
					/ DLD "implemented" ^ "%GGraphics<unique_ptr<Pixel[]>>"
						$dep_from %YGDI;
					+ "implemented interface %IImage",
					/ "user-defined move constructor" -> "explicitly defaulted",
					- "destructor"
					),
					* "spelling error" @ "assertion string" @ "constructor"
						$since b419
				),
				/ @ "class %CompactPixmapEx" $=
				(
					(
					/ 'AlphaType* pBufferAlpha;'
						-> 'unique_ptr<AlphaType[]> pBufferAlpha;';
					/ "user-defined (default, move) constructor"
						-> "explicitly defaulted",
					- "destructor"
					),
					/ $re_ex(b476) "merged (copy, move) %operator= as unifying \
						%operator=" ^ "%macros %(PDefHOp, ImplRet)",
					/ DLD "implemented function %swap"
						^ "%macros %(PDefH, ImplExpr)",
					/ @ "assertion string" @ "constructor" $=
					(
						/ "differentiated alpha buffer and pixel buffer",
						* "spelling error" $since b419
					)
				)
			)
		)
	),
	/ $dev "%DrMemory-YSLib-suppress.txt" @ %Tools $=
	(
		// Now there are 4 kinds of errors in %YSTest. First kind is errors \
			concerned with message member in %std::system_error. It should be \
			safe according to the source of libstdc++. Second is similar \
			string usage. These 2 kinds of bugs may be due to inlining of \
			operator new to %malloc call, etc. Third is leaks from \
			libwinpthread, which is likely of some bugs. Fourth is possible \
			leak from %ystdex::any objects constructed with %holder_tag, which \
			is rechecked and should be safe.
		+ "1 case concerned with %std::operator+ for %std::basic_string",
		+ "1 case concerned with TLS storage read by %std::call_once",
			// Not in %YSTest. Not confirmed but should be false positive.
		/ "restricted some frames"
	),
	/ %YBase.YStandardEx $=
	(
		/ "return type" @ "function %get" @ "class template %nptr" @ %Utilities
			-> 'const pointer&' ~ 'pointer',
			// To allow wrapping move-only types e.g. std::unique_ptr<T>.
		/ %CStandardIO $=
		(
			+ "alias declaration %unique_file_ptr",
			+ "inline function %setnbuf" @ %CStandardIO
		),
		+ "function template %search_map with inserter function object \
			parameter" @ %Container
	),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%yshell.h" => "%YShell.h"
		@ Core, ("ygdi.h" => "YGDI.h", "ygdi.cpp" => "YGDI.cpp") @ Service, 
		"yrender.h"=> "%yrenderer.h" @ %UI) @ %YFramework.YSLib
),

b565
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ @ "platform %Win32" @ %HostedGUI $=
			(
				* "strict ISO C++ compatibility" @ "constructor, destructor"
					@ "class %WindowRegionDeviceContext" $since b546,
					// To eliminate warning: [-Wstrict-aliasing] when \
						[-fstrict-aliasing] is used. This option is enabled \
						for release modes by default. Though not oberserved \
						strange behavior for now, it is dangerous.
				/ @ "class %WindowClass" $=
				(
					+ "functions %(GetInstanceHandle GetName, GetAtom)"
					* "missing noncopyable limitation" $orig
						(@ %'YCLib_(MinGW32)'.Win32GUI $since b432),
					/ @ "1st constructor" $=
					(
						+ "assertion for nonnull name parameter",
						+ "optional %::HINSTANCE parameter at end of parameter \
							list"
					),
					(
					+ "constructor with name, atom and instance handle parameters";
					+ "2 constructors with parameter %(::WNDCLASSW&, \
						::WNDCLASSEXW&)",
					+ "class name and atom trace" @ "constructor, destructor"
					),
					+ 'final',
					* "hard-coded window class name" @ "destructor" $since b432
						// It would probably crash if not %WindowClassName.
				),
				+ DLD "static assertion about aligned storage"
					@ "class %WindowRegionDeviceContext"
					^ "%ystdex::is_aligned_storable"
			),
			/ %XCB $=
			(
				/ "register for atoms limited to reference with %Connection on \
					construction",
					// Other native connections now would be ignored.
				* "crash when object of class %Connection destructed" $since
					b563
					// If static object is constructed in translation unit \
						other than %XCB, it would crash due to unspecified \
						order of destruction.
			),
			/ %FileSystem $=
			(
				/ "class %file_desc_deleter" => "%FileDescriptorDeleter",
				/ "class %file_desc" -> "%FileDescriptor" $=
				(
					+ "function %SetMode" @ "FileDescriptor"
					+ "constructor with parameter %std::FILE*"
				)
			),
			/ "macros" @ "platform %Win32" @ %NativeAPI $=
			(
				// To prevent possible redefinitions.
				/ "defined only when not defined previously %(S_IRWXG, \
					S_IRGRP, S_IWGRP, S_IXGRP, S_IRWXO, S_IROTH, S_IWOTH, \
					S_IXOTH)"
				/ "defined as non-zero values %(S_IRGRP, S_IWGRP, S_IXGRP, \
					S_IROTH, S_IWOTH, S_IXOTH)"
			),
			+ "function %FixConsoleHandler" @ %'YCLib_(MinGW32)'.MinGW32;
		),
		* "hard-coded buffer length per character"
			@ "function template %GetMBCSOf" @ %CharacterProcessing $since b305
			^ "%FetchMaxCharWidth",
		* "probable crash on console window close (or Ctrl+C handled, etc)"
			@ "platform %Win32" @ %Helper $since b299 $dep_from
			("function %FixConsoleHandler" @ %'YCLib_(MinGW32)'.MinGW32)
			// See $2015-01 @ %Documentation::Workflow::Annual2015.
	),
	/ %YBase.YStandardEx.String $=
	(
		+ "function templates %(extract; 2 extract_line, extract_line_cr)",
		+ "(2 inline functions, 1 function template) %to_wstring",
		+ "function template %cond_prefix"
	),
	/ %Tools $=
	(
		+ %RevisionPatcher
			$= (+ %Main),
		/ %Scripts $=
		(
			+ "%PatchRevision.sh" $dep_from %RevisionPatcher
				// Currently only patches exported by hg are tested.
			/ @ "%SHBuild-common.sh" $=
			(
				/ "function %SHBuild_Pushd accepted one argument for 'pushd'",
				+ "function %SHBuild_CheckedCallSilent"
					// As %SHBuild_CheckedCall, but with redirected stdout to \
						'/dev/null'.
			)
		),
		+ "building and installing %RevisionPatcher when variable \
			%SHBuild_NoDev is empty" ^ "stage 2 %SHBuild"
			@ "%install-sysroot.sh" $dep_from %PatchRevision,
		+ $dev "file %FixUAC.manifest as source to workaround UAC privilege \
			problem",
			// See $2015-01 @ %Documentation::Workflow::Annual2015.
		+ $dev "%DrMemory-YSLib-suppress.txt" @ %Tools,
			// Saved as ANSI/UTF-8 compatible encoding without BOM, because \
				DrMemory would reject BOM.
	),
	/ $repo @ "file '.hgignore'" $=
	(
		/ $re_ex(b564) "pattern 'Tools/SHBuild/stdinc.h.gch'"
			-> 'Tools/SHBuild/stdinc.h*' 
			// To ignore %stdinc.h.
		+ "pattern 'bak.patch'"
			// To ignore revision patching backup file.
	),
	* $dev $design "location for %Documentation::Workflow::Annual2015"
		@ "filter of Visual C++ project" $since b564,
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%chrproc.h"
		=> "%Character.h" @ %YFramework.CHRLib)
),

b564
(
	/ $revert_ex(b363) ("about text" @ %About $orig (@ Shells)
		!^ "predefined macros %(__DATE__, __TIME__)") @ %YReader,
		// To eliminate unnecessary binary change. Also to eliminate warning: \
			[-Wdate-time], though this option is not enabled now by default.
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %XCB $=
			(
				* "used uninitialized value for connection reference"
					@ "constructor %WindowData#1" $since b563,
				(
				+ @ "underlying error category with messages for XCB \
					connection failure";
				/ "exceptions for connection error" ^ "new error category"
				),
				/ @ "underlying error category for XCB" $=
				(
					* "wrong nothrow exception specification for message \
						generation"
						 $since b563,
						// Same reason as underlying error category as \
							%Win32Excetpion.
					+ "implemented message for error codes"
				),
				/ @ "constructors %XCBConnection" $=
				(
					/ $lib "simplified connection without authorization \
						information",
					+ "check error"
						// Now no further %IsOnError call is needed.
				),
				* "missing 'public'" @ "base class %Exception"
					@ "class %XCBException" $since b563,
				(
				+ "member function %ConnectionReference::(GetError, Check)";
				+ ('using ConnectionReference::GetError;',
					'using ConnectionReference::Check;') @ "class %Connection"
				)
			),
			/ @ "function %LogWithSource" @ %Debug $=
			(
				- $design "redundant direct nonnull assertion for format string"
					 @ %Debug,
					// Since it would be assert by %ystdex::vsfmt.
				/ $re_ex(b558) "allowed file parameter to be null and treated \
					null file parameter as unknown to avoid nonnull assertion \
					recursively call this function"
					// Like %ystdex::yassert and %platform_ex::LogAssert.
			),
			/ "alias-declarations %(BitmapPtr, ConstBitmap)" @ %Video
				>> %YSLib.Core.YGDIBase,
			/ %HostedGUI $=
			(
				* $dev $doc "wrong Doxygen directive '\t'"
					@ "member function %WindowReference::Show"
					@ "platform %Win32" $since b548,
				/ @ "platforms ^%XCB" @ "constructor %HostWindow" $=
				(
					/ DLD "implemented invalid connection check"
						^ "%XCB::ConnectionReference::Check";
					/ "%platform_ex::Exception thrown on connection check"
						~ "%GeneralError",
					* $comp "wrong invalid connection check" $since b563
				)
			)
		),
		* "wrong nothrow exception specification for message generation"
			@ "underlying error category" @ "class %Win32Exception"
			@ %'YCLib_(MinGW32)'.MinGW32 $since b545,
			// At least %std::bad_alloc should be allowed when failed \
				constructing a %std::string.
		/ %YSLib $=
		(
			- "using-declarations %(BitmapPtr, ConstBitmap)"
				@ %Adaptor.YAdaptor,
			+ DLD $build "workaround for G++ bug prior to 4.9.2"
				@ "defined %_GLIBCXX_DEBUG" @ %UI.TreeView,
				// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63500 .
		),
		/ @ "platform %Win32" $effective @ %YCLib $=
		(
			/ $dev "all use of '::DWORD'" -> 'unsigned long',
				// FreeImage use of 'DWORD' untouched.
			/ $dev "removed all <Windows.h> dependency non platform extension \
				other than %YCLib.NativeAPI" 
		)
	),
	/ %YBase $=
	(
		+ "2 function %vfmtlen" @ %CStandardIO,
		/ %String $=
		(
			/ @ "function template %vsfmt" $=
			(
				(
				/ $design "implemented" ^ $dep_from
					("ystdex::vfmtlen" @ %CStandardIO);
				+ $comp "indirection assertion for nonnull format argument",
				* "missing check failure" $since b488
					// If failed the length would be cast as a big integer, \
						which likely would eventually cause a %std::bad_alloc \
						being thrown.
				),
				* "missing %va_copy call" $since b488,
					// It would cause indeterminate %std::va_list object being \
						used after calculation buffer length, which led to \
						undefined behavior.
				* "wrong redundant %va_end call" $since b488,
					// This would cause undefined behavior no %va_arg matched \
						in the same function.
				+ $design "assertion for initialized string object"
			),
			* "missing $va_end call when exception thrown"
				@ "function template %sfmt" $since b488,
			/ DLD "matched result type for block scope objects"
				@ "function templates %(vsfmt, sfmt)"
		),
		/ %LibDefect.Exception $=
		(
			/ $dev "implemented for CXXABI_1.3 compatibility only when \
				defined(_GLIBCXX_EH_PTR_COMPAT) as header";
			- "header include order requirement" @ "implementation";
			/ $comp
				"allowed precompiled header with <exception> included at first"
		),
		+ %StandardInclusion
			// As precompiled header mostly and not used directly in the \
				libraries.
	),
	* $dev $build "missing project dependency on %YBase for %YFramework"
		@ "platform %Android" @ "Code::Blocks workspace" $since b497,
	/ %Tools $=
	(
		/ %Scripts $=
		(
			// Precompiled headers are generated for each configurations only \
				when not existed or not readable. Update should be implemented \
				in future.
			(
			+ "precompiled header path" @ "%SHBuild-bootstrap.sh";
			^ "G++ precompiled header support unless %SHBuild_NoPCH is not \
				empty" @ "%SHBuild-build.sh" $dep_from %YBase.StandardInclusion
			),
			(
			+ "precompiled header path" @ "%SHBuild-YSLib-common.sh";
			^ "G++ precompiled header support unless %SHBuild_NoPCH is not \
				empty" @ "%(SHBuild-YSLib.sh, SHBuild-YSLib.sh)" $dep_from
				%YBase.StandardInclusion
			),
			+ '-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC'
				@ "%CXXFLAGS_OPT_DBG for debug modes"
				@ "%(SHBuild-YSLib-debug.sh, SHBuild-BuildApp.sh, \
				Toolchain.options.mk)",
				// Now '-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC' should be \
					used in the build of debug executable for platforms other \
					than %DS, otherwise it would crash.
			/ "overridden %C_CXXFLAGS_OPT_DBG" !^ '-D_GLIBCXX_DEBUG \
				-D_GLIBCXX_DEBUG_PEDANTIC' @ "Toolchain.DS.mk",
				// It was too slow even with '-D_GLIBCXX_DEBUG'.
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				* "missing set default value of %SHBuild_YF_Libs_freetype to \
					'-lfreetype'" @ "platform %Win32" @ "%SHBuild-BuildApp.sh"
					$since b563,
					// This would cause FreeType2 not be linked, thus static \
						linking would fail.
				- $revert(b563) '-lxcb-image' @ "default value"
					@ "variable %SHBuild_YF_SystemLibs",
					// Unused.
				* "missing reverting '-Wl,dn' for static builds" $since b556
			),
			+ "function %SHBuild_BuildGCH" @ "%SHBuild-common.sh"
		),
		- $revert(b546) "'export COMSPEC=bash' to allow further use of \
			installation functions" @ "%install-sysroot.sh"
	),
	+ '-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC' @ "compiler flags"
		@ "platforms %(MinGW32, Android)" @ "Code::Blocks projects",
		// Note that for %Android it is not actually effective.
	+ $repo "pattern 'Tools/SHBuild/stdinc.h.gch'" @ "file '.hgignore'",
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg rename' $effective @ ("%yadaptor.h"
		=> "%YAdaptor.h" @ %YFramework.YSLib.Adaptor.YGDIBase)
),

b563
(
	/ $repo @ "file '.hgignore'" $=
	(
		+ "glob patterns ('*/.Debug*/', '*/.Release*/') for Visual C++ default \
			output directories",
		+ "glob patterns ('*/.debug*/', '*/.release*/', '*/.static*/') for \
			%SHBuild-BuildApp configurations",
		+ "postfix '/'" @ "build configuration globs to avoid ignoring files",
		+ "glob pattern 'Tools/SHBuild/SHBuild*' for stage 1 %SHBuild",
		+ "glob pattern 'test/*.exe' for test",
		- "glob patterns '.map', '*.o', '*.d', '*.elf', '*.obj', '*.pdb', \
			'*.idb', '*.ilk', '*.exe'"
			// These files should be ignored by directory paths.
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ 'ynothrow' @ "function template %Nonnull" @ %Debug,
				// Operand of 'noexcept' has trouble with 'yconstfn', so no \
					change to %Deref. 
			(
			+ "macros %(YCL_HostedUI, YCL_HostedUI_XCB; YCL_HostedUI)"
				@ %YCLib.Platform;
			+ "check for known platforms with hosted GUI" @ %HostedGUI,
			/ $dev "simplified conditional inclusion" ^ "%YCL_HostedUI",
				// Also reduce risk about missing update implementations when \
					new hosted UI platform added.
			+ %XCB $=
			(
				+ "classes %((ConnectionReference; Connection), Atom, \
					(Drawable; WindowData, GContext)",
				+ "functions %(UpdatePixmapBuffer, LookupAtom)"
			);
			/ %HostedGUI $=
			(
				(
				+ "XCB support" $=
				(
					/ "alias-declaration %WindoeHandle" @ 'YF_Use_XCB'
						^ "%ystdex::nptr<XCB::WindowData*>";
					/ "class %WindowReference" @ 'YF_Use_XCB'
						^ "%XCB::WindowData",
					/ "extended interface for %Android" @ 'YF_Use_XCB'
				);
				+ "alias-declarations %(MessageID, MessageHandler)"
					@ "platforms %(^XCB, Win32)";
				/ "extended (alias-declaration %MessageMap; data member \
					%HostWindow::MessageMap)" @ "platform ^%XCB"
					^ "%(MessageID, MessageHandler)"
				),
				(
				+ "functions %(Hide, Show)" @ "class %WindowReference";
				+ 'using WindowReference::Show;' @ "class %HostWindow"
				),
				* "occasionally made class not meet %DefaultConstructible \
					requirement" @ "class %WindowReference" $since b560
					$= (+ "explicitly defaulted default constructor"),
				+ 'const XCB::Atom::NativeType WM_PROTOCOLS, WM_DELETE_WINDOW;'
					@ "class %HostWindow"
			)
			),
			* "assertion failed for root path due to wrong invariant on string \
				length" @ "!platforms %(Win32, DS)" @ "class %DirectorySession"
				@ %FileSystem $since b559,
			/ "merged enum %ExtendedSet" -> "enum %NativeSet"
				@ "platform %Linux" @ "namespace %KeyCodes" @ %Keys,
		),
		/ %Helper $=
		(
			/ %HostRenderer $=
			(
				+ "member function %HostRenderer::GetBufferRef",
				+ "XCB support" @ %HostRenderer $dep_from %YCLib.XCB $=
				(
					+ "support for update" @ "%XCB_EXPOSURE" @ "platforms ^%XCB"
						@ "constructor %RenderWindow" $dep_from
						%YCLib.(Platform, XCB),
					/ @ "static function %HostLoop merged" -> "static function \
						%WindowLoop" @ "class %WindowThread" $=
					(
						* "non-canonical English use" @ "log" ^ 'began'
							~ 'beginned' $since b523,
						+ "implementation of event loop" @ "platforms ^%XCB"
							$dep_from %YCLib.(Platform, XCB);
					)
				)
			)
		),
		* DLB "freetype internals dependency when they are actually unused"
			@ %YSLib.Adaptor.Font $562,
		/ $build @ "Code::Blocks projects" $=
		(
			* $dev "freetype header paths" $since b459;
			* $comp $dev "wrong freetype header paths" @ "Code::Block projects"
				@ %YFramework $since b459
		),
		/ %'Helper_(Android)'.AndroidHost $=
		(
			+ "member function %ResizeScreenBuffer" @ "class %NativeHost",
			- $revert(b502) "function %FetchDefaultDesktop"
		)
	),
	/ %Tools $=
	(
		/ @ "%install-sysroot.sh" $=
		(
			+ "%INCLUDE_freetype with default value \
				'-I../../3rdparty/freetype/include'" @ "platform %Win32",
			+ "exported %INCLUDES_freetype",
			/ "3rd party header installation would skip when $SHBuild_No3rd is \
				not empty",
			/ "freetype headers and libraries would be installed only when \
				$INCLUDES_freetype is not empty",
			/ "determined package %freetype2 including directory"
				@ "!platform %Win32" ^ 'pkg-config --cflags-only-I'
			/ "supported installing %SHBuild executable without extension name"
				^ ($dep_from "%EXESFX" @ "%SHBuild-common-options.sh"
				@ %Scripts),
			/ DLD "simplified installation implementation and other functions",
			* "missing quoting library directory for '-L' on building stage2 \
				%SHBuild" $since b546,
			/ "exported %LIBS" ^ $dep_from ("%LIBS_RPATH"
				@ "%SHBuild-common-options.sh" @ %Scripts),
			- $revert(b556) '-fno-lto -fwhole-program'
				@ "stage 2 %SHBuild build command"
				// This option might cause problems, e.g. crash on %Linux and \
					not recognized by Clang++.
		),
		/ %Scripts $=
		(
			+ '-lxcb-image' @ "front" @ "%SHBuild_YF_SystemLibs"
				@ "%(SHBuild-BuildApp.sh, SHBuild-YSLib-common.sh)",
			+ '$INCLUDES_freetype' @ "%INCLUDES" @ "%SHBuild-YSLib-common.sh",
			+ '-I../../3rdparty/freetype/include' @ "%INCLUDES"
				@ "%SHBuild-bootstrap.sh"
				// Not accurate but acceptable.
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				/ "determined package %freetype2 cflags and libs"
					@ "!platform %Win32" ^ 'pkg-config',
				* "missing quoting library directory for '-L'" $since b549,
				/ "exported %LIBS" ^ $dep_from ("%LIBS_RPATH"
					@ "%SHBuild-common-options.sh" @ %Scripts),
				/ "disabled '-mwindows' to linker flag" @ "!platform %Win32"
			),
			/ @ "SHBuild-common.sh" $=
			(
				/ "concatenated operations by logical AND to guarantee first \
					operation successful" @ "functions %(SHBuild_Install_Exe, \
					SHBuild_Install_HardLink, SHBuild_Install_HardLink_Exe, \
					SHBuild_Install_Link)",
				/ "hid stderr output (i.e. command not found) of 'cygpath' call"
					@ "functions %(SHBuild_2u, SHBuild_2w)",
				/ DLD "simplified implementation"
					@ "functions %(SHBuild_Install, SHBuild_InstallDir)"
					^ "logical (AND, OR)",
				+ "variable %LIBS_RPATH with default value: \
					-Wl,-rpath,'\$ORIGIN:\$ORIGIN/../lib'" @ "!platform %Win32"
			),
			+ "variable %EXESFX with default variable '.exe'"
				@ "platform %Win32" @ "%SHBuild-common-options.sh",
			* $re_ex(b434) "wrong '-Wl,--dn' option" @ "debug dynamic libraries"
				@ "%SHBuild-YSLib.debug.sh" $since b429,

		),
		/ "normalized bash condition use" $=
		(
			/ DLD "all regex instances 'if \[ (.+) \]'" -> 'if [[ $1 ]]',
			/ DLD "eliminated prefix 'x' comparing for strings",
			^ "single quoting for some literal strings" ~ "double quoting",
			/ "allowed freetype static library to be not exist"
				// Thus ignored to be installed. It is specified to default \
					cases of %Linux, etc.
		),
		/ "ensured '.exe' extension for building mode 2" @ "all platforms"
			@ %SHBuild.Main
			// To avoid the output name being same as directory @ !platform
				%Win32.
	),
	/ $build "separated freetype including directory to allow optional other \
		header location" -> "%3rdparty/freetype/include" ~ "%3rdparty/include",
	/ "handling mouse keys" ^ "%(Secondary, Tertiary)"
		~ "Win32-specific macros %(VK_RBUTTON, VK_MBUTTON)" @ %YDE $effective
		@ %(ImageBrowser.(Main, ImageControl), Clock.Main),
	/ %YBase.YStandardEx $=
	(
		+ 'ynothrow' @ "function templates %pvoid for builtin pointers"
			@ %Cast,
		* "missing nothrow exception specification"
			@ "function %swap for instances of %nptr" @ %Utilities $since b560
			$= (+ 'ynothrow')
			// This would case ill-formed defaulted move constructor for
				derived classes.
	),
	(
	* "wrong use of 'ynothrow' when construction of thrown exception can throw"
		$effective @ %YFramework.(YSLib.("member funtion %GGraphics::at"
		$since b559 $orig (@ "class %Graphics" @ %YObject $since b176)
		%Core.YGDI, Service.("all functions %EnsureDirectory" @ %FileSystem
		$since b476, "function %CopySliceFrom" @ %TextManager $since b397)
		"all member functions %MLinearUIContainer::at" @ %UI.YUIContainer $since
		b494), "function %TranslateTime#2" @ %Helper.ShellHelper $since b179,
		"static member function %JNIBase::EnsureDetachJNIAtThreadExit"
		@ %YCLib.JNI $since b553, "functions %(CheckHResult, EnsureNonNull),
		member functions and function templates %COMPtr::(As, Copy#2)"
		@ %'YCLib_(MinGW32)'.COM $since b412, "function %FetchNativeLooper"
		@ %'YCLib_(Android)'.Android $since b499)
		$= (- "'ythrow' exception specification");
	* $comp "mismatched 'ythrow' exception specification between definition \
		and non-definition declarations" @ "all functions %EnsureDirectory"
		@ %YFramework.YSLib.Service.FileSystem $since b476,
	/ $dev $repo "all edited file with module name not the same as base \
		file name" @ !(%YBase, %YFramework.YSBuild) ^ 'hg rename' $effective
		@ (((("%ygdibase.h" => "%YGDIBase.h" @ %Core.YGDIBase, ("%textmgr.h"
		=> "%TextManager.h", "%textmgr.cpp" => "%TextManager.cpp")
		@ %Service.TextManager, "%yuicont.h" => "%YUIContainer.h"
		@ %UI.YUIContainer) @ %YFramework.YSLib,
	)
),

b562
(
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			* "undefined behavior on passing command line arguments"
				@ "platform %Win32" $since b560,
			/ "building mode 2 now would only add .exe/.dll in platform \
				%Win32, otherwise would only add .so for DSO targets"
		),
		/ %Scripts $=
		(
			* "source file not found after renaming on file system with \
				case-sensitive name support" @ "%SHBuil-build.sh" @ %Scripts
				$since b560,
			* $re_ex(b559) "externally set %AR had no effect"
				@ ("SHBuild-YSLib-common.sh" $orig (@ "SHBuild-YSLib.sh"),
				"SHBuild-BuildApp.sh") $since b546,
				// Hard-coded 'gcc-ar'.
			/ @ "SHBuild-common-options.sh" $=
			(
				/ "default value" @ "%LDFLAGS_GC" ^ '-Wl,--dead-strip'
					~ '-Wl,--gc-sections' @ "'Darwin' in 'uname' output",
				(
				+ "variable %LDFLAGS_DYN_BASE with default value \
					'-shared -Wl,--dll' or '-shared' depending on 'uname' \
					result containing 'MINGW'/'MSYS' or not",
				+ "variable %LDFLAGS_DYN_EXTRA with default value";
				+ "variable %LDFLAGS_DYN with default value"
				),
				+ "variables %(LIBPFX, DSOSFX) with default values depending \
					on OS",
				/ "restricted check for %(C_CXXFLAGS_GC, LDFLAGS_GC) only when \
					%CXX is not empty"
			),
			/ @ "%(SHBuild-YSLib.sh, SHBuild-YSLib-debug.sh)" $=
			(
				/ "DLL building" ^ $dep_from "%LDFLAGS_DYN",
					// To simplify and to be precisely equal to Code::Block projects.
				+ DLB '$C_CXXFLAGS_PIC' @ "build command lines",
					// To support DSO.
				/ "system library" ^ "%SHBuild_YF_SystemLibs"
					~ "hard coded values",
				+ '-lxcb -lpthread' @ "%SHBuild_YF_SystemLibs"
					@ "!platform %Win32"
			),
			/ @ "%SHBuild-common.sh" $=
			(
				+ "variable %C_CXXFLAGS_PIC with default value '-fPIC'"
					@ "'uname' result without 'MINGW' or 'MSYS'",
				/ "quoted first default value" @ "%SHBuild_CMD",
				+ "functions %(SHBuild_AssertNonempty, SHBuild_CheckedCall, \
					SHBuild_InitReadonly; SHBuild_CheckUName)",
				+ $dev "early return as guard for scripts to be used by 'source' \
					or '.' directive",
				+ 'exit 1' @ "handling signal %SIGINT"
			),
			/ @ "%(SHBuild-YSLib-common.sh, SHBuild-BuildApp.sh)" $=
			(
			)
		),
		/ DLD "simplified all OS specific check" ^ "%SHBuild_CheckOS" ~ 'uname'
			$dep_from ("%SHBuild-common.sh" @ %Scripts),
		/ @ "%install-sysroot.sh" $=
		(
			+ "support for installing on UNIX-like targets",
			+ "variable %$SHBuild_Env_Arch" $dep_from
				("%SHBuild-common.sh" @ %Scripts);
			/ "3rd party library directory now would be determinate by \
				%(SHBuild_YSLib_Platform, $SHBuild_Env_Arch)";
			- "variable %YSLib_Arch"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			* "non-lowercase header file name of %YObject"
				@ %Core.YModules $since b561,
			/ %Adaptor $=
			(
				* "missing including <ext/malloc_allocator.h> for libstdc++ \
					used without G++" @ %YNew $since b561,
				/ %Font $=
				(
					+ "log for successful initialization of FreeType library \
						instance",
					/ $dev $lib "hid all integer types and enumerators as \
						implementation from FreeType",
					/ $dev $build $re_ex(b425) "restricted hack only when \
						'defined(FT_CONFIG_OPTION_OLD_INTERNALS)' to be \
						compatible with unmodified freetype packages which \
						version >= 2.5"
				)
			)
		),
		/ %Helper $=
		(
			/= $dev $lib "parameter %platform_ex::WindowReference"
				@ "constructor %RenderWindow" @ %HostRenderer
				-> "%Host::WindowReference",
			/ $dev "reduce some dependencies" @ %ShellHelper $=
			(
				/ $lib "parameter" @ "function %ResetDesktop" ^ 'UI::Desktop'
					~ 'Desktop',
				/ "function template %ScrDraw, function \
					%CreateSharedScreenImage" >> %'Helper_(DS)'.DSMain
			),
			/ DLD "simplified by including %ScreenBuffer" @ "header"
				@ %HostWindow,
			/ @ "member function %WindowReference::GetParent"
				@ "platform %Win32" @ %HostedGUI $=
			(
				/ "implemented throwing %ystdex::unimplemented";
				* $comp "infinite self recursive call" $since b538
			)
		),
		/ %YCLib $=
		(
			/ %MemoryMapping $=
			(
				- DLB "unsupported platform check",
				+ $lib $build "support for platforms %(Linux, 'OS X')"
					~ "platform %Android";
			),
			- DLB "unsupported platform check" @ %(Video, Timer),
			/ DLD "simplified implementation of %TLSKey" @ %POSIXThread,
				// To eliminate Clang++ warning: [-Wunused-private-field].
			/ %Keys $=
			(
				+ "actual key code support" @ "platform %Linux" $=
				(
					/ "value of %KeyBitsetWidth" -> '0x200' ~ '256',
					+ "enums %(NativeSet, ExtendedSet)" @ "namespace %KeyCodes",
					+ "implementation of key category"
				),
				+ DLD "static assertion for key category table size"
			),
			/ "%YF_API supported DSOs without '__declspec'" @ %Platform
		),
		/ DLD %'Helper_(DS)' $=
		(
			/ "implementation about DS window",
				// To eliminate Clang++ warning: [-Wunused-private-field] !@ \
					platform %Win32.
			/ @ "allowed build" @ 'YF_XCB' @ "DS screen"
		),
		/ $re_ex(b515) "conditionally compiling only for %Win32 target \
			allowing non-Win32 build environment" @ %'YCLib_(MinGW32)',
		/ DLB @ "Code::Blocks projects" @ "platform %MinGW32" $=
		(
			/ "library directory %lib" >> "%lib-i686"
				// To make it compatible to %Tools.Scripts.
			/ "improved compatibility" ^ '/' ~ "all backslashes" $effective
				@ "library paths"
		),
		/ %YBaseMacro $=
		(
			/ "macro %_yInterface" => "%YInterface",
			/ "macro %_yInterfaceHead" => "%YInterfaceHead"
		)

	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			+ "operator %(<, <=, >, >=) for %nptr based on %operator< for \
				underlying pointer" @ %Utilites,
			+ "libc++ support" @ %Concurrency $=
				(/ "allowed definition '(defined(_LIBCPP_VERSION) && \
					!defined(_LIBCPP_HAS_NO_THREADS)'"),
			/ %Container $=
			(
				/ DLD "implemented member function \
					%container_inserter::operator()" ^ "%yforward";
				/ $comp $build "unsupported G++ 4.7.1"
			),
			/ %Memory $=
			(
				+ "3 function templates %make_unique_with",
				+ "2 function templates %unique_raw for raw pointer and deleter"
			),
			+ "metafunction %common_nonvoid_t" @ %TypeOperations,
			/ %Array $=
			(
				* "missing including <ystdex/utility.hpp>" $since b532,
					// For 'decay_copy'.
				+ "metafunction %common_array_t" $dep_from %TypeOperations;
				/ "function templates %(make_array, forward_as_array)" $=
				(
					/ 'inline' -> 'yconstfn',
					/ "supported omitting first function parameter as \
						[WG21/N4315]"
						// However, %reference_wrapper stuff is not supported \
							to avoid some complexity.
				),
				+ "function template %cast_array"
					// Similar to %make_array but avoid some potential \
						narrowing conversions.
			)
		),
		/ "%YB_API supported DSOs without '__declspec'" @ %YDefinition
	),
	/ DLD "simplified comma separated linker options transferred by compiler \
		driver by using one common prefix (i.e. '-Wl,*')"
		@ "Code::Blocks projects" @ "platform %Win32" $effective %YFramework,
	+ "modified %Makefile.gnu to support i686/x86_64 builds" @ "FreeImage"
		@ "platform %Linux" @ "%3rdparty",
		// Only x86_64 is tested.
),

b561
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %YPixel $=
			(
				* "spelling error" @ %Service.FileSystem $since b540
					$= (/ "%NormalizeDirecoryPathTail"
						=> "%NormalizeDirectoryPathTail"),
				/ %Service.YPixel $=
				(
					- "alpha bit set" @ "function template %BlendCore",
					+ 'yconstfn' @ "function template %Blend for \
						%RGBA<5, 5, 5, 1>",
					+ "function templates %BlendAlpha",
					+ "overloading function template %Composite optimized for \
						%RGBA<5, 5, 5, 1>",
					/ @ "struct %BlitAlphaPoint" $=
					(
						+ $dev "static assertion"
							@ "%operator() for 2 pixel parameters",
						/ "forbid ADL" @ "all %Blend calls" @ "%operator()#(1, 2)"
							^ "%Shaders::Blend",
						/ "support non 1-bit destination alpha types"
							^ $dep_from "function templates %BlendAlpha"
							~ "%Blend"
					),
					/ "simplified implementation" ^ "%ystdex::make_fixed_t"
						@ %YPixel $dep_from
						("%make_fixed_t" @ %YBase.YStandardEx.Rational),
					/ $dev "simplified implementation" @ %YPixel
						!^ "%ystdex::normalized_max" $dep_to
						"removal of %normalized_max"
				),
				/ %YStyle $=
				(
					+ "class %HS";
					/ "struct %hsl_t, functions %(ColorToHSL, HSLToColor, \
						RollColor)" -> "class %HSL",
					+ "class %HSV"
				),
				/ DLD "implemented %ImageScale" ^ "%std::uint32_t"
					~ "%std::size_t"
					// To avoid request to 128-bit fixed-point arithmetic \
						operations which is not supported yet, when \
						%std::size_t is 64-bit
			),
			/ "condition for %MemoryListAllocator" -> 'defined(__GLIBCXX__)'
				~ 'YB_IMPL_GNUCPP' @ %Adaptor.YNew
				// Make better compatibility.
		),
		/ %YCLib $=
		(
			* "wrong assertion" @ "constructor %DirectorySession"
				@ "!platform %Win32" $since b560,
			/ 'inline' @ "function template %Deref"  -> 'yconstfn' @ %Debug,
			/ @ "platform %Win32" @ %YCLib.HostedGUI $=
			(
				* "wrong 'ynothrow'" @ "member functions (2 \
					%WindowMemorySurface::UpdatePremultiplied, \
					%ScreenRegionBuffer::UpdatePremultipliedTo)" $orig
					(@ %'YCLib_(MinGW32)'.Win32GUI $since b435),
				/ DLD "implemented member function \
					%ScreenRegionBuffer::UpdatePremultipliedTo#2"
					^ "macros %(PDefH, ImplExpr)"
			),
			/ %Platform $=
			(
				(
				+ "platform %'OS X'" $=
				(
					+ "macros %YF_Platform_OS_X";
					+ "detected %Linux platform with predefined macro \
						%__APPLE__ and %__MACH__",
					+ "#error when defined %__APPLE__ but not %__MACH__"
						// Apple platforms other than OS X is not supported
				);
				(
				+ "conditionally defined macro %YCL_OS_X for \
					%YF_Platform_OS_X",
				+ "%'OS X' features macro definitions"
				)
				),
				+ "macro %YF_Use_XCB if undefined for %Linux platform"
			),
			- DLB "unsupported platform check" @ %YCommon,
			+ "allowed platform %Linux to be built" @ $effective,
				%(Keys, Video, FileSystem) $dep_from ("platform %'OS X'"
				@ %Platform)
				// To allow build only, not necessarily implemented correctly.
			- "macros %(YCL_YCOMMON_H, YSL_YSBUILD_H)" @ %NativeAPI,
				// They were unused long ago.
			/ %FileSystem $=
			(
				/ @ "class %HDirectory" $=
				(
					/ "%operator bool" -> "member functions" ^ "%DefBoolNeg";
					+ $comp "operator!"
				),
				+ "friend function %is_undereferenceable for %HDirectory"
					// Necessary after the bug of \
						%ystdex::indirect_input_iterator fixed.
			)
		),
		/ %Helper $=
		(
			* "wrongly set %UseOpacity for non layered window"
				@ "platform %Win32" @ "function %ShowTopLevel" @ %HostedUI
				$since b560,
		),
		/ "simplified or added assertion" ^ "%Deref" ~ '*static_cast' $effective
			@ %YFramework.('Helper_(Android)'.AndroidHost,
			'YCLib_(Android)'.Android, %YSLib.(Core.YObject, Adaptor.Image)),
		/ "conditionally include only when '(!YCL_Linux || YCL_Android) \
			&& !YCL_OS_X' is met for hosted GUI" @ %YSBuild,
			// Make it convenient to build stage 1 SHBuild on those platforms \
				without hosted GUI implemented yet.
		* "uninitialized value returned by member functions %(GetErrorCode, \
			operator ErrorCode)" @ "class %Win32Exception"
			@ %'YCLib_(MinGW32)'.MinGW32 $since b545
	),
	* "%C_CXXFLAGS not applied for makefiles" @ "%(CFLAGS, CXXFLAGS)"
		@ "projects %(YFramework, YSTest)" @ "platform %Android" $since b558,
		// Misspelled as 'C_CXXFLAGS_ARM9' which is empty for platform \
			%Android. This made many arguments unused. Some like '-NDEBUG' \
			effect the binary size significantly.
	/ %YBase.YStandardEx $=
	(
		/ %Rational $=
		(
			+ "alias template %make_fixed_t" @ %Rational,
			- $revert(b439) "class template %normalized_max" @ %Rational
				$dep_to "removal of %normalized_max"
				// It is somewhat misleading.
			- "specialization of %is_normailzable for %bool" @ %Rational
		),
		/ DLD "preprocessing condition" ^ 'defined(__GLIBCXX__)'
			~ "raw '__GLIBCXX__'" @ %Concurrency,
			// Just for uniformly using.
		* "strict ISO C++ code compatibility" $since b525
			$= (* "missing including <memory>" @ %Utility),
		* "missing rebinding allocator type for \
			%used_list_cache::(used_list_type, used_cache_type)" @ %Cache $since
			b521 $orig ("%GMRUCache::(UseList, UseCache)"
			@ %YFramework.YSLib.Core.Cache $since b461),
			// G++ accepted but Clang++ in OS X would complain.
		* "%operator bool for %indirect_input_iterator" @ %Iterator $since b412,
		+ "class template %free_delete with non-defined specialization for \
			arrays as template parameter type" @ %Memory
	),
	+ %YDE.Clock,
	/ %Tools $=
	(
		/ %Scripts $=
		(
			+ '-pthread' @ "default value" @ "%CXXFLAGS_IMPL_COMMON"
				@ "'Darwin' in 'uname' output" @ "SHBuild-common-options.sh",
			/ @ "SHBuild-common-options.sh" $=
			(
				+ "detection to ensure non empty $CXX at beginning",
				(
				+ "variables %(CXXFLAGS_GC, LDFLAGS_GC) with default value \
					'-fdata-sections -ffunction-sections' and \
					'-Wl,--gc-sections' respectively";
				+ "test to set to empty for %(CXXFLAGS_GC, LDFLAGS_GC) if not \
					successfully compiled by $CXX to support toolchain without \
					these options (e.g. on OS X)" @ "!platform %Win32"
					// Windows has limitation, see \
						http://sourceforge.net/p/msys2/discussion/general/thread/2d6adff2/?limit=25 .
				/ "applied $(CXXFLAGS_GC, LDFLAGS_GC) for default value of variables \
					$(C_CXXFLAGS_COMMON, LDFLAGS_OPT_DBG)"
				)
			)
		),
		/ "all command call with variable as command name now are quoted",
			// To allow blank characters in it, though not a good practice and \
				not necessarily providing the guarantee to success.
		- DLD "all unnecessary curly braces around variable names" $=
			// E.g: "${CXX}" to "$CXX". See \
				http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html \
				2.6.2 for rules.
			(/ "283 regex instances of '\$\{(\w+)\}([^0-9A-Za-z])' -> '$$$1$2' \
				including 106 matches with '$2' is '/'"),
	),
	/ $dev $repo "all edited file with module name not the same as base \
		file name" @ !(%YBase, %YFramework.YSBuild) ^ 'hg rename' $effective
		@ (((("%yobject.h" => "%YObject.h" @ %Core.YObject, (("%ystyle.h"
		=> "%YStyle.h", "%ystyle.cpp" => "%YStyle.cpp") @ %YStyle),
		"%button.cpp" => "%Button.cpp" @ %Button) @ %UI, "%ynew.h" => "%YNew.h"
		@ %Adaptor) @ %YSLib), "%ycommon.h" => "%YCommon.h" @ %YCLib.YCommon)
		@ %YFramework
),

b560
(
	/ %YFramework $=
	(
		/ @ "namespace %platform_ex" @ "!platform %Android" @ "hosted platforms"
			@ %YCLib.Host $=
		(
			(
			+ "class name declaration %TerminalData";
			+ "class %Terminal";
				// It calls 'tput' to support colored output for non-Windows \
					platforms currently. This requires no extra libraries to \
					be linked, but may have poor performance and does not work \
					well if error occurred.
			+ $comp "log with level %Informative on console creating failure"
				// This is expected when the console is unavailable, i.e. for \
					a redirected stream.
			),
			+ "function templates %(EncodeArg, DecodeArg) with overloading \
				functions only in platform %Win32"
		),
		+ "macros %(DefDeCopyMoveCtor, DefDeCopyMoveAssignment; \
			DefDeCopyMoveCtorAssignment)" @ %YBaseMacro,
		/ %YSLib.Core $=
		(
			/ DLD "implemented inline member functions %operator()" @ %YFunc
				^ "macros %(PDefHOp, ImplRet)",
			- $revert(b196) 'using Exception = std::exception;' @ %YException,

		),
		/ %YCLib $=
		(
			* "missing move %operator=" @ "class %AndroidLogSender"
				@ "platform %Android" @ %YCLib.Debug $since b498 ^ $dep_from \
				("macro %DefDeCopyMoveCtorAssignment" @ %YBaseMacro),
			/ %FileSystem $=
			(
				/ @ "platform !Win32" $=
				(
					+ "protected member %sDirPath" @ "class %DirectorySession";
					* "unsupported or wrong result when 'DT_*' unusable" $since
						b543,
						// Since it is an BSD extension, not all POSIX \
							platforms support it. Even on a platform with it \
							and the build is successful, it still can turn out \
							wrong result in runtime, e.g. ReiserFS on Linux. \
							See also https://github.com/ggreer/the_silver_searcher/issues/36 .
					+ "resolving link target" @ "!platforms %(DS, Win32)"
						@ "member function %HDirectory::GetNodeCategory"
						// %DS has no %::lstat.
				),
				+ "nonnull assertion"
					@ "member function %HDirectory::GetNodeCategory" ^ "%Deref",
				+ 'ynothrow' @ "move constructor %DirectorySession"
			),
			/ $dev "ensured macros %(S_IFMT, S_IFDIR, S_IFCHR, S_IFREG, \
				S_IREAD, S_IWRITE, S_IEXEC) defined properly if not previously \
				defined" @ "platform %Win32" @ %NativeAPI
		),
		/ DLD "simplified constructors" ^ $dep_from ("macro \
			%DefDeCopyMoveCtorAssignment" @ %YBaseMacro) $effective @
			%('YCLib_(MinGW32)'.Win32GUI, 'YCLib_(Android)'.Android,
			NPL.(Configuration, Lexical, SContext), YSLib.(Adaptor.Image,
			Core.(YEvent, YFunc)))
		- DLB "unsupported platform check"
			@ %('Helper_(DS)'.DSMain, Helper.HostedUI),
		/ %Helper $=
		(
			/ $design "initialization macros" %Initialization $=
			(
				/ "simplified" @ "platform %Win32"
				+ "default initialization macros" @ "platform %Linux"
			),
			/ "set %Opacity data member as %true for window when extra window \
				style has %WS_EX_LAYERED enabled" @ "platform %Win32"
				@ "function %ShowTopLevel" @ %HostedUI
				// Also has effect on %ShowTopLevelDraggable
		),
		(
		/ "class %WindowReference"
			@ %(YCLib_(MinGW32).Win32GUI, YCLib_(Android).Android) $=
		(
			(
			/ "simplified construction by inherited %nptr<NativeWindowHandle>";
			/ "protected data member %hWindow"
				-> "protected 'using nptr::get_ref;'"
			),
			(
			+ "explicitly defaulted (copy, move) %operator=";
			* $comp "missing move %operator=" $since b492
			)
		);
		/ %'YCLib_(MinGW32)'.Win32GUI -> YCLib.HostedGUI
			$= (/ "all declaration" @ "inline namespace %Windows"
				>> "enclosing namespace %platform_ex" @ "platform %Win32");
		/ "merged classes %(WindowReference, ScreenBuffer, ScreenRegionBuffer, \
			HostWindow)" @ %'YCLib(Android)'.Android
			>> ("platform %Android" @ YCLib.HostedGUI);
		+ $comp ("member function %WindowReference::GetNaiveHandle";
			'using WindowReference::GetNativeHandle' @ "class %HostWindow")
			@ "platform %Android"
		)
	),
	/ @ %Tools.SHBuild.Main $=
	(
		+ "platform %Linux support"
			$= (/ "implemented terminal output" ^ "%Terminal" ~ "%WConsole"),
		/ "simplified platform-neutral implementation" ^ $deps_from
			("%platform_ex::(EncodeArg, DecodeArg)" @ %YFramework.YCLib.Host)
			~ "%platform_ex::MBCSToMBCS",
		/ "output file timestamp optimized to be fetched only once for \
			comparing",
			// Given the assumption of output file keeping modified during \
				building, it is more efficient.
		* "directory with other file system category not recognized as \
			directory" $since b541 $dep_from %YFramework.YCLib.FileSystem
	),
	/ %YBase.YStandardEx $=
	(
		/ @ %Utilities $=
		(
			+ 'yconstfn' @ "function templates %(decay_copy, decay_forward)",
			+ "class template %nptr"
		),
		+ 'yconstfn' @ "2 function templates %unref" @ %Functional
	),
	/ %YReader.ReadingList $=
	(
		/ DLD "implemented inline functions %operator==" @ %ReadingList
			^ "macros %(PDefHOp, ImplRet)",
		/ @ "class %ReadingList" $=
		(
			/ DLD "simplified class %ReadingList" ^ "base class %nonmovable"
				~ "explicitly deleted move constructor",
			/ "Doxygen comments" @ "using-declaration %ReadingList::Switch"
			(
				- "redundant comment"
				* "wrong comment on parameter" $since b404
			)
		)
	),
	/ %YDE.ImageBrowser $=
	(
		/ @ "class %ImagePanel" @ %ImageControl $=
		(
			/ "parameter 'const wstring&'" @ "function %Load"
				-> 'const ImagePages&&',
			+ "function template %Load"
		),
		/ DLD "simplified" @ "main function" %Main @ $dep_from
			%YFramework.Helper.HostedUI;
	),
	/ $dev $repo "all edited file with module name not the same as base \
		file name" @ !%YBase ^ 'hg rename' $effectieve ("%main.cpp"
		=> "%Main.cpp" @ %(Tools.SHBuild, YDE.ImageBrowser).Main, ("%yevt.hpp"
		=> "%YEvent.hpp" @ %YEvent, "%yfunc.hpp" => "%YFunc.hpp" @ %YFunc,
		"%yexcept.h" => "%YException.h" @ %YException) @ %YFramework.YSLib.Core)
),

b559
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ DLD "implementation" ^ '{}' ~ '0' @ "constructor %MappedFile"
				@ %MemoryMapping,
				// To eliminate warning: [-Wzero-as-null-pointer-constant].
			/ "%PixelType" @ "namespace %platform" => "%Pixel" @ %Video,
			/ %Platform $=
			(
				+ "platform %Linux" $=
				(
					+ "macros %(YF_Platform_Linux_x86, YF_Platform_Linux_x64)";
						// Only i686 and x86_64 are supported.
					+ "detected %Linux platform with predefined macro \
						%__linux__",
					(
					+ "conditionally defined macro %YCL_Linux when detected \
						%__linux__";
					+ "%Linux features macro definitions"
					)
				),
				- "redundant %YF_Multithread definition" @ "platform %DS"
			),
			+ "allowed platform %Linux to be built" @ $effective
				%(YCommon, Keys) $dep_from ("platform %Linux" @ %Platform),
				// To allow build only, not necessarily implemented correctly.
			/ %FileSystem $=
			(
				/ "all 'YCL_Android'" -> 'YCL_Linux' $dep_from
					("platform %Linux" @ %Platform),
				+ "explicitly assertion for nonnull parameter"
					@ "functions %GetRootNameLength" ^ "%Nonnull",
				/ @ "!platform %Win32"
					@ "function %IsAbsolute for 'const char*'" $=
				(
					+ "assertion for nonnull parameter" ^ "%Deref",
					- "null check",
						// Since behavior for null parameter has been undefined.
					/ $dev $lib "implemented" !^ "%::PathIsRelative" $dep_to
						"getting off Shlwapi"
				),
				+ "function %IsAbsolute for 'const char16_t*'"
			)
		),
		/ %'Helper_(Android)'.AndroidHost $=
		(
			/ DLD "implementation" ^ 'nullptr' ~ '{}' @ "member function \
				%NativeHost::ClearSavedStateHandler",
			- $dev $lib "region buffer" @ "Android screen buffer" $dep_from
				%'YCLib_(Android)'.Android
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YGDIBase $=
				(
					/ "class %Graphics" -> "class template %GGraphics";
					+ "alias-declaration %(ConstGraphics, Graphics)";
					- $comp "static member object %Graphics::Invalid",
					+ $comp "member types %Graphics::(PointerType, SizeType, \
						PixelType)"
				),
				+ 'using Graphics = Drawing::Graphics;' @ "class %GraphicDevice"
					@ %YDevice
			),
			/ %Service $=
			(
				/ DLD "implemented inline functions"
					"%(GetHorizontalOf, GetVerticalOf, Clip, 2 CopyTo, BlitTo)"
					@ %YGDI ^ "macros %(PDefH, ImplRet)",
				* "non-absolute path as result for absolute path when root \
					name length is zero" @ "member function %Path::Parse"
					@ %FileSystem $since b409
					// Most notably, all UNIX absolute paths are broken.
			),
			/ "source parameter type %Graphics" @ "all functions"
				-> "%ConstGraphics" $effective @ %Service.(YGDI, YBlit)
				$dep_from %Core.YGDIBase,
			* "non-lowercase header file name of %(YAdaptor, YNew)"
				@ %Adaptor.YModules $since b462
		),
		/ "namespace %Android" @ %'YCLib_(Android)'.Android $=
		(
			+ "function %UpdateContentTo";
			/ DLD "simplified implementation"
				@ "member function %ScreenRegionBuffer::UpdateTo"
					^ "%UpdateContentTo"
				// Actually it locked a little more content than before, but \
					can be ignored.
		),
		+ DLB "included %YCLib.Host" @ %Helper.YGlobal,
		/ @ "class %WConsole" @ %'YCLib_(MinGW32)' $=
		(
			+ "constructor for %::HANDLE",
			- "function %GetStandardHandle"
		),
		(
		+ "macros %(DefNeg; DefBoolNeg)" @ %YBaseMacro;
		/ $dev $lib "simplified member function %operator! with negative \
			result of %operator bool" ^ "macros %DefBoolNeg" $effective
			@ %(YSLib.(Adaptor.Image, Core.(ValueNode, YGDIBase, YMessage, \
			YObject), Service.File), 'YCLib_(MinGW32)'.MinGW32)
		)
	),
	/ %Tools $=
	(
		* "externally set %AR had no effect" @ ("SHBuild-bootstrap.sh"
			@ %Scripts $since b542, "install-sysroot.sh" $orig (@ %Scripts
			$since b546)),
			// Hard-coded 'gcc-ar'.
		/ %Scripts $=
		(
			/ @ "%SHBuild-common.sh" $=
			(
				+ "function %SHBuild_EchoEscape to support printing ANSI \
					escape sequence only in terminal";
				* "ANSI color sequence printed out of terminal",
					@ "function %SHBuild_EchoVar" $since b546
					// $TERM is still not checked.
				/ DLD "implemented functions %(SHBuild_Pushd, SHBuild_Popd)"
					^ '2&> 1',
				/ DLD "reserved all spaces between words of redirection"
					// But not redir-op and prefix decimal number denoting \
						file descriptor.
			),
			* "non-lowercase source file name of %YFramework.YCLib.YCommon" 
				@ "%SHBuild-bootstrap.sh" $since b540,
			- $dep_from "getting off Shlwapi" '-lShlwapi' @ "%LIBS" $effective
				@ ("SHBuild-bootstrap.sh", "SHBuild-YSLib.sh",
				"SHBuild-YSLib-debug.sh", "SHBuild-BuildApp.sh"),
			/ @ "SHBuild-bootstrap.sh" $=
			(
				/ "added %'YCLib_(MinGW32)' item" @ "%LIBS only when \
					detected 'MINGW' or 'MSYS' in 'uname' output",
				- "workaround '-fno-lto' for path encoding" @ "CXXFLAGS",
					// No need to workaround here. Set $TMP in build \
						environment is preferred. The output binary size by \
						default is also significantly smaller (193 KiB vs. 853 \
						KiB).
				- '-Wl,--dn' @ "LDFLAGS",
					// This does not work on all platforms (e.g. -lgcc_s \
						failed on Linux) and may lead to other problems. \
						Passing arguments form build environment is preferred.
			),
			/ @ "SHBuild-common-options.sh" $=
			(
				/ @ "default value" @ "variable %CXXFLAGS_IMPL_COMMON"
				(
					* "calling G++ failed when no '-mthreads' support" $since
						b540,
					+ '-pthread' @ "'Linux' in 'uname' output"
						// Otherwise the thread call would fail in runtime in \
							Linux.
				),
				/ "disabled %LDFLAGS_IMPL_OPT default value for Clang++",
					// Since currently there is no simple stable interface to \
						automatically call ld.gold, usually the linking would \
						fail.
				/ "default value" @ "%LDFLAGS_OPT_DBG" ^ "%LDFLAGS_IMPL_OPT"
			)
		),
		/ "merged 'msys/make' into necessary installing group"
			@ "%msys2-pacman-update.sh"
			// Otherwise 'g++ -flto' could fail.
	),
	/ %YBase.StandardEx $=
	(
		* "no definition" @ "libstdc++ used without G++ (e.g. in Clang++) or \
			even if %__STDCPP_THREADS__ defined" @ %Concurrency $since b520,
		(
		/ %Container $=
		(
			+ "2 function %get_container" @ "class template %container_adaptor";
			+ 'using base::get_container;'
				@ "class template %sequence_container_adaptor"
		);
		+ 'using base::get_container;' @ "class template %path" @ %Path
		)
	),
	- 'ShlWapi' @ "libraries" @ "platform %Win32" @ "Code::Blocks projects"
		$dep_from "getting off Shlwapi"
),

b558
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ @ "class %ImagePages" @ %YSLib.Service.ImageProcessing $=
			(
				- $revert(b557) "functions %(GetFrameTime, IsAnimated); \
					animating metadata loading",
					// It is difficult to control the frame time and other \
						miscellaneous properties here.
				+ "function %GetBitmaps",
				* $comp "possibly wrong scale value used"
					@ "function %ZoomByRatio" @ %ImageProcessing $since b555
					$dep_from %YBase.YStandardEx.Rational
			),
			/ "1st parameter" @ "function %Zoom" -> 'float' ~ 's16'
				@ %Service.ImageProcessing,
			/ DLD "all integer types names with pattern 'u*', 's*'"
				-> "types from <cstdint>" $effective @ %(Adaptor.(Font, Image),
				Core.(YEvent, YMessage, YCounter, YCoreUtilities), Service.(
				CharRenderer, YPixel, TextBase, TextRenderer, TextLayout, YGDI,
				TextFile, YDraw), UI.(YStyle, YUIContainer, YUIContainer));
			- "alias-declarations %(u8, u16, u32, u64, s8, s16, s32, s64, vu8, \
				vu16, vu32, vu64, vs8, vs16, vs32, vs64)" @ "namespace %YSLib"
				@ %Adaptor.YAdatpor $dep_from %(Helper, 'Helper_(DS)', YReader),
			/ %Core.YDevice $=
			(
				/ @ "class %GraphicDevice" $=
				(
					+ "virtual function %SetSize",
					- "%(GetBufferPtr, GetSizeOfBuffer, GetContext)"
					/ "first 2 parameter" -> 'const Drawing::Size&'
						~ 'SDst, SDst' @ "constructor"
				),
				/ @ "class %Screen" $=
				(
					+ "overrider %SetSize throwing %ystdex::unsupported"
						$dep_from "%GraphicDevice::SetSize"
					/ @ "function %Update" $=
					(
						+ "assertion" ^ "%Nonnull",
						/ "parameter type" -> 'Drawing::ConstBitmapPtr'
							~ 'Drawing::BitmapPtr'
					),
					- "virtual function %GetCheckedBufferPtr"
					- "constructor for 2 components of %Drawing::Size"
				)
			),
			/ %UI $=
			(
				/ "simplified assertion" @ "functions %(MoveToRight, \
					MoveToBottom)" ^ "%Deref" @ %YUIContainer,
				- "member function %Desktop::GetBackgroundPtr" @ %YDesktop;
			)
		),
		/ %YCLib $=
		(
			/ %Debug @ "debug configurations" $=
			(
				* $comp "macro %YAssert not overriden to call \
					%platform::LogAssert" @ "platform %Android" @ $since b548
					$dep_from ("macro %YAssert" @ %YBase.YStandardEx.CAssert),
				(
				+ "function template %AccessRecord" @ "class %Logger",
				/ "function %LogAssert extended to all platforms implemented"
					^ "%ystdex::yassert"
					@ 'YB_Use_YAssert && YF_Multithread == 1';
				* $comp "probable interleaved assertion output with common log"
					$since b498,
					// No further guarantee for other loggers.
				+ "message box for %LogAssert before further call to \
					%ystdex::yassert" @ "platform %Win32"
				)
			),
			/ DLD "implementation" ^ '{}' ~ '0' @ "platform %DS" @ %Video
				// To eliminate warning: [-Wzero-as-null-pointer-constant].
		)
		/ DLD "all integer types names with pattern 'u*', 's*'"
			-> "types from <cstdint>" $effective @
			%Helper.(ShellHelper, Environment), %'Helper_(DS)'.DSMain,
		/ DLD "explicitly allowed buffer size passed"
			@ "Android screen buffer implementation" @ %'Helper_(Android)',
		/ "parameter type" -> "%Drawing::ConstBitmapPtr" ~ "%Drawing::BitmapPtr"
			@ ("member function %HostRenderer::Update" @ %Helper.HostedUI,
			"member function %Window::UpdateFrom" @ %Helper.HostWindow,
			"member functions %((ScreenBuffer, \
			ScreenRegionBuffer)::UpdateFrom, ScreenBuffer::Premultiply)"
			@ %('YCLib_(MinGW32)'.Win32GUI, 'YCLib_(Android)'.Android))
	),
	/ @ "membef function %ImagePanel::Load" @ %YDE.ImageBrowser.ImageControl $=
	(
		+ "animating metadata loading",
		* "crash when zero frame time loaded for animation" $since b557;
		* $comp $build "failed to build" $since b557
	),
	/ %YBase.YStandardEx $=
	(
		/ %CAssert $=
		(
			* "strict ISO C/C++ code compatibility" $since b432 $orig
				(@ "function %platform::yassert" @ %YFramework.YCLib.YCommon
				$since b175),
				// To avoid undefined behavior.
				$= (/ "explicitly used string literal when received null \
					pointer value argument" @ "function %yassert"),
			/ "defined macros %(YAssert, YAssertNonnull, YTrace) only when \
				undefined",
			* "<cassert> not excluded by header guard" $since b548,
				// This would cause multiple inclusion ignoring %NDBUG.
			/ $dev "made functions %(yassert, ytrace) only declared when \
				macros %(YB_Use_YAssert, YB_Use_YTrace) respectively"
				// These functions are not defined in this case. This makes \
					it easier to detect wrong use of macros.
		),
		/ %Rational $=
		(
			+ "2 std::common_type specializations for %ystdex::fixed_point \
				instances and other types";
			/ @ "binary operations on %ystdex::fixed_point" $=
			(
				(
				+ "overloadings for one of parameter as floating point types";
				* $comp "wrong result of instances and floating types" $since
					b260 $dep_from "%common_type specializations"
				),
				* $dev $lib "asymmetric parameter types" $since b439
			),
			/ DLD "simplified implementation" ^ "more macros"
		),
		/ "constructor template" -> "inheriting constructor"
			@ "classes %(unsupported, unimplemented)" @ %Exception,
	),
	/ DLD "all integer types names with pattern 'u*', 's*'"
		-> "types from <cstdint>" $effective @ %YReader.(DSReader,
		ReaderSettingUI, HexBrowser, ShlExplorer),
	/ %Tools $=
	(
		/ @ "%msys2-pacman-update.sh" $=
		(
			- "'set -e' to allow skipping and continuing",
			- 'mingw32/mingw-w64-i686-make' @ "command line",
			/ "made 'msys/make' as installed in separate group for non-hosted \
				platforms"
		),
		* "echo for stage 1 %SHBuild path" @ "%install-sysroot.sh" $since b546,
		* $re_ex(b541) "missing quoting source file path" @ %SHBuild.Main $since
			b474
		/ @ "%SHBuild-common-options.sh" $=
		(
			(
			+ "variable %C_CXXFLAGS_COMMON with default value";
			+ "variables %(CFLAGS_STD, CFLAGS_COMMON, CFLAGS) with default \
				values",
			/ "simplified %CXXFLAGS_COMMON" ^ "%C_CXXFLAGS_COMMON"
			),
			(
			+ "variable %C_CXXFLAGS_OPT_LV with default value '-O3'";
			/ '-O3' @ "default value" -> '${CXXFLAGS_OPT_DBG}'
			),
			+ "variable %LDFLAGS_IMPL_OPT depending on compiler driver",
				// Note that '-flto=jobserver' cause warning on linker command \
					line of G++, so raw '-flto' should be used instead.
			/ "made all variables depending on compiler driver assigned only \
				when empty",
				// To allow being overridden.
			(
			+ "variable %LDFLAGS_OPT_DBG with default value";
			/ "default value" @ "%LDFLAGS" ^ "%LDFLAGS_OPT_DBG"
			),
			+ "variable %ASFLAGS_OPT_DBG with default value"
		),
		+ "%Toolchain.options.mk" $dep_from "%SHBuild-common-options.sh" $=
		(
			+ "variables %(C_CXXFLAGS_COMMON, CFLAGS_STD, CFLAGS_WARNING, \
				CFLAGS_COMMON, CXXFLAGS_IMPL_WARNING, CXXFLAGS_IMPL_OPT, \
				CXXFLAGS_STD, CXXFLAGS_WARNING, CXXFLAGS_COMMON, \
				LDFLAGS_IMPL_OPT, C_CXXFLAGS_OPT_LV, LDFLAGS_OPT_DBG) as \
				%SHBuild-common-options.sh"
			+ "variable %ASFLAGS_OPT_DBG with default value depending on %CONF"
		);
		+ "%Toolchain.DS.mk" $=
		(
			(
			+ "suppressed %C_CXXFLAGS_OPT_LV as '-O3' for non-debug \
				configurations",
			/ "removed LTO option for %(CXXFLAGS_IMPL_OPT, LDFLAGS_IMPL_OPT)";
			/ "included %Toolchain.options.mk";
			/ $comp "%CXXFLAGS for release configuration" ^ '-Os' ~ '-O3'
				// With G++ 4.9.2, '-O3' makes code bloat significantly \
					serious than using G++ 4.8.2 (~1050 KiB vs. 986 KiB). With \
					LTO it would be more serious (1280 KiB even with '-Os'). \
					So '-Os' without LTO (920 KiB) is now used instead by \
					default.
			),
			(
			/ "included devkitARM makefile";
			+ "overridden exported %AR as '$(PREFIX)gcc-ar'" ~ '$(PREFIX)ar'
				// To avoid LTO failed for G++ 4.9.
			),
			+ "variables %(ASFLAGS_OPT_DBG, C_CXXFLAGS_OPT_DBG) depending on \
				value of %CONF as DS makefiles",
			(
			+ "variables %(ARCH_AS_ARM9, ARCH_ARM9) as DS ARM9 makefiles";
			+ "variables %CFLAGS_ARM9"
			),
			(
			+ "variables %(ARCH_AS_ARM7, ARCH_ARM7) as DS ARM7 makefile";
			+ "variables %CFLAGS_ARM7"
			);
			+ "variable %C_CXXFLAGS"
		),
		+ "%Toolchain.Android.mk" $=
		(
			+ "toolchain setting as Andriod makefiles",
			+ "variables %(ARCH_AS; ARCH; ASFLAGS, C_CXXFLAGS)
		)
	),
	/ DLP "toolchain and library using" @ "platform %DS" $=
	(
		^ $re_ex(b321) "updated devkitARM release 43" ~ "devkitARM release 42",
		^ $re_ex(b308) "updated libnds 1.5.9" ~ "libnds 1.5.8",
		^ $re_ex(b308) "updated libfat 1.0.13" ~ "libfat 1.0.12",
		^ $re_ex(b308) "updated default arm7 0.5.26" ~ "default arm7 0.5.25"
	),
	/ DLD "simplified implementation by inclusion" @ "all 5 makefiles"
		@ "platform %DS" $dep_from ("%Toolchain.DS.mk" @ %Tools) $=
	(
		+ 'SHBuild_ToolDir := \
			$(dir $(lastword $(MAKEFILE_LIST)))/../../Tools/Scripts';
		+ 'include $(SHBuild_ToolDir)/Toolchain.DS.mk';
		/ $comp ^ "-Wzero-as-null-pointer-constant" @ "all %DS projects",
		+ '$(LDFLAGS_IMPL_OPT)' @ "%LDFLAGS"
			// Optimization option like '-flto' should be in both compiler and \
				linker command lines.
	),
	/ DLD "updated header search paths" @ "Visual C++ projects" $=
	(
		/ @ "platform %DS",
		* @ "platform %Android" $since b554
	),
	/ DLB "cleanup pre-libstdc++-4.9 dependencies on %(cbegin, cend) members \
		for standard containers" $effective @ %(YFramework.YSLib.UI.TreeView,
		YReader.BookmarkUI) $dep_from ("toolchain and library using"
		@ "platform %DS")
		// See WG21/N1913.
),

b557
(
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			* $build "missing update header name" @ $since b556
				$= ('<ystdex/exception.hpp>' -> '<ystdex/exception.h>'),
			* "undefined behavior when .d file not exist"  $since b546,
				// Actually crashed on Windows XP when assertion disabled, but \
					not Windows 7 or above.
		),
		* $build "missing %ystdex/exception.cpp" @ "%LIBS"
			@ "%SHBuild-bootstrap.sh" $since b556,
		/ %Scripts $=
		(
			+ "support checking for %(SHBuild_NoStatic, SHBuild_NoDynamic) to \
				skip static or dynamic libraries building"
				@ "%(SHBuild-YSLib.sh, SHBuild-YSLib-debug.sh)",
			+ "variable %CXXFLAGS_OPT_UseAssert to allow omitting '-DNDEBUG' \
				when %CXXFLAGS_OPT_DBG is empty" @ "%SHBuild-common-options.sh";
				// To support release with assertion builds.
			+ "'CXXFLAGS_OPT_UseAssert=true' before configure %CXXFLAGS"
				@ "%SHBuild-build.sh"
				// Stage 1 %SHBuild should be not so optimized for robustness.
		),
		/ "%install-sysroot.sh" $=
		(
			+ "variable %SHBuild_UseRelease with default value 'true'",
			/ "exported %(SHBuild_NoStatic, SHBuild_NoDynamic)"
				@ "configuration stage",
			+ "optional building and installing libraries controlled by \
				variables %(SHBuild_NoStatic, SHBuild_NoDynamic)",
			+ "optional building and installing release libraries controlled \
				by variable %SHBuild_UseRelease",
			+ "skipping installing 3rd party libraries controlled by variable \
				%SHBuild_No3rd"
		)
	),
	/ %YFamework $=
	(
		/ %YSLib $=
		(
			/ @ "function %EnsureDirectory" @ %Service.FileSystem $=
			(
				+ "logging just before throwing when making directory failed",
				- "assertion for post condition"
					// Since the operations are actually not guaranteed to be \
						synchronized.
			),
			/ %Adaptor.Image $=
			(
				/ @ "class %ImageTag" $=
				(
					+ "optional ownership",
					+ "2 constructor function; constructor template with \
						parameter of bitmap, model and tag name",
					/ "enum %ImageTag::Model"
						-> "enum class %Drawing::ImageMetadataModel",
					/ "function %GetValue" => "%GetValuePtr",
					+ "function template %TryGetValue",
					+ "function %GetDataPtr"
				),
				(
				+ "classes %ImageMetadataFindData; HImageMetadata";
				+ "alias-declaration %HImageMetadataIterator"
				),
				+ "function %to_string for %ImageTag",
				+ "functions %(GetFrameTimeOf, GetLogicalSizeOf) for %HBitmap"
				* $comp $dev "constructor with %DataPtr unusable"
					@ "class %HImage" $since b483 $dep_from
					%YBase.YStandardEx.String
			),
			/ %Core.YCoreUtilities $=
			(
				+ "empty string as default argument for 2nd parameter"
					@ "function templates %(CheckScalar, \
					CheckNonnegativeScalar, CheckPositiveScalar)",
				/ $dev "implemented comparison" @ "function template \
					%CheckScalar" ^ "cast by %ystdex::common_type_t"
					// To eliminate warning: [-Wsign-compare] when one of \
						template argument is signed integer type.
			),
			/ @ "class %ImagePages" @ %Service.ImageProcessing $=
			(
				(
				$dep_from %Adaptor.Image;
				/ "base size stored for nonempty sequence" ^ "%GetLogicalSizeOf"
					~ "first frame",
				/ "frame time sequence stored" ^ "%GetFrameTimeOf";
				+ "function %GetFrameTime"
				),
				/ "function %GetPageIndex" => "%GetIndex",
				/ "function %GetPagesNum" => "%GetCount"
			),
			+ 'ynothrow' @ "function %ResetState" @ %UI.Animation
		)
		* "crash for invalid file" @ "constructor %Session" @ %NPL.SContext
			$since b335
			// It would cause assertion failed on debug builds.
	),
	/ %YBase.YStandardEx $=
	(
		/ DLD ^ 'override' ~ 'virtual'
			@ "destructors %(unsupported, unimplemented)" @ %Exception,
		/ @ "class %thread_pool" @ %Concurrency $=
		(
			/ @ "function template %wait_to_enqueue" $=
			(
				/ $doc "explicitly stated precondition",
				+ "assertion for postcondition after %wait called"
			),
			+ "assertion for no %std::future_error thrown out of task"
				@ "working thread"
		),
		/ %String $=
		(
			+ "metafunction %is_string_class";
			* "argument of pointer to incomplete class caused ill-formed"
				@ "%enable_for_string_class_t" @ $since b483
				^ "%is_string_class"
		)
	),
	+ "frame time support for animated GIF" @ %YDE.ImageBrowser.ImageControl
		$dep_from %YFramework.Service.ImageProcessing
),

b556
(
	/ %YBase $=
	(
		+ %CMath @ %LibDefect,
			// To make as many as possible ISO C++11 math functions work with \
				libstdc++ even if no %_GLIBCXX_USE_C99_MATH_TR1 is defined.
		/ DLD ^ "%std::llround" ~ "%::round" @ %Rational $dep_from
			%LibDefect.CMath,
		/ DLD "swapped order of definition of macros %(YPP_Concat, YPP_Join)"
			@ %YDefinition,
			// To be intuitive and to prevent (unlikely) misuse between the \
				two definitions.
		/ %YStandardEx $=
		(
			/ %Iterator $=
			(
				/ @ "class template %subscriptive_iterator" $=
				(
					+ "3 parameters with default argument for member type"
						@ "template parameter list";
					/ "alias-declarations %(difference_type, pointer, \
						reference)" ^ "template parameter",
					(
					+ "friend function %is_undereferenceable";
					+ "assertion of not %is_undereferenceable"
						@ "function %operator*",
					+ "friend function %less"
					),
					+ DLD 'ynothrowv' @ "all member functions without \
						exception specification",
					+ "brace-initializer for data members",
						// To make default initialized iterator compatible \
							with 'constexpr'.
					+ "explicitly defaulted default constructor",
					/ @ "function %equals" $=
					(
						/ "always treats iterators with null container are \
							same",
						+ "assertion for same container"
					),
					(
					/ "function %index" => "%get_index";
					/ DLD "renamed data member",
					+ 'yconstfn' @ "functions %(container, get_index)"
					)
				),
				+ "function templates binary %operator(<, >, <=, >=, -) for \
					%subscriptive_iterator"
			),
			/ DLD "simplified constructor %fixed_point" @ %Rational,
			(
			+ %Base
				$= (+ "class template %deref_self"),
			/ DLD "class template %guard_impl" @ %Utilities !^ "%noncopyable",
			/ $dev "class template %lref" @ %Functional ^ "explicitly \
				defaulted copy (constructor, %operator=)" ~ "%nonmoveable";
			/ "classes (noncopyable, nonmoveable, cloneable)" @ %Utilities
				>> %Base;
			/ $dev "defined virtual destructor out-of-line" @ "class %cloneable"
				@ ".cpp file" ~ ("class definition" @ "header")
				// To eliminate Clang++ warning: [-Wweak-vtables].
			),
			(
				/ $dev %Exception $=
				(
					/ "header %exception.hpp" >> "%exception.h",
					+ "source file %exception.cpp"
				);
				/ "classes (unsupported, unimplemented)" @ %Utilities
					>> %Exception;
				+ $dev "defined virtual destructor out-of-line"
					@ "class %(unsupported, unimplemented)"
					@ ".cpp file" ~ ("class definition" @ "header")
					// To eliminate Clang++ warning: [-Wweak-vtables].
			)
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Adatpor $=
			(
				/ 'using ::round' -> 'using std::round' @ %YAdaptor $dep_from
					%LibDefect.CMath,
				/ %Image $=
				(
					/ @ "class %HMultiBitmap" $=
					(
						(
						// These modification provide a default constructed \
							null handle.
						+ DLD "'{}' as initializer for pointer data member";
						+ "explicitly defaulted default constructor"
						),
						/ @ "function %Lock" $=
						(
							+ DLD 'ynothrowv',
							+ "locked page index and count" @ "indirect assertion"
						),
						(
						+ "function %operator[]";
						/ "class %iterator" -> "alias-declaration"
							^ "%ystdex::subscriptive_iterator" $dep_from
							%YBase.YStandardEx.Iterator
						),
						* "%std::terminate called when image plugin not found"
							@ "constructor" $since b456,
							// This is caused by improper 'ynothrow'. This \
								would cause crash by default instead of \
								propagating the exception.
					),
					- "all 2 functions for %HMultiBitmap::iterator",
					* "wrong call for list initialization of sequence \
						container of iterator type" @ "static member function \
						template %ImageCodec::LoadSequence" $since b461,
					/ "base class %LoggedEvent" -> "GeneralEvent"
						@ "%UnsupportedImageFormat",
					/ "constructor %UnknownImageFormat" -> 'using \
						UnsupportedImageFormat::UnsupportedImageFormat",
					/ "constructors %HMultiBitmap explicitly allowed to \
						propagate exception types %std::(bad_cast, \
						invalid_argument)",
					/ @ "class %HBitmap" $=
					(
						/ "constructors opened from file would throw \
							%std::invalid_argument if \
							file open failed",
						/ "functions and function template %SaveTo would throw \
							%std::invalid_argument if the bitmap is null or \
							%GeneralEvent if failed otherwise"
							~ "return %bool value",
						/ $dev "constructor with %DataPtr parameter and \
							default argument" -> "brace-initialized data \
							member, explicitly defaulted constructor and \
							constructor without default argument",
						/ @ "function %operator[]" $=
						(
							/ 'ynothrow' -> 'ynothrowv',
							* "missing assertion for nonnull bitmap pointer as \
								documentation" $since b
						),
						+ "function %Release"
					),
					+ "class name declaration %::(FIMETADATA, FITAG); \
						class %ImageTag"
				)
			),
			* "uninitialized read of scale value caused by wrong data member \
				initialization order" @ "constructor" @ "class %ImagePages"
				@ Service.ImageProcessing $since b555,
			* "missing level value when throwing %LoggedEvent object"
				@ "function templates %(CheckNonnegativeScalar, \
				CheckPositiveScalar)" @ %Core.YCoreUtilities $since b502
		),
		+ ('#include YFM_Helper_HostedUI', 'YFM_YSLib_Service_ImageProcessing')
			@ %YSBuild,
		/ %'YCLib_(MinGW32)' $=
		(
			+ %NLS;
			/ "functions %(FetchNLSItemFromRegistry, \
				FetchCPFileNameFromRegistry, FetchDBCSOffset)" @ %MinGW32
				>> %NLS
		),
		/ "all throwing %LoggedEvent without level" -> "throwing %GeneralEvent"
			$effective @ %(YSLib.Adaptor.Image, Helper.(GUIApplication,
			Initialization), 'YCLib_(MinGW32)'.Win32GUI),
		+ "member functions %operator(!, bool)" @ "class %DirectorySession"
			@ %'YCLib_(MinGW32)'.MinGW32,
			/ DLD "simplified class %HDirectory" @ %YCLib.FileSystem
				^ $dep_from ("%ystdex::deref_self" @ %YBase.YStandardEx.Base)
	),
	+ %YDE $=
	(
		+ $doc "Readme.en-US.txt",
		+ %ImageBrowser
			$= (+ %(ImageControl; Main)),
		+ "%build-all.sh"
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			* $comp $build "missing %YCLib/MemoryMapping.cpp" @ "%LIBS"
				@ "%SHBuild-bootstrap.sh" $since b552 $dep_from
				%YFramework.'YCLib_(MinGW32)',
				// Otherwise linking failed. It is needed as a side effect of \
					%FetchDBCSOffset in %'YCLib_(MinGW32)'.
			+ "%SHBuild-self-host-DLL.sh"
				// XXX: Depends on DLLs in '/usr/lib'.,
			(
			/ @ "%install-sysroot.sh" $=
			(
				* "missing exported %LDFLAGS after loading default options \
					before building stage 2 %SHBuild" $since b546,
					// This made the binary larger than expected and necessary.
				+ '-fno-lto -fwhole-program' @ "command line for stage 2 \
					%SHBuild",
					// Since the bootstrap build a single execution file, the \
						'-fno-lto -fwhole-program' makes it better. Seems no \
						bug like static linking (see %SHBuild-bootstrap.sh).
				/ "default value" @ "%SHBuild_LogOpt" -> '-xlogfl,128'
					~ '-xlogfl,192'
					// To decrease verbosity and increase performance by \
						default.
				/ "default value" @ "%SHBuild_BuildOpt" -> '-xj,6' ~ '-xlogfl,8'
					// To decrease probability to hang.
				+ "deploying static libraries %(libfreetype.a, libFreeImage.a)"
			);
			/ "%install-sysroot.sh" @ %Scripts >> %Tools
			),
			(
			+ "%(SHBuild-YSLib-common.sh; SHBuild-YSLib-debug.sh)";
			+ "support for building and installing debug libraries if non \
				empty %SHBuild_UseDebug is set" @ "%install-sysroot.sh"
			),
			/ @ "%SHBuild-YSLib.sh" $=
			(
				/ "simplified" ^ $dep_from "%SHBuild-YSLib-common.sh",
				* "wrong command line" @ "building %YFramework.dll" $since b546
					$= (/ '-DYB_BUILD_DLL' -> '-DYB_DLL')
			),
			/ "all 'source' shell builtin" -> '.',
				// To be not verbose and compatible with other shells.
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				/ "auto-detecting debug modes by prefix 'debug'"
					~ "identical match",
				+ "static build support with variable %SHBuild_Static and \
					auto-detecting configure name postfix 'static'",
				+ "variable %SHBuild_NoAdjustSubsystem to allow suppressing \
					adding '-mwindows' in release modes"
			)
		),
		+ "target base name overriding option '-xn'" @ %SHBuild.Main,
	),
	* $dev "missing %source/ytest/test.cpp" @ "YBase.cbp" $since b519
),

b555
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				+ 'ynothrow' @ "static member function %Caret::Stop" @ %TextBox,
				- $dev "class name declarations %(SolidBrush, ImageBrush)"
					@ %YComponent,
				/ %YBrush $=
				(
					/ "all declarations" @ "namespace %UI"
						>> "namespace YDrawing",
					/ "member functions %operator()"
						@ "classes %(SolidBrush, ImageBrush)" $=
					(
						/ "parameter 'PaintEventArgs&&'"
							-> 'const PaintContext&' $dep_to
							"removal of event argument type from brushes",
						+ 'const'
					)
				),
				/ %YBrush @ %UI >> %Service $dep_from
					"removal of event argument type from brushes",
				/ %YStyle $=
				(
					+ DLD 'ynothrowv' @ "member function %Palette::operator[]",
					- "assertion for rotation value"
						@ "function %RectDrawCornerArrowOutline"
						// To eliminate Clang++ warning \
							[-Wtautological-constant-out-of-range-compare].
				),
				/ "alias %ZOrderType" @ %YUIContainer => "%ZOrder",
				/ %GUI $=
				(
					/ @ "class %InputTimer" $=
					(
						+ "static %yconstexpr data member %DefaultDuration";
						+ "ensured %noexcept guarantee"
							@ "default constructor %InputTimer" $=
						(
							/ "default argument" ^ "%DefaultDuration";
							// This is not the same as default constructor of \
								duration type, see http://stackoverflow.com/questions/22701617/should-constructors-on-stdchrono-time-point-be-noexcept-or-why-arent .
							+ 'ynothrow'
						)
					),
					+ "class %GUIConfiguration; function \
						%FetchGUIConfiguration",
					/ @ "class %YGUI" $=
					(
						- "data member %(Colors, Styles)";
						/ $comp "made %GUIState really with %noexcept guarantee"
					),
					* $comp $dev $build "static assertion failure" @ "function \
						%FetchGUIState" $since b554 $dep_from "class %YGUI",
						// G++ wronly accepted it. Clang++ correctly rejected \
							it.
					+ 'ynothrow' @ "function %IsFocusedByShell"
				)
			),
			/ %Service $=
			(
				/ %YTimer $=
				(
					/ @ "class %Timer" $=
					(
						+ 'ynothrow' @ "default constructor",
						/ "base class %noncopyable" -> "explicitly defaulted \
							copy (constructor, %operator=)"
							// This makes it also satisfying %MoveConstrctible \
								and allows it to be forward as a tuple element.
					),
					/ DLD "implemented static member function \
						%HighResolutionClock::now" ^ "macros %(PDefH, ImplRet)"
					+ 'ynothrow' @ "function %Activate"
				),
				/ %ImageProcessing $=
				(
					(
					+ "alias-declaration %ImageScale of fixed point type";
					* $comp "missing handling invalid input ratio" $since b554,
						// Like negative values or NaN. No it is not needed.
					/ "all %ScaleType and 'float'" -> "%ImageScale"
					),
					/ @ "class %ZoomedImageCache" $=
					(
						/ "constructor function" -> "constructor template for \
							any path tpyes",
						+ "explicitly defaulted move (constructor, %operator=)"
							// This makes it to be a move-only type.
					),
					+ "class %ImagePages"
				)
			),
			/ %Core $=
			(
				/ %YGDIBase $=
				(
					+ "member functions %operator(&=, |=)" @ "class %Size",
					+ "functions %operator(&, |) for %Size",
					/ DLD "implemented functions %operator(==, !=, +, -) for \
						%Rect" ^ "macros %(PDefHOp, ImplRet)",
					/ $dev "functions %operator(&, |) for %Rect"
						-> "inline functions",
					+ "function %ScaleMin",
				),
				/ %YObject $=
				(
					/ DLD "implemented member functions %(get, type)"
						@ "class templates %(ValueHolder, PointerHolder)"
						^ "macros %(PDefH, ImplRet)",
					/ @ "class template %PointerHolder" $=
					(
						(
						+ "template parameter \
							'typename _tPointer = std::unique_ptr<_type>'";
						+ "alias-declaration %holder_pointer";
						+ "alias-declaration %pointer_holder",
						/ "implemented member pointer" ^ "%holder_pointer"
							~ '_type*',
						/ "user-defined move constructor"
							-> "explicitly defaulted move constructor",
						- "user-defined destructor"
						),
						/ DLD "implemented member function %operator=="
							^ "macros %(PDefHOp, ImplRet)",
						+ "explicitly defaulted move %operator="
					),
					+ "explicitly defaulted move %operator="
						@ "class template %ValueHolder"
				)
			)
		),
		* "missing added files into filter for" %YSLib.Service.ImageProcessing
			@ "Visual C++ project",
		/ %YCLib $=
		(
			/ $dev %Video $=
			(
				/ $lib "implemented %(FetchPixel, YCL_FetchPixel)" ^ "cast",
					// To eliminate Clang++ warning [-Wsign-conversion].
				* "signed shifted value"
					@ "class templates %(XYZAMaskTrait, AXYZMaskTrait)" $since
					b507 $orig (@ "class template %XYZATrait" $since b441),
					// To eliminate Clang++ warning [-Wshift-sign-overflow], \
						[-Wsign-conversion]
				/ $lib @ "class templates %(BGRA, RGBA)" $=
				(
					+ 'using ArrayType = typename Trait::ArrayType',
						'using IntegerType = typename Trait::IntegerType';
					/ "simplified member declarations"
						^ "%(ArrayType, IntegerType)",
					/ "implemented constructor for components"
						^ "cast to %Integer"
						// To eliminate Clang++ warning [-Wsign-conversion].
				)
			),
			/ "no longer performed 'defined(_MT)' check for %YF_Multithread"
				@ %Platform,
				// Note MinGW-G++ would define '_MT' in specs if '-mthreads' \
					used, however <_mingw.h> would ensure it defined anyway. \
					It is depending on different headers included, thus lead \
					to confusion when not predefined, e.g. for Clang++.
			+ 'ynothrow' @ "functions %(GetTicks, GetHighResolutionTicks)"
				@ %Timer
		),
		/ DLD 'HWND_DESKTOP' -> '{}' @ "implementation"
			@ "function %CreateNativeWindow" @ %'YCLib_(MinGW32)'.Win32GUI
			// To eliminate [-Wzero-as-null-pointer-constant].
	),
	/ %YBase.YStandardEx $=
	(
		- $revert(b304) "function template %initializer_cast" @ %Cast,
			// This function template is useless and harmful because it would \
				only return a value with dangling reference to temporary array \
				of initializers thus any direct use of the value would lead to \
				undefined behavior.
		/ $dev $lib "implemented functions %(iscntrl_C1, iscntrl_ISO8859_1, \
			iscntrl_ISO8859_11)" @ %CCType ^ "cast to %unsigned",
			// To eliminate Clang++ warning [-Wsign-conversion].
		/ %Rational $=
		(
			* "implementation" @ "member function %epsilon" @ "class template \
				specialization %numeric_limits for instances of \
				%ystdex::fixed_point" $since b439
			+ 'yconstfn' @ "friend function %fabs for %ystdex::fixed_point",
			+ "'yconstfn' friend function %abs for %ystdex::fixed_point"
				// Same as %fabs, but might be preferred as uniformed C++ use, \
					with no ambiguity.
		),
		/ %Any $=
		(
			/ @ "class template %pointer_holder" $=
			(
				+ "template parameter \
					'typename _tPointer = std::unique_ptr<_type>'";
				+ "alias-declaration %holder_pointer";
				+ "alias-declaration %pointer_holder",
				/ "implemented member pointer" ^ "%holder_pointer" ~ '_type*',
				/ "user-defined move constructor"
					-> "explicitly defaulted move constructor",
				- "user-defined destructor",
				+ "explicitly defaulted (copy, move) %operator="
			),
			+ "explicitly defaulted (copy, move) (constructor, %operator=)"
				@ "class template %value_holder"
		)
	),
	- "-D_MT" @ "%CFLAGS" @ "makefiles" @ "platform %Android" $dep_from
		%YFramework.YCLib.Platform,
	/ $dev @ "%SHBuild-common-options.sh" @ %Tools.Scripts $=
	(
		(
		+ "%CXXFLAGS_IMPL_COMMON with default values for G++ and Clang++";
		/ "-mthreads" @ "default value" @ "%CXXFLAGS_COMMON"
			>> "%CXXFLAGS_IMPL_COMMON for G++",
			// To eliminate Clang++ warning.
		^ "%CXXFLAGS_IMPL_COMMON" @ "default value" @ "%CXXFLAGS_COMMON"
		),
		/ "-s" @ "default value" @ "%CXXFLAGS_DBG_OPT"
			>> "%CXXFLAGS_IMPL_OPT for G++"
			// To eliminate Clang++ warning.
	)
),

b554
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ "class %JNIBase" @ %JNI $=
			(
				* "wrongly detaching from thread even without ownership" $since
					b553,
					// This would get wrong behavior if the VM is already \
						attached to current thread. On android, this would \
						cause log like \
						'ERROR: detaching thread with interp frames \
						(count=12)', and then the VM would be aborted and crash. 
				/ "explicitly specified throwing %JNIException on failure"
					~ "%std::runtime_error" @ "constructor"
			),
			* "member name shadowed" @ "class %file_des" @ %FileSystem $since
				b553,
				// To eliminate Clang++ warning: warning: declaration shadows \
					a field [-Wshadow].
			* $dev $doc "wrong Doxygen directive '\t'" ~ '\c'
				@ "function %usystem" @ %YCommon $since b539,
				// To eliminate Clang++ warning: unknown command tag name \
					[-Wdocumentation-unknown-command].
			* $dev $doc "wrong Doxygen directive '\note'" ~ '\return'
				@ "function %ToggleLockState" @ %Keys $since b490
				// To eliminate Clang++ warning: '\return' command used in a \
					comment that is attached to a function returning void \
					[-Wdocumentation].
		),
		/ $dev $build "wrong Visual C++ project include directory settings"
			@ "all configurations" @ "platform %Win32" $since b544,
			// Instead of Visual C++ toolchain, MinGW headers would be used.
		/ DLB "explicitly truncated value" @ "implementation" %CHRLib $=
		(
			@ "function %UCS4ToUCS2" @ %CharacterProcessing,
				// To eliminate warning C4244 on VC++ 2015 Preview with \
					warning level /W3.
			@ "constructor %ConversionState" @ %CharacterMapping
				// To eliminate warning C4267 on VC++ 2015 Preview with \
					warning level /W3.
		),
		/ @ %YSLib.Adaptor.YReference $dep_from %YBase.YStandardEx.Functional $=
		(
			// See $2014-11 @ %Documentation::Workflow::Annual2014.
			+ 'using ystdex::reference_wrapper;'
		),
		/ DLD "implemented %operator()" @ "class %ChildPainter"
			@ %Helper.ShellHelper ^ "macros %(PDefHOp, ImplExpr)",
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YGDIBase $=
				(
					/ DLD "implemented inline functions %(UpdateClipArea, \
						UpdateClipSize, Diminish, GetAreaOf)"
						^ "macros %(PDefH, ImplExpr)",
					/ DLD "implemented %yconstfn functions %operator(==, !=) \
						for %Size" ^ "macros %(PDefHOp, ImplRet)",
					/ $lib @ "class template %GBinaryGroup" $=
					(
						/ "specified conversion explicitly for scalar \
							conversion" @ "constructor template for 2 scalar \
								types",
							// To eliminate Clang++ warning: \
								[-Wsign-conversion].
						+ "explicitly defaulted copy %operator= to avoid ISO \
							C++11 deprecation"
							// To eliminate Clang++ warning [-Wdeprecated].
					),
					/ @ "class %Size" $=
					(
						/ $dev $design "simplified copy constructor"
							^ "%DefDeCopyCtor" ~ "non-trivial user-defined \
							copy constructor",
						+ "explicitly defaulted copy %operator= to avoid ISO \
							C++11 deprecation"
							// To eliminate Clang++ warning [-Wdeprecated].
					),
					+ "2 function templates %get for (class template \
						%GBinaryGroup, classes %(Size, Rect))"
				),
				/ %YCoreUtilities $=
				(
					+ "function templates %(HalfDifference; \
						HalfDifferenceIfGreater)",
					/ DLD "guard macro %YSL_INC_Core_ycutil_h_"
						=> "%YSL_INC_Core_YCoreUtilities_h_"
				),
			),
			+ %ImageProcessing @ %Service $=
			(
				+ "function %Zoom";
				+ "class %ZoomedImageCache"
			);
			/ @ "function %FetchGUIState" @ %UI.YGUI $=
			(
				^ $design "statically initialization of object"
					~ "statically initialized pointer with new-expression";
				* "missing destruction at end of program" $since b287,
				+ 'ynothrow'
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		/ @ "namespace %ystdex" @ %Functional $=
		(
			// See $2014-11 @ %Documentation::Workflow::Annual2014.
			+ "class template %lref";
			+ "class template specialization %wrapped_traits for %lref",
			+ "function templates %(ref, cref)",
			/ "metafunction %is_equal"
				^ "%wrapped_traits to support %ystdex::lref"
		),
		^ 'lref' ~ 'std::reference_wrapper' @ "function parameters"
			@ "namespace %ystdex" $effective @ %(Any, Functional) $dep_from
			("%reference_wrapper" @ %Functional),
			// See $2014-11 @ %Documentation::Workflow::Annual2014.
		* "all 2 redundant ';' in class definitions" @ %Container $since b408,
			// To eliminate Clang++ warning: extra ';' after member function \
				definition [-Wextra-semi].
		/ $dev "avoided lambda parameter declaration name shadowing variable"
			@ "function template %hash_combine" @ %YFunctional $since b531,
			// To eliminate Clang++ warning: declaration shadows a local \
				variable [-Wshadow].
		* $doc "wrong name for '\tparam'" @ "comment"
			@ "function template %transform_n" $since b517
			// To eliminate Clang++ warning [-Wdocumentation].
	),
	(
	// See $2014-11 @ %Documentation::Workflow::Annual2014.
	/ $dev "simplified reference wrapper with namespace %YSLib used"
		^ 'lref' ~ 'std::reference_wrapper' @ "data members"
		$effective @ %YFramework.(Helper.(HostRenderer, HostWindow, \
		InputManager, ShellHelper), YSLib.(UI.(Hover, Border, Loader, Menu), \
		Adaptor.(Font, Image), Core.YEvent), 'Helper_(Android)'.(AndroidHost, \
		AndroidScreen)), YReader.(BookmarkUI, ShlExplorer);
	* $comp $build "strict ISO C++11 code compatibility" $since b380
		$= (/ "wrongly used incomplete type %Environment as argument of \
			%std::reference_wrapper" @ %YFramework.Helper.(HostWindow,
			InputManager))
	),
	/ DLD "precisely adapted reference wrapper operations without \
		%std::reference_wrapper concerned" ^ "%ystdex::(ref, cref)"
		~ "%std::(ref, cref)" $effective "%std::ref" @ %YFramework.YSLib.(
		Core.ValueNode, Adaptor.Font, UI.(Menu, YGUI, YPanel, YUIContainer)),
	/ "updated toolchain version for NDK r10c %make-clang-android.sh" @ %Tools
		$=
	(
		/ '--toolchain=arm-linux-androideabi-4.8'
			-> '--toolchain=arm-linux-androideabi-4.9',
		/ '--llvm-version=3.4' -> '--llvm-version=3.5'
	),
	/ $build "makefile" @ "platform %Android" @ %YReader $=
	(
		/ 'ANDROID_SDKVER := 21.0.0' -> 'ANDROID_SDKVER := 21.1.1',
		- DLD "redundant '-shared'" @ "%LDFLAGS"
	),
	/ $build @ "all 3 makefiles" @ "platform %Android" $=
	(
		/ '$(PREFIX)ar' -> '$(PREFIX)gcc-ar' @ "%AR",
		* "-flto=jobserver" @ "%CFLAGS even on %debug configuration" $since b497
	),
	* $build "-flto=jobserver" @ "%CFLAGS even on %debug configuration"
		@ "all 4 (ARM7, ARM9) makefiles" @ "platform %DS" $since b353
	/ $dev $build "removed use of 'typename' when unnecessary" $effecitive
		@ ("macro %DefBitmaskOperations" @ %YFramework.YBaseMacro)
		// To eliminate some [-Wc++98-compat] by Clang++ even if allowed by \
			C++11, see [CWG382].
),

b553
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %Debug $=
			(
				* $dev $build "missing including <ystdex/string.hpp>"
					@ "header file" $since b499,
					// Thus 'ystdex::sfmt' would be not necessarily declared.
				+ "function templates %(Nonnull; Deref)"
					@ "namespace %platform",
				+ 'ynothrow' @ "function %platform_ex::LogAssert)"
					@ "platform %Android"
			),
			+ "macro %YF_Use_JNI if undefined"
				@ "platforms %(MinGW32, MinGW64, Android)" @ %Platform,
				// Currently, only "posix" thread model G++ is supported.
			+ %POSIXThread
				$= (+ "class %TLSKey" @ 'YF_Use_JNI')
			/ @ %JNI $=
			(
				+ "namespace %platform_ex::JNI";
				/ @ "namespace %JNI" $=
				(
					+ "class %JNIException; macro %YF_Raise_JNIExceptionOnNull",
					(
					/ "function %FetchJNIEnvRef" -> "class %JNIBase" $=
					(
						+ "functions %(GetEnvRef, GetVMRef)",
						(
						/ "allowing select JNI version in constructor";
						* $comp "fixed JNI 1.6" $since b552,
						),
						+ "function templates %Nonnull; Deref" $dep_from
							"%YF_Raise_JNIExceptionOnNull",
						+ "function %ThrowOnException",
						(
						+ "function %EnsureDetachJNIAtThreadExit"
							$= (+ "explicitly specified platforms without TLS \
								or POSIX thread is not supported explicitly by \
								throwing %ystdex::unsupported exception");
						* $comp "missing detaching on thread exit for \
							platforms with this capability" $since b552
						)
					),
					+ @ "class %JNI" $dep_from "base class %JNIBase"
						$= (+ "28 alias-declarations for JNI types")
				)
			),
			/ $dev %Platform $=
			(
				+ $doc "Doxygen group %PlatformAPIs",
				/ "macro %YCL_API_FILESYSTEM_POSIX"
					-> "%YCL_API_POSIXFileSystem with token '1'",
				/ "macro %YCL_API_USE_UNISTD" -> "%YCL_API_Have_unistd_h of \
					token '1'",
				/ "macro %YCL_API_USE_SYS_DIR" -> "%YCL_API_Have_dirent_h of \
					token '1'",
				+ ('#	define YCL_API_Have_dirent_h 1',
					'#	define YCL_API_Have_unistd_h 1') @ "platform %Android"
			),
			/ %FileSystem $=
			(
				+ "class %platform::file_desc";
				+ "struct %file_desc_deleter";
				/ DLD "simplified implementation"
			),
			/ %Host $=
			(
				+ "support" @ '!YCL_Win32 && YCL_API_Has_unistd_h'
					@ "%HandleDeleter"
					$= (/ "class %HandleDeleter"
						-> 'using HandleDeleter = platform::file_desc_deleter'
						$dep_from ("%file_desc_deleter" @ %FileSystem));
				+ "support" @ 'YCL_API_Has_unistd_h' @ $dep_from
					"function %MakePipe"
			)
		),
		/ %YSLib $=
		(
			+ ('using platform::Nonnull;', 'using platform::Deref;')
				@ %Adaptor.YAdaptor,
				// Though it makes more difficult to locate wrong code by \
					line, debugger is not effected because the control in \
					terminate hanlder can be broke.
			/ %Core $=
			(
				/ @ "constructor template %GEventPointerWrapper" @ %YEvent $=
				(
					* "missing overloaded selection excluding for cv-qualified \
						copy/move candidate parameter" $since b242,
					* "wrong assertion of moved after state of argument" $since
						b242
				),
				/ DLD "implemented inline function %Activate" @ %YApplication
					^ "macros %(PDefH, ImplRet)"
			)
		),
		/ $lib "simplified direct assertion to indirect assertion"
			^ "%Nonnull, Deref" $dep_from %YCLib.Debug $effective @ %(YCLib.(
			Debug, FileSystem, Input), YCLib_(MinGW32).(COM, MinGW32, Win32GUI),
			YCLib_(Android).Android),
		+ "assertions for nonnull string arguments" @ "functions %(MBCSToMBCS, \
			WCSToMBCS, MBCSToWCS)" @ %'YCLib_(MinGW32)'.MinGW32
		/ DLD "implemented inline functions" ("%ResetDesktop"
			@ %Helper.ShellHelper, "%(2 PutPixel, PlotPixel, DrawPoint, \
			DrawHLineSeg, DrawVLineSeg, DrawLineSeg, DrawRect)"
			@ %YSLib.Service.YDraw) ^ "macros %(PDefH, ImplExpr)",
		/ DLD "implemented inline functions %(IsNowShell, NowShellTo, \
			SetShellTo, GenerateRandomColor, CreateSharedScreenImage)"
			@ %Helper.ShellHelper ^ "macros %(PDefH, ImplRet)",
		+ "assertion for swapped pointer" @ "argument" 
			"member function %ScreenBuffer::swap" @ %'YCLib_(Android)'.Android,
		/ "function %MakePipe" @ "namespace %Windows" @ 'YCLib_(MinGW32)'
			>> ("namespace %platform_ex" @ %Host),
		/ @ "class %NativeHost" @ %Helper_(Android).AndroidHost $=
		(
			+ DLD "cross thread communication state";
			+ $design "cross thread log",
			+ "function %RunOnUIThread"
			* $revert(b551) "program not exited after posting quit message \
				until press back button"
		)
	),
	/ %YBase $=
	(
		/ "required non-zero %_GLIBCXX_HAVE_TLS when G++ used"
			@ "macro %YB_HAS_THREAD_LOCAL" @ %YDefinition,
		/ %YStandardEx $=
		(
			+ 'ynothrow' @ "functions %(yassert, ytrace)" @ %CAssert,
			* "missing overloaded selection excluding for cv-qualified \
				copy/move candidate parameter" @ "classes %(unimplemented, \
				unsupported)" @ %Utilities $since b475
		)
	),
	/ $lib "simplified direct assertion to indirect assertion"
		^ "%Nonnull, Deref" $dep_from YFramework.YSLib.Adaptor.YAdaptor
		$effective @ %(YFramework.(Helper.(ShellHelper, GUIApplication,
		HostRenderer, HostWindow, InputManager), YSLib.(Adaptor.(Image, Font),
		Core.(YApplication, YCoreUtilities, YEvent, YObject, YDevice, YGDIBase),
		Service.(YDraw, TextManager, YBlit), UI.(Animation, ComboList, Scroll,
		TabControl, YWidget, ListControl)), Helper_(DS).(DSScreen, DSMain,
		Shell_DS), Helper_(Android).AndroidHost), YReader.DSReader);
	- $lib "some unnecessary duplicate assertions" $effective @ %YFramework.(
		YCLib.FileSystem, CHRLib.CharacterProcessing),
),

b552
(
	/ %YBase.YStandardEx $=
	(
		+ "function templates (2 %pvoid, %pvoid_ref)" @ %YBase.YStandardEx.Cast,
		/ @ "class %thread_pool" @ %Concurrency $=
		(
			/ @ "destructor" $=
			(
				+ "assertion for no %std::system_error thrown for lock mutex",
				/ "ignored %std::system_error thrown for joining each thread",
				+ "assertion for no excepton thrown";
				+ 'ynothrow'
			)
			+ 'ynothrow' @ "function %size_unlocked"
		),
		+ "overloadings for character type and string type"
			@ "function templates %(ltrim, rtrim; trim)" @ %String
			// To allow null characters to be trimmed.
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Adaptor.YNew $=
			(
				* "strict ISO C/C++ compatibility" @  $since b173
					$= (/ "cast to 'void*' for argument for '%p' of \
						'std::fprintf' call" ^ "%ystdex::pvoid" $dep_from
						%YBase.YStandardEx.Cast),
						// The type 'const void*' is also not allowed.
				* $comp "undefined behavior caused by duplicate locking a \
					non-recursive lock" @ "function %GetDebugMemoryList" $since
					b496
			),
			/ %UI $=
			(
				/ @ "function %AMUnitList::AdjustViewLengthForHeight" $=
				(
					/ "set length to 0 when height is 0",
					* "wrong result" $since b529 @ %Viewer $orig
						("function %MTextList::AdjustViewLengthForHeight"
						@ %ListControl $since b527) $orig
						(@ %TextList $since b523) $orig
						("function %TextList::AdjustViewLength" $since b262)
						// Triggered if the top offset is not 0 and the bottom \
							item is also partially shown by a small offset. \
							The old implementation always assumed that it \
							would be only 1 greater than the minimal (when the \
							height is dividable by the item height) value, but \
							actually it should be 2 (1 top partial item and 1 \
							bottom partial item).
				),
				* $comp "missing rendering partial bottom item and being not \
					selectable for control when the widget height not \
					dividable by item height" @ "text list" @ %YReader $since
					b404
					// This was not detected before b404 because there was no \
						text list widget with height not dividable by item \
						height.
			),
			/ %Service.TextManager $=
			(
				/ DLD "assertion string"
					@ "function %operator== for %TextFileBuffer::iterator",
				/ @ "class %TextFileBuffer" $=
				(
					/ "protected member %Map" $=
					(
						/ "initialized" ^ "empty braced-init-list"
							~ "ctor-initializer",
						=> "mBuffer"
					),
					/ DLD "simplified implementation of conversions",
					+ "log warning for failed character conversions"
				)
			)
		),
		/ %CHRLib $=
		(
			/ %MapingEx $=
			(
				(
				+ "object %CHRLib::cp113_lkp";
				/ "implemented GBK to UCS-2LE conversion" ^ "%cp113_lkp"
					~ "%cp113"
					// This allows client code providing other implementation \
						to bypass character map if not capable.
				),
				+ "UTF-32 supports" @ "function template %FetchMapperPtr"
					$dep_from "UTF-32 mapping"
			),
			+ 'using ystdex::octet;' @ %CHRDefinition,
			/ %StaticMapping $dep_from %CHRDefinition $=
			(
				(
				+ "yconstfn functions %(IsSurrogateHead, IsValidSurrogateHead, \
					IsValidSurrogateTail)";
				* "missing surrogate support" @ "function template %Map"
					@ "class template specializations \
					%GUCS2Mapper(<CharSet::UTF_16BE>, <CharSet::UTF_16LE>)"
					$orig (@ %CharacterMapping $since b245)
				),
				/ DLD "static member function \
					%GUCS2Mapper<CharSet::UTF_8>::IsInvalid" ^ 'octet'
					~ "%byte as parameter",
				+ "class template specializations %GUCS2Mapper(
					<CharSet::UTF_32BE>, <CharSet::UTF_32LE>)" $dep_to
					"UTF-32 mapping"
			)
		),
		/ %'YCLib_(MinGW32)'.MinGW32 $=
		(
			+ "2 member functions %RegistryKey::GetRawValue",
			+ "2 functions %FetchRegistryString",
			+ "functions %(FetchNLSItemFromRegistry; \
				FetchCPFileNameFromRegistry)",
			+ "function %(FetchSystemPath, FetchDBCSOffset)"
		),
		/ %Helper $=
		(
			/ %Initialization $=
			(
				+ "support NLS CP936 as fallback when %cp113.bin loading failed"
					@ "platform %Win32" @ '!CHRLIB_NODYNAMIC_MAPPING',
				/ $design "exception string for failed loading %cp113.bin"
			),
			* "wrong description for %CharSet::UTF_32LE" @ "%Text::Encodings"
				@ %ShellHelper $since b307 $orig
				(%YReader.ShlReader $since b290),
			- $revert(b175) "function %ShowFatalError" @ %DSMain $dep_from %Main
		),
		/ %YCLib $=
		(
			/ "class %HDirectory" @ %FileSyatem $=
			(
				* "missing initialization of member %p_dirent"
					@ "constructor with path parameter" $since b411,
				/ DLD "initialized member %utf8_name" ^ "empty braced-init-list"
			),
			/ "call %YConsoleInit for message with level less than \
				%Descriptions::Alert" @ "platform %DS"
				@ "static member function %Logger::DefaultSendLog" @ %Debug,
				// The program is not expected to continue after fatal error \
					occurred.
			/ %Platform $=
			(
				+ $dev $doc "Doxygen group %PlatformOptionalFeatures",
				+ "macro %YF_Use_JNI if undefined" @ "platform %Android"
			),
			+ %JNI
				$= (+ "function %FetchJNIEnvRef" @ 'YF_Use_JNI')
		)
	),
	/ DLD "simplified arguments for '%p' of '*printf' function calls"
		^ "%ystdex::pvoid" $dep_from %YBase.YStandardEx.Cast $effective
		@ %YFramework.(YSLib.Service.File, 'Helper_(Android)'.AndroidHost),
	/ %YReader $=
	(
		* $comp "abnormal exit on multithreading environment"
			@ "%debug configurations" $since b551 $dep_from
			%YFramework.YSLib.Adaptor.YNew,
			// MinGW implementation would crash on exit by closing console \
				window, because the underlying locking operation would throw \
				an exception of %std::system_error with %invalid_operation \
				condition.
		* "assertion failed at line 99 of 'textmgr.cpp' when forced UTF-32 \
			encodings for text file" $since b292 $dep_from
			%YFramework.CHRLib.MappingEx,
		/ $dev %Main $=
		(
			/ "logging for exception function %::main" ^ "%YTraceDe"
				~ "custom log class";
			- DLD "custom log class"
		)
	)
),

b551
(
	/ %YBase.YStandardEx $=
	(
		/ %PseudoMutex $=
		(
			* $dev $build "ill-formed code" $since b550 $=
			(
				* "missing including <chrono>",
				* "order of alias-declaration"
					@ "class templates %(lock_guard, unique_lock)",
				* "constructing %std::system_error" $=
				(
					* "missing qualified 'std::' before 'errc'",
					* "missing category argument"
				),
				* "constructors" @ "class templates %(lock_guard, unique_lock) \
					with 1 mutex parameter"
			),
			/ DLD "simplified implementation" @ "function %lock"
				@ "class template %unique_lock",
			+ "namespace %threading" %PseudoMutex $=
				(+ "class template %unlock_deleter; alias template \
					%locked_ptr"),
			/ @ "class template %unique_lock" $=
			(
				* "%system_error of dead lock conditiona wrongly thrown when \
					lock owns the mutex" $since b550,
				^ DLD "%ystdex::noncopyable" ~ "explicitly defaulted as \
					deleted (constructor, %operator=)"
			),
			/ "assumed locks with empty operations and always owning mutex"
				@ "defined %NDEBUG",
			/ DLD "simplified classes %(mutex, timed_mutex, recursive_mutex,
				recursive_timed_mutex), class template %lock_guard"
				^ "%ystdex::(noncopyable, nonmovable)"
				~ "explicitly defaulted as deleted (constructor, %operator=)"
		),
		/ %Concurrency $=
		(
			(
			/ "class template %unlock_deleter" -> "alias template",
			* "missing mutex parameter" @ "alias template %unlock_deleter"
			) ^ $dep_from ("%threading::unlock_deleter" @ %PseudoMutex),
			/ DLD "simplified class %thread_pool" ^ "%ystdex::noncopyable"
				~ "explicitly defaulted as deleted (constructor, %operator=)"
		),
		/ %Cast $=
		(
			+ "function templates %polymorphic_downcast for \
				%std::(unique_ptr, shared_ptr)",
			/ "static assertions" -> "explicitly returned with SFINAE check \
				for overloaded templates with reference parameter",
			+ 'ynothrow' @ "all function templates %polymorphic_downcast"
		),
		+ "using-declarations %std::(is_default_constructible, \
			is_copy_constructible, is_move_constructible, is_assignable, \
			is_copy_assignable, is_move_assignable, is_destructible, \
			is_nothrow_constructible, is_nothrow_default_constructible, \
			is_nothrow_copy_constructible, is_nothrow_move_constructible, \
			is_nothrow_assignable, is_nothrow_copy_assignable, \
			is_nothrow_move_assignable, is_nothrow_destructible)"
			@ "namespace %ystdex" @ %TypeOperation,
			// Now only 'is_trivially_copyable' and 8 'is_trivially_*' which \
				libstdc++-4.8 has not implemented yet are commented out.
		* "wrong 'yconstfn'" @ "all 2 defaulted %operator="
			@ "class template %bound_deleter" @ %Memory $since b550,
			// The 'const' typed member functions cannot be defaulted.
		/ %Utilities $=
		(
			* "missing explictly defaulted move (constructor, %operator=)"
				@ "class %noncopyable" $since b230,
			/ @ "class %nonmoveable" $=
			(
				* "wrongly defaulted as deleted copy (constructor, %operator=)"
					$since b373,
				* "missing explictly deleted move (constructor, %operator=)"
					$since b373
			)
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ %Mutex $dep_from %YBase.YStandardEx.PseudoMutex $=
			(
				+ "namespace %platform::Concurrency"
					// No %(timed_mutex, recursive_timed_mutex) as workaround \
						of platform with libstdc++ configured without \
						%_GTHREAD_USE_MUTEX_TIMEDLOCK defined, e.g. Android r9d.
					$=(+ "mutex and using aliases %(mutex, recursive_mutex, \
						 lock_guard, unique_lock, lock, try_lock) from \
						 %ystdex::single_thread or %std depending \
						 on %YF_Multithread value is zero or nonzero"),
				+ "namespace %Threading" @ "namespace %platform" $=
				(
					+ "using-declarations %(unlock_deleter, locked_ptr) from \
						%ystdex or %ystdex::threading depending on \
						%YF_Multithread value is zero or nonzero"
				)
			);
			/ $dev "simplified locking" $effective @ %(Debug, Input) ^ $dep_from
				("namespace %platform::Concurrency" @ %Mutex)
		),
		/ %YSLib $=
		(
			/ %Adaptor $=
			(
				+ 'using namespace platform::Concurrency;' @ "namespace %YSLib"
					@ %YAdaptor,
				+ "using-declarations %(unlock_deleter, locked_ptr) from \
					%ystdex or %ystdex::threading depending on %YF_Multithread \
					value is zero or nonzero" @ "namespace %YSLib"
					@ %YReference
					// Like %YCLib::Mutex but without the %unique_ptr \
						necessarily in %std;
			),
			(
			/ $dev "simplified locking" ^ "mutex names" ~ "names with 'std::'"
				$effective @ %('YCLib_(Android)'.Android,
				'Helper_(Android)'.AndroidHost, 'Helper_(DS)'.DSScreen,
				Helper.(Environment, HostWindow, ScreenBuffer, GUIApplication),
				YSLib.(Core.YApplication, Adaptor.YNew),
				'YCLib_(MinGW32)'.Win32GUI) ^ $dep_from %YSLib.Adaptor.YAdaptor,
			/ DLD "simplified locking" ^ "%lock_guard" ~ "%unique_lock"
				$effective @ %YFramework.Helper.(GUIApplication, Environment);
				// If lock in GUIApplication is not modified, the linker on \
					platform %DS would crash: 'assertion fail \
					../../../binutils-2.24/bfd/elf32-arm.c:12387'.
					See https://sourceware.org/bugzilla/show_bug.cgi?id=16698 .
			* $comp DLD "invalid conditional inclusion"
				@ %'Helper_(DS)'.DSScreen $since b458
			),
			* $dev "wrong unnecessary file dependent on" @ %YNew $since b462
				$= (DLD / 'YFM_YSLib_Adaptor_YAdaptor'
					-> 'YFM_YSLib_Adaptor_YNew' @ '#include')
		),
		* "platform dependent files included"
			@ "platform neutral Code::Blocks project" $since b525,
		/ %Helper $=
		(
			- $design "redundant %joinable check" @ "destructor %WindowThread"
				@ %HHostRenderer,
				// Since the %std::system_error would be caught whether it \
					could be join. And it should be joinable, because there is \
					no detaching operations reachable via public interface.
			+ "function %LockInstance" @ %GUIApplication,
			(
			* "crash" @ "calling again any of functions \
				%(FetchDefaultFontCache, FetchRoot) after uninitialized"
				@ %Initialization $since 425 $=
				(/ $design "implemented" ^ "%unique_ptr"
					~ "raw pointer and %(ynew, ydelete)");
			* $comp "crash for reentered program with root node (including \
				font cache) used" @ "platform %Android" $since b498
			)
		),
		/ @ "class %NativeHost"
			@ %'Helper_(Android)'.AndroidHost $=
		(
			/ @ "callback for %onNativeWindowDestroyed" $=
			(
				/ $design "%joinable check"
					-> "catch clause for %std::system_error",
					// Like in %WindowThread.
				* "possible crash when posting quit message" $since b498
					// This would cause %SIGSEGV on normal exit if native main \
						thread has finished.
					$= (/ "lock global instance to ensure it in lifetime \
						before posting message" $dep_from
						("%LockInstance" @ %Helper.GUIApplication)),
				- $design "redundant screen pointer check and sleep"
			),
			(
			$dep_from "%AndroidManifest.xml" @ "platform %Android",
			- "%ANativeActivity_finish call" @ "native main thread";
			* $comp "LogCat warning 'Duplicate finish request'" $since b
			),
			+ "atomic pause state handling"
				@ "callbacks for %(onPause, onRessume)",
			+ "function %IsPaused"
		)
	),
	+ 'android:noHistory="true"' @ "%Activity tag" @ "%AndroidManifest.xml"
		@ "platform %Android"
),

b550
(
	/ $doc "updated Doxygen file" $=
	(
		+ "ignored path 'sysroot'",
		(
		/ "value of %HTML_FILE_EXTENSION" -> '.xhtml' ~ "default '.html'";
			// For compatibility with IE 9+.
		/ "value of %DOT_IMAGE_FORMAT" -> 'svg' ~ "default 'png'";
			// Explicitly dropped compatibility with IE previous than IE 9.
		/ "value of %INTERACTIVE_SVG" -> 'YES' ~ "default 'NO'"
		),
		/ "value of %DOT_GRAPH_MAX_NODES" -> '1024' ~ "default '50'"
			// To eliminate warnings about too many nodes in 'YModules.h'.
	),
	* $dev $doc "missing escaping backslash for boundary of header names \
		between '<tt>' and '</tt>'" $effective @ %YBase.(LibDefect.String,
		YStandardEx.Utilities) $since b366,
	// To eliminate warning for mismatched HTML tags.
	/ %YBase $=
	(
		+ %Exception @ %LibDefect $=
		(
			+ "experimental fix for missing %std::(get_terminate,
				get_unexpected)" @ "libstdc++ earlier than 4.9";
				// It might still buggy with multithreading. The \
					implementation of %std::rethrow_exception is still known \
					to be broken now. However, %std::(current_exception, \
					throw_with_nested) should be OK.
			+ "workaround for missing %std::(exception_ptr; current_exception, \
				rethrow_exception, nested_exception) with GCC 5.0 trunk code"
				@ "libstdc++ when 'ATOMIC_INT_LOCK_FREE < 2'"
				// See comments in the header file.
		),
		/ %YStandardEx $=
		(
			/ $dev ^ $dep_from %LibDefect.Exception @ %Exception
				~ '<exception>',
			/ %Memory $=
			(
				+ "deleter template parameter support"
					@ "function template %get_raw for %std::unique_ptr",
				+ "class template %bound_deleter"
			),
			/ %Concurrency $=
			(
				+ "class template %unlock_deleter" $dep_from
					("class template %bound_deleter" %Memory);
				+ "alias template %locked_ptr"
			),
			+ %PseudoMutex
				$= (+ "namespace %ystdex::single_thread"
					$=(
					(
					+ "structs %(defer_lock_t, try_to_lock_t, adopt_lock_t)";
					+ "yconstexpr objects %(defer_lock, try_to_lock, \
						adopt_lock)"
					),
					+ "classes %(mutex, recursive_mutex, timed_mutex, \
						recursive_timed_mutex)",
					+ "class templates %(lock_guard, unique_lock)",
					+ "function templates %(lock, try_lock)"
				))
		)
	),
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ %Initialization $=
			(
				+ DLD "assertion for unreachable control" $since b549,
					// To eliminate [-Wreturn-type] for G++ 4.8.
				+ DLD "simplified exception handling across platforms" $=
				(
					^ %YBase.StandardEx.Exception @ "all platforms";
					^ "std::throw_with_nested" @ "all platforms"
				),
				/ DLD "simplified construction of %FatalError",
				/ $design "some error message"
			),
			/ %GUIApplication $=
			(
				/ @ "inline function %FetchEnvironment" $=
				(
					/ DLD "implemented" ^ "macros %(PDefH, ImplRet)",
					- 'ynothrow'
				),
				/ @ "function %FetchGlobalInstance; \
					function template %FetchGlobalInstance, function \
					definition %FetchAppInstance" $=
				(
					/ "explicitly guaranteed thread safety",
					/ "allowed throw exception when application inexisted"
				)
			)
		),
		+ "log messages" @ "hosted main thread"
			@ %'Helper_(Android)'.AndroidHost,
		/ %YSLib.Core.YApplication $=
		(
			/ @ "function %FetchAppInstance" $dep_from
				("function definition %FetchAppInstance"
				@ %Helper.GUIApplication),
			/ @ "functions %PostMessage" $=
			(
				/ "explicitly guaranteed thread safety" $dep_from
					"function %FetchAppInstance",
				* "wrong 'ynothrow'" @ $since b297 $orig
					(@ "functions %SendMessage" $since b272),
				/ DLD "implemented inline functions"
					^ "macros %(PDefH, ImplRet)"
			)
		),
		/ "macro %YF_Multithread" %YCLib.Platform $=
		(
			/ "defined if '__STDCPP_THREADS__' at first",
			/ "unconditionally defined as '0' if not defined previously"
		)
	),
	/ @ "platform %Android" @ %Main $=
	(
		/ "output using logger" ~ "standard I/O",
		* "blocked on memory debug output with %Warning level"
			@ "defined %YSL_USE_MEMORY_DEBUG" $since b498
		// This mostly occurs on the %debug configuration. The main function \
			should not wait for input when switching an Android GUI program, \
			otherwise there would be an ANR.
	)
),

b549
(
	/ %Tools $=
	(
		* "missing 'msys/make'" @ "necessary tools update command line"
			@ "%msys2-pacman-update.sh" $since b548,
		/ %Scripts $=
		(
			/ "%common.sh" -> "%SHBuild-common.sh"
				$= (+ "functions %(SHBuild_Install_HardLink, \
					SHBuild_Install_HardLink_Exe)"),
			/ "%common-options.sh" => "%SHBuild-common-options.sh",
			/ "%common-toolchain.sh" => "%SHBuild-common-toolchain.sh",
			/ @ "%SHBuild-appconf.sh" -> "%SHBuild-BuildApp.sh" $=
			(
				(
				+ "variable %SHBuild_Bin";
				/ "scripts location" ^ "%SHBuild_Bin" ~ "%SHBuild_ToolDir";
				- "variable %(SHBuild_ToolDir, SHBuild_BaseDir)"
				),
				(
				+ "variable %SHBuild_AppBaseDir",
				+ "exported variables %(SHBuild_YSLib_Flags, LIBS)";
				+ "function %SHBuild_BuildApp"
				)
			);
			/ @ "%install-sysroot.sh" $=
			(
				+ "tried hard link for installing files from build directory \
					at first",
					// For files from non-build directory, copy is preferred.
				+ "installing scripts to 'sysroot/usr/bin'"
			)
		)
	),
	+ "hosted build script %SHBuild-YSTest.sh" @ %YReader,
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				// They were intended to be %MoveConstructible and \
					%MoveAssignable.
				* "missing declaration of defaulted move %operator="
					@ ("class %DirectorySession" $since b411,
					"class %HDirectory" $since b543),
				/ DLD "simplified directory iteration" @ "platform %Win32"
					^ $dep_from ("classes %DirectoryFindData"
					@ %YCLib_(MinGW32).MinGW32),
				+ "2 functions %uaccess" @ %YCLib.FileSystem
			),
			/ DLD "simplified memory mapping implementation" @ "platform %Win32"
				@ %MemoryMapping
		),
		/ %YCLib_(MinGW32).MinGW32 $=
		(
			+ "macro %YF_Raise_Win32Exception_On_Failure",
			/ "class %RegisterKey" -> "%RegistryKey" $=
			(
				// It should be just like %platform::DirectorySession.
				* "missing copy/move" $since b435 $=
				(
					+ "move constructor";
					+ "defaulted move %operator="
				),
				/ @ "constructor" $=
				(
					+ "parameters '::DWORD = 0, ::REGSAM = KEY_READ' at end of \
						parameter list",
					* "wrong error handling when open registry key" $since b435
				),
				+ "functions %(GetSubKeyCount, GetSubKeyNames, GetValueCount, \
					GetValueNames, Flush)"
			),
			+ "classes %DirectoryFindData"
		),
		/ %YSLib $=
		(
			/ %Adaptor.YAdaptor $=
			(
				+ 'using platform::uaccess' $dep_from ("%uaccess"
					@ %YCLib.FileSystem),
				+ 'using platform::uopen'
			),
			/ @ "class %FatalError" @ %Core.YException $=
			(
				/ "type of parameters 'const char*'" -> 'const std::string&'
					@ "constructor",
				/ "copied and stored string on construction",
				/ "return type" @ "function %GetContent" -> 'const std::string&'
					~ 'const char*'
			)
		),
		/ %Helper.Initialization $=
		(
			/ DLD "implemented initialization directory check"
				@ "platform %Android" ^ "%uaccess" ~ "%::access" $dep_from
				%Adaptor.YAdaptor,
			+ "message box notification after printing log" @ "platform %Win32"
				@ "function %HandleFatalError",
				// To prevent error message ignored in %release configurations.
			/ "character mapping initialization" $=
			(
				/ DLD "implemented" ^ "%unique_ptr" ~ "raw pointer",
				/ "exception message"
			),
			/ "handled exceptions" ^ "nested exceptions" @ "platform %Win32"
				// It is not supported well by libstdc++ without specific \
					atomic operations support. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58938 .
		)
	),
	/ %YBase.YStandardEx.BitSegment $=
	(
		/ @ "class template %bitseg_iterator" $=
		(
			/ $dev "1st template parameter type" -> 'size_t' ~ 'unsigned char'
				$dep_to "template parameter type",
			/ "2nd parameter" @ "constructor" -> 'size_t' ~ 'unsigned char',
			+ "static constexpr data member %lsb" @ "class template %Bit",
			* $doc "wrong comment about meaning of 2nd parameter" $since b414,
			* "wrong result returned" @ "member function %operator* when \
				%_bEndian is %false or %_vN is not %CHAR_BIT" $since b414
		),
		* $dep_from "template parameter type" $comp $re_ex(b428)
			"unavailable comparing operations" $since b414
			// No operator would be found because of the mismatched template \
				parameter.
	),
	/ $dev $doc $design "compressed meta code of '$dep_to', '$dep_from' \
		statements" @ %Documentation $effective
		%Documentation::ChangeLog::(PreAlpha2, PreAlpha3, PreAlpha4, PreAlpha5),
	+ "3 test cases for %ystdex::bitseg_iterator" @ %Test.YBase
),

b548
(
	/ %YFramework $=
	(
		+ $revert_ex(b547) "parameter %int with default argument %SW_SHOWNORMAL"
			@ "member function %WindowReference::Show"
			@ %'YCLib_(MinGW32)'.Win32GUI,
		/ %YSLib.UI $=
		(
			+ "2 function templates %WrapRenderer" @ %Widget,
			+ "function templates %(ActOnHover; SetRendererOnHover); functions \
				%(SetRendererOnHover; OnHover_SetRenderer)" @ %Hover,
			* DLB "ill-formed code due to different types of arguments"
				@ "functions (IncreaseHead, IncreaseSelected)"
				@ "class %SequenceViewer" @ %Viewer $since b525
				// It would fail to compile for Win64.
		),
		/ %Helper $=
		(
			/ @ "class %WindowThread" @ %HostRenderer $=
			(
				- "showing window call" @ "function %WindowLoop",
					// Now window should be shown by user on creating if \
						necessary.
				+ "function %ThreadLoop for %WindowReference parameter",
				+ "constructor for %platform_ex::WindowReference as 2nd \
					parameter" @ "class %RenderWindow"
			),
			/ @ "platform %Win32" @ %HostedUI $=
			(
				- $revert(b430) "function template %MakeHostRenderer",
					// This was useful when %HostRenderer is not public \
						interface. However now it is public.
				- $revert(b401) "all 2 function templates %WrapRenderer",
					// Ditto.
				/ @ "function %ShowTopLevel" $=
				(
					+ "parameter %int with default argument %SW_SHOWNORMAL \
						after 3rd parameter" $dep_to "showing command",
					+ "parameter %bool with default argument %true to \
						determine whether window location is set as widget \
						location",
					/ "reset widget location to origin before showing",
						// To keep invalidation and rendering available.
					/ "returned reference of wrapped renderer" ~ "%void"
				),
				* $comp "window shown without activated via call of \
					%(ShowTopLevel, ShowTopLevelDraggable)" $since b547
					$dep_from "showing command"
			)
			* "missing showing main DS window with activation" @ %DSWindow
				$since b547
		)
	),
	/ %YBase.YStandardEx $=
	(
		(
		+ "function template %underlying" @ %Utility;
		/ DLD "implemented function %to_string" @ %String $=
		(
			^ $dep_from "%ystdex::underlying" ~ "%underlying_type_t",
			^ "%enable_if_t at return type" ~ "parameter"
		)
		),
		/ "explicitly allowed multiple inclusion for assertion macros"
			@ %CAssert $=
			// Like <cassert>.
		(
			/ "made macro inclusion guard no effect on macro definitions",
			+ "'#undef' macros %(yconstraint, yassume, YAssert, YTrace, \
				YAssertNonnull) before definitions"
		)
	),
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			* "iterator access out of range when colon is not found" @ ".d file"
				$since b546,
			/ DLD "simplified directory search implementation"
		),
		/ %Scripts $=
		(
			* "symbolic linking targets for DLLs" @ "%install-sysroot.sh"
				$since b546
				$= (^ "target '/bin'" ~ "intermediate build directory"),
			/ @ "%common.sh" @ %Scripts $=
			(
				^ DLD 'hash' ~ 'command -v' @ "function %SHBuild_InstallDir",
				/ "hid 'hash' error output"
					@ "functions %(SHBuild_Install, SHBuild_InstallDir)"
			)
		)
		/ @ "%msys2-pacman-update.sh" $=
		(
			/ @ "necessary update command line" $=
			(
				+ '--needed',
				+ 'mingw32/mingw-w64-i686-binutils-git',
				- 'make'
			),
			+ "echo for update command line",
			+ 'pacman -S --needed mingw32/mingw-w64-i686-gdb \
				mingw32/mingw-w64-i686-nasm msys/rsync'
		)
	)
),

b547
(
	/ %YBase $=
	(
		/ %YStandardEx.Functional $=
		(
			/ @ "class template %call_projection" $=
			(
				/ DLD "class-key" @ "first template parameter"
					@ "declaration" -> 'class' ~ 'template',
					// Since there has existed specialization for class types \
						like instances of %std::function.
				/ @ "static function %call"
					@ "specialization for function types" $=
				(
					/ "explicitly marked last parameter with %yimpl",
					^ "%yforward for passed function arguments" ~ "%std::move",
					* "missing returning value" $since b447
						// It is wrong for non-void return value.
				),
				+ "specialization for std::tuple instances" $dep_to "apply_impl"
			),
			+ "function template %apply" $dep_from "apply_impl"
				// Implementated of %std::experimental::apply in WG21/N4023.
		),
		* "missing '&'" @ "first parameter" @ "function template %expect"
			@ %YTest.Test,
			// It caused failure for result value which cannot be \
				copy-initialized or redundant copy for others.
	),
	/ @ %Test.YBase $=
	(
		/ @ "group %YStandard.Functional" $=
		(
			+ "1 test case for %ystdex::apply" $dep_from
				("%ystdex::apply" @ %YBase.StandardEx.Functional),
			+ "1 test case for %ystdex::make_expanded",
		),
		+ "group %YStandardEx.Mixin"
			$= (+ "1 test case for mixin interface"),
		+ "group %YStandardEx.Container"
			$= (+ "4 test cases for %ystdex::range_size"),
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "function templates %(FetchEpoch; FetchElapsed)"
				@ %Service.YTimer,
			+ "using %platform::(usystem, GetFileModificationTimeOf,
				GetFileSizeOf)" @ %Adaptor.YAdaptor,
			/ %UI $=
			(
				/ DLD "implemented inline function %CheckChildName" @ %Loader
					^ "macros %(PDefH, ImplRet)",
				+ "class %PseudoRenderer" @ %Renderer
			)
		),
		/ %YCLib_(MinGW32) $=
		(
			* DLB "strict ISO C++ code compatibility" @ %MinGW32 $since b545
				// G++ accepted but Clang++ complained. See also \
					http://stackoverflow.com/questions/7411515/why-does-c-require-a-user-provided-default-constructor-to-default-construct-a .
				$= (* "missing user-provided default constructor for default \
					initialized const object"
					@ "static member function %Win32Exception::GetErrorCategory"
					$= (/ $design ^ "value initialization"
						~ "default initialization")),
			/ "specified showing window without activation"
				@ "function %WindowReference::Show" @ %Win32GUI
				$= (^ DLD "%SW_SHOWNOACTIVATE" ~ "%SW_SHOWNORMAL");
		),
		/ @ "class %Logger" @ %YCLib.Debug $=
		(
			* DLD $doc "wrong note" @ "comment" @ "private function %DoLogRaw"
				$since b510,
			/ @ "function %DoLogException" $=
			(
				/ $doc "explicitly specified sequential and continuation \
					logging guarantee" @ "comment",
				/ "merged exception handling and logging thrown when \
					processing input exception",
					// Simplified implementation.
				/ "removed ending period" @ "format string"
					// To avoid double period.
			)
		),
		/ %YBaseMacro $=
		(
			/ $dev $doc "all interface comments" ^ "Doxygen notation"
			+ "macros %(TryExpr, TryRet, CatchExpr, CatchIgnore, CatchRet, \
				CatchThrow)"
		),
		/ DLD "simplified exception handling" ^ ($dep_from "macros %(TryExpr, \
			TryRet, CatchExpr, CatchIgnore, CatchThrow)" @ %YBaseMacro)
	),
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			/ DLD "simplified time printing" ^ "%FetchElapsed" $dep_from
				%YFramework.Timers.YTimer,
			(
			^ "independent logger" ~ "common logger";
			+ "message group support";
			/ $comp $revert(b546) "shown log from"
				%YFramework.YSLib.Service.File,
			+ "group filtering options ('-xloggd', '-xlogge')"
			),
			/ DLD $revert(b545) "merged function %Wait" -> "%Build"
				@ "class %BuildContext",
			/ DLD "simplified exception handling" @ %Tools.SHBuild.Main
				^ ($dep_from "macros %(TryExpr, CatchExpr, CatchIgnore, \
				CatchRet)" @ %YBaseMacro),
			(
			/ DLD "simplified options and environment variables handling";
			/ DLD "simplified implementation" @ "function %PrintUsage",
			* $comp "wrong description for %LIBS" $since b546,
			- $dev "option macros"
			)
		),
		/ %Scripts $=
		(
			+ "extra arguments passed to %SHBuild command"
				@ "%SHBuild-self-host.sh",
			/ "%common-options.sh" $=
			(
				* "wrong '-Wnon-virtual-dtor' and \
					'-Wzero-as-null-pointer-constant'" @ "default value"
					@ "%CFLAGS_WARNING" $since b540,
					// They are for C++/ObjC++ but not for C.
				(
				+ "implementation-specific options support variables \
					%(CXXFLAGS_IMPL_WARNING, CXXFLAGS_IMPL_OPT)";
				+ "Clang++ support"
				)
			),
			/ @ "install-header.sh" $=
			(
				(
				- "redundant 'pushd' call";
				* $comp "strict POSIX shell compatibility" $since b515
				),
				* "behavior when the script is not at current working directory"
					$since b515
			)
		)
	),
	/ DLD "simplified exception handling" @ %ShlReader ^ ($dep_from
		"macros %(TryExpr, TryRet, CatchExpr, CatchIgnore)", @ %YBaseMacro)
),

b546
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ ('using std::begin;', 'using std::end;') @ %Adaptor.YContainer,
			/ "level" @ "all traces" -> "%Debug" ~ "%Informative"
				@ %Service.File,
			/ %Core.YCoreUtilities $=
			(
				* DLB "missing update Visual C++ project for renaming" $since
					b539,
				/ "function %WriteEnvironmentVariable"
					=> "%FetchEnvironmentVariable"
			),
			/ %Service $=
			(
				/ @ %Service.YFileSystem $=
				(
					* "failed calling for absolute paths"
						@ "function %EnsureDirectory" $since b476,
						// Missing check for directory existence so permission \
							denied error occurred when try to create the root \
							directory.
					* "wrongly ignored 2nd parameter"
						@ "function %NormalizeDirecoryPathTail" $since b540
				),
				* "failed calling for absolute paths"
					@ "function %EnsureDirectory" @ %YFileSystem $since b476,
					// Missing check for directory existence so permission \
						denied error occurred when try to create the root \
						directory.
				/ DLD "implemented 2 inline functions %operator<<" @ %File
					^ "macros %(PDefHOp, ImplRet)"
			)
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ "function %HandleBackslashPrefix",
				/ @ "class %LexicalAnalyzer" $=
				(
					(
					+ "alias-declaration %PrefixHandler";
					+ "parameter %PrefixHandler with default argument \
						%HandleBackslashPrefix"
						@ "functions %(ParseByte, ParseQuoted)"
					),
					/ DLD "extracted implementation of unescaping and prefix \
						handling" @ "functions %(ParseByte, ParseQuoted)",
					+ "explicitly defaulted (copy, move) (constructor, \
						%operator=)"
				),
				+ ('using YSLib::begin;', 'using YSLib::end;')
					$dep_from %YSLib.Adaptor.YContainer
			),
			/ @ "class %Session" @ %SContext $=
			(
				+ "alias-declaration %CharParser",
				+ "functions %(DefaultParseByte, DefaultParseQuoted)";
				/ "constructor for %string" -> "2 constructor template with \
					%CharParser parameter and %DefaultParseByte default \
					argument",
				+ "%CharParser parameter and %DefaultParseByte default argument"
					@ "constructor for %TextFile",
				+ "explicitly defaulted (copy, move) (constructor, %operator=)",
				+ "function %GetBuffer"
			)
		),
		/ DLB "removed definition %(cp17, cp2026)" @ %CHRLib.MapEx
			^ "conditional inclusion",
			// To eliminate [-Wunused-variables] when [-fwhole-program] is \
				turned on.
		- "redundant locking" @ "function %FetchCommonLogger" @ %YCib.Debug
			// Static object is guaranteed to be thread-safety on \
				initialization by ISO C++11.
	),
	/ %Tools $=
	(
		- "all .cmd files",
			// No actual commands other than calling corresponding .sh files \
				here.
		+ %Scripts $=
		(
			+ "%install-sysroot.sh",
			+ "%SHBuild-appconf.sh"
		)
	),
	/ %SHBuild $=
	(
		/ %Main $=
		(
			+ "global uptime" @ "message output",
			+ "dependencies tracking for '.d' files generated by the compiler",
			+ "%(ARFLAGS, LD, LDFLAGS) support",
			/ DLD "simplified environment variable printing",
			(
			/ "directly generated final target without intermediate '.a' \
				targets";
				// See $2014-10 @ %Documentation::Workflow::Annual2014.
			+ "mode support to select %AR or %LD to be used for final target"
			),
			/ "added 8 to message output level" @ "timestamp check",
				// The output level of command line is still %Debug.
			* DLB "redundant ';' after declaration with %ImplRet" $since b522,
				// To eliminate [-Wpedantic].
			/ DLD @ "function %PrintUsage" $=
			(
				+ $build "declaration",
					// To eliminate [-Wmissing-declarations].
				/ "simplified parameter type"
			)
		),
		/ "build scripts" $=
		(
			/ @ "%SHBuild-YSLib.sh" $=
			(
				/ "exported %AR",
				+ "'export LANG=C' before commands",
					// See $2014-10 @ %Documentation::Workflow::Annual2014.
				+ "dynamic library support" $dep_from %Main,
				+ DLD "variable %SHBuild to simplified call",
				* "missing splitting shell arguments on calling %SHBuild" $since
					b539
					// This made the indirectly passed options would be the \
						single value within space characters (if any).
			),
			* "shebang specifying '/usr/bin/sh' without POSIX shell \
				compatibility" $since b474
				$= (/ "all '/usr/bin/sh'" -> '/usr/bin/bash'),
			+ "functions %(SHBuild_2u, SHBuild_2w, SHBuild_Install, \
				SHBuild_InstallDir, SHBuild_Install_Exe, SHBuild_Install_Link, \
				SHBuild_EchoVar_N" @ "%common.sh",
			/ DLD "simplified variable echo" ^ "function %SHBuild_EchoVar_N"
				$dep_from "%common.sh"
			/ "%SHBuild-options.sh" => "%common-options.sh",
			/ @ "%common-bootstrap.sh" $=
			(
				* "missing check for empty base directory" $since b538
					$= (/ "set %SHBuild_BaseDir default value as '.'"),
				(
				$dep_from "%common-options.sh";
				/ "%CXXFLAGS setting" -> "including %common-options.sh.";
				/ "attached %CXXFLAGS '-fno-lto'"
					// See comments in the file.
				);
				=> "%SHBuild-bootstrap.sh"
			),
			/ DLD "echo commands" $=
			(
				// For simplicity.
				- "all quotes if no substitution and escape sequence needed",
				^ "single quote" ~ "double quote"
					@ "arguments with escape sequence and without substitution"
			),
			/ DLD ^ "POSIX compliant variable substitution and bash specific \
				'.'" ~ "double brackets",
				// For simplicity and avoiding unspecified behavior.
			/ "%build.sh" $=
			(
				+ "build message";
				=> "%SHBuild-build.sh"
			),
			/ "%self-host.sh" => "%SHBuild-self-host.sh";
			/ "all .sh scripts" >> $dep_from %Scripts
		)
	),
	/ %YBase.YStandardEx $=
	(
		/ %Container $=
		(
			+ "2 function templates %range_size",
			+ "2 function templates %concat";
			+ "2 function templates %vector_concat"
		),
		+ "2 function templates %exists_substr" @ %String
	),
	/ $dev $doc $term "normalized" $=
	(
		/ "all '标准库头文件'" -> '标准库头' $effective
			@ %Documentation.(LanguageConvention, YBase, YFramework, YSLib),
				// Headers are not guaranteed to be files.
		/ "all '导致未定义行为'" -> '引起未定义行为' $effective
			@ %Documentation.(YBase, YFramework), YBase.YDefinition,
			YFramework.(Helper.Enviornment, YSLib.(Service.File, UI.TreeView))
	),
	+ $dev $repo "pattern glob 'sysroot/*'" @ "file %.hgignore"
),

b545
(
	/ %YFramework $=
	(
		+ "class template %GRecursiveCallContext" @ %YSLib.Core.YFunc,
		* "wrong 'ynothrow'" @ "all exception class" $effective
			@ %(YSLib.Core.Exception $revert(b319) $since b319, YCLib.Host
			$since b492, YCLib_(MinGW32).MinGW32 $since b427),
			// Since the underlying string construction could throw (though \
				rarely), no exception guarantee is not hold.
		/ @ "class %Exception" @ %YCLib.Host $=
		(
			/ "base class %YSLib::LoggedEvent" -> "%std::system_error",
			/ "default level argument" ^ "%YSLib::Emergent" ~ '{}',
			+ "%std::error_code parameter" @ "constructor",
			+ "constructor with %int and 'const std::error_category&' \
				parameters",
			+ "function %GetLevel"
		),
		/ @ "class %Win32Exception" @ %YCLib_(MinGW32).MinGW32 $=
		(
			+ "static member function %GetErrorCategory",
			/ "default level argument" ^ "%YSLib::Emergent" ~ '{}',
		),
		/ %NPL.Lexical $=
		(
			* "wrong function name" $since b508 $=
			(
				/ $revert_ex(b508) "%Unescape" => "%Escape",
				/ "%UnescapeLiteral" => "%EscapeLiteral",
			),
			+ 'using YSLib::vector;',
			+ "class %UnescapeContext",
			+ "function %NPLUnescape",
			/ @ "class %LexicalAnalyzer" $=
			(
				/ DLD "implemented intermediate list state of unescaping \
					position" ^ "%vector" ~ "%list",
					// Some performance improved.
				/ "return value" @ "function %GetQuotes"
					-> 'const vector<size_t>&' ~ 'const list<size_t>&'
					$dep_from 'using YSLib::vector;',
				(
				/ DLD "implemented unescaping" ^ ($dep_from "%UnescapeContext");
				- "limitation of max character number of escaped sequence; \
					data member %MaxEscapeLength"
				),
				(
				+ "alias-declaration %Unescaper",
				$dep_from "%NPLUnescape";
				+ "unescaper parameter with default argument %NPLUnescape"
					@ "function %ParseByte",
				+ "function %ParseQuoted"
				),
				* "missing concatenating with backslash at end of lines" $since
					b335,
					// Unimplemented previously, but wrongly documented as \
						feature.
				/ DLD "implemented function %Decompose" ^ "range-based \
					%ystdex::split_l" ~ "iterators-based %ystdex::split_l"
			)
		),
		/ "thrown %std::runtime_error" ~ "%Exception" @ %YCLib_(Android).Android
			// Because the constructors are changed, now they can not be \
				directly constructed without error code.
	)
	/ %Tools.SHBuild.Main $=
	(
		/ DLD "implemented by recursive context" $dep_from
			%YFramework.YSLib.YFunc,
		+ "timestamp check for static linking",
		+ "environment variable settings" @ "usage"
	),
	/ DLD $re_ex(b470) "reduced redundant 'return std::move' usage" $effective
		@ %(YBase.YStandardEx.Algorithm,
		YFramework.YSLib.(Service.YFileSystem, UI.UIContainer))
	/ %YBase.YStandardEx $=
	(
		+ "function template %(pop_back_val, pop_front_val)" @ %Container,
		+ 2 "function templates %split_if_iter" @ %String
	)
),

b544
(
	/ %YFramework $=
	(
		/ %YCLib.FileSystem $=
		(
			/ @ "class %HDirectory" @ %YCLib.FileSystem $=
			(
				(
				* "wrong invariant" $since b543;
					// The initial state is not correct.
				* $comp "assertion failed" @ "startup" @ "platform %DS" $since
					b543
					// Strangely, though the source code was same, it was not \
						reproduced on platform %Android.
				),
				/ DLD "simplified some assertions for invariant"
					@ "member functions",
				* "wrong file type filtered" @ "function %GetNodeCategory"
					@ "!platform %Win32" $since b543
					// The 'DT_*' is not bitmask.
			),
			/ @ "function template %ufexists" $=
			(
				/ DLD $revert(b413) "implemented" !^ "macros %(PDefH, ImplRet)",
				* "non overloaded non-class argument selected" $orig (@ %YCommon
					$since b305)
			),
			+ "(3 functions; 1 function template) %GetFileModificationTimeOf"
		),
		+ "function %ConvertTime" @ %YCLib_(MinGW32).MinGW32,
		/ DLD "implementation" ^ "%ystdex::ntctslen"
			~ "%std::char_traits::length" $effective
			@ %(CHRLib::CharacterProcessing, YSLib.Adaptor.Image)
		/ %CHRLib.CharacterProcessing $=
		(
			/ "function template %ucsdup"
				-> "%MakeUCS2LE with non-constructible constraint",
			+ "function template %MakeUCS2LE for direct forwarding with \
				constructible constraint",
			(
			/ "function templates %MakeUCS2LEString" => "%MakeUCS2LE"
			+ "default argument 'std::basic_string<char16_t>'" @ "template \
				parameter %_tDst" @ "all function templates %MakeUCS2LE"
			),
			/ DLD "simplified UCS-2 directly construction implementation",
				// Not to be copy any longer.
			- "all function %ucsdup",
			+ "5 function templates %MakeUTF8",
			- "all functions and function template %strdup"
		)
	),
	/ $dev @ "Visual C++ projects" $=
	(
		/ DLD "united all Visual C++ include directories with NMake include \
			search paths (if any)",
		/ "merged All platforms based on platform %MinGW32 for IntelliSense"
			@ "project %YFramework"
		* "wrong NMake include search paths" @ "project %YBase"
			@ "platform %Android" $since b492,
		/ @ "platform %MinGW32" $=
		(
			/ "updated new version of toolchain",
			* "empty paths" @ "configuration %debug" $since b518
		)
	),
	/ %YBase.YStandardEx.CString $=
	(
		+ "unary type trait %is_char_specialized_in_std",
		/ $lib $design "specified implementation"
			@ "function template %ntctslen to call %std::char_traits::length \
			if the specilization are mendated by ISO C++"
			// This may be better for optimization.
	),
	/ %Tools.SHBuild.Tools $=
	(
		/ @ "class %BuildContext" $=
		(
			+ "timestamp check for direct dependency of object file"
				@ "function %Search",
				// Only one dependency is support, i.e. source file for .o file.
			+ $lib $design "ending dot for 'absolute path recognized' message"
				@ "function %Build"
		),
		- DLD "all 'u8' for string literal"
			// The source file is already guaranteed to be encoded as UTF-8.
	)
),

b543
(
	/ $dev "renewed outdated keystore for signing" @ "platform %Android",
	/ %YFramework $=
	(
		* DLB "wrong %CC exported" @ "Makefile" @ "platform %Android"
			$since b492
			// No C source files are currently compiled so no wrong behavior \
				has been detected.
			$= (/ "value '$(PREFIX)g'" -> '$(PREFIX)gcc'),
		/ %YCLib_(MinGW32) $=
		(
			/ %Win32GUI $=
			(
				+ "function %GetBounds" @ "class %WindowReference";
				+ 'using WindowReference::GetBounds;' @ "class %HostWindow"
			),
			/ "all assertions" ^ ("%(YAssert, YAssertNonnull)"
				@ %YCLib.Debug ~ "%yconstraint" $effective @ %COM,
			/ DLD "implemented inline functions %EnsureNonNull" @ %COM
				^ "macros %(PDefH, ImplExpr)"
		),
		/ DLD "simplified implementation" @ "constructor template %WindowThread"
			@ %HostRenderer !^ "%std::mem_fn" @ %Helper.HostRenderer,
		/ %YCLib $=
		(
			/ %YCLib.FileSystem $=
			(
				/ $dev "all conditional inclusive with %YCL_Win32 as first \
					branch",
					// Regardless of %YCL_API_FILESYSTEM_POSIX defined or not.
				/ DLD "simplified directory data implementation"
					@ "platform %Win32",
				/ @ "class %HDirectory" $=
				(
					+ "move constructor to ensure moved object has a clear \
						state and avoid redundant copy on platform %Win32";
					+ "invariant guarantee for availability of member",
						// Otherwise null pointer could be wrongly used.
					+ "invariant check assertions" @ "member functions",
					/ "supported detecting file category other than regular \
						and directory" @ "function %GetNodeCategory"
				),
				(
				(
				$dep_from %YBase.YStandardEx.Path;
				/ "enum class %NodeCategory" $=
				(
					!^ "%ystdex::path_category for enumerators",
					^ "std::uint_least32_t as underlying type" ~ "%PathCategory",
					(
					/ "made %Special synonymous of 'Directory | Missing'",
					- "%(HardLink, Reparse)",
						// %HardLink is irrelevant to single file system node. \
							%Reparse is too specific to the implementation \
							(i.e. NTFS).
					(
					+ "enumerator %MountPont";
					/ "made %Junction synonymous of %MountPoint",
						// In NTFS, junctions are implemented by reparse \\
							points sharing same tag with mount point. See \
							http://www.codeproject.com/Articles/21202/Reparse-Points-in-Vista .
					/ "made %Link cover %(SymbolinkLink, MountPoint)"
					);
					/ "made enumerators %(Directory, Link, Missing) orthogonal \
						with other categories of values",
					)
				),
				/ %YSLib.Adpator.YAdaptor;
				- "enum class %PathCategory"
				),
				+ "bitmask operations for %NodeCategory"
			),
			/ "all assertions" ^ ("%(YAssert, YAssertNonnull)"
				@ %Debug) ~ "%(yconstraint, yassume)"
				$effective @ %(FileSystem, Keys)
		),
		/ %YSLib $=
		(
			- "function %ClassifyPath" @ %Service.FileSystem;
			- 'using platform::PathCategory;' @ %Adaptor.YAdaptor
		);

	),
	/ %YBase $=
	(
		/ %LibDefect.String $=
		(
			/ "allowed %std::(stof, stod) defined"
				@ '!(defined(__clang__) && defined(__BIONIC__))',
				// OK for G++ 4.8.2 on Android. Though %std::stold is still \
					missing.
			/ @ "namespace %std" @ "defined %__BIONIC__" $=
			(
				+ 'using ::strtoll;',
				+ 'using ::strtoull;';
				/ "allowed %(stoll, stoull) defined"
			)
		),
		/ %YBase.YStandardEx $=
		(
			- $dev $revert(b542) "workaround for platform %Android"
				@ "implementation" @ "%ston" @ %String @ "defined %__BIONIC__"
				$dep_from "%std::(stoll, stoull)" @ %LibDefect.String,
			/ %Concurrency $=
			(
				+ "entering and exiting callbacks as parameter"
					@ "constructors %(thread_pool; task_pool)",
				/ @ "class %task_pool" @  $=
				(
					+ "function templates %(poll, poll_for, poll_until)";
					/ DLD "simplified function templates %(wait, wait_for,
						until)" ~ "%(poll, poll_for, poll_until)"
				),
				+ "function %to_string for %std::thread::id"
			),
			+ "enum class %path_category; function template %classify_path"
				@ %Path
		),
	),
	/ $doc %Documentation $=
	(
		+ %LanguageConvention
			$= (+ "interoperability rules");
		/ %CommonRules $=
		(
			/ "language specific rules" >> %LanguageConvention,
			/ "updated references"
		)
	),
	/ %Tools $=
	(
		* "spelling error" @ "comment" @ "%make-clang-android.sh" $since b497,
		* "possible interleave output across threads" @ %Tools.SHBuild.Main
			$since b519
			$= (* "missing '-mthreads'" @ "default value" @ "%CXXFLAGS"
				@ "%common-bootstrap.sh" $since b538 $orig (@ "%CXXFLAGS"
				$since b515 $orig (@ "G++ command" $since b474)) @ "%build.sh"))
	)
),

b542
(
	/ %Tools.SHBuild.Main $=
	(
		/ "only specified archive linked"
			$= (/ "passed path among recursive calls of %BuildContext::Search")
		/ "exception message output" $=
		(
			^ "raw number" ~ "hexadecimal number";
			^ $re_ex(b541) "%to_string" ~ "%ystdex::sfmt"
		),
		/ @ "class %Build Context" $=
		(
			/ @ "function %Search" $=
			(
				/ DLD "ignored directory early in enumerating children nodes \
					at first time",
				/ $dev "parameters" ^ "%Path" ~ "%string"
			),
			/ @ "member function %Build" $dep_from
				%YFramework.YSLib.Service.FileSystem $=
			(
				/ DLD "simplified implementation" ^ "%MakeNormalizedAbsolute"
				- $comp "check for empty %SRCPATH input"
			)
		),
		/ DLD "simplified parameter type" @ "function %PrintUsage",
		/ DLD "simplified %main" ^ $dep_from ("%MakeWConsole"
			@ %YFramework.YCLib_(MinGW32).Consoles),
		/ DLD "implemented option parsing" ^ $dep_from
			("%ystdex::(ston, filter_prefix)" @ %YBase.YStandardEx.String)
		/ "message output" $=
		(
			+ "%Debug level with %DarkGreen",
			/ "%Informative level color" -> "%Magenta" ~ "%DarkGreen",
			/ "%Notice level color" -> "%Cyan" ~ "%Magenta",
			+ "output for to be currently built",
				// To allow inspect the file built with detail command output \
					disabled.
			/ "level of command output" -> "%Debug" ~ "%Informative",
			/ "level of counting for objects and ignoring files"
				-> "%Informative" ~ "%Notice"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service.FileSystem $=
			(
				+ 'yconstexpr size_t MaxPathLength(yimpl(1 << 10))';
				/ $dev "default arguments"
					@ "function %FetchCurrentWorkingDirectory"
					^ "%MaxPathLength" ~ '1 << 10',
				+ "function %MakeNormalizedAbsolute"
			),
			/ %UI $=
			(
				/ %YGUI $=
				(
					* "missing activation of timer" $orig (@ "member function \
						%InputTimer::RefreshClick" $since b416),
					/ @ "member function %GUIState::RefreshTap" $=
					(
						/ "swapped 2nd and 3rd parameter",
							// The duration are more likely default value to \
								be simple. This is also good on compatibility \
								after refactor once the duration setting is \
								stored.
						* "missing update of tap location on interruption from \
							timer" $since b541,
						* "returned wrong value when tap area check failed"
							$since b541,
							// Now it specified to be 0, not 1.
						* "missing update of tap counter when tap area check \
							failed" $since b541,
						* "wrong relative tap area origin" $since b541
							// It should be (TapArea.Width / 2, TapArea.Height \
								/ 2) rather than (0, 0).
					)
				),
				/ @ "class %TextBox" @ %TextBox $=
				(
					+ "function %SelectAll",
					/ @ "handling event %TouchDown" $=
					(
						/ "performed no-op if move not detected" @ "%TouchHeld";
							// This is only an optimization previously, \
								however necessary for multiple taps now, \
								otherwise the operation of %TouchDown would be \
								overriden by %TouchHeld unconditionally, \
								eventually.
						+ "selecting all on triple tap",
						+ "selecting one character on double tap"
					)
				)
			)
		),
		+ "function %MakeWConsole" @ %YCLib_(MinGW32).Consoles
	),
	/ @ %YBase $=
	(
		/ DLD "all macros for implementation" @ %YSandardEx
			-> "prefixed with %YB_Impl" $effective @ %(Operators, AnyIterator,
			Rational),
		/ DLD "all macros for implementation" @ %LibDefect
			-> "prefixed with %YB_LibDefect" $effective @ %String,
		+ "function templates %ston, filter_prefix" @ %YStandardEx.String;
	),
	/ "double click to auto scroll" ^ "%TouchDown handler" ~ "%Click handler"
		%YReader.ShlReader
		// This is still slow in debug configurations. So sometimes it would \
			be no effect.
),

b541
(
	/ $dev "differentiate general callable types and function object types"
		@ "template type parameters" $=
	(
		(
		/ "animation updater" ^ "%_fUpdater" ~ "%_fCallable"
			@ %YFramework.YSLib.UI.Animation;
		/ "other types not suited for pointer to members" -> "%_func"
			~ "%_fCallable" $effective @ %(YBase.(YStandardEx.(Algorithm, Cache,
			Container, Exception, Functional, Utility), YTest.(Test, Timing)),
			YFramework.(Helper.(HostedUI, HostRenderer, HostWindow),
			YSLib.(Adaptor.Image, Core.(Task, YApplication, YEvent, YFunc),
			Service.FileSystem, UI.(Animation, YWidgetEvent))))
		),
		/ "member type %callable_type" @ "class template %thunk"
			@ %YBase.YStandardEx.Functional => "%caller_type"
	),
	* DLD "missing EOL normalization" @ %YTest.Timing $since b538,
	/ %YFramework $=
	(
		/ DLD "implemented inline functions" ("%GetHostRendererPtrOf"
			@ %Helper.HostedUI, ("%is_undereferenceable" @ %Adaptor.Image,
			"%FetchShellHandle" @ %Core.YApplication) @ %YSLib)
			^ "macros %(PDefH, ImplRet)",
		/ %YSLib.UI $=
		(
			/ @ "class %TreeList" @ %TreeView $=
			(
				/ "functions %(CollapseNode, ExpandNode) returned previous \
					node state" ~ "boolean value",
				+ "support for handling left and right key to collapse or \
					expand the node and then switch the selected position if \
					possible",
				+ "support for double tap to collapse or expand item like \
					single indent box tap" $dep_from %YGUI
			),
			/ %YGUI $=
			(
				/ "function %RefreshClick" => "RefreshTap"
					@ "class %InputTimer",
				/ @ "class %GUIState" $=
				(
					* "missing reset tap count" @ "function %Reset" $since b540,
					(
					+ 'Size TapArea{4, 4}',
					(
					+ "tap location state";
					+ "function %TapLocation"
					);
					+ "tap maximum value, location memorization and timeout \
						duration support" @ "function %RefreshTap"
					)
				)
			)
		),
		* "wrong 'ynothrow' exception specification" @ "constructor %HDirectory"
			@ %YCLib.FileSystem $since b411
			// The implementation would throw if failed, which violates the \
				exception specification.
	),
	(
	/ $dep_from %YFramework.YSLib.UI.YGUI;
	/ "restricted double tap area" @ %YReader.ShlReader
	),
	/ %Tools.SHBuild.Main $=
	(
		/ "ensuring output directory implementation" $=
		(
			/ "merged with exception of int \
				value as original top level and message string as original \
				recursive search on error",
			+ "message output"
		),
		/ @ "member function %BuildContext::Search" $=
		(
			- "purging files before compiling",
				// Now the output directory is not guaranteed to be clean for \
					only containing the files built.
			/ DLD "stored list of files to built",
				// To make the correct output after removed purging, the files \
					list for the linker is recorded. This may introduce a \
					command line out of host limit, to be fixed future.
			/ "split search for directories and files",
				// Now recursive search of subdirectories are always previous \
					than the files in the same parent directory.
			+ "message output for count of files to be built",
			/ "created out directory only if there exists file to be built",
			* "non-regular files treated as directories" $since b474,
			* $re_ex(b539) "missing quoting compiler output object paths"
				$since b474
				// If the path contained space, the command was then wrong.
		),
		/ DLD "all message output except for hexadecimal number" ^ "%to_string"
			~ "%ystdex::sfmt"
	)
),

b540
(
	/ %YFramework $=
	(
		/ %YCLib_(MinGW32) $=
		(
			+ "3 inline functions %(WCSToUTF8, UTF8ToWCS)" @ %MinGW32,
			/ @ "class %WConsole" @ %YCLib_(MinGW32).Consoles $=
			(
				* "missing limit 4-bit value for color components"
					@ "function %ComposeAttributes" $since b519,
				- "style component" @ "static functions %(ComposeAttributes, \
					DecomposeAttributes)",
					// The 2 color components are now 4-bit with dark/bright \
						style.
				- "functions %(UpdateStyle; SetStyle)",
				- "function %SetColor"
					// Use %Update with argument instead.
			)
		),
		/ DLD "simplified Unicode conversion" @ "platform %Win32"
			@ %YCLib.FileSystem ^ (("%platform_ex::UCS8ToWCS"
			~ "%CHRLib::ucsdup"), ("%platform_ex::WCSToUTF8"
			~ "%CHRLib::strdup")) $dep_from %YCLib_(MinGW32).MinGW32,
		/ %YSLib $=
		(
			+ "function template %NormalizeDirecoryPathTail"
				@ %Service.FileSystem,
			/ %UI $=
			(
				/ @ "class %GUIState" @ %YGUI $=
				(
					+ 'InputTimer TapTimer{};',
					+ "function %RefreshTap";
					+ "implemented tap state refreshing";
					+ "function %GetTapCount"
				),
				/ @ "class %TreeList" @ %TreeView $=
				(
					/ DLD "split node collapse and expanding implementation";
					+ "functions %(CollapseNode, ExpandNode)"
				)
			)
		)
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			+ "build directory switching support",
			(
			/ DLD "simplified namespace scope using-directives";
			* DLB $comp "ambiguity when %string in %YSLib and %std is not the \
				same" $since b538
				// Default is the same, configured in \
					%YFramework::YSLib::Adaptor::YContainer.
			),
			* "unhandled exception if console object failed to construct" $since
				b520,
				// For example, when the output is redirected.
			/ "message output" $=
			(
				+ "fill '0'" @ "hexadecimal error code output",
				/ DLD "implemented" ^ "C standard I/O" ~ "I/O streams",
					// This make some implementation simpler and leads to \
						significantly smaller binary file.
				/ "executed command echo" ^ "%PrintInfo"
					~ "directly standard I/O",
				/ "reset color attributes for error code output",
				+ "more colored output for different levels"
					// %Magenta for %Notice and %DarkGreen for %Informative.
			),
			/ DLD "simplified command call" ^ "%platform::usystem"
				~ "%::_wsystem",
			+ '-MMD' @ "compiler command"
				// To generate .d file for dependencies.
		),
		/ DLB "build scripts" $=
		(
			(
			+ "%SHBuild-options.sh" $=
			(
				+ "split %(CFLAGS_WARNING, CXXFLAGS_STD, CXXFLAGS_WARNING, \
					CXXFLAGS_COMMON, CXXFLAGS_OPT_DBG) from %COMMON_CFLAGS"
					@ "%SHBuild-YSLib.sh";
				/ "allowing overriding for all variables",
				+ '-Wsign-promo' @ "%CFLAGS_WARNING",
				+ '-Wctor-dtor-privacy' @ "%CFLAGS_WARNING"
					// To make it same as DS Makefile. '-Wnoexcept' is not \
						added now because the lambda to pointer conversion \
						would issue.
			);
			/ DLD "implemented %SHBuild-YSLib.sh" ^ "%SHBuild-options.sh" $=
			(
				- "%COMMON_CFLAGS";
				/ "explicitly unset %(CXXFLAGS_OPT_DBG, CXXFLAGS_COMMON, \
					CXXFLAGS, LDFLAGS) and then specified %LDFLAGS"
					// Use default values in %SHBuild-options.sh for unset \
						variables.
			)
			),
			/ DLD "simplified %SHBuild_BaseDir implemented by one assignment",
			(
			/ "only set value of %SHBuild_BuildDir when not set"
				@ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)";
			/ "set default value of %SHBuild_ToolDir as '${SHBuild_Build_Dir}'"
				@ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)";
				// The default tool is used within build directory.
			/ "differentiate tools directory variable as %SHBuild_ToolDir"
				~ "%SHBuild_BaseDir" @ "%(common-bootstrap.sh; build.sh, \
				self-host.sh, SHBuild-YSLib.sh)",
			/ "%SHBuild calls" ^ '${SHBuild_ToolDir}/SHBuild' ~ './shbuild'
				@ "%SHBuild-YSLib.sh",
			),
			/ DLD $revert_ex(b539) "simplified toolchain setting"
				@ "%SHBuild-YSLib.sh" $=
			(
				+ 'export AR=gcc-ar',
				+ 'source ${SHBuild_ToolDir}/common-toolchain.sh';
				- "'AR=gcc-ar' before commands"
			),
			- "all unused %SHBuild_Me",
			/ @ "%common-bootstrap.sh" $=
			(
				+ 'export AR="gcc-ar"',
				+ 'export' @ "default value setting" @ "%(CXXFLAGS, LDFLAGS)",
				+ "%AR echo"
			)
		)
	),
	+ DLB '-Wsign-promo -Wctor-dtor-privacy' @ "options"
		@ "Code::Blocks projects" @ "platform %MinGW32",
	/ $dev $lib @ "class %ShlTextReader" @ %YReader.ShlReader
		$dep_from %YFramework.YSLib.UI.YGUI $=
	(
		/ "double click implementation" ^ 'FetchGUIState().TapTimer'
			~ "%ShlTextReader::tmrInput",
		- "protected data members %ShlTextReader::(tmrInput, nClick)"
	)
),

b539
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			(
			/ DLD ^ "timer initialization" ^"%GetTicks" ~ "%StartTicks"
				%Service.Timer;
			- 'using platform::StartTicks;' @ %Adaptor.YAdaptor
			),
			/ %Core.YCoreUtilities $=
			(
				/ DLB "file %ycutil.h" => "%YCoreUtilities.h",
				+ DLB "file %YCoreUtilities.cpp";
				+ "function %WriteEnvironmentVariable"
			)
		),
		/ %YCLib $=
		(
			/ %Timer $=
			(
				- "function %StartTicks",
					// For platform %DS, this is implicit called when \
						necessary. For other platforms this is not needed.
				/ $lib "implemented timer" @ "platform %Win32" $=
				(
					^ "%std::chrono::steady_clock" ~ "multimedia and QPC APIs";
					* $comp "missing call to '::timeEndPeriod' on exit" $orig
						(@ %YCommon $since b298)
				),
				/ $lib "implemented timer" @ "platform %Android"
					^ "%std::chrono::steady_clock" ~ "::clock_gettime"
			),
			+ "function %platform::usystem" @ %YCommon
		),
		- "linked library %winmm" @ "Code::Blocks projects"
			@ "platform %MinGW32" $dep_from "platform %Win32"
			@ %YFramework.YCLib.Timer
	),
	- $doc "issues" @ %Documentation::Meta;
		// Issues are now fully tracked on \
			https://bitbucket.org/FrankHB/yslib/issues .
	/ %YBase.YStandardEx $=
	(
		/ %Concurrency $=
		(
			* "wrong return type"
				@ "function templates %(pack_task, pack_shared_task)"
				$since b358;
			/ @ "class %thread_pool" $dep_from "%pack_shared_task" $=
			(
				/ DLD "implemented function template %wait_to_enqueue"
					 ^ "%pack_shared_task",
				+ "function templates %(wait, wait_until)" @ "class %task_pool"
			)
		),
		/ @ "function template %boxed_value" @ %Utilities $=
		(
			* "missing excluding of 'boxed_value&'"
				@ "constructor template with 1 function parameter"
				$since b477
				$= (/ "constructor template" -> "explicitly defaulted \
					(default, copy, move) constructors and 2 constructor \
					templates"),
			+ "explicitly default (copy, move) %operator="
		),
		/ %Exception $=
		(
			* $revert_ex "function template %raise_exception" @ %Exception
				$since b538,
			/ DLD 'typename' @ "parameter"
				@ "function template %get_nested_exception_ptr" -> 'class',
			+ "function template %handle_nested"
		),
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			/ @ "class %BuildContext" $=
			(
				(
				/ "parallel build" @ "function %Call" $=
				(
					/ "stopped launching new task once non-zero result is met",
					+ "parameter and default argument to allow force \
						serialized build"
				),
				+ "function %CheckResult";
				+ "function %CallWithException"
				),
				+ "function %GetLastResult",
				/ @ "function %Search" $=
				(
					* "broken archive output for parallel build" $since b520 $=
					(
						* "missing check for non-zero result to raising \
							exception after compiling and before linking" $since
							b520 $dep_from
							"functions %(GetLastResult, CheckResult)",
							// Missing objects which failed to compile as the \
								linked result.
						* "missing synchronization after linking with children"
							$since b520,
							// Probable missing to link some linker output of \
								children.
						(
						- $revert_ex(b538)
							"showing number unfinished waiting tasks";
							// The total number of unfinished tasks can not be \
								fetched in general if no counter elsewhere.
						* "missing waiting of unfinished tasks not in queue"
							$since b538
							// The reset operation of task pool should be \
								performed unconditionally.
						)
					),
					/ DLD "simplified exception handling" ^ "%CallWithException"
						~ "%Call" $dep_from "function %CallWithException",
					+ "logged for numbers of scanned .a and .o files"
				)
			),
			/ "all failure exit code" -> 'EXIT_FAILURE' ~ '3',
			/ @ "function %main" $=
			(
				- "handler with return value other than 'EXIT_FAILURE' or '0'",
					// Now the exit code of the program is 0 on success, \
						otherwise %EXIT_FAILURE.
				- "multilevel try blocks",
				/ "merged %IntException handling" -> "function %PrintException"
			),
			(
			+ "function template %raise_exception";
			(
			/ "explicitly stated command failure" @ "function %raise_exception";
			/ "alias-declaration %IntException" ^ "%std::runtime_error"
				~ "%std::exception";
			),
			/ DLD "some printed information before exception throwing"
				-> "exception messages"
			),
			* "missing set %Err as log argument" @ "function %PrintException"
				$since b538,
			/ @ "function %PrintException" $=
			(
				- "throw clause" @ "handlers";
				/ "nested exception handling" ^ "%ystdex::handle_nested"
					~ "%std::rethrow_if_nested" $dep_from
					"%ystdex::handle_nested" @ %YBase.YStandardEx.Exception
			),
			/ DLD "simplified command line calls",
			- "magic number to make offset of error code",
			(
			+ 'string AR = "ar"' @ "class %BuildContext";
			+ "print value of %(CC, CXX, AR) before build",
			+ "read environment setting for %(CC, CXX, AR) before build"
				$dep_from %YFramework.YSLib.Core.YCoreUtilities $dep_to
				"support overwriting command name"
			),
			* "missing quoting linked object paths" $since b474
				// If the path contained space, the command was then wrong.
		),
		/ DLB @ "%SHBuild-YSLib.sh" $=
		(
			- '-ffat-lto-objects' @ "%COMMON_CXXFLAGS",
			+ "'AR=gcc-ar' before command" $dep_from
				"support overwriting command name",
				// Otherwise further linking using the output would probable \
					fail due to lack of '-ffat-lto-objects'
			+ '-xid,Android' @ "%SHBOPT"
				// Make it same as the Code::Blocks project.
		),
		(
		+ "%common-toolchain.sh"
			$= (+ "setting of %LD");
		/ DLB "merged toolchain setting" @ "%common-bootstrap.sh"
			-> "%common-toolchain.sh",
		/ DLB "build" @ "%self-host.sh" ^ "%LD" ~ "%CXX"
		)
	),
	- DLB "all '-ffat-lto-objects'" @ "all release configurations"
		@ "platform %MinGW32" @ "Code::Blocks projects";
		// 'gcc-ar' with linker plugin support must be used instead of 'ar'. \
			And size of the output static library would be less.
),

b538
(
	+ "2 test cases for %ystdex::compose" @ %Test.YBase,
	/ %Tools.SHBuild $=
	(
		(
		+ $dev "%common.sh" $=
		(
			+ "functions %(SHBuild_Pushd, SHBuild_Popd) for silently \
				restoring directory",
			+ "function %SHBuild_EchoVar to output colored variable value",
		);
		+ "%common-bootstrap.sh" $=
		(
			+ "shell variable definitions for building",
			+ "colored variable value output",
			+ "allowed overriding %(CXX, CXXFLAGS, LDFLAGS)"
		)
		) $dep_to "common build scripts",
		/ @ "%(build.sh, self-host.sh, SHBuild-YSLib.sh)" $=
		(
			* $build "linking failure" $since b535,
			(
			/ "implemented" ^ "common build scripts" $dep_from
				"common build scripts";
			+ $comp "support for variable value output"
			)
		),
		/ %Main $=
		(
			/ DLD "simplified traverse implementation" ^ "%TraverseChildren"
				$dep_from "%TraverseChildren" @ %YFramework.YSLib.FileSystem,
			+ $dev "data members for setting compiler" @ "class %BuildContext",
			+ "printed message when ignored non source files for compiling",
			(
			$dep_from %YBase.YStandardEx.Concurrency;
			/ $dev "simplified implementation of job control"
				^ "%ystdex::task_pool",
			(
			* "missing parallel compiling synchronization with linking" $since
				b520;
				// Thus the 'ar' command might or might not be executed.
			+ "printed message for unfinished tasks"
			)
			),
			- $dev "static assertions for character types",
				// %YFramework.YCLib.FileSystem is already included.
			/ "simplified message printing" $=
			(
				/ @ "function %PrintInfo" $=
				(
					+ DLD "level parameter with default argument 'Notice'",
					^ "implemented" ^ "%FetchCommonLogger" ~ "%YTraceDe"
						// This trace is for users rather than developers, so \
							the source line information is not needed. The \
							source line is now to be not shown regardless of \
							the build configuration.
				),
				- DLD "function %PrintError",
					// Use %PrintInfo instead.
				* "duplicate call of %MBCSToMBCS to perform encoding \
					conversion from UTF-8 to current code page" $=
				(
					@ "function %PrintException" $since b519,
					@ "function %PrintInfo" $since b520
					// Since the logger has taken over the output and \
						converted the output in custom handler, there should \
						be no redundant conversion elsewhere.
				),
				/ DLD "warning message" ^ "logging" ~ "direct use of %cerr",
				/ "logging for warning message" $=
				(
					^ "%cerr" ~ "%cout",
					^ "colored %platform::Consoles::Yellow output"
				)
			),
			* "missing newline at end of some options" @ "function %PrintUsage"
				$since b520,
			/ @ "function %PrintException" $=
			(
				* "wrong %FileOperationFailure handling" $since b477,
					// Probably infinite recursive until stack overflow.
				- "transparent handling %std::bad_cast"
			)
		)
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %Concurrency $=
			(
				/ $dev "improved strict ISO C++ code compatibility"
					$= (+ "including <functional>, <memory> and <mutex>"),
					// For %std::make_shared and %std::bind used in \
						implementation in template. The program temporarily is \
						not ill-formed even if these headers are missing when \
						instantiated, for libstdc++'s <thread> and <future> \
						including <functional>, <thread> including <memory>, \
						<condition_variable> and <future> including <mutex>.
				(
				+ "alias template %packed_task_t";
				+ "function templates %(pack_task, pack_shared_task)"
				),
				(
				+ "function template %wait_to_enqueue, function %size_unlocked"
					@ "class %thread_pool";
				+ "class %task_pool"
				)
			),
			* $dev "wrong %yconstfn" @ "function templates %chain_apply"
				@ %Functional $since b537,
			* $dev $build "constructor templates" @ "class %mixin" @ %Mixin
				$since  b477 $=
				// G++ 4.9.1 did not detect these errors but Clang++ 3.5 \
					complained.
			(
				* "missing base class pack expansion" @ "ctor-initializer"
					@ "constructor template with 1 argument",
				* "%enable_if depended with no template parameters of 4 \
					constructors"
					$= (+ "'sizeof(tp)' before operand of 'sizeof...(_tBases)'")
			),
			- DLD "redundant second template argument" @ "%enable_if_t"
				$effective @ "%(String, Functional)",
				// Multiple overloading with %enable_if_t are not touched to \
					avoid ambiguity.
			/ "default template argument" @ "alias template
				%exclude_self_ctor_t" @ %TypeOperations -> 'void' ~ 'int',
				// To be as same as %enable_if_t.
			/ %Exception $=
			(
				* "%std::terminate called if there is exception uncaught"
					@ "function template %raise_exception" $since b522,
				+ "function templates %(iterate_exceptions, \
					get_nested_exception_ptr)"
			),
			/ @ "class template %used_list_cache" @ %Cache $orig (@
				"class template %GMRUCache" @ %YFramework.YSLib.Core.Cache) $=
			(
				* "argument ignored" @ "function %set_max_use" $since b521 $orig
					(@ "function %SetMaxUse" $since b461),
				* "missing erasing inserted of cache item when throwing"
					@ "function template %emplace" $since b461
			)
		),
		/ %Test.Timing $=
		(
			* DLD "missing 'std::' for 'clock()' call"
				@ "function templates %once_c, total_c" $since b319,
			+ "function templates %(average_elapsed, average_in_duration)"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "default argument '""' for string parameter"
				@ "constructor %LoggedEvent" @ %Core.YException,
			/ "constructor" @ ("class %UnsupportedImageFormat" @ %Adaptor.Image,
				"class %MessageException" @ %Core.YMessage, "class %BadEvent"
				@ %UI.YWidgetEvent)
				-> "inherited constructor %LoggedEvent::LoggedEvent",
				// See revision b471.
			/ %Service.FileSystem $=
			(
				+ "4 function templates %Traverse";
				+ "function template %TraverseChildren",
				/ @ "function %ListDirectory" $=
				(
					/ DLD "implemented" ^ "%Traverse" $dep_from "%Traverse",
					* "missing 'YF_API'" $orig $since b414 @ %YFileSystem
				),
				+ "2 functions %DeleteTree"
			)
		),
		/ %YCLib_(MinGW32).MinGW32GUI $=
		(
			+ "function %GetParent" @ "class %WindowReference";
			+ 'using WindowReference::GetParent;' @ "class %HostWindow"
		),
		/ "selection of string parameters for overloads" @ "function templates \
			%(strdup, ucsdup)" @ %CHRLib.CharacterProcessing $=
		(
			/ "limited selected parameter to be class instance"
				^ DLD 'ystdex::enable_string_class_t',
			^ "subscription" ~ "%c_str";
			* $comp "non overloaded non-class argument selected" $since b535
		),
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				+ $dev "static assertions for character types",
				(
				/ @ "class %FileOperationFailure" $=
				(
					/ "inherited %std::system_error" ~ "%std::runtime_error";
					/ "constructor"
						-> "inherited constructor %system_error::system_error";
					/ $comp "single empty message is not allowed and made the \
						class not meet %DefaultConstructible"
				);
				/ "distinguished error code thrown with exception \
					%FileOperationFailure"
				),
				/ @ "function %u16getcwd_n" $=
				(
					/ "set %errno to %EINVAL when buffer pointer is null or \
					size \
						is zero",
					/ @ "!platform %Win32" $=
					(
						/ "set %errno to %ERANGE when size is too small to \
							contain the converted string",
						/ "set %errno to %ENOMEM when allocation failed",
						* "memory leak" $orig (@ %YCommon $since b304)
					)
				)
			),
			/ "distinguished error code thrown with exception \
				%FileOperationFailure" @ "constructor %MappedFile"
				@ %MemoryMapping $dep_from "%FileOperationFailure" @ %FileSystem
		)
	)
),

b537
(
	/ %YReader $=
	(
		/ "key %X handling" @ "class %ShlExplorer" $=
		(
			(
			/ "responded by %KeyDown" ~ "KeyPress";
			* $comp "no response on key %X when focused in file list" $since
				b531
			),
			/ "explicitly request focus"
				// This would cause the menu to be hidden, distinctive with \
					than previous behavior.
		),
		/ DLD %(ShlExplorer, ShlReader) $dep_from "removal of menu ownership"
			$dep_to "removal of menu access from host" $=
		(
			/ "owned menu objects by data members of %unique_ptr instances";
			/ "menu access" ^ "data members" ~ "%MenuHost member functions"
		)
	),
	/ %YFramework.YSLib $=
	(
		/ @ "class template %GHandlerAdaptor" %Core.YEvent $=
		(
			+ "template specialization for parameter %_type with \
				%void";
			+ $design "simplified main template by inheritance %void \
				specialization",
			+ "explicitly defaulted (copy, move) (constructor, %operator=)"
		),
		/ %UI $=
		(
			/ %YMenu $=
			(
				+ 'yconstexpr' @ "object %DefaultMenuZOrder",
				/ @ "class %MenuHost" $=
				(
					(
					- "%operator+= with %ValueType parameter";
					- "alias-declaration %ValueType"
					),
					(
					- "ownership of menus";
					* $comp "menu object leak" @ "%operator+=" $since b214;
					) $dep_to "removal of menu ownership",
					(
					^ DLD "implemented" ^ "%MLinearUIContainer";
					- "protected data member %mMenus";
					- "using alias %(MenuMap; ItemType)"
					),
					(
					/ "type of data member %Roots"
						-> 'map<IWidget*, Menu*>' ~ 'map<IWidget*, Menu::ID>',
					(
					$dep_from "removal of menu access from host";
					- "function %operator[]",
					/ "parameter %Menu::ID" @ "functions %(operator-=, \
						IsShowing, Contains)" -> 'Menu&',
					- "functions %(Show, Hide) with %Menu::ID parameter"
					) $dep_to "removal %Menu::ID @ %MenuHost";
					),
					/ DLD "initialized %Roots" ^ "brace-initializer"
						~ "ctor-initializer",
					- 'virtual' @ "destructor",
					+ "assertions" @ "function %(Show, Hide) with 'Menu&' \
						parameter"
				),
				/ @ "class %Menu" $=
				(
					(
					- "member function %GetID",
					- "%ID parameter" @ "constructor",
					- DLD "menu identifier",
					- "using alias %ID" $dep_from
						"removal %Menu::ID @ %MenuHost"
					),
					/ "function %operator[]" -> "%at"
						// To conform the exception handling style of standard \
							library API.
				)
			),
			/ @ "classes %(MLinearUIContainer, MUIContainer)" %YUIContainer $=
			(
				/ "access control of all protected (constructors, \
					member functions)" -> 'public',
				* $lib $design "missing updating assertion strings"
					@ "member function %operator-=",
				+ "member function %clear"
			)
		),
	),
	/ %YBase.YStandardEx.Functional $=
	(
		+ 'const' @ "2 member functions %operator()"
			@ "2 specializations @ class template %xcrease_t",
		+ "2 function templates %chain_apply",
		(
		+ "class template %composed",
		+ "function template %compose"
		),
		+ "class template %(addressof_op, mem_get)"
	)
),

b536
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ %GUI $=
			(
				/ @ "class %GUIState" $=
				(
					* "spelling error" @ "data member" $since b511
						$= (/ "%ExteralTextInputFocusPtr"
							=> "%ExternalTextInputFocusPtr"),
					/ $lib $design @ "member functions %(ResponseCursorBase, \
						ResponseKeyBase)" $=
					(
						^ $dev "%std::ref" ~ "direct use of pointer for \
							iteration",
						- "assertion for null pointer after iteration for \
							%Tunnel routed event"
					)
				)
				/ DLD "implemented inline functions %IsFocusedByShell" @ %YGUI
					^ "macros %(PDefH, ImplRet)",
			),
			/ %YUIContainer $=
			(
				^ DLD "%std::ref" ~ "direct use of pointer for iteration"
					@ "all 2 functions %FetchTopLevel",
				/ @ "classes %(MLinearUIContainer, MUIContainer)" $=
				(
					/ 'using ItemType = IWidget*;'
						-> 'using ItemType = std::reference_wrapper<IWidget>;',
					- $lib $design "assertion for null pointer",
					/ DLD "implemented functions %Contains" ~ "%std::find",
					/ DLD "simplified indirection implementation"
				)
			)
		),
		/ DLD "implemented function %Contains" @ "class template %GEvent"
			@ %Core.YEvent ^ "%std::count" ~ "%std::find",
		/ @ "functions %(OnKey_Bound_TouchUp, \
			OnKey_Bound_TouchDown, OnKey_Bound_Click)" @ %YControl $=
		(
			/ DLD "reused common implementation",
			/ "allowed %std::function and %std::cast propogation out of \
				%Control::BoundControlPtr"
		)
	),
	/ %YBase.YStandardEx $=
	(
		+ "3 function %operator()" @ "struct %is_equal" @ %Functional,
		/ %Iterator $=
		(
			+ "function template %get" @ "namespace %iterator_transformation",
			+ 'yconstexpr struct get_tag{} get_get{};';
			+ "function template %operator| for %get_tag"
		)
	)
),

b535
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ $dev $doc "explicitly allowing ADL calls"
				@ "function templates %(Blend, Composite)" @ %Service.YPixel,
			/ %UI $=
			(
				* "wrongly reset view when handling %TouchDown"
					@ "class %TreeList" @ %TreeView $since b534
					$= (/ "implemented" ^ "%UpdateView" ~ "%ResetView"),
				/ %ListControl $=
				(
					* "missing committing invalidation of unit control"
						@ "function %UpdateView" @  $since b530;
						// Only effective when buffered renderer is set.
					* $comp "missing invalidating first line when %ResetView \
						called" @ "class %MTextList" @ %ListControl $since b530
						$dep_from %Viewer
						// Because the shared index is buffered, it would be \
							checked to perform iteration only when the new \
							value is not equal to old one. If it was 0 and not \
							reset, the text of line with index 0 would not be \
							updated.
				),
				* "missing reset shared index" @ "member function \
					%AMUnitList::ResetView" @ %Viewer $orig (@ %TextList)
					$since b527
			)
		),
		/ %CHRLib.CharacterProcessing $=
		(
			* "buffer overrun" @ "function %strdup" $since b475,
			/ @ "(functions, function templates) %(strdup, ucsdup)" $=
			(
				+ "functions with %size_t parameter";
				/ "functions without %size_t but %Encoding"
					-> "inline functions",
				/ @ "function templates" $=
				(
					+ "%Encoding parameter",
					/ "implemented" ^ "%length"
				)
			),
			- "function %ucsdup to copy UCS-2 string"
				// This is redundant, just use constructor of \
					%basic_string<ucs2_t> instead.
		)
	)
	/ $dev $doc "normalized Doxygen comments by explicitly filtered regular \
		expression '\\(defgroup|ingroup|name|def|fn|author|par|sa|since|version\
) .*[，、：；—“”‘’。]'" $=
		// %Documentation::Designation @6.1.3.
	(
		* "wrong directive '\since' used" ~ '\brief' @ "Doxygen comments"
			@ "member %BorderResizer::Margin" @ %YFramework.YSLib.UI.Border
			$since b444,
		/ "remove '。' at end of the directives" $effective
			@ %(YBase.YStandardEx.(Any, Functional, Iterator),
			YFramework.Helper_(Android, DS))
	),
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ "macros %(__has_builtin; YB_ABORT; YB_ASSUME)",
			+ DLD "prefix '_'" @ "macro parameters"
		),
		/ @ "macro definitions %(yconstraint, yassume)" @ % CAssert $=
		(
			/ "explicitly required exactly one macro parameter",
			/ "expanded" ^ "%YB_ASSUME" @ "!defined %NDEBUG" $dep_from
				"%YB_ASSUME"
			/ "macro definition %YAssert" @ "!defined %YB_Use_YAssert" $=
			(
				/ "expanded" ^ "%yassume";
				* $comp "wrong argument of %assert" $since b495
					// This is OK when the macro %assert of C standard library \
						is used because ISO C specified it is not used.
			)
		)
	)
),

b534
(
	/ %YFramework.YSLib.UI $=
	(
		/ %TreeView $=
		(
			/ @ "class %TreeList" $=
			(
				/ $lib "optimized non branch or expanded %CursorOver handling",
					// This reduces unnecessary highlight invalidation on \
						indent boxes.
				+ "default argument '= size_t(-1)'" @ "function %Bind",
				+ "function %BindView"
			),
			+ "class %TreeView"
		),
		+ "nonnull assertion" @ "functions %(GetController, GetRenderer, \
			GetView)" @ "class %Widget" @ %YWidget,
		/ @ "class %ListBox" @ %ComboList $=
		(
			/ "implemented content control data member"
				^ "%unique_ptr<TextList>" ~ "%TextList";
			+ "protected constructor with parameter %unique_ptr<TextList>&&",
			(
			+ "function %GetTextListRef";
			/ "implemented member functions" ^ "%GetTextListRef"
				~ "content control data member"
			- "all 'ynothrow'" @ "member functions calling %GetTextListRef"
			)
		),
		* "missing call of %ResetView after expanding or collapsing branches"
			@ "class %TreeList" $since b531
	),
	/ $dev $doc $term "normalized" $=
	(
		/ "all 7 '额外说明', 19 '另有说明', 11 '另行说明', 2 '另外说明'"
			-> '另行约定',
		/ "all 3 '附加说明' exception in Doxygen directive" -> '另行约定',
		/ "normalized by explicitly filtered regular expression \
			pattern '[^ （，例形]如[^ 上下何果]', \
			'若无[^法效(歧义)(容器)(父部件)]'" $=
		(
			/ "all 20 '如无'" -> '若无';
			(
			/ "all '若无另行'" -> '除非另行';
			/ "other 3 '若无'" -> '除非',
			),
			/ "other prepositions rewriting performed"
				// E.g. "'如' as prefix of a sentence" -> ('若'|'例如').
		),
		/ "all '特别(说明|指明)'" -> '另行约定',
		/ "all 4 '统一赋值'" -> '合一赋值'
			// To be same as in %Documentation::CommonRules;
	),
	/ %YReader $=
	(
		+ "classes %(TreeList, TreeView) support"
			@ "function %FetchWidgetLoader" @ %Shells $dep_from
			%YFramework.YSLib.UI.TreeView,
		/ @ "constructor %ShlExplorer" @ %ShlExplorer $=
		(
			* $design "spelling error" @ "trace string" $since b512,
			+ "test for class %TreeView" $dep_from %Shells
		)
	)
),

b533
(
	/ %YFramework.YSLib.UI $=
	(
		/ @ "class %GUIState" @ %YGUI $=
		(
			* $doc "wrong comment on %WidgetIdentity",
				// Actually not reset after distinguishing shared widgets.
			/ "member function %GetOldWidgetIdentity"
				=> "%GetSharedWidgetIdentity",
			/ @ "handling event %CursorOver"
			(
				/ "implemented" ^ "recording %FetchTopLevel state"
					~ "%LocateForWidget",
				* $comp "wrong %Enter position for shared widget" $since b532
			)
		),
		/ %YUIContainer $=
		(
			/ DLD "implemented inline function %LocateContainerOffset"
				^ "macros %(PDefH, ImplRet)",
			(
			+ "functions %(FetchTrace; LocateForTrace)";
			/ DLD "implemented function %LocateForWidget as inline function"
				^ "%(LocateForTrace, PDefH, ImplRet)"
				// To be generally slightly efficient to use %vector instead \
					of %list.
			)
		),
		/ @ "class %TreeList" @ %TreeView $=
		(
			(
			+ "function %GetIndentBoxSize";
			/ "implemented function %GetIndentBox" ^ "%GetIndentBoxSize",
			+ "function %GetIndentBoxBounds"
			),
			/ $lib "optimized %CursorOver handling"
				// Now the CPU time is not dedicate to invalidating and \
					repainting.
		)
	)
);

b532
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "function template %CollectNodes with parameter \
				'initializer_list<_type>'" @ %Core.ValueNode,
			/ %UI $=
			(
				+ %TreeView $=
					(+ "class %TreeList"),
				+ "macro %YFM_Android_Helper_AndroidHost" @ %YModules,
				/ @ "class %GUIState" @ %YGUI $=
				(
					/ $design "data member order",
						// Now all by alphabetical.
					(
					/ DLD "data members %(KeyHeldState, TouchHeldState, \
						DraggingOffset, HeldTimer, CursorLocation, Colors, \
						Styles) initialization" ^ "brace-or-equal-initializer";
					- "default constructor"
						// Not it is implicitly defaulted. Old 'ynothrow' \
							exception specification should be also removed.
					),
					(
					+ 'size_t WidgetIdentity = size_t(-1);';
					+ "member function %GetOldWidgetIdentity",
					/ "supported distinguishing shared widget by \
						%WidgetSwitched even if the pointer is equal"
					) $dep_to "distinguishing shared widget"
				),
				+ "set switched widget state" @ "member function \
					%AMUnitControlList::MakeIterator" @ %ListControl
					$dep_from "distinguishing shared widget"
			)
		),
		+ '#include YFM_YSLib_UI_TreeView' @ %YSBuild $dep_from %YSLib.UI
	),
	/ %YBase.YStandardEx $=
	(
		+ "4 function templates %make_container" @ %Container,
		+ %Array,
		/ @ "class template %transformed_iterator" @ %Iterator $=
		(
			/ DLD $revert(b494) "simplified %transformer_type" !^ "%decay_t"
				// Since b529 it had been already decayed.
			(
			+ "3rd template parameter 'typename _tReference = void'";
			/ "%reference" ^ "%_tReference"
			// See $2014-09 @ %Documentation::Workflow::Annual2014.
			),
			/ "function templates %(make_array, forward_as_array, 4 to_array)"
				>> $dep_from %Array
		),
		/ $dev $design "trailing-return-type"
			@ "function template %make_move_iterator_pair" @ %Iterator
			^ "member function" ~ "ADL-based function call",
			// This is a workaround to coordinate with %(string_begin, \
				string_end) in %String. Wait for ISO C++14 to eliminate use of \
				trailing-return-type.
		+ "function templates %(insert_ordered, insert_ordered_reversed)"
			@ %Container,
		* "missing predicate binding" @ "function template %stable_unique"
			@ %Algorithm $since b531,
			// To eliminate Clang++ warning: unused parameter 'pred' \
				[-Wunused-parameter].
		+ "function template %erase_n for %iterator member" @ %Container
			// Only %iterator rather than %const_iterator is required to be \
				the parameter type of member %erase in container requirement.
	),
	+ "'using std::begin;', 'using std::end'" @ "all ADL-enabled %(begin, end) \
		calls" $effective @ %(YBase.YStandardEx.(Container, Iterator),
		YFramework.YSLib.(Core.ValueNode, UI.YStyle)),
	/ $dev $doc $term "normalized by explicitly filtered regular expression \
		pattern '[^大小等同始终多少早晚高低快慢长短先后难易由关用处位置属介适基至限\
过碍便利在(等价)(包含)(相似)(平行)(垂直)(取决)(独立)(特定)(相当)]于[^ ]'" $=
	(
		// All matching '于' as single preposition is also matching '于 '.
		/ "all 238 '对于'" -> '对',
			// Including 60 '相对于' -> '相对'.
		/ "all 3 '起始于'" -> '始于',
		/ "all 1 '终止于'" -> '终于',
		/ "all 1 '相较于'" -> '相较',
		/ "all 1 '鉴于'" -> '由于',
		/ "all 3 '保存于'" -> '保存在',
		/ $re_ex(b527) "all 2 '依赖（(.*)）于'" -> "'依赖（$1）'",
		/ "all 1 '适合于'" -> '适于',
		/ "all 1 '适应于'" -> '适应',
		/ "all 5 '对应于'" -> '对应',
		/ "all 5 '兼容于'" -> '兼容',
		/ "other prepositions rewriting performed"
			// E.g. '于' -> '在'.
	)
),

b531
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ %ListControl $=
			(
				* "%Move wrongly called for switch unit control" @ ("member \
					function %AMUnitControlList::MakeIterator" $orig (@
					"member function template %AMUnitList::MakeIterator"))
					$since b528;
				* $comp "automatically invalidation even no cursor operations \
					performed on %TextList except when the cursor is over the \
					first line" $since b530;
					// Thus %InvalidateParent in handler of %Move for %Control \
						would be called and cause serious performance \
						regression.
			),
			* "redundant call for %UpdateView" @ "handling events %(TouchDown, \
				TouchHeld)" @ "class %TextList" $orig (@ "events %(TouchDown, \
				TouchMove)" @ "class %YMenu" @ %Menu $since b203),
				// Also a serious performance problem due to call of \
					%Invalidate the whole control in %UpdateView. And The \
					%ViewChanged would be also called leading to misconception.
			* "handled twice %KeyDown after touch" @ "class %TextBox" @ %TextBox
				$since b530
				$= (/ "set 'e.Handled = true;'"),
			/ $lib "extracted all macro %EventT" @ %ComboList,
			* $comp "missing '&&'" @ "event argument %ScrollEventArgs \
				inherited from %UIEvent" @ "event %ATrack::Scroll" $since b201,
				// This would cause redundant copy of event argument.
			* "line segment 1 pixel than shorter than specified"
				@ "function %RectDrawArrowOutline" @ %YStyle $since b522,
			+ 'const' @ "functions %(IsShowing, Contains)" @ "class %MenuHost"
				@ %Menu
		)
		/ "assertion string" @ "member function %HBitmap::operator[]"
			@ %Adaptor.Image,
		/ %Core $=
		(
			/ %ValueNode $=
			(
				+ "2 functions %at for %ValueNode",
				/ DLD "implemented all 2 functions %UnpackToNode"
					^ "macros %(PDefH, ImplRet)",
				+ "2 function templates %at for range-access of %ValueNode"
			),
			- "macros %(DeclDelegate, DeclEvent)" @ %Core.YEvent $dep_from
				(%UI.(ComboList, Scroll),
				"removal use of %(DeclDelegate, DeclEvent)")
		),
		* DLD "wrong template parameter name %_tIter did not reflecting \
			refined %InputIterator requirements for %std::accumulate",
			@ "function %FetchMaxTextWidth" @ %TextLayout $since b530
		/ "passing dereferenced value" ^ 'decltype(*first)' ~ 'decltype(*first)&'
			$effective @ ("constructor template %MIMEBiMapping" @ %ContentType,
			"member functions" ("%GEvent::operator-=" @ %YEvent,
			"%MessageQueue::Merge" @ %YMessage) @ %Core,
			"function %FetchMaxTextWidth" @ %Service.TextLayout)
	),
	(
	/ $lib "extracted all macros %(DeclDelegate, DeclEvent)" $effective
		@ (%YFramework.YSLib.UI.(ListControl, Scroll, Selector),
		YReader.HexBrowser),
	- "all redundant alias-declaration %'H*Event' not occured elsewhere"
		$effective @ (%YFramework.YSLib.UI.(ComboList.ListControl, Scroll,
		Selector), YReader.HexBrowser);
	) $dep_to "removal use of %(DeclDelegate, DeclEvent)",
	/ DLD "implemented readonly iteration for non-templated containers"
		^ "%(cbegin, cend)" ~ "%(begin, end)" $effective @ (%YFramework.(
		YSLib.((Core.(YEvent, YMessage), Service.(AccessHistory,TextManager)),
		Adaptor.(YNew, Font), UI.(YUIContainer, YPanel)), NPL.SContext,
		'Helper_(Android)'.AndroidHost), YReader.(BookmarkUI, HexBrowser)),
		// See $2014-08 @ %Documentation::Workflow::Annual2014.
	/ %YBase.YStandardEx $=
	(
		+ "function templates %(qualify, unqualify)" @ %Cast,
		/ %Algorithm $=
		(
			(
			+ $dev $doc "Doxygen groups %(nonmodifying_algorithms, \
				mutating_algorithms)" @ "group %algorithms";
			/ $dev $doc "adjusted all current function templates"
				@ "group %algorithms" >> @ "group %mutating_algorithms",
			),
			/ "function template %stable_range_unique"
				-> "2 function templates %stable_unique",
			+ "function templates %(for_each_equal, for_each_if)"
		),
		+ "function template %make_reverse_iterator" @ %Iterator,
		/ @ "function templates %hash_range" @ %Functional $=
		(
			/ "parameter 'size_t&'" -> 'size_t',
			/ DLD ^ "implemented" ^ "%std::accumulate"
		),
		/ %Container $=
		(
			/ "function template %sort_unique for range" >> %Algorithm,
			* "redundant %sort_unique call and wrong %last call"
				@ "function template %sort_unique for container" $since b286,
			/ DLD "all function parameter %c" => "%con",
			/ DLD "all template parameter %_tRange" => "%_tCon",
				// No real non-container range is appeared here.
			+ "function template %replace_value for associative containers",
			+ "function template %erase_n"
		)
	)
),

b530
(
	/ %YFramework.YSLib $=
	(
		/ "function template %FetchMaxTextWidth" @ %Service.TextLayout $=
		(
			/ $revert_ex(b529) DLD "implemented" ^ "%(std::accumulate, max)"
				~ "%(std::max_element, ystdex::make_transform)";
				// To eliminate redundant evaluation with calls of \
					%FetchStringWidth.
			* $comp "wrong value calculated" $since b529
				// See $2014-08 @ %Documentation::Workflow::Annual2014.
		),
		/ "member function %Clear" => "%clear" @ ("class templates \
			%(GEvent, GDependencyEvent)" @ %Core.YEvent;
			// To necessarily meet associative container requirements.
		/ %UI $=
		(
			/ %YStyle $=
			(
				/ "split rectangle parameter to boundary and bounding box \
					parameters" @ "function %DrawArrow",
				/ "split rectangle parameter to boundary and location \
					parameters" @ "function %DrawCornerArrow"
			),
			* "position of arrow wrongly decided by clip area" @ "member \
				function %InitializeArrowPainters" @ "class %ScrollBar"
				@ %Scroll $orig (@ "class %AScrollBar" $since b453);
			- "function %CheckConfirmed" @ "class %Menu" @ %Menu,
			/ @ "class %TextList" $=
			(
				(
				+ "member functions %(begin, end; GetChildren)";
				/ DLD "implemented control events for items"
					^ "unit control events" ~ "container control events"
				);
				(
				/ DLD "implemented %InvokeConfirmed" !^ "%CheckConfirmed"
					$dep_from %Menu;
				- "function %CheckConfirmed"
				),
				- "function %(SetSelected; CheckPoint) with 'const Point&' \
					parameter"
			)
		)
	)
),

b529
(
	/ %YBase.YStandardEx $=
	(
		(
		/ "metafunction %is_decayable" @ %TypeOperation -> "%is_decayed";
			// The new one is the opposite of the old one, which meaning is \
				more explicit.
		/ DLD "simplified static assertion" @ "implementation"
			@ "class template %thunk" @ %Functional ^ "%is_decayed"
		),
		/ %Iterator $=
		(
			/ @ "class template %transformed_iterator" $=
			(
				/ "base class",
				+ "2 static assertions to forbid template parameters not \
					decayed" ^ "%is_delayed",
				/ "simplified using aliases %(iterator_type, transformed_type, \
					reference)",
				/ "using alias %difference_type" ^ "%std::iterator_traits",
				+ "explicitly defaulted copy and move constructors"
			),
			/ "return type" @ "function template %make_transformed"
				^ "%decay_t" ~ "%array_type_decay"
		),
		/ %Memory $=
		(
			- $revert(b298) "function template %make_shared as replacement of \
				%std::make_shared",
				// See $2014-08 @ %Documentation::Workflow::Annual2014.
			+ "function template %make_shared for instances of \
				$std::initializer as parameter"
				// For convenience.
		)
	),
	/ %YFramework.YSLib $=
	(
		/ DLD "implemented function template %FetchMaxTextWidth"
			@ %Service.TextLayout
			^ "%(ystdex::make_transform, std::max_element)",
		/ %UI $=
		(
			/ %ListControl $=
			(
				/ $revert_ex(b528) 'using MTextList::GetLabelRef'
					-> 'using MTextList::LabelBrush;' @ "class %TextList",
				/ @ "class %MTextList" $=
				(
					/ "function %GetLabelRef" -> "data member %LabelBrush",
					/ $dev "unit control" -> "%Control" ~ "%Label"
				),
				/ "alias-declaration %IndexEventArgs" ^ "%size_t"
					~ "%MTextList::IndexType" $dep_to
					"eliminating dependency of %IndexEventArgs on %MTextList",
					// At least currently they are compatible.
				/ @ "class %TextList" $=
				(
					/ "access control" @ "base class %MTextList" -> 'public'
						~ 'protected',
					/ "members %(ViewArgs, HViewEvent, ViewChanged, Selected, \
						Confirmed)" >> "class %AMUnitControlList" $dep_from
						"eliminating dependency of %IndexEventArgs on \
						%MTextList",
					- "all using aliases from %MTextList",
				),
				/ @ "class %AMUnitControlList $=
				(
					/ "access control" @ "base class %AMUnitList" -> 'protected'
						~ 'public',
					+ 'using AMUnitList::GetFullViewHeight;',
					+ 'GEvent<void(size_t)> Iterated;'
				),
				(
				- "function template %AMUnitList::MakeIterator"
					@ "class %AMUnitList";
				/ "class %AMUnitList" >> %Viewer
				),
				/ @ "class %MTextList" $dep_from "%AMUnitControlList::Iterated"
					$=
				(
					/ "function %MakeIterator" >> "class %AMUnitControlList",
					+ "assertion for index on unit widget iteration"
				)
			),
			/ @ "class %Menu" @ %Menu $dep_from "%AMUnitControlList::Iterated"
				$=
			(
				+ "enablility setting on iteration";
				/ "unit widget painting accroding to enablility of unit widget"
					// The state of item is set indirectly and client code now \
						has opportunity to modify this default behavior.
			),
			/ DLD %ComboList $=
			(
				^ "%DefGetterMem" @ "class %DropDownList"
					~ "%DefEventGetterMem",
				^ "%DefGetter" @ "class %ListBox" ~ "%DefEventGetter"
			),
			/ DLD @ "class %ATrack" @ %Scroll $=
			(
				/ "access Control" @ "events %(ThumbDrag, Scroll)" -> 'public'
					~ 'private',
				- "member functions %(GetThumbDrag, GetScroll)"
			)
		),
		+ 'using std::make_shared' @ %Adaptor.YReference,
		/ %Core.YEvent $=
		(
			- $revert(b195) "all 3 macros 'DefDepEventGetter*'",
			- $revert(b162) "all 3 macros 'DefEventGetter*'"
				$dep_from %UI.(ComboList, Scroll),
			- $revert(b195) "macros %(DeclEventRef, DeclDepEventRef, \
				DeclIDepEventEntry, DeclDepEvent)",
			- $revert(b162) "macro %DeclIEventEntry"
		)
	),
	/ DLD "all call of 'ystdex::make_shared'" -> "call of 'make_shared'"
),

b528
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ %TextList => %ListControl $=
				(
					(
					- 'using MTextList::GetItemPtr;' @ "class %TextList";
						// Use %GetList and its interface instread.
					- "all 2 member function %MTextList::GetItemPtr"
					),
					(
					+ "function template %MakeIterator" @ "class %MUnitList";
					/ DLD "implemented function %MTextList::MakeIterator"
						^ "%MUnitList::MakeIterator"
					),
					+ "functions %(GetSharedIndex, GetTopOffset, CheckPoint)"
						@ "class %AMUnitList",
					/ @ "class %MTextList" $=
					(
						/ "function %GetLastLabelIndex" >> "class %AMUnitList",
						+ "function %GetLabelRef",
						(
						/ "base class %AMUnitList" -> "%AMUnitControlList"
							$dep_from "class %AMUnitControlList";
						/ "function %GetUnitRef" >> "class %AMUnitControlList",
						/ DLD "text unit implementation",
						- "data member %Unit" $dep_from "removal of %Unit"
						),
						- $revert($orig(b282))
							"member function %GetMaxTextWidth" $orig (@ %Label)
							$dep_from "removal of %GetMaxTextWidth"
					),
					/ @ "class %TextList" $=
					(
						/ "merged 2 functions %CheckPoint"
							^ "%AMUnitList::CheckPoint" $dep_from
							"function %MTextList::CheckPoint",
						/ "merged 2 functions %SetSelected for point as with \
							parameter 'const Point&'",
						/ DLD "simplified implementation" @ "function %Refresh",
						/ 'using MTextList::Unit'
							-> 'using MTextList::GetLabelRef' $dep_from
							"%MTextList::GetLabelRef" $dep_to
							"removal of %Unit",
						- 'using MTextList::GetMaxTextWidth;' $dep_to
							"removal of %GetMaxTextWidth"
					),
					+ "class %AMUnitControlList"
				),
				/ "macro %YFM_YSLib_UI_TextList" @ %UI.YModules
					=> "%YFM_YSLib_UI_ListControl"
			),
			/ %Core.YGDIBase $=
			(
				/ "all parameter type %int" @ "member functions \
					%Rect::(Contains, ContainsStrict)" -> "%SPos",
				/ $re_ex(b509) DLD "implemented all 2 functions %Size::GetRef"
					^ "macros %(PDefH, ImplRet)"
			)
		),
		^ "ADL for %is_undereferenceable" @ %YFramework $effective @ ("3 \
			function templates %(FetchStringOffsets, FetchStringWidth)"
			@ %YSLib.Service.TextLayout, "2nd constructor" @ "class %Session"
			@ %NPL.SContext)
	)
),

b527
(
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			/ %TextList $=
			(
				+ "class %AMUnitList",
				+ 'using MTextList::Unit;' @ "class %TextList"
					$dep_from "%MTextList::Unit",
				/ @ "class %MTextList" $=
				(
					/ "protected data member %lblShared" -> "public %Unit",
					/ DLD "implementation" @ "function %Refresh"
						// Note now the unit widget state is not updated on \
							%Refresh.
					- $revert(b524) "data member %(Font, Margin)",
						// Just use members of 'Unit' instead.
					(
					+ "public base class %AMUnitList" $dep_from
						"class %AMUnitList";
						// With polymorphic methods.
					/ "data member %vwText" => "%vwList";
					/ "protected data members %(CyclicTraverse, vwText, \
						uTopOffset, idxShared), functions %(GetFullViewHeight, \
						GetViewPosition, GetUnitLocation, \
						AdjustOffsetForHeight, AdjustViewForContent, \
						AdjustViewLengthForHeight, ResetView)"
						>> "class %AMUnitList";
					/ "data member %CyclicTraverse" -> "using-declaration",
					/ DLD "simplified implementing functions %'Adjust*'",
					/ "implemented function %GetItemHeight as overrider",
					+ "function %(GetTotal, GetUnitRef) as overriders",
					- "function %AdjustViewLengthForHeight"
					),
					- "2nd and 3rd parameter" @ "constructor"
				),
				/ $revert(b395) "base class %MHighlight"
					@ "class %MTextList" >> "class %TextList",
				- $revert(b523) "function %ResetView"
			),
			/ %Scroll $=
			(
				+ 'ynothrow' @ "abstract method %GetOrientation"
					@ "class %ATrack",
				(
				/ "merged classes %(AScrollBar, HorizontalScrollBar, \
					VerticalScrollBar)" -> "class %ScrollBar";
				* $comp $dev "wrong 'ImplI(ATrack)'" @ "member function \
					%GetOrientation" @ "classes %(HorizontalScrollBar, \
					VerticalScrollBar)" @ %Scroll $since b205 $orig (@
					"classes %(YHorizontalScrollBar, YVerticlaScrollBar)"
					@ %YGUIComponent $since b171),
				* $comp "non-abstract class %AScrollBar named with prefix 'A'"
					$since b171,
					// The old abrstract class inherited %ATrack before b171.
				/ "swapped 2nd and 3rd parameter" @ "constructor %ScrollBar"
				)
			)
		),
		/ $dev "replacement" @ "macro %ImplI(...)" -> 'override' ~ 'virtual'
			@ %YBaseMacro,
		/ $dev $design / "adjust 'ImplI'" @ "member function declarations"
			!^ 'override'
	),
	/ %YBase.YStandardEx.Functional $=
	(
		+ "constructor with 'std::reference_wrapper<value_type>' parameter"
			@ "class template %thunk";
		* "ambiguity overloading resolution for callable type" $since b526 $=
		(
			/ "constructor for callable type" -> "constructor template",
			+ "constructor template for instances of 'std::reference_wrapper'",
			+ DLD 'explicit' @ "base class constructors"
		)
	),
	/ $dev $doc $term $re_ex(b462) "all '依赖于'" -> '依赖'
),

b526
(
	/ %YFramework.YSLib $=
	(
		/ %UI $=
		(
			/ "text drawing" @ "class %TextBox" $=
			(
				/ "performed no-op when %Text is empty",
				* "missing check for %Text and %Selection.Range" $since b485
					// Since %Text is public, the selection range can be out \
						of bounds.
			),
			/ DLD "implemented member function %(TextBox, Button)::Refresh"
				@ %TextBox ^ "lazy evaluated lambda expression" $dep_from
				%YBase.YStandardEx.Utilities,
			/ %Label $=
			(
				- "base class %noncopyable" @ "class %MLable",
					// Thus it meets to %UIBrush requirement.
				(
				+ "function %GetItemHeight" @ "class %MLabel";
				+ 'using MLabel::GetAlignedPenOffset;' @ "class %Label"
				),
				+ 'using MLabel::GetItemHeight;' @ "class %Label"
			),
			* "probably range out of bounds for drawing routines like \
				%DrawHLineSeg"
				@ "function DrawTrackBackground" @ %Scroll $since b452,
				// The bounds intersection for drawing area is missing.
			/ @ %ComboList $=
			(
				/ DLD "implemented %DropDownList"
					!^ "member function %ListBox::Find";
				- $revert(b316) "member function %ListBox::Find"
			),
			/ %TextList $=
			(
				- $revert(b316) 'using MTextList::Find;' @ "class %TextList"
					$dep_from %ComboList $dep_to "removal of %TextList::Find",
				/ @ "class %MTextList" $=
				(
					/ DLD "implementation" @ "member function %Refresh"
						// Note now the unit widget state is not updated on \
							%Refresh.
					- $revert(b316) "function %Find" $dep_from
						"removal of %TextList::Find",
						// Just use 'std::find' on 'GetList()' instead.
					- $revert(b523) "function %GetChildrenByIndices",
					+ "assertion for nonzero check" @ "function %GetItemHeight"
				)
			)
		),
		/ DLD "all local variables initialized by %ClipArea" $=
		(
			/ $re_ex(b489) "%r" => "%bounds" $effective @ (("function \
				%DrawRectRoundCorner" @ %YStyle, "member function %Refresh"
				@ ("class %ProgressBar" @ %Progress, "class %BufferedTextArea"
				@ %TextArea, "class %TextList" @ %TextArea), "function \
				template %UpdatePixels, static member function \
				%ImageBrush::DefaultUpdate" @ %YBrush, "member function \
				%BufferedRenderer::UpdateTo" @ %YRenderer) @ %UI, "function \
				templates %(BlitGlyphLines, BlitGlyphPixels)"
				@ %Service.CharRenderer),
				// To eliminate possible misunderstanding.
			/ 'const auto&' -> 'const Rect&'
				// See %Documentation::CommonRules @5.7.9. Note '::RECT' is \
					not the case.
		)
	),
	/ %YBase.YStandardEx $=
	(
		+ "constructor template to support lazy evaluation by callable object \
			as argument" @ "class template %swap_guard and its partial \
			specialization" @ %Utilities,
		+ "function templates %make_unique_default_init" @ %Memory,
		/ %Functional $=
		(
			/ @ "class template %thunk" $=
			(
				- "2nd template parameter",
				/ "fixed %operator() with no parameters",
				+ "%operator return_type"
			),
			+ "2 function template %make_thunk"
		)
	),
	* $comp "assertion failed when dragging color setting box"
		@ %YReader.ReaderSettingUI $since b452 $dep_from
		%YFramework.YSLib.Scroll
		// If there is any %Track moved out of the target bounds (e.g. ones in \
			YReader text color setting box), the assertion failed.
),

b525
(
	/ %YFramework.YSLib.UI $=
	(
		/ %TextList $=
		(
			/ @ "class %TextList" $=
			(
				/ DLD "simplified item background drawing" ^ "%FillRect"
					~ "%FillRectRaw";
				- "protected function %DrawItemBackground"
				- $revert($orig(b205)) 'using MTextList::RefreshTextState;'
					$dep_to "removal of %RefreshTextState call of %TextList",
				- DLD "%MTextList::(GetTotal, SetContainer) calls"
					$dep_to "removal containers of viewer",
				- 'using MTextList::ViewerType;' @ "class %Textist"
					$dep_to "removal of %ViewerType"
			),
			/ @ "class %MTextList" $=
			(
				(
				/ DLD "implemented function %GetItemHeight"
					^ 'GetVerticalOf(Margin)' ~ 'LineGap',
				- "function %RefreshTextState" $dep_from ("removal of \
					%RefreshTextState call of %TextList",
					"removal of %RefreshTextState call of %Menu",
				),
				- $revert(b524) "data member %LineGap",
				- "alias-declaration %ViewerType" @ "class %MTextList"
					$dep_from "removal of %ViewerType",
				/ "function %CheckSelected" -> ("member function \
					%SequenceViewer::CheckSelected" @ %Viewer) $dep_from %Viewer
			),
			/ DLD "viewer calls"
		),
		- DLD "calls of %MTextList::RefreshTextState" @ "classes %(TextList, \
			Menu)" $dep_to "removal of %RefreshTextState of %Menu",
		/ %Viewer $=
		(
			/ "class template %GSequenceViewer" -> "class %SequenceViewer" $=
			(
				(
				(
				- "'GetTotal()' calls" @ "functions %(RestrictSelected, \
					RestrictView, Contains)",
				(
					- "all prefix and postfix %operator(++, --)",
					- "functions %(DecreaseHead, DecreaseSelected);
					/ "implemented functions %(SetHeadIndex, \
						MoveViewerToEnd, \
						SetSelectedIndex, AdjustForContent, GetValid, \
						IncreaseHead, IncreaseSelected)"
						^ "extra parameter 'total'" ~ "'GetTotal()' calls"
				);
				- "function %GetTotal"
				),
				- "function %SetContainer" $dep_from
					"removal containers of viewer",
				/ DLD "data member initialization"
					^ "brace-or-equal-initializer";
				/ "explicit constructor" -> "non-explicit explicitly defaulted \
					constructor";
				- DLD "container pointer state"
				),
				(
				$map ($lambda(T, G)(
				- "static assertion for %SizeType";
				/ T -> G;
				- "alias-declaration %SizeType"
				))(("%SizeType", "%size_type"), ("%DifferenceType",
					"%ptrdiff_t"));
				- "alias-declaration %ContainerType"
				),
				/ "functions %(GetLength, SetLength)" -> "data member %Length"
			),
			/ DLD "header names"
			+ DLD ".cpp file for member function implementation"
		),
		/ @ %YBrush $=
		(
			+ $dev $doc "Doxygen group %UIBrushes" @ "group %UI",
			/ @ "alias template %GBrushUpdater" $=
			(
				/ "supported variadic template arguments",
				/ "implemented" ^ "%GHEvent" ~ "%std::function"
					// This means now omitting redundant parameters is \
						supported.
			),
			- $revert(b441) "assertion" @ "function %ImageBrush::operator()"
		),
		/ @ "class %MLabel" @ %Label $=
		(
			/ "virtual function %DrawClippedText" -> "static function \
				%DefaultUpdateClippedText; data member %UpdateClippedText",
			- "virtual destructor"
				// Thus %MLabel is not a polymorphic class any longer.
			/ DLD "initialized %(VerticalAlignment, AutoWrapLine, Text, \
				Margin)" ^ "brace-or-equal-initializer" ~ "ctor-initializer",
			/ @ "function %DrawText" $=
			(
				- "color parameter",
					// Member %ForeColor is used instead.
				+ 'const'
			),
			+ "member function %operator()"
		),
		/ %TextBox $=
		(
			/ DLD "initialization" @ "%ForeColor"
				@ "class template %TextPlaceholder"
				@ %TextBox ^ "brace-init-list" ~ "= initializer-clause",
			/ "overrider function %DrawClippedText" @ "class %TextBox"
				-> "function %UpdateTextBoxClippedText"
		),
		/ "explictly supported strong exception guarantee"
			@ "%(TextBox, Button, CheckButton, RadioButton)::Refresh"
			^ "%ystdex::swap_guard" $dep_from %YBase.YStandardEx.Utilities,
			// Thus all GUI rendering meets strong exception safety guarantee.
		(
		(
		+ "data member %ForeColor" @ "class %MLabel";
		+ "color as 2nd parameter" @ "constructors %(MLabel, Button)",
		+ 'using MLabel::ForeColor;'
			@ "classes %(Label, Button, CheckButton, RadioButton, TextBox)",
		/ "foreground color directly initialized for text state rather than \
			data member %ForeColor"
			@ "constructors %(TextArea, BufferedTextArea)" @ %TextArea
		),
		+ "data member %ForeColor"
			@ "classes %(ProgressBar, Thumb, TextList, AScrollBar)",
		- "foreground color parameter" @ "constructors %(Control, Widget)";
		- "data member %ForeColor" @ "class Widget"
		),
		/ DLD "implemented %(TextBox, Label, Button, CheckButton, \
			RadioButton)::Refresh" ^ "%MLabel::operator()"
			~ "%MLabel::DrawText" $dep_from "%MLabel::operator()"
	),
	/ DLD "all 'C++14'" -> 'C++1y' !@ %Documentation::CommonRules,
		// The standard is not published yet. Do not modify rules to \
			minimalize future modification.
	/ %YBase.YStandardEx $=
	(
		/ @ %Functional $=
		(
			/ "data member %Caller" @ "template class %expanded_caller"
				=> "%caller",
			(
			+ "metafunction %wrapped_traits_t";
			+ "class template %thunk"
			)
		),
		/ DLD "simplified implementation" @ %AnyIterator
			^ 'wrapped_traits_t<_type>' ~ 'typename wrapped_traits<_type>::type'
			$dep_from "%wrapped_traits_t" @ %Functional,
		+ "class template %swap_guard and its partial specialization" %Utilities
	)
),

b524
(
	+ DLB '-pipe' @ "compliler and linker options" @ "Code::Blocks projects"
		@ "platform %MinGW32",
		// To get rid of most issues with size limitation of temporary \
			directory (e.g. on RAM disk).
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ $revert_ex(b523) "allowed null container pointer"
					@ "function %GetTotal" @ "class template %GSequenceViewer"
					@ %Viewer,
					// If container pointer is null, the result is zero.
				/ %TextList $=
				(
					/ @ "class %MTextList" $=
					(
						+ "data members %(lblShared, idxShared); functions \
							%(GetChildrenByIndices, GetLastLabelIndexClipped, \
							MakeIterator)" $dep_to
							"text list children iterations",
						(
						+ "data member %LineGap";
						/ DLD "implemented function %RefreshTextState"
							^ "%LineGap" ~ "%tsList.LineGap";
						/ "initialized function %GetItemHeight" ^ "%(Font, \
							LineGap)" ~ '%GetTextLineHeightExOf(tsList)';
						- "data member %tsList",
						),
						/ "base class %MLabel" -> "data members %(Font, Margin)"
							$dep_from "removal of redundant members"
					),
					/ @ "class %TextList" $=
					(
						(
						$dep_from "text list children iterations"
						+ "function %GetLastLabelIndex",
						+ 'using MTextList::MakeIterator;',
						/ "implemented function %Refresh" ^ "widget iteration \
							and function %PaintVisibleChildAndCommit" $dep_to
							"text list refresh"
						),
						- "using-declarations %(HorizontalAlignment, \
							VerticalAlignment, Text) from %MTextList" $dep_to
							"removal of redundant members",
					)
				),
				(
				/ "shared widget painting event handlers" @ "constructor"
					@ "class %Menu" @ %Menu $dep_from "text list refresh";
				- "member function %(Menu; TextList)::DrawItem";
				)
			),
			/ %Service $=
			(
				* $doc "missing parameter name for directive '\param'"
					@ "Doxygen comments" @ "function %Switch" @ "class \
					template %GAccessList" @ %AccessHistory $since b404,
				* $doc "outdated parameter name %blit for directive '\param'"
					~ "%shader" @ "Doxygen comments"
					@ "function template %BlitPixels" @ %YBlit $since b442,
				/ DLD @ "class %TextState" @ %TextBase $=
				(
					/ DLD "initialized data member %LineGap"
						^ "brace-or-equal-initializer '= 0'"
						~ "ctor-initializer",
					/ DLD "initialized data member %Pen"
						^ "braced-init-list '{}'" ~ "ctor-initializer"
				)
			)
		),
		/ %YCLib $=
		(
			+ 'YB_NONNULL(1, 3)' @ "function %LogWithSource" @ %Debug
				$dep_from %YBase.YDefinition,
			* $revert_ex(b501) $dev $doc "missing '\def' directive" @ "Doxygen \
				comments" @ "macro %YCL_KEYSTATE_DIRECT" @ %Input $since b501
		)
	),
	/ %YBase $=
	(
		+ "macro %YB_NONNULL" @ %YDefinition,
		/ %YStandardEx $=
		(
			+ 'YB_NONNULL(1)' @ "function template specialization %sfmt<char>"
				@ %String $dep_from %YDefinition,
			* $doc "wrong directive '\breif' used" ~ '\brief'
				@ "Doxygen comments" @ "function %iswgraph"
				@ %CWideCharacterType $since b513
		)
	),
	* "missing atomic member initialization" $effective %YFramework.Helper
		$= (^ "braced-init-list" ~ "empty ctor-initializer")
		@ ("class %Environment" @ %Environment $orig (@ %Host) $since b399,
		"class %WindowThread" @ %HostRenderer $orig (@ %Helper $impl) b428);
		// See $2014-08 @ %Documentation::Workflow::Annual2014. Similar as fix \
			@ b491.
),

b523
(
	/ DLD "updated header search paths" @ "Visual C++ projects" $=
	(
		/ "order" @ "project %YFramework_Android",
		* "redundant slash" @ "project %YFramework" $since b518,
	),
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			/ %TextList $=
			(
				/ @ "class %MTextList" $=
				(
					+ "alias-declaration %ViewerType; protected data members \
						%(vwText, uTopOffset), functions \
						%(AdjustViewLengthForHeight, AdjustOffsetForHeight, \
						AdjustViewForContent, CheckSelected, ResetView)"
						$dep_to "text list model members",
					/ @ "constructor" $=
					(
						+ "parameter of highlight color pair",
						/ "access control" -> 'public' ~ 'protected'
					),
					+ "function %GetUnitLocation" @ "%MTextList"
				),
				/ @ "class %TextList" $=
				(
					/ "all data members and protected base classes except \
						%MTextList" >> "%MTextList",
					+ 'using MTextList::ViewerType;',
					(
					/ "functions %(GetViewPosition, GetFullViewHeight)"
						>> "class %MTextList";
					+ "using-declarations %MTextList::(GetViewPosition, \
						GetFullViewHeight)"
					),
					/ DLD "simplified implementation" $dep_from
						"text list model members" $=
					(
						/ @ "function %AdjustViewForContent"
							^ "macros %(PDefH, ImplExpr), \
							function %MTextList::AdjustViewForContent",
						/ @ "function %AdjustViewLength" ^ "macros %(PDefH, \
							ImplExpr), function %AdjustViewLengthForHeight",
						/ @ "function %CheckConfirmed" ^ "macros %(PDefH, \
							ImplExpr), function %MTextList::CheckSelected",
						/ @ "function %CheckPoint for %Point parameter"
							^ "macros %(PDefH, ImplRet)",
						/ @ "function %ResetView"
							^ "function %(MTextList::ResetView, UpdateView)",
						/ @ "function %SetSelected for %Point parameter"
							^ "macros %(PDefH, ImplRet)"
					),
					(
					$dep_from "%MTextList::GetUnitLocation";
					/ DLD "simplified implementation"
						@ "function %GetUnitBounds" ^ "function \
						%MTextList::GetUnitBounds, macros %(PDefH, ImplRet)",
					+ 'using MTextList::GetUnitLocation;'
					)
				)
			),
			+ "assertion for nonnull container pointer" @ "function %GetTotal"
				@ "class template %GSequenceViewer" @ %Viewer
		),
		* "application not exited after global application instance destruction"
			@ "platform %Android" $since b502 $=
			// And when the application reentered, it would failed on \
				assertion for nonnull pointer check for instance on debug \
				configuration or just crash on release configuration.
			$= (+ "%::ANativeActivity_finish call after %::y_android_main call"
				@ "host thread"  @ %'Helper_(Android)'.AndroidHost)
	)
),

b522
(
	/ %YBase.YStandardEx $=
	(
		+ %Exception
			$= (+ "function template %raise_exception");
		/ %Iterator $=
		(
			/ @ "class template %subscriptive_iterator" $=
			(
				/ DLD "simplified type name" @ "member function %equals"
					^ "template-name" ~ "simple-template-id",
				/ "constructor" ^ 'container_type' ~ '_tCon'
			),
			(
			+ "class template %prototyped_iterator";
			+ "function templates %operator(==, !=) for %prototyped_iterator",
			+ "function template %make_prototyped_iterator"
			)
		)
	),
	/ %Tools.SHBuild.Main
		$= (/ DLD "simplified implementation"
			^ ($dep_from %YBase.YStandardEx.Exception)),
	/ %YFramework.YSLib $=
	(
		+ "assertions for the boundary argument"
			@ "functions %(DrawCircle, FillCircle)" @ %Service.YDraw,
			// As %(DrawPoint, DrawHLineSeg, DrawVLineSeg).
		/ %UI $=
		(
			/ %YStyle $=
			(
				+ "function %RectDrawArrowOutline",
				+ "last parameter 'bool = {}' to specify drawing outline only"
					@ "function %DrawArrow",
				+ "assertion for rotation value"
					@ "functions %(RectDrawArrow, RectDrawArrowOutline)",
				+ "functions %(RectDrawCornerArrow, \
					RectDrawCornerArrowOutline; DrawCornerArrow)"
			),
			/ $doc "explicitly allowed %IWidget::GetChildren to optimize out \
				children out of boundary",
			/ "class %TextList" @ %TextList $=
			(
				/ "function %DrawItems merged to %Refresh",
				/ DLD "member functions order",
				+ "member function %GetUnitBounds"
			),
			/ DLD "implemented member function %Renderer::CommitInvalidation"
				@ %YRenderer ^ "%(PDefH, ImplRet)",
			/ %YWidget $=
			(
				+ "function %PaintChildAndClip";
				/ "function %PaintVisibleChild"
					-> "inline function %PaintVisibleChildAndClip"
			),
			/ "class %MTextList" @ %Label >> %TextList
		),
		/ "explicitly specified unsigned integer type as underlying type"
			@ "enum %Rotation" @ %Core.YGDIBase
	)
),

b521
(
	/ %YFramework $=
	(
		/ @ "platform %Win32" @ %YCLib.NativeAPI $=
		(
			+ "macro definition %NOMINMAX when undefined before including \
				<Windows.h>",
				// To get rid of macros %(min, max) pollution.
			/ "macro definition %mkdir" -> '#undef mkdir',
			/ "function 'int makedir(char const* dir, ::mode_t)'"
				@ "namespace %platform_replace"
				-> "function 'int makedir(char const* dir, ::mode_t = 0777)'"
		);
		/ %Helper $=
		(
			(
			/ %Host => %Environment
				$= (/ "class %Host::Environment" -> "%YSLib::Environment with \
					minimal support for non-hosted platforms");
			/ @ %GUIApplication $=
			(
				/ "call of functions from %Initialization"
					>> "class %Environment"
				/ "function 'Environment& GetHost()'" @ 'YF_Hosted'
					-> "'Environment& GetEnvironment() ynothrow' regardless of \
					%YF_Hosted",
				/ "function %Host::FetchEnvironment" >> "namespace %YSLib",
			)
			),
			+ $dev "declaration of class %Environment" @ '!YF_Hosted'
				@ %YGlobal,
			+ DLD "environment support" @ "class %InputManager"
				@ %InputManager,
			/ "macro %YFM_Helper_Host" @ %YModules => "%YFM_Helper_Environment",
			/ "class %Environment" @ %Environment $=
			(
				/ "static function %HostLoop"
					>> ("class %WindowThread" @ %HostRenderer);
					// Hosted environment only.
				/ DLD "implemented function %EnterWindowThread"
					^ "macros %(PDefH, ImplExpr)"
			),
			* "DS implementation hack" @ "platform %Android" $since b385 $=
				// The screen mapping is specific for platform %DS. Though \
					since b385 it is a 'FIXME', but there is even no support \
					for earlier version.
			(
				/ "class %Environment" @ %Environment $=
				(
					+ "data member %MapPoint";
					/ "implemented %MapCursor" ^ "%MapPoint"
				);
				/ DLD "set environment %MapPoint handler"
					@ "class %DSApplication" @ %DSMain
			)
		)
	),
	(
	/ %YFramework.YSLib.Core.Cache
		-> %YBase.YStandardEx.Cache $=
	(
		/ "name of header %Cache.hpp" => "cache.hpp",
		/ "class template %YSLib::GMRUCache" -> "%ystdex::used_list_cache" $=
		(
			/ "type alias %UseList" => "%used_list",
			/ "type alias %UseCache" => "%used_cache",
			/ "type alias %Map" => "%map_type",
			DLD !^ "%DefDeMoveCtor",
			/ "function %GetMaxUse" => "%get_max_use" !^ "%DefGetter",
			/ "function %SetMaxUse" => "%set_max_use",
			DLD ^ "%yassume" ~ "%YAssert",
			/ DLD "minority member renaming"
				// To conform the naming convention.
		),
		/ "function template %YSLib::CacheLookup" -> "%ystdex::cache_lookup"
			$= (/ "thrown exception %LoggedEvent" -> "%std::runtime_error")
	);
	- "macro %YFM_YSLib_Core_Cache" @ %YFramework.YSLib.Core.YModules
	)
),

b520
(
	/ %YFramework $=
	(
		/ %'YCLib_(MinGW32)' $=
		(
			+ %Consoles
				$= (+ "class %WConsole"),
			- DLD "unused redundant internal function" @ %Win32GUI,
			* DLD "missing specifying return type" @ "lambda expression with \
				multiple return statements" @ "constructor %Win32Exception"
				@MinGW32 $since b435,
			+ "macro %YFM_MinGW32_YCLib_Consoles" @ %YModules
		)
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ DLD "simplified implementation"
					@ "checkbox background drawing" @ %Selector,
					// Removed unnecessary calculation.
				- DLD "unused redundant internal constant object" @ %TextList
			),
			/ %Core.YEvent $=
			(
				/ "member function %operator==" @ "class template %GHEvent"
					-> "friend function",
				+ "2 function template %operator(==, !=) for %GHEvent with \
					%std::nullptr_t",
				+ "function template %operator!= for %GHEvent"
			),
			* "wrong return type" @ "member function %TextFile::GetBOMSize"
				@ %Service.TextFile $orig (@ %Core.YFile_(Text)) $since b138
				$= (/ "return type" -> "%size_t" ~ "%u8")
				// The member type had been already changed ago but the getter \
					wasn't be synchronized.
		),
		/ %YCLib $=
		(
			+ "(struct %HandleDeleter; alias-declaration %UniqueHandle; \
				function %MakePipe)" @ %Host,
			/ $dev "distinguished Win64 from 32-bit Windows platforms"
				@ %Platform $=
			(
				+ "platform %Win64 with macro %YF_Platform_Win64 capable with \
					%(YCL_Win32, YCL_MinGW, YF_Hosted)",
				(
				+ "platform %MinGW64 with macro %YF_Platform_MinGW64 capable \
					with %(YCL_Win64, YCL_Win32, YCL_MinGW, YF_Hosted)";
				+ $doc "Doxygen group definition" @ "platform %MinGW64"
				)
			),
			/ "static assertion for screen measurement types" @ %Video $=
			(
				/ "implementation" ^ "%ystdex::integer_width"
					~ "%std::numeric_limits::max";
				/ $comp $workaround "support for implementation without \
					constexpr member functions of instants \
					%std::numeric_limits",
					// Though constexpr functions are mandated already by ISO \
						C++11, some implementations are still conforming now.
				/ $comp "eliminated signed and unsigned integer comparing"
					// Otherwise it may issue a warning which is hard to \
					overcome.
			)
		),
		* DLB "ill-formed code due to narrow conversion when %std::size_t \
			converted to 'unsigned long'" (@ %'YCLib_(MinGW32)'.MinGW32
			$orig (@ %Helper)) $since b387,
			// It would fail to compile for Win64.
		/ DLD "simplified implementation" @ "member function \
			%InputManager::DispatchInput" @ %Helper.InputManager
			// Also to eliminate Visual C++ warning C4457.
	),
	/ %Tools.SHBuild $=
	(
		/ %Main $=
		(
			(
			/ DLD "implementation of colored printing"
				^ "%platform_ex::WConsole" ~ "Windows API"
				$dep_from %'YCLib_(MinGW32)'.Consoles;
			* $comp "color pollution of external console" $since b519
			),
			/ "always set logging handler in spite of number of command line \
				arguments",
				// Because the "catch" clause was also using logging.
			/ "log level output" $=
			(
				/ DLD "implementation" ^ "std::showbase",
				/ "shown uppercase in hexadecimal numbers"
			),
			/ "explicitly allowed multiple occurrence of options"
				@ "usage information",
			+ "option '-xid,'" $dep_to "subdirectory ignorance",
			(
			+ "refactored" ^ "context class with %ystdex::thread_pool"
				$dep_from %YBase.YStandardEx.Concurrency;
			+ "option '-xj,' for multitasking with max number of paralleled \
				jobs" ^ "threading"
			),
			* DLD "inconsistent use of 'u8' prefix for output" $since b519
			- DLD "assertion for arguments number"
		),
		/ $lib @ "%SHBuild-YSLib.sh" $=
		(
			(
			* "wrong options for build static libraries"
				$since b474 $=
			(
				- '-DYB_BUILD_DLL' @ "%YBase build command" $=
				/ @ "%YFramework build command" $=
				(
					- '-DYB_DLL -DYF_BUILD_DLL',
					- '-lYBase'
				)
			),
			+ "synchronized options with Code::Blocks projects setting" $=
			(
				+ "options '-Wcast-align -Winit-self -Wmain \
					-Wmissing-declarations -Wmissing-include-dirs \
					-Wnon-virtual-dtor -Wredundant-decls -ffat-lto-objects' \
					for all 2 build commands",
					// But no '-Wno-literal-suffix -Wno-unused-local-typedefs'.
				+ "option '-pedantic-error'" @ "%YFramework build command"
			);
			/ DLD "extracted common options"
			),
			(
			/ "ignored by options '-xid,alternative -xid,data -xid,include'"
				$dep_from "subdirectory ignorance";
			* $comp "'alternative' directory wronly compiled into library \
				%YFramework" $since b474
			),
			+ DLB "parameter support"
			+ "option echo"
		)
	),
	/ %YBase $=
	(
		/ 'using raw_tag = empty_base<>;' @ %YBase.YDefinition
			-> "empty struct %raw_tag",
			// Otherwise the constructor of %YSLib::Thumb::UI using this type \
				would make GCC 4.9.0 or GCC 4.9.1 crash (segmentation fault).
		/ %YStandardEx $=
		(
			* "wrongly ignored predictor %comp" @ "function template \
				%begins_with" @ %YStandardEx.String $since b519,
				// Though default behavior is not affected.
			+ %Concurrency
				$= (+ "class %thread_pool");
				// Currently only hosted implementation of G++ and libstdc++ \
					is supported.
		),
		/ DLD %YTest $=
		(
			* "missing UTF-8 BOM" @ "header %test.h" $since b519,
				// Since there is "©" which is non representable by ANSI \
					codepage, Visual Studio would issue a warning.
			* "missing UTF-8 BOM" @ "header %timing.h" $since b319,
			/ $doc "Doxygen group definition" @ %Timing >> %Test
		)
	),
	/ $dev $build "toolchain and library using" @ "platform %MinGW32"
		$dep_from %YBase.YDefinition $=
	(
		// Libraries have to be rebuilt, otherwise the LTO version would be \
			incompatible, as: "lto1.exe: fatal error: bytecode stream \
			generated with LTO version 2.2 instead of the expected 3.0".
		^ $dev $build $re_ex(b453) "MinGW[gcc version 4.9.1 (Rev1, Built by \
			MSYS2 project)] mingw32/mingw-w64-i686-gcc-4.9.1-1"
			~ "MinGW[gcc version 4.8.2 (Rev7, Built by MSYS2 \
			project)] mingw32/mingw-w64-i686-gcc-4.8.2-7";
			@ "platform %MinGW32",
			// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
				Exceptions implementation: Dwarf2.
		/ "recompiled library %FreeType",
		/ "recompiled library %FreeImage" $=
		(
			/ "updated base library 3.16.0" ~ "3.15.4";
			/ "merged old modification",
			* "wrong location of file %GetType.cpp" $since b431
				// Thus ignored by build script since it used precise list of \
					files.
				$= ("%Source/GetType.cpp" >> "%Source/FreeImage"),
			/ "updated file %Makefile.mingw as base version 3.16.0" $=
			(
				/ 'LIBRARIES = -lwsock32 -lws2_32' -> 'LIBRARIES = -lws2_32',
				+ '-DDISABLE_PERF_MEASUREMENT' @ "%CFLAGS"
			),
			/ 'VER_MINOR = 15.4' -> 'VER_MINOR = 16.0' @ "file %Makefile.srcs",
			^ "libpng-1.6.12 with old libpng-1.6.3 standard configuration \
				header file %Source/LibPNG/pnglibconf.h" ~ "libpng-1.6.10",
			^ "libjpeg-turbo 1.3.1 with old configuration headers"
				~ "libjpeg-9a"
		),
		/ @ "Code::Blocks projects" $=
		(
			+ '-ffat-lto-objects' @ "release configurations",
				// See $2014-07 @ %Documentation::Workflow::Annual2014.
			/ "made '-flto=jobserver' only effective in release configurations"
		)
	),
	/ "updated %Readme.zh-CN.txt with information test project and %SHBuild",
	/ @ "made sure 'inline' is not omitted for all \
		extension-namespace-definition of inline namespaces" $effective
		%platform_ex::Windows @ %'YCLib_(MinGW32)',
		// See %Documentation::CommonRules @5.5.8.3. Clang++ still complains \
			about it.
	/ DLB "workaround possible ambiguity" $effective @ %YFramework.YSLib $=
	(
		// Clang++ complains about them.
		/ $effective @ %Service.YPixel $=
		(
			/ "explicitly specified functional notation of conversion to \
				'_tAlpha'" @ "function templates %CompositeComponentOver"
				@ "class templates and specializations %(GPixelCompositor,
				GPixelCompositor<1, _vSrcAlphaBits>, GPixelCompositor<1, 1>, \
				GPixelCompositor<_vDstAlphaBits, 1>)",
			/ "explicitly specified functional notation of conversion to \
				'_tSrcAlpha'" @ "function templates %CompositeComponentOver"
				@ "class templates and specializations %(GPixelCompositor, \
				GPixelCompositor<_vDstAlphaBits, 1>)"
		),
		/ "explicitly specified functional notation of conversion to 'HSL'"
			$effective @ "functions %(HSLToColor, RollColor)" @ %UI.YStyle
	),
	/ DLD %YReader $=
	(
		* "wrong use of 'yconstexpr' on closure object"
			@ "constructor %SettingPanel" @ %ReaderSettingUI $since b390,
		/ %ShlExplorer $=
		(
			* "missing explicit conversion on enumerator of scoped enumeration"
				$since b410,
			- "unused redundant internal constant object"
		)
	),
	* $dev $build "wrong format string used in call of function '*printf'"
		@ "strict ISO C++ code compatibility" $=
	(
		* @ ("function %InitializeSystemFontCache" @ %Helper.Initialization
			$since $before b132, ("member function %MemoryList::Print"
			@ %YSLib.Adaptor.YNew $since b173) $effective @ %YFramework
			// The %std::allocator uses %std::size_t as %size_type, which is \
				%size_t in ISO C standard library and fit for '%zu' for
				%fprintf.
			$= (/ "format" ^ '%zu' ~ '%u'),
		* @ "function %OnExit_DebugMemory_print" @ %Main $since
			$orig (@ "function %OnExit_DebugMemory" @ %platform.DS.Main) b300
			$= (/ "format" ^ '%zu' ~ '%i'),
		/ $effective %YReader $=
		(
			* @ "member function %HexViewArea::Refresh" @ %HexBrowser $since
				b253
				$= (/ "format" ^ '%tX' ~ '%X'),
			* @ "member function %ReaderBox::UpdateData" @ %ShlReader $since
				b271 $=
			(
				/ "format" ^ '%2zu' ~ '%2u',
				/ "argument" ^ "explicitly cast to %std::size_t"
			)
		)
	),
	* DLB "wrong implementation due to ill-formed code when %std::size_t is \
		not alias of 'unsigned' causing no suitable %min found"
		@ (%YFramework.YSLib.Service.TextFile $since b290,
		%YReader.Shells $since b183)
	// It would fail to compile for Win64.
	/ "macro %YCL_MinGW32" => "%YCL_MinGW"
		// See $2014-07 @ %Documentation::Workflow::Annual2014.
),

b519
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ DLD "simplified input boundary calculation" @ "DS host window"
				@ "platform %Win32";
			- "member function %Host::Window::GetInputBounds" @ %HostWindow
		),
		/ %YSLib $=
		(
			/ DLD "implementation" @ "constructor %Typeface" @ %Adaptor.Font
				!^ "%platform::yprintf",
				// Error code is now embedded to the description string in \
					exception object.
			/ DLD @ "functions %(PlotHLineSeg, PlotVLineSeg)" @ %Service.YDraw
				$=
			(
				/ "implementation of screen metrics" ^ "%SPos" ~ 'auto',
					// All arguments of %RestrictInInterval should be the same \
						type.
				/ $revert(b517) !^ "cast to 'SDst' for comparison"
					// To eliminate [-Wsign-compare].
			),
			/ %UI $=
			(
				/ DLD "implemented function %DrawTrackBackground" @ %Scroll
					^ "cast to 'SPos'",
				/ @ "member function %TextList::LocateViewPosition" @ %TextList
					$=
				(
					* "wrong value restricted when view height is less than or \
						equal to the height" $since b261;
					* $comp "wrong value restricted when view height is zero"
						$orig (@ %UI.YMenu $since b203)
				)
			),
			/ @ "function template %RestrictInInterval" @ %Core.YCoreUtilities
				$dep_from %(Service, UI) $=
			(
				/ "all 2 parameters 'int'" -> 'const _type&';
				* $comp "possible undesired implementation-defined truncation \
					of value when '_type' being instantiated as unsigned type"
					$since b263
					// To eliminate [-Wsign-compare].
			)
		),
		/ "implemented debug screen directly only for platform %DS"
			^ "%YConsoleInit" ~ "call of %(YDebugSetStatus, YDebugBegin) on \
			without platform restriction" @ ("function %HandleFatalError"
			@ %Helper.Initialization, "main function" @ %Main
			"function %ShowFatalError" @ %DSMain) $dep_from %YReader.Shells,
			$dep_to "removal of DS debug call"
			// Actually only on DS is valid.
		/ %YCLib.Debug $=
		(
			(
			// Log class is preferred.
			- "function %yprintf" $dep_from %YSLib.Adaptor.Font,
			- "all 2 functions %YDebug",
			- "function %YDebugGetStatus",
			- "functions %(YDebugSetStatus, YDebugBegin)"
				$dep_from "removal of DS debug call"
			),
			/ "member function %Logger::SetWriter" => "%SetSender"
		),
		* DLD "missing specifying return type" @ "lambda expression with \
			multiple return statements" @ "member function \
			%GUIApplication::DealMessage" @ Helper.GUIApplication $since b481
	),
	- 'using platform::YDebugSetStatus;' @ %YReader.Shells,
	/ DLD "all 'return false' out of marco definition with no 'auto' deduction"
		-> 'return {}',
		// Return type of these functions are already specified.
	(
	/ %Documentation $=
	(
		+ %Dependencies;
		/ "dependencies descriptions" %Designation >> %Dependencies
	);
	/ $doc "updated build notice" @ "%Readme.zh-CN.txt"
		$= (+ "runtime dependency description")
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "strict ISO C++ code compatibility" $since b352
				$= (* "missing including <new>" @ %Any),
				// The program temporarily is not ill-formed for libstdc++'s \
					<memory> including <new>.
			/ @ %String $=
			(
				+ "3 function templates %(string_begin, string_end)",
				(
				/ "all 2 function templates %start_width" => "%begins_with";
				* "spelling error" @ %String $since b450
				),
				/ @ "function templates %string_length" $=
				(
					/ DLD "dispatched with class templates to be able to \
						distinguish array lvalues from pointer type arguments";
					+ "overloading for array types"
						// Now it is based on the length of array but not \
							compared like NTCTSs.
				);
				/ "all function templates implementation" ^ ("%string_begin"
					~ "%begin", "%string_end" ~ "%end"),
					// The behavior of prefix comparing algorithm is now \
						adjust to the same as %boost::starts_with for array \
						types.
				/ DLD "prefix comparing" ^ "%std::equal" %String;
					// See $2014-07 @ %Documentation::Workflow::Annual2014.
			),
			* DLD "wrong specifier order" @ "function templates %get"
				@ "class templates %variadic_param" @ %Functional $since b412,
				// See %Documentation::CommonRules @5.5.10.
			* "comparing for signed 'wchar_t'" @ "function %iswprint"
				@ %CWideCharacterType $since b513
				// To eliminate [-Wsign-compare].
		)
		+ %Test @ %YTest $=
		(
			+ "function template %expect",
			+ "class %group_guard"
		),
	),
	+ %Test $=
	(
		+ %YBase $dep_from %YStandardEx.YTest $=
		(
			+ "2 test cases for %ystdex::transform_n",
			+ "11 test cases for %ystdex::(string_length, begins_with, \
				ends_with)" $dep_from %YBase.YStandardEx.String
		);
		+ "test script %test.sh"
	),
	/ %Tools.SHBuild.Main $=
	(
		/ "implemented printing" ^ "%YSLib::Logger"
			~ "global character streams",
		+ "option '-xlogfl,'",
		+ "colored output"
	)
),

b518
(
	/ DLD "updated header search paths" @ "Visual C++ projects" $=
	(
		/ "missing %Android inline module and %YBase paths"
			@ "project %YFramework_Android" $since b492,
		/ "missing %DS inline module path" @ "project %YFramework_DS" $since
			b431,
		/ "missing %Android inline module path" @ "project %YFramework_MinGW32"
			$since b492,
		/ "simplified and reordered paths",
		- "all '$(NMakeIncludeSearchPath)'"
			// NMake was already useless since Visual Studio 2010.
	),
	/ %YFramework $=
	(
		/ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			+ "member function %WindowReference::GetCursorLocation",
			/ @ "class %HostWindow" $=
			(
				+ 'using WindowReference::GetCursorLocation'
					$dep_from "%WindowReference::GetCursorLocation",
				+ "virtual function %MapPoint",
				- $revert(b427) "data member %BoundsLimited" $dep_from
					"removal of bounds limit"
			),
			* "missing 'YF_API'" @ "function %BindDefaultWindowProc" $since b518
		),
		/ %Helper $=
		(
			/ DLD "simplified implementation" @ "member function \
				%Environment::MapCursor" @ "platform %Win32" @ %Host
				$dep_from %'YCLib_(MinGW32)'.Win32GUI,
			- "simplified DS window input boundary implementation"
				@ "platform %Win32" $dep_from "%HostWindow::MapPoint"
				@ %'YCLib_(MinGW32)'.Win32GUI $dep_to "removal of bounds limit",
			/ "class %Host::Window" @ %HostWindow $=
			(
				/ @ "member function %GetInputBounds" $=
				(
					/ "return type" -> "%YSLib::Drawing::Rect"
						~ "%pair<YSLib::Drawing::Point, YSLib::Drawing::Point>",
					- 'ynothrow'
				),
				/ @ "platform %Win32" $=
				(
					* "missing transforming coordinate for client area"
						@ "member function \
						%UpdateCandidateWindowLocationUnlocked" $since b512,
					+ "virtual function %UpdateTextInputFocus",
					/ "member function %UpdateCandidateWindowLocation kept \
						away input boundary transformation"
				)
			),
			/ @ "platform %Win32" $=
			(
				/ @ "class %InputManager" @ %InputManager $=
				(
					* "missing transforming coordinate for top level widget"
						"function %DispatchInput" @ %Helper.InputManager
						$since b512,
					/ DLD "implementation" @ "class %InputManager"
						^ "'UI::IWidget*' as text input focus cached pointer"
						~ 'void*',
					/ DLD "simplified text input focus update"
				),
				+ DLD "DS window of text input focus transformation"
					$dep_from "%Host::Window::UpdateTextInputFocus"
			);
		),
		* "wrong blue value initialized" @ "constructor %ARGB" @ %YCLib.Video
			$since b507,
		/ "member function %TextBox::ExportCaretPosition" @ %TextBox @ %YSLib.UI
			=> "%ExportCaretLocation"
	)
	- "name pollution list" @ %Documentation::Definitions,
	/ $doc "updated build notice" @ "%Readme.zh-CN.txt",
	/ $dev $build "updated makefile" @ "platform %Android" $=
	(
		/ "updated %ANDROID_SDKVER value" -> "20.0.0" ~ "19.0.3",
			// This is the Android SDK Build-tools version.
		/ "updated zipalign path" @ "target $(OUTPUT_FINAL)"
			// The new SDK moved zipalign to the Build-tools.
	)
),

b517
(
	(
	/ DLD "template parameter %_tIter" @ "constructor template \
		%transformed_iterator" => "%_tIterOrig" @ %YBase.YStandardEx.Iterator;
	/ DLD "all template parameters %_tIterator" => "%_tIter" $effective
		@ %YBase.YStandardEx.(Iterator, AnyIterator);
	),
	/ %YBase.YStandardEx $=
	(
		/ %Algorithm $=
		(
			+ "function template %transform_n",
			* "missing header for %is_pod" $since b254
		),
		+ "function template %exchange" @ %Utilities
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				/ %TextBox $=
				(
					/ @ "class %TextPlaceholder" $=
					(
						+ "captured control pointer check"
							@ "function %BindByFocus",
						+ "function %GetCapturedPtr"
					),
					* $lib "platform neutrality" @ "types %(SPos, SDst)"
						@ "member function %TextBox::GetCaretPosition" $since
						b484 $dep_to "screen measurement platform neutrality"
						// The calculation of width accidentally depended on \
							result of signed integers, which would turned to \
							be unsigned when the rank of %SDst is the greatest \
							value in the expression, e.g. 32-bit unsigned int \
							for platform %Win32.
				),
				* $lib "platform neutrality" @ "types %(SPos, SDst)"
					@ "member function %TextList::DrawItems" @ %TextList
					$since b346 $dep_to "screen measurement platform neutrality"
			),
			* $lib "platform neutrality" @ "types %(SPos, SDst)" @ %YSLib $since
				$before b132 $dep_to "screen measurement platform neutrality" $=
			(
				// To eliminate [-Wsign-compare].
				* $design "signed and unsigned integer comparison"
					@ (("function %PutCharBase" @ %CharRenderer $since b372,
					"function %BlitBounds" @ %YBlit $since b438, "class \
					%TextRegion" $since $before b132, "functions %(PlotHLineSeg,
					PlotVLineSeg)" @ %YDraw $orig (@ %Core.YGDI $since b135))
					@ %Service, "member function %TextList::InvalidateSelected"
					@ %UI.TextList $since b268),
				* "missing explicit template parameter" @ "member function \
					%TextBox::GetCaretPosition" @ %UI.TextBox $since b484;
			),
			/ "checked screen position value for Win32 API"
				^ "%YSLib::CheckPositiveScalar<SPos>"
				@ %'Helper_MinGW32'.Win32GUI,
		),
		/ %YCLib.Video $=
		(
			+ "static assertions for screen measurement types",
				// Now integer types are explicitly required.
			/ "alias-declarations of %(SDst, SPos)" ^ "%(long, unsigned long)"
				~ "%(std::int16_t, std::uint16_t) respectively"
				@ "%platform Win32" $dep_from "screen measurement platform \
				neutrality" $dep_to "32-bit screen measurement types"
		),
		/ DLD "simplified implementation by omitting explicit template argument"
			@ "member function %Environment::MapCursor" @ "%platform Win32"
			@ %Helper.Host $dep_from "32-bit screen measurement types"
	)
	/ %YReader $=
	(
		* "no effect when check box unchecked" @ %ShlExplorer $since b516,
		* "platform neutrality" @ "types %(SPos, SDst)" @ "member function \
			%HexViewArea::Refresh" @ %HexBrowser $since b253
	),
	* DLD "missing update header search paths"
		@ "Visual C++ project %YFramework_MinGW32" $since b493,
),

b516
(
	/ %YFramework.YSLib $=
	(
		/ %UI.TextBox $=
		(
			/ @ "class %TextBox" $=
			(
				- "collapsing" @ "handling event %LostFocus",
				* "wrong collapsing behavior when text selected" $since b514,
					// It wrongly used the direction determined by selection \
						rather than by cursor position. And now it is clear \
						that no %CollapseCaret should be called.
				(
				+ "data member 'ucs4_t MaskChar = ucs4_t();'";
				/ "displayed with text determined by %GenerateDisplayedResult \
					if nonnull" @ "functions %(Refresh, GetCaretLocation, \
					GetCaretPosition)" $dep_from %Core.YString
				),
				(
				+ "data member 'size_t MaxLength{-1};";
				/ "restricted %Text length with %MaxLength"
					@ "function %ReplaceSelection"
				)
			),
			+ "class %TextPlaceholder"
		),
		/ %Core $=
		(
			/ @ "class template %GHEvent" @ %YEvent $=
			(
				/ "supported null equality comparing" @ "comparer";
				+ "null pointer as default argument for 1 parameter \
					constructor as fit for %DefaultConstructible requirement",
				+ "using-declarations %BaseType::operator bool"
			),
			+ "binary %operator* for %String" @ %Core.YString
		),
		- $revert(b419) DLB "special member functions as workaround for G++ \
			4.7.1" @ "class %Font" @ %Adaptor.Font;
	),
	/ @ "class %ShlExplorer" @ %YReader.ShlExplorer
		$dep_from %YFramework.YSLib.UI.TextBox $=
	(
		+ "protected 'TextPlaceholder tpDefault{};'";
		+ "mask character, max length and text placeholder tests for text box"
	)
),

b515
(
	/ @ %Tools $=
	(
		/ @ %SHBuild $=
		(
			/ @ "(build.sh, self-host.sh)" $=
			(
				/ DLD "separated flags",
				/ $build "removed dependencies on installed files" $=
					// For convenient implementation of bootstrap in future.
				(
					^ DLB "header files in repository" ~ "installed headers",
					^ DLB "source files in repository" ~ "installed libraries"
				),
				^ $build "static linked builds",
				+ DLB '-Wl,--gc-sections' @ "linker flags"
			),
			/ "include directories" -> "project directories"
				~ "installed directories" @ "SHBuild-YSLib.sh",
			+ "%IntException handling" @ %Main $since b477
				// The concrete value is only for internal use.
		),
		+ "install-headers.sh",
			// Testing script to copy/update headers in default location \
				(/usr/include) using rsync. Currently it would overwrite 3rd \
				party headers.
	),
	/ %YFramework $=
	(
		* $build "run 'SHBuild-YSLib' failed" $since b492
			$= (* "wrong '#error' directive" @ "!YCL_Android"
				@ (%'Helper_(Android)' $since b502, %'YCLib_(Android)'
				$since b492)),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/%YDraw $=
				(
					* $revert(b514) "wrong assertion"
						@ "non-inline function %FillRect",
					- "redundant assertion for context"
						@ "functions %(DrawHLineSeg, DrawVLineSeg, DrawLineSeg)"
						// This assertion should be hold by underlying pointer \
							nonnull assertion properly.
				),
				+ "parameter 'const Padding& = DefaultMargin'"
					@ "all 2 constructors" @ "class %TextState" @ %TextBase
			),
			/ %UI $=
			(
				* "assertion failure" @ "filling widget background across \
					top-level boundary" $since b514 $dep_from
					"function %FillRect" @ %Service.YDraw,
					// The function templates %FillRectRaw should be \
						boundary-safe because of %Blit.
				(
				* "missing ensuring clip area be subset of target boundary"
					@ "function %BufferedRenderer::Validate" @ %YRenderer $since
					b488;
					// Since %Documentation::YSLib @5.2.1.3 guarantees the \
						clip area can be directly use, it should be ensured.
				* $comp "assertion failure" @ "drawing widget background \
					across top-level boundary" $since b452
					// The function templates %DrawRect and other %'Draw*' \
						might cause the failure.
				),
				/ "default value of %ActiveBorder color" -> '{86, 157, 229}'
					~ 'ColorSpace::Aqua' @ "constructor %Palette" @ %YStyle,
				/ @ "class %MLabel" $=
				(
					(
					+ "functions %GetAlignedPenOffset";
					/ DLD "simplified function %DrawText"
					),
					/ "parameter list" @ "virtual function %DrawClippedText"
						-> '(const Graphics&, const Rect&, Drawing::TextState&)'
						~ '(const PaintContext&, Drawing::TextState&)'
				),
				/ @ "class %TextBox" @ %TextBox $=
				(
					(
					/ "function %TextBox::DrawClippedText",
					+ "protected data member 'Point ptPenOffset'";
					* "missing cursor position adjust with text alignment"
						$since b485
					),
					/ DLD "reduced invalidation area"
						@ "%InvalidateDefaultCaret"
				)
			),
			(
			/ DLD "parameter %bounds" @ "function %DrawClippedText"
				@ %Service.TextRenderer => "%r";
			/ DLD "parameter %mask" @ "functions" => "%bounds" $effective
				@ %(Service.TextRenderer, UI.(Label, TextList, Menu, TextBox))
				// "%mask" is for any complex area being blending or not \
					clipping.
			)
		)
	)
),

b514
(
	/ %YBase.YStandardEx.CCharacterType $=
	(
		(
		+ "functions %iswspace";
		/ "implemented functions %iswspace" ^ "%ystdex::iswspace"
			~ "%std::iswspace"
		),
		* DLD "wrong guard macro" $since b513,
		+ "%yconstfn function %isdigit"
	),
	* $comp "several characters still unprinted" @ "platform %Android" $since
		b492 $dep_from "%ystdex::iswspace" @ %YBase.YStandardEx.CCharacterType,
		// Because of broken Unicode support on Android NDK r9, some \
			characters like “稍”(U+7A0D) and “选”(U+9009) still missed by \
			wrongly returning '8' from 'iswspace' calls.
	/ $doc "extended file name pattern of README DOCUMENTS" @ "%LICENSE.TXT",
	/ %YFramework $=
	(
		/ @ "namespace %Windows" @ %'YCLib_(MinGW32)'.Win32GUI $=
		(
			+ 'using MessageMap = std::map<unsigned, \
				YSLib::GEvent<void(::WPARAM, ::LPARAM)>>;'
			/ DLD "simplified data member declaration %HostWindow::MessageMap"
		),
		/ @ "member function %Host::Window::BindDefaultWindowProc" @ %HostWindow
			-> "function %BindDefaultWindowProc" @ %'YCLib_(MinGW32)'.Win32GUI
			$dep_from %'YCLib_(MinGW32)',
		/ @ "enum %Categtory" @ %YCLib.Keys $=
		(
			* $revert_ex(b490) "underlying type" $since b489
				$= (/ 'KeyIndex' -> 'std::uint_least32_t'),
			* "key category wrongly overlapped for value greater than enumerator
				%Lock" $since b489
				// Though they should not be determinately mutually exlusive,
					it is only safe to seperate them in different kinds for \
					bitand operation.
		),
		/ %YSLib $=
		(
			* "missing updating key state when external input focus is not null"
				@ "member function %GUIState::UpdateChar" @ %YGUI $since b511,
			/ @ "class %TextBox" @ %TextBox $=
			(
				* $comp "no effect for Shift with navigation key"
					@ "class %TextBox" $since b489 $dep_from %YCLib.Keys,
					// Though the effect is not quite right, see below.
				(
				* $comp "potentionally wrong behavior with modifier key held"
					$since b511 $dep_from %YGUI;
					// Wrong key held state updated so the initial delay would \
						be ignored. Note if the bug of key category exists, \
						there would actually be no effect.
				+ "functions %RestoreCaretTimer;
				/ "restored caret timer on modifying caret position or \
					collapsing caret"
				),
				/ "function %UpdateCaret" => "%ExportCaretPosition",
				/ "function %CollapsedAndUpdateCaret" => "%CollapseCaret"
			),
			+ "boundary check assertion" @ "non-inline function %FillRect"
				@ %Service.YDraw
		)
	)
),

b513
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "traces" @ "member function %StyleMap::Switch" @ %YStyle $=
			(
				+ "quote marks around style name",
				* "missing space when default style found" @ "2nd trace"
			),
			* "missing some characters to print" @ %Service.TextRenderer
				@ ("%platform %MinGW32" $since b296,
				"platform %Android" $since b492) $=
				// For example, “←”(U+2190) and “⑨”(U+2468) on Windows, and \
					some more characters missing on Android 2.3.1.
			/ $design "implementation" ^ "%ystdex::iswgraph" ~ "%std::iswgraph"
				$dep_from %(YCommon, YBase.YStandardEx.CWideCharacterType)
		),
		* $design "spelling error" @ "trace string" @ "constructor %NativeHost"
			@ %'Helper_(Android)'.AndroidHost $since b504
			$= (/ 'Wating' -> 'Waiting'),
		/ %Helper $=
		(
			* "missing key state indirection" @ "platform %Android" @ %Input
				$since b492,
				// So key state tracked would be wrong in \
					%Helper::InputManager after touching down.
			* "wrong desktop pointer selected to response"
				@ "member function %ShlDS::OnGotMessage" $since b502,
				// Though displaying was normal, the input had not been sent \
					to the right place.
			* "missing calculating with hosted window input bounds"
				@ "platform %Android"
				@ "member function %Environment::MapCursor" @ %Host $since b509
		),
		* "function %IsPrint" @ %YCommon $since b512
			$= (/ $design "implementation" ^ "%ystdex::iswprint" $dep_from
				%YBase.YStandardEx.CWideCharacterType)
	),
	/ "example command line" @ %Tools.CreationTimeManager.Readme,
		// Hidden files should not be ignored generally. So added '/A' for \
			'DIR'.
	/ %YBase.YStandardEx $=
	(
		+ %CCharacterType $=
		(
			+ "%yconstfn functions %((iscntrl_C0; iscntrl_ASCII, \
				(iscntrl_ISO8859_11; iscntrl_ISO8859_1; isprint)), iscntrl_C1)",
			+ "%yconstfn functions %(isprint_ASCII, isprint_ISO8859_1, isprint)"
		),
		+ %CWideCharacterType
			$= (+ "functions %(iswprint, iswgraph)")
	),
	* $comp "missing rendering left and right arrows on buttons"
		@ %YReader.ShlTextReader $since b299 $dep_from %YFramework.YSLib.Service
),

b512
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				(
					/ @ "class %GUIState" @ %YGUI $=
					(
						+ "data member %CaretLocation"
						/ "clear caret location state" @ "function %Reset",
					);
					/ @ "class %TextBox" @ %TextBox $=
					(
						(
						+ "function %GetCaretLocation";
						/ DLD "simplified implementation"
							@ "static function %InvalidateDefaultCaret"
						),
						+ "functions %(UpdateCaret; CollapsedAndUpdateCaret)";
						/ "updated caret location to GUI state after caret \
							position changes"
					)
				),
				+ "trace" @ "function %InitExStyles" @ %ExStyle,
				+ "trace" @ "member function %StyleMap::Switch" @ %YStyle
			),
			/ %Adaptors $dep_from %YCLib.YCommon $=
			(
				+ 'using platform::IsPrint;' @ "namespace %YSLib::Text"
					@ %YTextBase,
				- $revert($since $before b132) "special process for '\t'"
					@ "member function %Font::GetAdvance" @ %Font
					// The width of tab character should be determinated in \
						concrete contexts.
			),
			^ "%IsPrintf" ~ "%std::iswprint" $dep_from %Adaptor.YTextBase
				$dep_to "print character check"
		),
		/ %Helper $=
		(
			/ @ "platform %Win32" @ "class %InputManager" @ %InputManager $=
			(
				+ DLD "text input focus pointer cache";
				* $comp "missing clearing coposite string after switch text \
					input focus" $since b511,
				/ @ "function %DispatchInput" $=
				(
					/ "supported hosted IME following text input focus"
						$dep_from "hosted caret",
					/ DLD "put host input process at the end" @ "implementation"
				),
				+ "caret location caching; %UpdateCandadateWindowLocation",
				* $comp "'\t' wrongly handled for text input" $since b511
					$dep_from "print character check"
					// Now correctly as no-op. Press tab key in text box is \
						with no action.
			),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				(
				+ DLD "fake caret to support IME candidate window locating";
				+ "function %UpdateCandidateWindowLocation";
				+ "window caret location caching";
				+ "support of caret update by moving hosted window",
					// Currently it works on Windows 7 but not on Windows 2012 \
						R2.
				+ "support of caret update on composing the input string";
					// Ditto.
				) $dep_to "hosted caret",
				+ "function %BindDefaultWindowProc";
				/ DLD "simplified implementation" @ "constructor"
					^ "function %BindDefaultWindowProc"
			),
			^ DLD "macro %YFM_DS_Helper_Shell_DS" @ %Shells
		),
		/ DLD "simplified implementation" @ "all 5 inline functions"
			@ "%CHRLib.CharacterMapping" ^ "%(PDefH, ImplRet),
		+ "(2 function, 1 template) %IsPrint" @ %YCLib.YCommon
	),
	/ DLD "all '::UINT'" -> 'unsigned',
	+ DLB "dynamic library dependency %imm32" @ "DLL configurations"
		@ "Code::Blocks project %YFramework_MinGW32",
	+ DLB "static library dependency %imm32" @ "non-DLL configurations"
		@ "Code::Blocks project %YSTest_MinGW32",
	/ %YReader $=
	(
		^ "%IsPrintf" ~ "%std::iswprint" @ %DSReader $dep_from
			%YFramework.YAdaptor.YTextBase,
		+ "function %FetchDefaultShellDirectory;
		/ "default argument" @ "class %ShlExplorer"
			-> 'FetchDefaultShellDirectory()'
			~ 'IO::FetchCurrentWorkingDirectory()'
			// For Android it is the data directory, since access the working \
				directory is possibly to be rejected. For other platforms it
				is unchanged.
		+ "debug trace" @ "constructor %ShlExplorer" @ %ShlExplorer;
	)
),

b511
(
	/ %YFramework $=
	(
		/ @ "platform %Win32" @ %Helper $=
		(
			/ "data member %RawMouseButton" @ "class %Environment"
				@ %Host >> ("class %Host::Window" @ %HostWindow),
			/ DLD "%WM_INPUT handling" @ "window procedure" >> ("constructor"
				@ "class %Host::Window" @ %HostWindow),
			/ @ "class %Host::Window" @ %HostWindow $=
			(
				+ DLD "private input state";
				+ "%WM_CHAR handling which save the Unicode character to \
					private state",
				+ "function template %AccessInputString"
			),
			/ "supported cross-thread text input" @ "platform %Win32"
				@ "member function %InputManager::DispatchInput" @ %InputManager
				$dep_from %YSLib.UI.YGUI
		),
		/ %YSLib.UI $=
		(
			/ @ %YGUI $=
			(
				+ "2 functions %CallInputEvent",
				/ @ "class %GUIState" $=
				(
					+ "data member %ExteralTextInputFocusPtr";
					/ "clear character input states"
						@ "functions %(Reset, CleanupReferences)",
					/ "function %SendInput" $=
					(
						+ "various overloaded functions",
						/ "alternated behavior when external text input focus \
							is set"
							// Call %TextInput event directly without calling \
								%UpdateChar. Note the old behavior is also \
								dropped. Call %CallInputEvent instead to get \
								the old behavior.
					),
					/ "directly return without performing any operation when \
						external text input focus is set"
						@ "function %UpdateChar"
				)
			),
			/ %TextBox $=
			(
				/ "set and clear text input focus with caret animation"
					@ "class %Caret" ^ "%GUIState::ExteralTextInputFocusPtr",
				/ @ "constructor %TextBox" $=
				(
					/ DLD "%SendInput call",
					/ "handled space character only when external text input \
						focus is not set",
					+ "invalidation after replacing text" @ "handler"
						@ "event %TextInput",
					/ "explicitly performed no-op for horizontal tab character"
						// To avoid width problem.
				)
			)
		)
	)
),

b510
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI $=
			(
				* "missing resetting view" @ "constructor" @ "listbox" $since
					b193 $dep_to "missing resetting listbox view",
					// This would cased abnormal state immediately after \
						initialization of an object of %ListBox or derived \
						types.
				(
				+ "member function %GUIState::SendInput" @ %YGUI;
				/ DLD "simplified constructor %TextBox"
					^ "%GUIState::SendInputChar"
				)
			),
			/ %Core $=
			(
				+ "constructor template %String with initializer list parameter"
					@ %YString,
				+ "unexpected exception logging" @ "!defined %NDEBUG"
					@ "member function %Application::OnGotMessage"
					@ %YApplication $dep_from %Adaptor
			),
			+ "using %platform::(Logger, FetchCommonLogger)"
				@ %Adaptor.YAdaptor
		),
		/ %Helper.ShellHelper
		(
			/ "debug trace" @ "class %DebugTimer"
				^ "%YTraceDe, %Debug" ~ "%std::fprintf";
				// Not display by default for %Debug priority.
			* "possible interleaved multithreaded timer output"
				@ "platform %MinGW32" $since b378
		),
		/ "class %Logger" @ "hosted platforms" @ %YCLib.Debug $=
		(
			* "missing explicitly %std::flush call at end"
				@ "function %DefaultSendLogger" $since b498
				// Though nothing to do with default %stderr stream, once the \
					buffer is set, it might go wrong.
			* "possible interleaved logging for exception" $since b498
		)
	),
	* $comp "invalid invisible or wrongly rendered vertical scrollbar state"
		@ %YReader.BookmarkUI $since b392 $"missing resetting listbox view" =
	(
		* "assertion failed after scrolling in empty list"
			@ "debug configurations" $=
		(
			* "scrolling by dragging",
			* "scrolling by event %CursorWheel" $since b443
		),
		* "wrong state after scrolling" @ "release configurations",
	),
	/ DLD "simplified implementation" ^ "initializer list"
		~ "explicit %ucs2string construction" $effective @ ("friend function \
		%to_string for %Path", "member function %Path::Parse"
		@ %YFramework.YSLib.Service.FileSystem $dep_from
		%YFramework.YSLib.Core.YString,
	/ DLD "all 'char()' which can be distinguished to actual type" -> '{}'
		$effective %(YCLib.Keys, NPL.Lexical)
),

b509
(
	/ "implementation" @ "macro %YB_NORETURN" @ %YBase.YDefinition
		^ '[[noreturn]]' @ 'YB_IMPL_GNUCPP >= 40800',
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ DLD %YGDIBase $=
				(
					- "explicit 'yconstfn'" @ "explicitly defaulted default \
						constructor" @ "class %Rect",
					/ @ "class template %GBinaryGroup" $=
					(
						/ DLD "implemented functions %operator(-, +=, -=)"
							^ "macros %(PDefHOp, ImplRet)",
						/ DLD "implemented all 2 functions %GetRef"
							^ "macros %(PDefH, ImplRet)"
					)
				),
				/ DLD @ "class template %GEvent" @ %YEvent $=
				(
					/ "implemented all non-overloaded operator functions \
						with explicitly declared 'inline'"
						^ "macros %(PDefH, ImplRet)",
					/ "implemented all overloaded operator functions with \
						explicitly declared 'inline'"
						^ "macros %(PDefHOp, ImplRet)"
				)
			),
			* "wrong implementation" @ "all 2 member functions \
				%MIMEBiMapping::operator-=" @ Service.ContentType $since b450,
				// These member functions wrongly performed insertion instead \
					of deletion.
			/ %UI $=
			(
				/ $revert(b494) "functions %(SetLocationOf, SetSizeOf; $comp \
					SetBoundsOf) would trigger events even if the parameter \
					value is equal to the old value" @ %YWidget
				* $comp "missing listbox scrollbars sometimes" $since b494
					// For example, switching file list back to make scrollbar \
						be shown.
			)
		),
		* "no effect on offset argument"
			@ "member function %ScreenRegionBuffer::UpdateTo" @ %Android
			@ %'Helper_(Android)'.Android $since b499
			// All offset values were treated as 'Point()'.
		/ %Helper $=
		(
			* "spelling error" @ %Initialization $since b303
				$= (/ "%InitializeEnviornment" => "%InitializeEnvironment"),
			(
			+ "function %MapCursor" @ "class %Environment" @ %Host;
			/ DLD "simplified implementation" @ "member function
				%InputManager::Update" @ 'defined(YF_Hosted)' @ %InputManager
			)
		)
	),
	/ DLD "implementation as possible when no return type are deduced"
		^ "braced-init-list" ~ "%make_pair" $=
	(
		@ "function template %search_map" @ %YBase.YStandardEx.Container,
		/ %YFramework.YSLib $=
		(
			@ "member function %Palette::GetPair" @ %UI.YStyle,
			@ "function %AddMIMEItems" @ % Service.ContentType
		),
		@ "constructor %ShlExplorer" @ %YReader.ShlExplorer
	),
	/ DLD "implementation when appropriate" ^ "container emplacing"
		~ "insertion" $=
	(
		// Since G++ 4.8.2 has supported all of them.
		^"member function %map::emplace" ~ "%(make_pair, map::insert)"
			@ "member functions" $effective @ %YFramework,
		^ "member function %multimap::emplace"
			~ "%(make_pair, multimap::insert)" @ "member functions"
			$effective @ %YFramework.YSLib,
		^ "member function %vector::emplace_back"
			~ "%(make_pair, vector::push_back)" @ "functions" $effective
			@ %YFramework.YSLib,
		(
		$effective @ %YFramework.YSLib;
		^ "member function %set::emplace_hint" ~ "%set::insert"
			@ "member function %ValueNode::operator[]" @ %Core.ValueNode,
		^ "member function %map::emplace_hint" ~ "%map::insert"
			@ "function %GetEvent" @ %UI.YWidgetEvent
		)
	),
	/ DLD "simplified some %YSLib::Drawing::Size argument passing"
		^ "brace-init-list" ~ "explicit use of postfix-expression",
	+ 'android:theme="@android:style/Theme.NoTitleBar.Fullscreen"'
		@ "application configuration" @ "%AndroidManifest.xml"
),

b508
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "overrode recursive %TransformNPLA1 call for children nodes"
					@ "function %TransformNPLA1",
					// Now the input of the mapper function is AST instead of \
						semantics tree. This allows the AST transformation \
						being overridden. Order of AST terms can be directly \
						reserved.
				+ "function %ParseNPLANodeString"
			),
			/ %Lexical $=
			(
				/ "function %MakeEscape" -> "function %Unescape" $=
				(
					/ DLD "reserved space of %string object at first"
						@ "implementation",
					* "missing unescaping quotes characters" $since b335,
					* "missing unescaping characters with prefix backslash"
						$since b335,
						// The result would be wrongly escaped when containing \
							unexpected escape sequences.
					/ "avoided adding trailing backslash when unescapable"
						// It is useful for literal only. See %UnescapeLiteral.
				),
				+ "function %UnescapeLiteral"
					// It would add backslash when necessary.
			),
			/ $revert(b343) "unescaped node name" @ "%operator<<"
				@ %Configuration
		),
		* "missing several '\n'" @ "tracing" @ %Helper.Initialization
			$since b506
	),
	/ %YReader $=
	(
		/ "avoided literal conversion for unescaping names" @ "member \
			functions %ShlReader::(LoadBookmarks, SaveBookmarks)" @ %ShlReader,
			// Now only escaped names would be stored by NPLA1 configuration, \
				so explicit unescaping in user code is usually redundant. \
				However, quotes would not be automatically added.
		* $comp "saved escaped file path for bookmark entry" @ %YReader.Bookmark
			$since b392 $dep_from ("function %Unescape"
			@ %YFramework.NPL.Lexical, %YFramework.NPL.Configuration)
			// Loading bookmark would fail when the path containing NPL \
				escapable sequence.
	)
),

b507
(
	/ %YBase.YStandardEx $=
	(
		(
		+ %BitSegment;
		/ "class template %bitseg_iterator" @ %Iterator >> %BitSegment
		),
		+ "meta operation templates %((sequence_split_n; sequence_split_n_t),
			(sequence_fold; vseq_fold))" @%Variadic,
		+ "meta operation specializations %sequence_split_n" @ %Tuple
			$dep_from (%ystdex::sequence_split_n @ %Variadic),
		+ "meta operation specializations %sequence_fold" @ %Tuple
			$dep_from (%ystdex::sequence_fold @ %Variadic),
		+ "binary functors %(plus, multiply)" @ %Functional
			// Only added associative built-in operations.
	),
	/ %YFramework $=
	(
		/ @ %YCLib.Video $=
		(
			/ @ "struct %XYZATrait" @ %YCLib.Video $=
			(
				- "static data member %(GAligned, RAligned)",
				(
				/ "alias-declaration %IntegerType" ^ "%BitsN" ~ "%UIntBitsN",
				- "static data member %Width";
				- "static data member %UIntBitsN"
				)
			),
			(
			+ "class templates %XYZAMaskTrait;
			/ @ "class templates %(BGRA, RGBA)" $=
			(
				+ "alias-declaration %MaskTrait"
				/ "colors mask values" ^ "%MaskTrait" ~ "%Trait";
			);
			- "data members %(AMask, XMask, YMask, ZMask)"
				@ "class template %XYZATrait"
			),
			+ "class templates %(AXYZMaskTrait; ARGB)",
			* "pixel RGB component wrongly reversed" @ "platform %Android"
				@ %Video $since b492
			(
				/ "macro definition %YCL_PIXEL_FORMAT_XYZ888 with value"
					-> '0xAABBCCDD' ~ '0xAADDCCBB',
				/ "alias-declaration %PixelType" -> "%RGBA<8, 8, 8, 8>"
					~ "%BGRA<8, 8, 8, 8>",
				/ "implementation of functions %FetchOpaque"
			)
		)
	)
),

b506
(
	/ %YFramework $=
	(
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %LoadNPLA1File" $=
				(
					+ "debug trace after configuration creation",
					+ "error description" @ "exception thrown when failed \
						writing file"
				),
				+ "trace" @ "function %ReadConfiguration",
				+ "default configuration" @ "platform %Android",
				/ "working root path located at runtime",
				/ @ "function %HandleFatalError" $=
				(
					/ "log level" -> 'Emergent' ~ 'Notice',
					- "separator lines" @ "error message" @ "platforms !%DS"
				),
				+ "trace for character mapping file path"
					@ "function %LoadComponents"
			),
			+ "support for platform %Android" @ "constructor %DSApplication"
				@ %DSMain
		),
		/ %YSLib $=
		(
			* "missing null pointer check" @ "encoding detection"
				@ "class %TextFile" @ %TextFile $since b290,
			+ "32-bit ABGR pixel conversion support" @ "class %HBitmap"
				@ %Adaptor.Image
		)
		+ "function %Android::FetchDefaultWindow"
			@ %'Helper_(Android)'.AndroidHost
	)
),

b505
(
	/ %YFramework $=
	(
		* "wrong condition for defining macro %YAssert" @ %YCLib.Debug $since b499
			$= ('ifdef YAssert' -> 'ifdef YB_Use_YAssert'),
			// This caused unintended assertions for release configurations.
		/ %Helper $=
		(
			+ "debug trace" @ "constructor %Environment" ^ 'YCL_Trace' @ %Host,
			+ "debug trace" @ "function %Devices::InitDSScreen" ^ 'YTraceDe'
				@ %DSScreen,
			/ @ %Initialization $=
			(
				/ "trace output" @ ^ "%YTraceDe"
					~ "directly use of standard function"
					// For platform %Android the level is "%Notice" in normal \
						cases and "%Err" in catch blocks. For other platforms, \
						the level is ignored and there should be no behavior \
						changed.
				+ "trace output" @ "function %Uninitialize",
				+ "debug trace output" @ "function %(LoadNPLA1File, \
					WriteConfiguration)" ^ "%YTraceDe"
			)
		),
		/ %Service $=
		(
			/ @ "class %File" @ %File $=
			(
				* "missing clean file pointer" @ "function %Close" $since
					$before b132,
				+ "trace" @ "function %(Open, Close), destructor" ^ "%YTraceDe"
			),
			* "missing check file pointer before writing BOM"
				@ "constructor %TextFile" @ %TextFile $since b341
				// Assertion failure.
		)
	)
	/ "assertion string" @ "%YAssertNonnull" -> "Null reference found."
		~ "Null pointer found." @ %YBase.YStandardEx.CAssert,
	/ "all nonnull handle, shell handle, array pointer, buffer pointer, text \
		buffer pointer or updater assertions" ^ "%YAssertNonnull" ~ "YAssert",
	/ %Main $=
	(
		- "explicit 'return 0;'" @ "function ::main";
			// So both function 'int main()' with implicit 'return 0;' and \
				entry point function with void return type can be simply \
				coexisted without modifying return statement. Note that now \
				the program is still not fully supported so it would crash \
				intentionally.
		/ "merged entry point function %::y_android_main with function %::main"
			^ "conditional inclusion",
		+ "debug trace" @ "function %::main" ^ 'YTraceDe' @ %Main
	),
	* DLB "missing dependency for target %OUTPUTSO on .a files" @ "makefile"
		@ "platform %Android" $since b497
),

b504
(
	/ %YFramework $=
	(
		/ "simplified semantics tree mapping" @ %NPL.NPLA1 $=
		(
			/ $lib "accepted null mapper" @ "function %TransformNPLA1";
				// No-op.
			/ "default mapper argument" -> '{}' ~ 'MapNPLA1Node' @ "functions \
				%(TransformNPLA1, LoadNPLA1), function template %LoadNPLA1";
				// Default behavior changed. Now no children are dropped on \
					default.
			- "function %MapNPLA1Node"
		),
		/ %'Helper_(Android)' $=
		(
			/ %AndroidHost $=
			(
				/ "window creating now on native window resizing"
					~ "on native window creating",
				* "invalid native window access on termination" $since b502
					$= (+ "waiting for screen object release"
					@ "native window destroying"),
				* "hard-coded screen size initialized" @ "class %NativeHost"
					@ %AndroidHost $since b502 $dep_from
					"class %Devices::AndroidScreen"
			),
			/ %AndroidScreen $=
			(
				+ "constructor 'AndroidScreen(::ANativeWindow&);'"
					@ "class %Devices::AndroidScreen"
				- "function %Android::FetchScreenSize
			)
		)
	),
	/ "logging" ^ 'YTraceDe' @ "functions %(LoadBookmarks, \
		LoadGlobalConfiguration, SaveBookmarks, SaveGlobalConfiguration)"
		@ "class %ShlReader" @ %YReader $dep_from %YFramework.NPL.NPLA1
),

b503
(
	/ %Main_ARM9 => %Main,
	/ %YFramework $=
	(
		/ %Helper_(DS) $=
		(
			* DLD "missing parameter" @ "submodule names" $since b431,
			+ DLD '\ingroup DS' @ "private submodlues"
		),
		+ "2 function %SetChildren" @ "class %ValueNode"
			@ %YSLib.Core.ValueNode,
		* "implemented function %WriteConfiguration" @ %Helper.Initialization
			$since b502 $dep_to "saving empty configuration",
		/ %Helper_(Android) $=
		(
			/ %AndroidScreen $=
			(
				/ @ "constructor %AndroidScreen" $=
				(
					* "hard-coded screen buffer size" @ $since b502,
					+ "debug trace for size",
					- "hard-coded default argument"
					// It is worse that the default argument of the window \
						size was not the same as the previously hard-coded \
						screen buffer size. The width and height were \
						occasionally swapped.
				),
				+ "function %FetchScreenSize"
					// Not implemented by returning still hard-coded value \
						'{480, 800}'.
			),
			/ @ "class %NativeHost" @ %AndroidHost $=
			(
				+ "function %GetActivityRef",
				/ DLD "member initializer" @ "%p_desktop"
					-> ("initialization" @ "constructor")
					// To avoid invalid use of incomplete type.
			)
		)
	),
	/ %YReader.ShlReader $=
	(
		/ @ "class %ShlReader" $=
		(
			/ "simplified implementation" @ "function %SaveBookmarks",
			* "wrongly cleared all content on saving"
				@ "static function %SaveGlobalConfiguration" $since b502;
		),
		* $comp "saving empty configuration exiting reader shell"
			$dep_from ("saving empty configuration",
			"%ShlReader::SaveGlobalConfiguration")
	),
	/ %YBase.YStandardEx $=
	(
		* "missing workaround for Visual C++ 2013" @ "move constructor"
			@ "class template %transformed_iterator" @ %Iterator $since b415,
		/ @ "workaround for Visual C++ 2013" %Utilities $=
		(
			- DLD "redundant ';' after move constructor definition",
			* "missing defaulted default and copy constructors" $since b483
		),
		/ @ "explicit speclization" @ "class template %sequence_project" $=
		(
			/ DLD "implementation" ^ "alias-declaration",
				// It might improve some performance.
			* $revert_ex(b477) "missing workaround for Visual C++ 2013"
				$since b477
		),
		/ %Any $=
		(
			+ "binary type traits %is_aligned_storable",
			/ @ "class template %value_handler" $=
			(
				/ DLD "implemented function %get_pointer"
					^ "template specialization" ~ "conditional expression"
					$dep_to "eliminated storage access overrun evaluation",
				/ $dev "simplified default template argument"
					@ "class template %value_handler" ^ "%is_aligned_storable"
					$dep_from "%is_aligned_storable"
			),
			/ @ "class template %pod_storage" @ %Any $=
			(
				* "cv-qualifier not removed for access"
					@ "copy constructor, %operator=" $since b352
					$= (/ "implementation" ^ "%decay_t"
						~ "%remove_reference_t"),
				+ DLD 'inline' @ "all user-defined function templates",
				(
				+ "function template %assign";
				/ "implemented function template %operator=" ^ "%assign";
				* $comp "workaround of Visual C++ 2013 warning C4717"
				),
				+ $dev "static assertion for size and alignment constraints"
					@ "2 function templates %access" $dep_from
					"eliminated storage access overrun evaluation";
					// Otherwise static assertion would fail.
				+ "explicitly defaulted (copy constructor, copy %operator=)"
			)
		)
	)
),

b502
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %ValueNode $=
				(
					/ @ "class %ValueNode" $=
					(
						/ "inline function %GetContainer"
							-> "non-inline function %GetContainerRef",
						(
						+ "children container data member";
						/ DLD "constructor implementation for children node",
						/ DLD "children node access implementation"
							@ "functions %(at, begin, end)",
						/ DLD "implementation" @ "operator(bool, !)",
							// For backward compatibility, only treated as \
								empty node when both value and container are \
								empty.
						/ "copy constructor implementation" ^ "non-inline \
							function" ~ "explicitly defaulted function",
						/ "2 operator=" -> "unifying operator=",
						+ "constructor 'ValueNode(unique_ptr<Container>)'",
						+ "constructor 'ValueNode(Container)'",
						+ "2 constructor templates specifying all data members \
							being initialized"
						) $dep_to "split value node children container",
						/ DLD "implementation" @ "function template %PackNodes"
							$dep_from "split value node children container"
					)
				),
				+ "function templates %(CheckScalar; CheckNonnegativeScalar,
					CheckPositiveScalar)" @ %YSLib.Core.YCoreUtilities
			),
			/ %UI $=
			(
				/ DLD "implementation" @ "member function \
					%WidgetLoader::TransformUILayout" @ %Loader
					$dep_from "split value node children container",
				* $dev $doc "wrong Doxygen directive '\build'" ~ '\brief'
					@ "class %InvalidationUpdater" @ %Animation $=
				(
					* @ "data member %Invalidate" $since b457,
					* @ "static function %DefaultInvalidate" $since b462,
					* @ "data member %Invalidate" $since b482
				),
				* $dev $doc "wrong Doxygen directive '\build'" ~ '\since'
					@ "data member %TextBox::CaretBrush" @ %TextBox $since b484
			)
		),
		/ DLD "implementation" @ "function %TransformNPLA1" @ %NPLA1
			$dep_from "split value node children container",
		/ %'YCLib_(Android)'.Android $=
		(
			* "missing tracking cursor position for motion event"
				@ "function %SaveInput" @ "platform %Android" $since b501,
			+ "class %platform_ex::InputQueue"
			- "entry function definition ::ANativeActivity_onCreate"
				>> %'Helper_(Android)'.AndroidHost
		),
		/ %Helper $=
		(
			/ @ "platform %Android" @ %InputManager $=
			(
				/ "implemented cursor position forwarding"
					@ "member function %InputManager::Update",
				/ "implemented default widget pointer returning"
					@ "member function %InputManager::Update"
					$dep_from "Android host declarations",
					// So %GUIShell is now are usable.
				/ DLD "simplified implementation" ^ "%CheckPositiveScalar"
					$dep_from %YSLib.Core.CoreUtilities
			),
			/ %Host $=
			(
				/ "class %Host" @ "namespace %YSLib::Host"
					>> "namespace %YSLib",
				* "missing 'YF_API'" @ "class %Environment" @ %Host
					$since b431;
				/ @ "platform %Android" $dep_to "Android host declarations" $=
				(
					+ "class name declaration %AndroidScreen"
						@ "namespace %Devices",
					+ "class name declaration %NativeHost"
						@ "namespace %Android"
				)
			),
			+ "macro %YFM_Android_Helper_AndroidHost" @ %YModules
		),
		+ %'Helper_(Android)' $=
		(
			+ "screen implementation unit",
			+ %AndroidHost $=
			(
				+ "struct ConfigurationDeleter; class %NativeHost";
				+ "native host implementation",
				+ "function %(FetchNativeHost, FetchDefaultDesktop)"
			)
		),
	),
	+ "entry point function definition %::y_android_main" @ "platform %Android"
		@ %Main_ARM9
		// Still not fully supported.
),

b501
(
	/ $doc "Doxygen comments" @ %YFramework $=
	(
		* "wrong directive '\def' used" ~ '\brief'
			@ "macro %YCL_KEYSTATE_DIRECT" @ %YCLib.Input $since b321,
		* "wrong directive '\param' used" ~ '\note' @ "function \
			%FetchNativeLooper" @ %'YCLib_(Android)'.Android $since b499,
		* "wrong directive '\param' used" ~ '\note'
			@ "member function %TextBox::GetCaretPosition"
			@ %YSLib.UI.TextBox $since b484
	),
	* "crash on setting saving" @ %YReader.ReaderSettingUI $since b500 $=
		(* $dev "wrong widget path accessed" $since b500),
		// This might corrupt the configuration file, which cause big trouble \
			on DS.
	/ %YFramework $=
	(
		/ %NPL.NPLA1 $=
		(
			+ 'using NodeMapper = ValueNode(const ValueNode&);';
			+ "function %MapNPLA1Node;
			+ "parameter with default argument 'std::function<NodeMapper> \
				= MapNPLA1Node' @ %(TransformNPLA1Node, LoadNPLA1), function \
				template %LoadNPLA1)"
		)
		/ %YSLib.Core.ValueNode $=
		(
			/ @ "class %ValueNode" $=
			(
				+ "function %swap",
				/ $dev "member %Vaule" ^ "member initializer '{}'",
				/ DLD "functions operator%=" -> "non-inline functions"
			),
			+ "function %swap for %ValueNode" $dep_from
				"member function %ValueNode:swap",
			/ "implementation" @ "inline functions %(AccessNode, AccessNodePtr)"
				^ "macros %(PDefH, ImplRet)"
		),
		/ "implemented key tapping up and down for motion events"
			@ "platform %Android" @ %YCLib.Input
	),
	+ $dev $repo "tags ('PreAlpha', 'V0.5') to revision 372",
	/ "all 'return nullptr'" -> 'return {}'
),

b500
(
	/ %YFramework,
	(
		/ %YSLib.UI $=
		(
			* "missing clip area intersection for arrow rendering"
				@ "member function" ("%DropDownList::Refresh" @ %ComboList,
				"%Menu::DrawItem" @ %Menu) $since b452;
				// An obvious example is in the reader setting UI @ YReader, \
					moving over or dragging the scroll time setting drop down \
					list, the arrow of behind drop down button would be \
					wrongly rendered visible, rather than hiding hehind.
			(
			/ "implemented arrow rendering" ^ "function %Drawing::DrawArrow"
				~ "function %UI::DrawArrow" @ "member function \
				%AScrollBar::InitializeArrowPainters" @ %Scroll;
			* $comp "wrong arrow might be rendered" $since b452,
				// Ditto.
			- "function %UI::DrawArrow" @ %YWidget
			),
			/ DLD "simplified implementation" @ "function %RectDrawArrow"
				@ %YStyle
		),
		/ "default configuration" @ "platform %Win32" @ %Helper.Initialization
			$=
		(
			/ "default root directory macro %ROOTW" -> "." ~ "H:\\NDS\\EFSRoot",
			/ "default font path macro %DEF_FONT_PATH"
				-> "C:\\Windows\\Fonts\\SimSun.ttc"
				~ 'ROOTW "\\Font\\FZYTK.TTF"',
			/ "default font directory macro %DEF_FONT_DIRECTORY"
				-> 'ROOTW "\\Font\\"' ~ 'ROOTW "\\"',
			/ "default data directory macro %DEF_DATA_DIRECTORY"
				-> 'ROOTW "\\Data\\"' ~ 'ROOTW "\\"'
		)
	),
	/ %YReader $=
	(
		/ %ShlExplorer $=
		(
			/ "test widget location"
			/ @ "class %ShlExplorer"  $=
			(
				+ "default text" @ "test label",
				/ "avoided potentional leak for %unique_ptr setting"
					^ "%make_unique"~ "member function %unique_ptr::reset"
					@ "%yunseq segments",
				/ @ "animation test" $=
				(
					* "animated wrongly by irrevalent invalidation" $since b451,
					/ "refined test animation in test tab page"
						~ "in setting panel"
				)
			)
		),
		+ "function %AddButtonTabBar" @ %Shells,
		+ "rearranged setting UI in 3 tab pages" @ %ReaderSettingUI
	),
	/ $doc "updated Doxygen file" $=
	(
		^ "Doxygen 1.8.7" ~ "Doxygen 1.8.2",
		/ 'YFramework/include/freetype YFramework/include/ft2build.h'
			@ "%EXCLUDE" -> '.git Data Tools',
		/ "set %SHORT_NAMES" -> 'YES' ~ 'NO'
			// Workaround of error: 'could not open file for writing' with a \
				name containing a tab.
	)
);

////

