/*
	© 2020-2023 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.9.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.9 。
\version r13461
\author FrankHB <frankhb1989@gmail.com>
\since build 800
\par 创建时间:
	2020-10-12 17:19:23 +0800
\par 修改时间:
	2023-01-02 08:52 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.9'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b900, $now];

$now
(
	/ @ '__cplusplus >= 201703L' $dev %Test.YBase $=
	(
		+ "9 static test cases covering %ystdex::is_invocable_r"
			^ ("%ystdex::is_invocable_r" @ %YBase.YStandardEx.Invoke),
		+ "9 static test cases covering %ystdex::is_nothrow_invocable_r"
			^ ("%ystdex::is_nothrow_invocable_r" @ %YBase.YStandardEx.Invoke)
	),
	* "missing 'HEAD' for 'git diff'" @ "%PatchRevision.sh" @ %Tools.Script
		$since b957,
		// To be consistent with 'hg diff', this should compare the changes \
			relative to HEAD, not the changes relative to the index. This also \
			fixes for the typical use during 'git merge'.
	/ %YFramework $=
	(
		+ "macro %DeclBasedI" @ %YBaseMacro,
		/ %YSLib.Core.YObject $=
		(
			+ "3 function templates %AreEqualHeldPolymorphic",
			* "function %Equals" @ "class templates %(PolymorphicValueHolder, \
				PolymorphicAllocatorHolder)" $since b899 $=
			(
				* "incorrect types compared always 'false'"
				* "imprecise comparations for different polymorphic types"
					$= (/ $impl ^ $dep_from
						"%YSLib::AreEqualHeldPolymorphic" ~ "%AreEqualHeld")
			),
			* "missing qualified 'NPL::' before 'Deref'" $since b561
		),
		/ %NPL $=
		(
			+ DLDI "'NPL::' before calls to %AssignParent" $effective
				@ %(NPLA, NPLA1Forms) $dep_to "qualified AssignParent calls",
			+ DLDI "'NPL::' before calls to %AssignWeakParent" $effective
				@ %(NPLA, NPLA1Forms),
			/ DLDI "simplified %TermNode::SetValue calls without 1st argument \
				of allocator" $effective @ %(NPLA, NPLA1Forms, Dependency),
				// The allocator is implied by the %TermNode::SetValue overload.
			/ $re_ex(b960) $dev $lib
				"header inclusion %YBase.YStandardEx.TypeOperations" @ %NPLA
				>> %SContext,
			+ $dev $lib "header inclusion %YBase.YStandardEx.Utilities"
				@ %SContext,
			/ %NPLA $=
			(
				/ @ "class %Environment" $=
				(
					+ 'ynothrow' @ "functions %(Freeze, Unfreeze)",
					- DLDI "redundant attributes" @ "definition"
						@ "function %GetMapCheckedRef"
				),
				- "identifier for exception message of %InvalidReference"
					@ "static member function %ContextNode::DefaultResolve",
				/ "all 2 functions %AssignParent with 'EnvironmentReference&&' \
					parameter" -> "2 function templates with parameter pack"
					$dep_from "qualified AssignParent calls",
				+ $re_add(b941) $lib "class template specializations \
					%is_bitwise_swappable for %NPL::EnvironmentBase"
					@ "namespace %ystdex",
				(
				+ "2 functions %ToParent";
				+ "function template %MakeParent"
				),
				/ @ "Doxygen group %BindingAccess" $=
				(
					+ "2 functions %ResolveEnvironmentTerm";
					/ DLDI "simplified 2 functions %ResolveEnvironment with \
						parameter of reference to %TermNode"
						^ "%ResolveEnvironmentTerm",
					(
					/ "all 2 overloads %ResolveEnvironment with parameter of \
						reference to %ValueObject"
						=> "%ResolveEnvironmentValue";
						// The name was error-prone because these overloads do \
							less than others.
					- DLDI 'const' @ "type-id for casts"
						@ "function %ResolveEnvironmentValue#1"
						// This is redundant because the source is implying \
							'const'.
					)
				)
			),
			/ "set parent with implicit allocator argument"
				@ "function templates %(InvokeIn, GetModuleFor)" @ %NPLA1
				^ "%(ToBindingsAlloator, in_place_type)",
				// It would be less efficient without %in_place_type.
			/ %NPLA1Internals $=
			(
				/ DLI "functions %(SetEvaluatedReference, \
					ReduceAsSubobjectReference)"
					^ "%in_place_type<TermReference>",
				/ DLDI "member function %RecordCompressor::Compress"
					^ "%NPL::AssignParent"
			),
			/ DLI @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ @ "function %MakeEnvironment" ^ 'flatten',
				/ @ "functions %(GetCurrentEnvironment, \
					LockCurrentEnvironment, MakeEnvironment)"
					^ "%in_place_type",
				/ $design "simplified parent check"
					^ $dep_from ("%NPL::MakeParent" @ %NPLA),
				/ "simplified list element parent check without call site \
					check",
				/ $design @ "functions '*WithEnvironment'" $=
				(
					/ "simplified parent list construction"
						@ "creation of parent object",
					/ $forced $dep_from ("%ResolveEnvironment" @ %NPLA)
						$= (/ ^ $dep_from "%ResolveEnvironmentValue" @ %NPLA)
				)
			),
			/ "DFS traverse" @ "native implementation"
				@ "applicative 'copy-environment'"
				@ "function %Forms::LoadGroundContext" @ %Dependency $=
			(
				/ $revert(b961) DLI "getting destination binding map"
					^ ("%Environment::GetMapRef"
					~ "%Environment::GetMapUncheckedRef") @ %NPLA,
					// The check is not needed because the fresh environment \
						would not be frozen.
				/ DLI "setting destination parent with allocator"
					^ "%NPL::AssignParent",
				* "wrong 'ynothrow' for allocating fresh environment for \
					subnodes" $since b854
			)
		)
	)
),

b962
(
	/ $re_add(b954) DLDI "header inclusion %Functional"
		@ ((%Thunk -> %(Ref, Function), %CStandardIO -> %(Compose, Functor),
		%NodeBase -> %ExpandedFunction) @ %YBase.YStandardEx
		(%Adaptor.YNew -> %(Bind, AddressOf), %UI.YUIContainer -> %Bind)
		@ %YFramework.YSLib, %YReader.ShlReader -> %Bind),
	/ $re_add(b934) DD "adjusted minor texts" @ "Doxygen comments"
		@ %(YBase.YStandardEx.(Cast, CStandardDefinition, CStandardInteger),
		YFramework.CHRLib.StaticMapping),
	/ $re_add(b939) DLDI "adjusted minor comments" @ %(YBase.YStandardEx.(
		BitSegment, CStandardDefinition, CStandardIO, CStandardInteger,
		DereferenceOperation, Enum, Hash, Map, Memory, Thunk), YFramework.(
		YCLib.Platform, YSLib.(Core.(YDevice, YObject), Service.ImageProcessing,
		UI.(YUIContainer, YWidgetEvent))), YReader.Main),
	/ DLDI "adjusted minor indents"
		@ %(YFramework.('YCLib(DS).DSIO', CHRLib.StaticMapping), YReader.Main),
	* "indent" @ ("function template %clamp#2" @ %YBase.YStandardEx.Algorithm
		$since b835, %YFramework.NPL.Lexical $since b862),
	/ %YBase $=
	(
		+ "macros %(_SILENCE_CXX23_ALIGNED_STORAGE_DEPRECATION_WARNING, \
			_SILENCE_CXX23_ALIGNED_UNION_DEPRECATION_WARNING) if not defined"
			@ 'YB_IMPL_MSCPP >= 1933' @ %YDefinition,
		/ DLDI %YStandardEx $=
		(
			- "outdated TODO comments" @ %Bit,
			/ %Tree ^ 'auto',
			/ %Invoke $=
			(
				/ $re_ex(b938)
					"supported GCC 9.3 branch for using C++17 mode %std names",
				* "missing decaying before comparing the result types"
					@ "type traits %(is_invocable_r, is_nothrow_invocable_r)"
					$since b850 $dep_to "missing result decaying",
				(
				/ @ "type trait %is_nothrow_invocable_r" $=
				(
					/ "simplified" ^ "%is_invocable_r"
						~ "%is_implicitly_nothrow_constructible";
						// To be more consistent with %is_nothrow_invocable.
					* $comp "possible wrong results" $since b832
						$dep_from "missing result decaying"
						// See the update of GCC PR 91456.	
				);
				/ $re_add(b938) "worked around libstdc++ bugs for C++17 mode \
					or above" @ "%is_nothrow_invocable_r"
					// Ditto.
				)
			),
			/ "function templates %try_emplace with hint"
				@ "class template %map" @ %Map ^ "conditional inclusion"
		)
	),
	/ ($re_ex(b934) "updated copyright year", "version") @ "label text"
		@ "constructor %AboutPanel" @ %YReader.About,
	/ %YFramework $=
	(
		- DLDI $re_add(b954) "'YSLib::' prefix"
			@ "calls to %YSLib::make_observer"
			$effective @ %YSLib.UI.(TextBox, YUIContainer),
			// As %NPL changes in b947.
		/ DLDI @ "platform %DS" @ %'YCLib(DS)'.DSIO $=
		(
			/ ^ ("%ystdex::nonvoid_result_t" @ %YBase.YStandardEx.Invoke)
				~ "%ystdex::common_nonvoid_t"
				// As %ystdex::invoke_for_value. This is not a bug in spite of \
					%ystdex::common_type_t because the functions used here do \
					not return references.
			/ "simplified header inclusions",
		),
		* DLDI "spelling error" @ "comments" @ %(YCLib.Host $since b921,
			%YSLib.Service.File $since b862),
		/ %YSLib $=
		(
			+ DLDI "header inclusions %YBase.YStandardEx.(Invoke, \
				DereferenceOperation)" @ %Core.YObject,
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ ("member functions \
				%TextFileBuffer::(begin, end)" @ %Service.TextManager,
				"member function %Controller::GetEventRef" @ %UI.YControl),
			+ DD "'\exception' command" @ "constructor \
				%SharedInputMappedFileStream" @ %Service.File
		),
		+ $dev $lib 'YB_PURE' @ "all functions %(MakePathString, \
			MakePathStringU)" @ %YCLib.FileIO,
			// Also to eliminate G++ 12.1 warning: [-Wsuggest-attribute=pure].
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ $revert_ex(b961) "checked at 1st modification" @ "function \
					%SetupTraceDepth" ^ "%Environment::GetMapCheckedRef"
					~ "%Environment::GetMapUncheckedRef",
				/ DLI @ "functions %(BindParameter, BindParameterWellFormed)" $=
				(
					- $revert(b961) 'YB_FLATTEN' @ "internal calls"
						@ 'NPL_Impl_NPLA1_BindParameter_ExpandLevel >= 2'
						@ "overloads#2"
						// This would improve both the generated code quality \
							and compilation time with G++.
					+ 'YB_ATTR_nodiscard YB_ATTR(noinline)'
						@ "subpair prefix binding",
						// This would be better in code quality at the cost of \
							a bit inefficient compilation.
					/ "suffix copy" @ "trailing binding" $=
					(
						/ "split term components to be written",
						* "incorrect source object checked during suffix copy \
							without sigil or with sigil '%' incorrectly"
							$since b954
							// This should check the referent if the operand \
								is a reference value. The result would still \
								be correct in all cases due to the object \
								representation assumption that %Value is not \
								empty for any reference values, so no suffix \
								would be missing to copy. This fix has little \
								effect on performance (if any, it should be \
								better because less objects need to be copied).
					)
				),
				+ DLDI 'ynothrow' @ "separator pass constructor"
					@ "constructors %GlobalState"
			),
			/ %Lexical $=
			(
				* DLDI "indent" $since b891,
				+ $dev $lib "header inclusions %YBase.YStandardEx.(Ref, Swap)",
				+ 'using YSLib::default_allocator',
				+ 'ynothrow' @ "constructor#2 %SourceLocation"
			),
			/ DLDI "%pmr::polymorphic_allocator" -> $dep_from
				("%default_allocator" @ %Lexical) $effective @ %Lexical,
			+ DLDI 'const' @ "type argument" @ "calls to %ResolveRegular to \
				retrive 'const' references" $effective
				@ "functions %Forms::(Provide, ProvideLet)" @ %NPLA1Forms,
			/ DLI "optimized guard calls" @ "vau handlers" @ %NPLA1Forms
		)
	)
),

b961
(
	/ %YBase.YStandardEx $=
	(
		+ DD '\ingroup grauds' @ "Doxygen comment" @ ("alias template \
			%pun_ptr" @ %TypePun, ("class templates (guard, state_guard)",
			"alias template %swap_guard") @ %ScopeGuard),
		/ %ScopeGuard $=
		(
			* "missing %_bNoThrow as the template argument" @ "return type"
				@ "all 2 function templates %make_guard" $since b605,
			(
			/ "function template %unique_guard" => "%make_unique_guard"
			+ "alias template %unique_guard";
			/ DLDI "simplified %make_unique_guard" ^ "%unique_guard"
			),
			(
			/ "function template %unique_state_guard"
				=> "%make_unique_state_guard"
			+ "alias template %unique_state_guard";
			/ DLDI "simplified %make_unique_state_guard" ^ "%unique_state_guard"
			);
			/ $dev $lib @ "all function templates %(make_guard, \
				make_unique_guard, make_unique_state_guard)" $=
			(
				+ 'YB_ATTR_nodiscard inline',
				/ $design $impl "all %_tState" => "%_tCond"
					// To be consistent with %state_guard.
			)
		),
		+ DLI 'YB_LIKELY' @ "success branch for overflow check" @ "member \
			function %new_delete_resource_t::do_allocate" @ %MemoryResource
	),
	* DD "outdated %Environment::DefaultResolve" @ %Documentation.NPL
		$since 884,
	/ DLDI $effective %(YBase.YStandardEx.(Cache, MemoryResource),
		YFramework.('YCLib_(Win32)'.MinGW32, YSLib.Core.YApplication,
		NPL.(NPLA1, NPLA1Forms, NPLA1Internals), Helper.HostRenderer))
		$dep_from $forced "%make_unique_guard" @ %ScopeGuard,
	/ %YFramework $=
	(
		* DLDI "missing header inclusinon %YBase.YStandardEx.Allocator"
			@ %CHRLib.CharacterProcessing $since b861,
			// This is the internal dependency which should not be used out of \
				%YBase.
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ @ "class %Environment" $=
				(
					(
					/ "aliases %(BindingMap; NameResolution)"
						>> "namespace %NPL";
					/ "function %LookupName" -> ("inline function" @ "%NPL")
						// This can more efficient by inlining in the key paths.
					),
					+ "function %GetMapCheckedRef",
					(
					+ "function %GetMapUncheckedRef";
						// As old %GetMapRef.
					/ DLDI "static function %DefaultResolve"
						$dep_from $forced "%LookupName",
						$= (/ $impl ^ "%GetMapUncheckedRef");
					/ @ "function %GetMapRef" $dep_from ("function \
						%SetupTraceDepth" @ %NPLA1, "native implementation"
						@ "applicative 'copy-environment'"
						@ "function %LoadGroundContext" @ %Dependency) $=
					(
						/ 'ynothrow' -> 'ynothrowv';
						+ "assertion to ensure non-frozen environment";
						+ DD "'\pre' command" @ "Doxygen comment"
					)
					),
					/ $re_add(b960) "function template %Bind"
						-> "static function template",
					/ $re_add(b960) "functions %(Remove, RemoveChecked)"
						-> "static functions",
					/ $re_add(b960) "functions %(Replace, ReplaceChecked)"
						-> "static functions"
						$= (/ DLDI $dep_from $forced ^ "%LookupName"),
					/ DLI "functions %(Remove, EnsureValid)"
						-> "inline functions"
				),
				/ "checked against frozen environments" @ ("function template \
					%EmplaceLeaf#3"; $comp "function templates %EmplaceLeaf#4")
					^ ($dep_from "%Environment::GetMapCheckedRef")
					~ "%Environment::GetMapRef",
				/ "parameter type 'const shared_ptr<Environment>&'" @ "member \
					functions %ContextNode::(SwitchEnvironment, \
					SwitchEnvironmentUnchecked)" -> 'shared_ptr<Environment>',
					// This at least improves %EnvironmentSwitcher::operator().
				/ @ "class %EnvironmentSwitcher" $=
				(
					+ DD '\ingroup functors' @ "Doxygen comment",
					+ 'ynothrow' @ "constructor",
					+ "function %Switch",
					+ "friend function %dismiss"
				)
			),
			/ %NPLA1 $=
			(
				/ "functions %(BindParameter, BindParameterWellFormed, \
					BindSymbol)" $=
				(
					/ DLI "simplified sigil handling initialization",
						// The common paths for handling the sigil for \
							non-trailing and trailing binding are merged as \
							they are the same by propagating tags as \
							non-trailing bindings since b951, after the \
							subterms binding is specialized. This is a bit \
							less inefficient, but the further simplificiation \
							makes it a bit more efficient overall.
					/ DLDI $dep_from $forced ("%Environment::Bind" @ %NPLA)
						$= (/ $dep_from "%Environment::BindingMap"),
					(
					+ "overload with 'BindingMap&' and \
						'const EnvironmentReference&' parameters"
						$dep_from ("%Environment::BindingMap" @ %NPLA)
						$= (/ $impl ^ (($dep_from
							"%Environment::GetMapCheckedRef",
							$re_add(b959) "%Environment::GetAnchorPtr")
							@ %NPLA));
					/ "simplified overload with 'Environment&' parameter with \
						the additional check from %GetMapCheckedRef"
						^ "overload with 'BindingMap&' and \
						'const EnvironmentReference&' parameters"
					),
					/ $dev $build "worked around native GCC's cc1plus.exe \
						out-of-memory problem \
						'NPL_Impl_NPLA1_BindParameter_ExpandLevel' defaulted \
						to '0'" @ "platform %MinGW32"
				),
				/ "function %SetupTraceDepth"
					$dep_from $forced "%Environment::LookupName"
					$= (/ $impl ^ ("%Environment::GetMapUncheckedRef" @ %NPLA)),
				/ DLI "avoided redundant result copy" @ "function template \
					%GetModuleFor" ^ ($dep_from "%EnvironmentSwitcher::Switch"
					~ "%ContextNode::ShareRecord") @ %NPLA,
				/ @ "function templates %(LoadModule, LoadModuleChecked)" $=
				(
					// As %EmplaceLeaf.
					+ "2 overloads with 'BidingMap&' or 'Environment&' as \
						additional 1st parameter";
					/ "overload#3" ^ "overload#2";
					+ $comp "checked against frozen environments" @ "overload#3"
				)
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLI @ "functions %(DefineWithRecursion, SetWithRecursion)" $=
				(
					/ $design
						^ $dep_from $forced ("%Environment::Bind" @ %NPLA),
					/ "simplified initialization without redundant environment \
						pointer copy"
						^ $dep_from ("%Environment::GetMapCheckedRef" @ %NPLA),
					/ $re_add(b959) DLI "optimized environment reference \
						accesses for defining" ^ "%Environment::GetAnchorPtr",
					/ "simplified" !^ ("saving the term reference in the thunk",
						("%shared_ptr for terms or thunks"; "%ShareMoveTerm"))
						@ 'NPL_Impl_NPLA1_Enable_Thunked'
				),
				/ DLDI "function %Undefine"
					^ $dep_from $forced ("%Environment::Remove" @ %NPLA),
				/ DLDI "function %UndefineChecked"
					^ $dep_from $forced ("%Environment::RemoveChecked" @ %NPLA),
				/ "threw nested %TypeError on non-frozen environment check \
					failure" @ ("functions %(Undefine, UndefineChecked)",
					"functions %(DefineLazy, DefineWithNoRecursion, \
					DefineWithRecursion, SetWithNoRecursion, SetWithRecursion)"
					^ $dep_from ("%BindParameterWellFormed" @ %NPLA))
					^ $dep_from ("%Environment::GetMapCheckedRef" @ %NPLA),
				/ $re_add(b959) DLI "optimized environment reference accesses \
					for imports" $effective @ "functions %(Provide, \
					ProvideLet, Import, ImportRef)"
					^ "%Environment::GetAnchorPtr"
			),
			/ "namespace %Forms" @ %Dependency $=
			(
				/ DLDI "native implementation" @ ("applicative 'get-module'"
					@ "function %LoadModule_std_io", "applicative %require"
					@ "function %LoadModule_std_modules")
					$dep_from $forced ("%Environment::Bind" @ %NPLA),
				/ @ "function %LoadGroundContext" $=
				(
					* "possible invalid reference values in the result"
						@ "alternative derivation" @ "applicative %assq"
						$since b943
						$= (/ $impl ^ 'rest%' ~ 'rest&'),
					/ DLI "primitive bindings" ^ "%BindingMap",
						// This is a bit inefficient, but better for the \
							change after %EmplaceLeaf because there are no \
							redundant checks.
					/ DLDI "native implementation" @ "applicative \
						'copy-environment'" ^ ($dep_from
						"%Environment::GetMapUncheckedRef"
						~ "%Environment::GetMapRef") @ %NPLA
				),
				* $re_add(b928) "wrong result" @ "native implemenation"
					@ "applicative 'unregister-requirement!'"
					@ "function %LoadModule_std_modules" $since b923
					// This was a bug because of the consistency with the \
						derivation.
					$= (/ $impl "returned %ValueToken::Unspecified"),
				/ DLDI @ "function %LoadModule_SHBuild" $=
				(
					/ "returned the value of the call to %CallBinaryAs"
						@ "applicative %SHBuild_EchoVar",
					/ "applicative %SHBuild_EchoVar"
						$dep_from $forced ("%Environment::LookupName" @ %NPLA)
						$= (/ $impl
							^ ("%Environment::GetMapUncheckedRef" @ %NPLA))
				),
				/ DLDI "function %LoadStandardContext"
					^ $dep_from ("%LoadModuleChecked#1" @ %NPLA1),
				+ DD "'\pre' command" @ "Doxygen comment" @ "all functions"
					$dep_from ("%Environment::GetMapRef" @ %NPLA)
			)
		),
		+ DLDI 'YB_PURE' @ "member function %HostRenderer::Wait"
			@ %Helper.HostRenderer
			// To eliminate G++ 12.1 warning: [-Wsuggest-attribute=pure].
	)
),

b960
(
	/ %YBase.YStandardEx $=
	(
		/ @ "trait %tuple_size" %Apply $=
		(
			* "missing deailed code inclusion when %std::tuple_size is not used"
				$since b958 $dep_to "tuple_size defect 1",
			* "missing detection of %_LIBCPP_VERSION" $since b958
				$dep_to "tuple_size defect 2"
				$= (+ DLI "check of 'defined(_LIBCPP_VERSION) \
					&& _LIBCPP_VERSION > 50000')
		),
		/ %Container $=
		(
			/ @ "function template %retry_for_vector" $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard',
				+ "overload with allocator parameter"
					^ "%ystdex::make_obj_using_allocator"
			),
			/ "Doxygen group %type_traits_operations" $=
			(
				(
				/ DLDI "reordered declarations";
				+ "type traits operation %(has_mem_count, has_mem_find, \
					has_mem_remove, has_mem_remove_if, has_mem_key_type)"
				),
				/ @ "type traits operation %has_mem_lower_bound" $=
				(
					+ "3rd template parameter with default argument as the \
						iterator type";
					/ $comp "allowed general type instead of class type as 1st \
						template parameter"
				)
			),
			* "internal %count detection used for member %find"
				@ "function template %exists" $since b888
				^ $dep_from "%has_mem_find",
			/ DLDI ("function templates %erase_all#(2, 3)",
				"all 2 function templates %erase_all_if")
				^ $dep_from "%has_mem_key_type",
			/ DLI "function templates %insert_or_assign"
				^ "%ystdex::try_emplace" ~ "%ystdex::ystdex::search_map",
			/ DLI "function templates %insert_or_assign_hint"
				^ "%ystdex::try_emplace_hint" ~ "%ystdex::ystdex::search_map"
		),
		* DD "part of Doxygen group %algorithms wrongly transferred from \
			%Container to %Range" $since b942
			// This caused both unbalanced tokens in %Container and %Range.
	),
	* $comp "building failure" @ "platform %Android" $since b948
		$dep_any_from ("tuple_size defect 1", "tuple_size defect 2")
		// '_LIBCPP_VERSION' is assumed for all configurations in platform \
			%Android since the official NDK is used (which implies at least \
			'>= 80000').
	/ %YFramework $=
	(
		+ "allocator parameter with default argument '{}' as 2nd parameter"
			@ "function %FetchModuleFileName" @ (%'YCLib_(Win32)'.MinGW32,
			"function template its spaecializations \
			%FetchCurrentWorkingDirectory" @ %YCLib.FileSystem)
			$= (/ $impl ^ $dep_from ("%ystdex::retry_for_vector#2"
				@ %YBase.YStandardEx.Container)),
		/ %YCLib.Debug $=
		(
			/ "merged %platform declarations",
			/ @ "class %AndroidLogSender" @ "platform %Android" $=
			(
				(
				/ ("parameter type" @ "constructor", "return type"
					@ "function %GetTag") -> 'const char*' ~ 'string_view';
				+ ($dev $lib 'YB_NONNULL(2)', 'ynothrowv') @ "constructor",
				+ $dev $lib 'YB_returns_nonnull' @ "function %GetTag"
				),
				/ $dev $lib $design "out-of-line definition" @ "constructor"
					-> "inline function"
					$= (/ $impl ^ "%platform::Nonnull"
						$dep_from "merged %platform declarations")
			),
			/ @ "class %Logger" $=
			(
				/ @ "static function %FetchDefaultSender" $=
				(
					(
					/ DLDI $dep_from "class %AndroidLogSender"
						@ "platform %Android";
					+ 'ynothrow' $dep_from "platform %Android"
					),
					+ DLDI 'YB_STATELESS' @ '!(YCL_Win32 || YCL_Android)',
						// Also to eliminate G++ warning: \
							[-Wsuggest-attribute=const].
					+ $dev $lib 'YB_ATTR_nodiscard'
				),
				/ @ "default constructor" $=
				(
					/ DLDI !^ 'DefDeCtor';
					+ 'ynothrow' $dep_from ('ynothrow' @ "%FetchDefaultSender")
				)
			),
			+ 'ynothrow' @ "function %FetchCommonLogger"
				$dep_from "default constructor %Logger"
		),
		* $comp "fallback tracing not guaranteed nonthrowing"
			@ "platform %Android" @ %YSLib.Core.YException $since b591
			$dep_from ("%FetchCommonLogger" @ %YCLib.Debug),
			// This is even undefined behavior after adding \
				'fno-enforce-eh-specs' since b898.
		/ %YSLib $=
		(
			/ %Service.FileSystem $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "function templates %(ParsePathWith, ParsePath, \
					ResolvePathWithBase, ResolvePath)",
				+ "overload with value allocator argument" @ ("function \
					template %ParsePathWith"
					^ "%ystdex::make_obj_using_allocator";
					"function templates %(ParsePath; ResolvePathWithBase)";
					"function template %ResolvePath"
					^ $dep_from ("%FetchCurrentWorkingDirectory"
					@ %YCLib.FileSystem));
				/ @ "class %Path" $=
				(
					/ @ "constructor#(5,6)" $=
					(
						/ "enabled allocator" @ "internal construction of \
							%String" ^ "%ystdex::make_obj_using_allocator",
						* "missing using the allocator argument for %String"
							$since b957 ^ $dep_from
							"%ParsePath overload with value allocator argument"
					),
					* "missing using the allocator for element"
						@ ("copy constructor", "copy constructor with \
						allocator parameter", "constructor with iterator and \
						allocator parameters", "constructor with instance of \
						%std::initializer_list and allocator parameter")
						$since b957 ^ "%ystdex::make_obj_using_allocator",
					* "missing using the allocator"
						@ ("%operator/="; $comp "%operator/") $since b957
				),
				/ "enabled allocator" @ "call to %MakeNormalizedAbsolute"
					@ "function %MakeNormalizedAbsolute"
					^ $dep_from %YCLib.FileSystem
			),
			/ %Core.ValueNode $=
			(
				+ "2 function templates %AddValueTo for sequence containers"
					^ $dep_from ("%ystdex::has_mem_key_type"
					@ %YBase.YStandardEx.Container),
				(
				/ "all 2 static function templates %AddValueTo"
					@ "class %ValueNode"
					-> ("2 function templates" @ "namespace %YSLib");
				/ $forced "all 2 member function templates %ValueNode::AddValue"
					// The arguments are a bit different.
				)
			)
		),
		/ %Helper.Initialization $=
		(
			/ @ "functions %(FetchLocalFHSRootPath, FetchRootPathString)" $=
			(
				/ DLDI "simplified path copy"
					$dep_from ("copy constructor %Path" @ %YSLib.FileSystem),
				(
				+ DLDI "'yunused' on internal allocator argument"
					@ "platforms %Android";
					// To prevent Clang++ warning: [-Wunused-parameter].
				* $re_ex(b957) "allocator of internal resources might be used \
					out of lifetime" $since b861 $=
					// The previous fix in b957 is incomplete.
				(
					* "missing 'static' for local memory resource" $since b957,
					* $comp "missing using the allocator argument for \
						%Path::operator/ argument of string literal"
						@ "parent path initialization" $since b957
						$dep_from ("%Path::operator/" @ %YSLib.FileSystem),
					* "enabled allocator argument" @ 'YCL_Linux' ^ $dep_from
						("%IO::ResolvePath with value allocator argument"
						@ %YSLib.FileSystem)
				)
				),
				/ "enabled allocator" @ ("call to %FetchModuleFileName"
					@ "platform %Win32" ^ $dep_from %'YCLib_(Win32)'.MinGW32,
					"call to %FetchCurrentWorkingDirectory" @ !"platforms \
					%(Win32, Android, Linux)" ^ $dep_from %YCLib.FileSystem)
					// There is no '$forced' because the changes need no \
						modification on the call sites originally with no \
						allocator argument.
			),
			* $re_add(b957) "missing propagation of the allocator"
				@ "configuartion paths accesses" @ "function %LoadConfiguration"
				$since b957
		),
		/ %NPL $=
		(
			/ $dev $lib "header inclusion %YBase.YStandardEx.TypeOperations"
				@ %NPLA1 >> %NPLA $dep_to "NPLA1 header lifting",
			(
			+ ("class template %GLContinuation"; "function template \
				%MakeGLContinuation", "function template %RelayDirect for \
				parameters of %GLConinuation instances", "class template \
				specialization %ystdex::is_bitwise_swappable for \
				%NPL::A1::GLContinuation") @ 'NPL_Impl_NPLA1_Enable_Thunked'
				@ %NPLA1Internals,
			/ DLDI "simplified" @ %NPLA1
			),
			/ $re_add(b859) DLI "prevented creation of %Continuation"
				@ 'NPL_Impl_NPLA1_Enable_Thunked'
				@ ('!NPL_Impl_NPLA1_Enable_TCO' @ "function %ReduceOrdered"
				@ %NPLA1, "functions %Forms::(LetAsterisk, LetAsteriskRef)"
				@ %NPLA1Forms) ^ ("%MakeGLContinuation" @ %NPLA1Internals),
			/ "all %TermNode::AddValueTo calls" -> $dep_from ("%NPL::AddValueTo"
				@ %SContext) $effective @ "native implementation"
				@ ("applicative 'string-split'" @ "function \
				%LoadModule_std_strings", "applicative 'system-get'"
				@ "function %LoadModule_std_system" @ %Dependency)
				$dep_to "avoiding TermNode::AddValueTo",
			/ %SContext $=
			(
				+ 'using YSLib::AddValueTo;' $dep_from %YSLib.Core.ValueNode,
				- $revert(b853) "all 2 static member function \
					%TermNode::AddValueTo"
					$dep_from "avoiding TermNode::AddValueTo"
			),
			/ %NPLA $=
			(
				(
				+ "class %EnvironmentBase"
					$impl ^ "%ystdex::exclude_self_params_t"
					$dep_from "NPLA1 header lifting";
				/ DLI "simplified classes %(EnvironmentReference, Environment)"
					$=
				(
					+ "private base class %EnvironmentBase";
					/ $forced "initialization" @ "constructors",
					^ "using declarations for some members available from \
						%EnvironmentBase"
				)
				),
				(
				/ DD "removed all 3 functions %ToBindingsAllocator away from \
					Doxygen group %BindingAccess and reordered the \
					declarations before funtions %AllocateEnvironment";
				/ DLDI "functions %AllocateEnvironment#(2, 3)"
					^ "%NPL::ToBindingsAllocator"
					~ "%ContextNode::GetBindingsRef"
				),
				/ @ "class %Environment" $=
				(
					+ "function %GetMap",
					- 'const' @ "function %GetMapRef",
					(
					/ DLDI "function %DefineChecked" ^ $dep_from
						("%NPL::AddValueTo" @ %SContext) ~ "%AddValue";
					- $revert(b852) "all 2 function template %AddValue"
						$dep_from "avoiding Environment::AddValue"
					),
					/ "data member %Frozen"
						-> "functions %(IsFrozen, Freeze, Unfreeze)",
					* "missing swapping the frozen state"
						@ "friend function %swap" $since b871
						$= (/ $impl ^ "%std::swap"),
					/ DLDI ("functions %(operator[], DefineChecked)",
						"function template %Bind") ^ "%GetMapRef",
					* "missing clear the container of the existing binding \
						object" @ "function %Define" $since b867,
					(
					/ DLI "function %Define" !^ "%operator[]";
						// This is a bit more efficient by using explicit key \
							constructed with %string_view value and the \
							allocator.
					- $revert(b852) "member function %operator[]"
						// As WG21 N4279, transparent keys are not available \
							for mutators. This is at least simpler.
					),
					/ "functions %(Define, DefineChecked)"
						-> "static member functions" $dep_to "static Define"
				),
				/ @ "class %ContextNode" $=
				(
					/ "enabled allocator propagation from the argument"
						@ "constructor with 'const BindingMap&' parameter",
					- $revert(b788) "function %GetBindingsRef"
						$dep_from "%AllocatorEnvironment#(2, 3)",
					/ DD "Doxygen comment" @ "move constructor"
						^ $dep_from "%Environment::GetMap"
				)
			),
			(
			/ DLDI "external access of bindings map" !^ "%Environment::Mappings"
				$=
			(
				/ "function template %ToBindingsAllocator#2" @ %NPLA
					^ $dep_from "%Environment::GetMap",
				/ "function template %EmplaceLeaf#3" @ %NPLA
					^ "%Environment::GetMapRef",
				/ ("static member function %ContextNode::DefaultResolve"
					@ %NPLA, 'NPL_Impl_NPLA1_Enable_TCO' @ ("constructor#1",
					"function %Compress") @ "class %RecordCompressor"
					@ %NPLA1Internals, 'NPL_Impl_NPLA1_Native_Forms'
					@ "function %LoadModule_std_modules" @ %Dependency)
					^ "%NPL::ToBindingsAllocator"
			),
			/ "data member %Bindings" @ "class %Environment" @ %NPLA
				-> "private data member"
			),
			/ %NPLA1 $=
			(
				/ DLI "strengthen internal precondition check on check"
					@ "argument list evaluation"
					@ "member function %FormContextHandler::operator()",
				* "'#ignore' treated as empty variable name"
					@ "function %ExtractEnvironmentFormal" $since b959
			),
			/ @ %NPLA1Forms $=
			(
				/ DLI 'NPL_Impl_NPLA1_Enable_Thunked'
					@ "functions %Forms::(LetAsterisk, LetAsteriskRef)"
					^ "%A1::RelayCurrentOrDirect" ~ "%RelaySwitched",
					// This should only make differences with \
						'NPL_Impl_NPLA1_Enable_InlineDirect'. It is a bit more \
						efficient.
				* DLDI "missing qualified 'NPL::' before 'Deref' " $effective
					@ ("vau handlers" $since b861,
					!'NPL_Impl_NPLA1_Enable_Thunked' @ "function %Forms::Cond"
					$since b860),
					// The types of arguments are known but not guaranteed as \
						class types in %NPL.
				* $comp "'#ignore' treated as empty variable name"
					@ "functions %Forms::('WVau*', 'Vau*')" $since b959
					$dep_from ("function %ExtractEnvironmentFormal" @ %NPLA1),
				/ DLDI "dynamic vau handler" ^ $dep_from
					("%NPL::AddValueTo" @ %SContext, "%Environment::GetMapRef")
					~ "%Enviornment::AddValue"
					$dep_to "avoiding Environment::AddValue"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "native implementation"
						@ "applicative 'copy-environment'" $=
					(
						^ "%NPL::ToBindingsAllocator",
						/ "bindings map access on the source environment"
							^ $dep_from "%Environment::GetMap"
							~ "%Environment::GetRef"
					),
					* $comp "'#ignore' treated as empty variable name"
						@ "native implementations" @ "operatives whose name \
						with prefixes ('$wvau', '$vau', '$defv', '$defw')"
						$dep_from @ ("functions %Forms::('WVau*', 'Vau*')"
						@ %NPLA1Forms) $since b959
				),
				/ $revert(b956) DLI "targets" @ 'NPL_Impl_NPLA1_Native_Forms'
					@ "all functions with prefix 'Load' except \
					%LoadModule_SHBuild" !^ ('renv', 'cs')
					$= (/ $impl ^ "%Environment::GetMapRef")
					// Different to b956, avoiding 'cs' now is more efficient, \
						although avoiding 'renv' is not. Now explicit \
						'GetMapRef' calls are exposed, which can be further \
						refactored with some additional checks.
			)
		),
		/ DLDI $dep_from $forced ("%Environment::Frozen" @ %NPL.NPLA)
			$effective (("function %MoveResolved" @ %NPLA, "function template \
			%GetModuleFor" @ %NPLA1, "functions %Forms::('Define*', \
			'SetWith*', 'Import*', %Undefine)" @ %NPLA1Forms, ("native \
			implementation" @ "applicatives 'freeze-environment!'", "final \
			freezing") @ "function %LoadGroundContext" @ %Dependency) @ %NPL,
			"constructor %Environment" @ %Helper.Environment)
	),
	/ DLDI (("function templates %(LoadModule, LoadModuleChecked)"
		@ %NPLA1, "functions %(LoadGroundContext, LoadModule_SHBuild)"
		@ %Dependency) @ %YFramework.NPL, "function %RunNPLFromStream"
		@ %Tools.SHBuild.Main) $dep_from $forced "static Define"
),

b959
(
	+ "all native platforms supported by MSYS2 at current" @ %Tools.Scripts
		$effective @ "%(SHBuild-common.sh, SHBuild-YSLib-common.txt)" $=
	(
		(
		/ "function %SHBuild_Platform_Detect" $=
		(
			- "aarch64 error";
			+ "platform strings names %(MinGW_Clang64, MinGW_Clang32, \
				MinGW_ClangARM64, MinGW_UCRT64) for %MSYSTEM values %(CLANG64, \
				CLANG32, CLANGARM64, UCRT64) on platform %Win32"
		);
		+ "system prefixes ('/clang64', 'clang32', '/clangarm64', '/ucrt64') \
			for platform strings %(MinGW_Clang64, MinGW_Clang32, \
			MinGW_ClangARM64, MinGW_UCRT64)"
			@ "function %SHBuild_GetSystemPrefix"
		),
		+ "architecture detection for %MSYSTEM values %(CLANG64, CLANG32, \
			CLANGARM64, UCRT64)" @ "function %SHBuild_PrepareBuild"
	),
	/ %YFramework $=
	(
		+ 'ynothrow' @ "function %IsTyped" @ %YSLib.YObject,
		/ %NPL $=
		(
			- DLDI "header inclusion %YBase.YStandard.Function" @ %(NPLA, NPLA1),
				// %YBase.YStandard.Function is implied by the inclusion \
					%YSLib.Core.Func in %Lexical.
			/ %SContext $=
			(
				/ @ "class %Session" $=
				(
					+ "alias %allocator_tpye";
					/ DLDI "simplified" !^ "%YSLib::default_allocator"
						$effective @ ("private data member" @ "constructor \
						with 1 allocator parameter", "function %get_allocator")
				),
				+ 'ynothrow' @ "function templates %(IsTyped; IsTypedRegular)"
					$dep_from %YSLib.YObject
			),
			/ %NPLA1Internals $=
			(
				+ "function %CheckForEmptyParameter",
				/ $dev $lib "header inclusion %YBase.YStandardEx.Optional"
					>> %NPLA1 $dep_to "optional header move"
			),
			/ %NPLA $=
			(
				+ $dev $lib "header inclusion %YBase.YStandardEx.Container",
				/ "class %ContextNode" $=
				(
					/ "type %ExceptionHandler"
						^ "%ystdex::unchecked_function" ~ "%function",
					+ "functions %(IsAliveBefore; RewriteLoopUntil; \
						RewriteUntil)",
					(
					+ "function %UnwindCurrent" @ "class %ReducerSequence";
					+ "function %UnwindCurrentUntil"
					),
					/ DLDI "function %DefaultResolve"
				),
				+ "function %TermToNamePtr with 'TermNode&' parameter",
				/ DLI "optimized function %PrepareCollapse"
					^ "%Environment::GetAnchorPtr"
			),
			/ %NPLA1 $=
			(
				+ $dev $lib "header inclusion %YBase.YStandardEx.String",
				/ @ "class %FormContextHandler" $=
				(
					/ $revert_ex(b958) DLI "disabled the additional path for \
						applicative with wrap count 1",
						// This is a bit less efficient when most wrapping \
							counts are constant.
					+ "function %IsDynamicWrapper",
					/ DLDI "member declaration order",
						// This does not change any layout since only some \
							type aliases are effectively reordered with 1st \
							data member.
					* DLDI "missing qualified 'A1::' before \
						'RelayCurrentOrDirect'"
						@ 'NPL_Impl_NPLA1_Enable_Thunked'
						@ "function %CallHandler" $since b943
						// This The argument type is an instance of \
							%std::reference_wrapper which is out of the scope \
							of %NPL and it is not immuned from ADL, although \
							it should work with known header inclusions (so \
							this have not broken the interface).
				),
				/ @ "class %ContextState" $=
				(
					/ "kept current reducers" ^ (($dep_from
						"%(UnwindCurrentUntil, RewriteUntil)"
						~ "%(UnwindCurrent, Rewrite)") @ "class %ContextNode"
						@ %NPLA),
					- $forced $revert_ex(b892) "guard initialization"
						@ "constructor#1";
					* "unexpected and unnecessary invalidation on iterators in \
						the current reducer sequence" $since b892
				),
				/ DLI @ "functions %(ReduceChildren, ReduceChildrenOrdered, \
					FormContextHandler::operator())"
					@ 'NPL_Impl_NPLA1_Enable_Thunked' $=
				(
					/ $re_add(b858) "prevented creation of %Continuation" @
						"list element reductions",
					/ "improved the reduction for the last element"
						^ "%ReduceOnce"
				),
				/ DLDI "simplified functions %(BindParameter, \
					BindParameterWellFormed, MatchParameter)"
					^ $dep_from ("%CheckForEmptyParameter" @ %NPLA1Internals),
				/ "function %CheckEnvironmentFormal"
					-> "%ExtractEnvironmentFormal"
					$dep_from "optional header move" $=
				(
					/ "distinguished '#ignore' and empty formal parameter name",
					/ "allowed moving of the term value"
				)
			),
			- DLDI "header inclusion %YBase.YStandard.Container" @ %(NPLA1Forms,
				Dependency) $dep_any_from
				("header inclusion %YBase.YStandardEx.Container" @ %NPLA,
				"header inclusion %YBase.YStandardEx.String" @ %NPLA1),
			/ %NPLA1Forms $=
			(
				/ DLDI @ "namespace %Forms" $=
				(
					/ "simplified function %Call1CC"
						^ $dep_from ("%ContextNode::ReduceSequence::UnwindUntil"
						@ %NPLA, "%std::distance") ~ 'while',
					/ "simplified internal unwrapping"
						^ "%FormContextHandler::IsOperative"
						~ "%FormContextHandler::GetWrappingCount",
					/ DLI "optimized local environment reference accesses"
						^ "%Environment::GetAnchorPtr" $effective
						@ "functions %(AccL, AccR, FoldR1, Map1)"
				),
				- "header inclusion %YBase.YStandard.Function",
				+ DLI "macro %NPL_Impl_NPLA1Forms_VauHandler_OptimizeLevel",
				/ DLI @ "vau handler" $=
				(
					/ $design "reordered the internal reference data member \
						for the call",
					/ "removed the 1st subterm and determined whether to move \
						eariler" @ "%operator()",
					/ "split guard calls";
					/ "optimized the call" $=
					(
						/ "specializing for empty parameter tree"
							@ 'NPL_Impl_NPLA1Forms_VauHandler_OptimizeLevel \
							== 1' ^ $dep_from
							("%CheckForEmptyParameter" @ %NPLA1Internals),
						/ "specializing for parameter list"
							@ 'NPL_Impl_NPLA1Forms_VauHandler_OptimizeLevel \
							>= 2',
						/ "specializing for parameter list with 1 subterm"
							@ 'NPL_Impl_NPLA1Forms_VauHandler_OptimizeLevel \
							>= 2',
						+ $design 'YB_ATTR_nodiscard'
							@ "friend function %operator==",
							// This is not visible as the public API, though.
						+ $design "assertion for unique shared value of \
							evaluation structor" @ "constructor"
					),
					/ "enabled allocator"
						@ "dynamic environment formal parameter assignment",
					/ "extract initialization of terms out from the constructor"
				),
				* "missing of supporting empty symbol ('') as the name of \
					dynamic environment" @ "functions whose name have prefixes \
					'Vau', 'WVau' or 'Lambda'" $since b929 $=
					// Empty symbols were not allowed to be the variable name \
						until b929. Now there are different classes for these \
						case so empty string does represent the empty symbol \
						rather than '#ignore'.
				(
					/ "split vau handler classes",
					/ $forced "initialized"
						^ ($dep_from ("%ExtractEnvironmentFormal"
						~ "%CheckEnvironmentFormal") @ %NPLA1)
				)
			),
			/ %Dependency $=
			(
				- DLDI "header inclusion %YBase.YStandard.String" @ %Dependency
					$dep_from "header inclusion %YBase.YStandardEx.String"
					@ %NPLA1,
				* $comp "missing support of empty symbol ('') as the dynamic \
					environment name" @ "operatives whose name have the \
					prefixes '$vau', '$wvau', '$defv' or '$defw'" @ "function \
					%LoadGroundContext" $since b929 $dep_from
					"empty dynamic environment fix",
					// This is broken both for native implementations and \
						derivations.
				* $re_add(b958) "ill-formed call"
					@ '!NPL_Impl_NPLA1_Enable_Thunked'
					@ "function %LoadModule_std_modules") $since b955
			)
		)
	)
),

b958
(
	/ %YBase.YStandardEx $=
	(
		/ DLI "reordered headers to keep <ydef.h> included at first"
			@ %Exception,
			// To ensure configuration macros in <ydef.h> take effect before \
				the inclusion of any standard headers.
		* "ill-formed internal construction for allocators not \
			default-constructible" @ "class template %list" @ %List
			$since b866
			$= (/ $impl ^ "%is_nothrow_default_constructible" ~ 'noexcept'),
			// See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87809.
		/ "tree class template" @ %Tree $=
		(
			/ $dev $lib "reduced the requirement on complete types of template \
				arguments"
				$= (/ $impl ^ 'std::addressof' ~ '&'),
				// See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60497.
			(
			// See $2022-10 @ %Documentation::Workflow.
			* "ill-formed internal call due to missing 'nd' argument"
				@ "function template %emplace_hint_equal" $since b864;
			/ $lib "enabled hint for all range insertion functions" $=
			(
				/ $impl "%insert_range_unique#1" ^ "%insert_hint_unique"
					~ "%insert_hint",
				/ $impl "%insert_range_equal#1" ^ "%insert_hint_equal"
					~ "%insert_equal",
				* $comp "%insert_range_equal#2" $since b864
					$dep_from "%emplace_hint_equal"
			)
			),
			- $dev $impl "redundant node allocator initialization"
				@ "function template %insert_range_equal#2",
				// See $2022-10 @ %Documentation::Workflow.
			/ DLDI "reordered declarations of %select_value",
				// As %select_key.
			(
			/ DLDI "function %select_key#2" ^ "%select_key#1" ~ "%select_value";
			/ $dev "improved diagnostics by moving class-scope static \
				assertions to the definition of %select_key#2"
				// As https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85965.
			),
			/ DLI "simplified node copy"
				// See also https://gcc.gnu.org/git/?p=gcc.git;a=blobdiff;f=libstdc%2B%2B-v3/include/bits/stl_tree.h;h=a51d6da4ae864391d8c7ccf09bdcd288c61864da;hp=ec141ea01c76d447ecd5e91b75967af78e608720;hb=90bf60c3c24c6c99ebbecf9d08a6d0d916d73721;hpb=d1081010a1addfcf156b7042f581f0698ea25f61.
		),
		/ ($impl %Tree; $comp "class template %map" @ %Map) $=
		(
			* "nonconforming to ISO C++ behavior of move %operator= for \
				throwing %operator= on element types with non-POCMA and not \
				always-equal allocators"
				// As https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92124.
			@ (
				%List $since b866
					$= (/ ^ $impl ^ "%std::make_move_iterator"
						~ "%ystdex::make_move_if_noexcept_iterator"),
				%Tree $since b830
					$= (/ ^ $impl ^ "%std::move" ~ "%std::move_if_noexcept")
			),
			* "ill-formed internal construction for allocators or key \
				comparison objects not default-constructible" $since b864
				$= (/ $revert(b864) $impl
					^ "%is_nothrow_default_constructible" ~ "%ynoexcept"),
				// This is not the same to %List and libstdc++ which have no \
					such bug.
			* "missing noexcept-specification for move constructor"
				@ "internal representation on move" $since b830
				$= (/ $impl ^ "%is_nothrow_move_constructible"),
				// See also https://gcc.gnu.org/git/?p=gcc.git;a=blobdiff;f=libstdc%2B%2B-v3/include/bits/stl_tree.h;h=21b72cebf2e078ae893c61917ff1094b81bfeefd;hp=5be15afa25754f8a7a2c405c55328a08bbf1be34;hb=c832cf1c1d114aed70c2f84566cf4d63de0a56d0;hpb=fccb41b909cb207174d3270ce69e6729e2db28fa.
			* "invalid moved-from state left after allocator-extended move \
				construction with different allocators" $since b830
				// As https://gcc.gnu.org/bugzilla/show_bug.cgi?id=103501.
		),
		/ DLI "simplified container iterator class templates"
			$effective @ %(List, Tree) $=
		(
			- ("iterators comparison functions with different types";
				"base of %equality_comparable instances");
				// Since the constant iterators are implicitly \
					constructible from the non-const iterators and the \
					cost of the construction is negligible, it is \
					redundant to have the mixed comparison functions. This \
					simplification is necessary, or the following change \
					would be ill-formed due to member access failure.
			/ "function %operator==" -> "friend function"
		),
		/ %Apply $=
		(
			+ "metafunction %tuple_size" @ "inline namespace %cpp2011",
			// See $2022-10 @ %Documentation::Workflow.
			* "missing support of tuples other than cv-unqualifed type of \
				rvalue reference to std::tuple instances" @ "member unction \
				templates %(apply_call, apply_invoke)" @ "class template \
				specializations %call_projection" $since b810 $orig
				(@ "function template %call" @ "class template specialization \
				%call_projection" @ %Functional $since b447) $=
			(
				- DLDI "trailing parameter and argument";
				+ "deduced tuple parameter"
			),
			/ @ '__cpp_lib_apply >= 201603L' $=
			(
				/ @ "function template %apply" $dep_to "apply fix" $=
				(
					* "missing removing reference for lvalue tuples" @ "call \
						projection argument" $orig (@ %Functional $since b547)
						$= (/ $impl ^ "%remove_cvref_t");
					* $comp "missing support of tuples of type other than \
						cv-unqualifed type of rvalue reference to \
						%std::tuple instances" $orig (@ %Functional $since b547)
						$dep_from ("%apply_invoke" @ "class template \
						specializations %call_projection")
				),
				/ DLI ^ ("%remove_reference_t" ~ "%decay_t")
					$effective @ "function templates %(apply, make_from_tuple)"
			)
		)
	),
	/ $dev $lib "incorperated the resolution of LWG 2770"
		^ "%ystdex::tuple_size" ~ "%std::tuple_size" $effective @ ("function \
		templates %(apply, make_from_tuple)" @ %Apply, "metafunction \
		specialization %vseq::seq_size" @ %Tuple) @ %YBase.YStandardEx,
		// It seems that all supported platforms actually behave the same, \
			though. All other uses (in %YBase.YStandardEx.Iterator \
			and %YFramework.YSLib.Core.YFunc) of %std::tuple are not relying \
			on SFINAE, so there needs no change for simplicity (anyway, \
			%ystdex::tuple_size relies on %std::tuple_size directly).
	/ %YFramework $=
	(
		* $re_add(b957) "missing excluding potentional unexpected ADL lookup"
			@ "friend function templates %operator!=" @ "class %ValueObject"
			@ %YSLib.Core.YObject $since b753
			$= (/ $impl ^ "%ystdex::enable_if_same_param_t"),
		/ %NPL $=
		(
			/ %Dependency $=
			(
				* "ill-formed call" @ '!NPL_Impl_NPLA1_Enable_Thunked'
					$effective @ ("function %ReduceToLoadExternal",
					"native implementation" @ "applicative %require"
					@ "function %LoadModule_std_modules") $since b955,
				- DLDI 'NPL::' @ 'NPL::tuple' $effective @ "native \
					implementation" @ "applicatives ('register-requirement!', \
					%require)" @ "function %LoadModule_std_modules"
			),
			/ DLI %NPLA $=
			(
				/ $design "removed redundant newline",
				/ "optimized member function %ContextNode::ApplyTail by \
					reording the move of the reducer",
				+ 'YB_ATTR(hot)' @ "member function %ContextNode::ApplyTail"
			),
			/ @ "class %TCOAction" @ %NPLA1Internals $=
			(
				/ @ "function %CompressFrameList" $=
				(
					// See $2022-10 @ %Documentation::Workflow.
					/ $impl !^ "%remove_if";
					* $comp $dev $impl "insufficient guarantee of the order of \
						removal of the frames" $since b941
				),
				- DLI "redundant 'private:'",
				/ "function %CompressForGuard" $=
				(
					/ DLI
						"lifted local variable initialization to the beginning",
					+ $dev $lib "assertion to ensure the guard context is same \
						in the context in the action"
				),
				* "wrong order of combiner and environment pointer components"
					@ "%(RecordFrameIndex, FrameRecord)"
					$orig (@ %NPLA1 $since b842),
					// The environment is not the fresh one in the call to the \
						combiner, but the one for evaluating the call, so it \
						should live longer. This change is normally invisible \
						(except for interoperations which inserts visible \
						effects between the destructor calls), though.
				(
				+ "function %GetContextRef";
				/ DLDI "simplified functions %(MakeOneShotChecker, operator())",
				),
				(
				+ "function %AssertAttached";
				/ DLDI "simplified function %PopTopFrame",
				+ DD "'\post' command" @ "Doxygen comment"
					@ "function %AddOperator"
				),
				/ DLI "initializing frame record list" @ "copy constructor"
					^ "allocator from the source frame record list"
					// This is more consistent to other implementations and a \
						bit more efficient than other implementations. It also \
						allows further stashing of the list elements by \
						splicing with other lists (albeit not necessarily more \
						efficient).
			),
			/ %NPLA1 $=
			(
				/ @ 'NPL_Impl_NPLA1_Enable_Thunked'
				(
					/ DLI "prevented creation of %Continuation"
						@ "functions whose name have prefix 'ReduceCombined'";
						// This is not visible except for interoperations, \
							which is not documented.
					/ "supported internal thunk object"
						@ "function %QueryContinuationName"
				),
				/ DLDI "combiner wrapping" @ "separator pass"
					@ "constructor %GlobalState" ^ "%Strict" ~ '1',
					// Also to eliminate potential warning: [-Wsign-conversion].
				+ $dev $lib "header inclusions \
					%YBase.YStandardEx.(IntegerSequence, TypeOperation, \
					Function)",
				- $dev $lib "header inclusion %YBase.YStandardEx.ScopeGuard",
					// This is already included in %SContext.
				/ @ "class %FormContextHandler" $=
				(
					/ "data member %Wrapping"
						-> "functions %(IsOperative, GetWrappingCount, Unwrap)",
					+ $src DLI "internal call pointer",
					(
					/ @ "function %operator()" $=
					(
						/ "optimized for applicative with wrapping count 1",
						/ "optimized call dispatching" ^ "internal call pointer"
					);
					/ "constructors" $=
					(
						/ $dev "split constructor overloads"
							!^ "default arguments"
							$= (/ $impl ^ "%ystdex::apply"
								$dep_from "apply fix");
								// Using of %ystdex::apply is not absolutely \
									necessary, but for convenience.
						+ "overloads to accept constant wrapping counts"
							^ "%ystdex::size_t_"
					)
					)
				),
				/ DLDI "underlying type" @ "enum %WrappingKind"
					$dep_from $forced "%FormContextHandler::Wrapping"
					^ $dep_from "%FormContextHandler::GetWrappingCount",
				/ DLI "function template %RegisterFormHandler#2"
					!^ "%A1::RegisterFormHandler",
				/ @ "class %GlobalState" $=
				(
					+ "function template %Perform with 1st function object \
						parameter for preprocessing overriding"
						^ "%ystdex::well_formed_t";
					/ DLI "simplified function template %Perform#1"
						^ ("%Perform#2", "%ystdex::ref")
						// This is actually a bit more efficient compared to \
							the old implementation as well as using %std::ref.
				),
				/ DLDI "function %ReduceCombinedBranch"
					// To eliminate G++ warning: [-Wunused-variable] \
						@ 'NPL_Impl_NPLA1_Enable_Thunked' $since b957.
			),
			/ DLI @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ $design "wrapping count access" $effective @ ("functions \
					whose name have prefix 'Wrap', 'Unwrap' or 'Apply'",
					"function %ForwardFirst")
					$dep_from ("%FormContextHandler::Wrapping" @ %NPLA1)
					$= (/ $impl ^ $dep_from
						("FormContextHandler::(IsOperative, GetWrappingCount, \
						Unwrap)" @ %NPLA1)),
				/ "optimized all 4 function templates %(RegisterUnary, \
					RegisterBinary)" ^ "%ystdex::size_t_" $dep_from
					("constructor %FormContextHandler" @ %NPLA1)
			)
		)
	)
),

b957
(
	/ "%PatchRevision.sh" @ %Tools.Scripts $=
	(
		* "wrongly ignored the error of 'hg root' call" $since b565,
			// It should normally not fail, though.
		(
		+ "'git' support";
		+ "variables %(PatchHg, PatchGit)"
		)
	),
	/ %YBase.YStandardEx.Path $=
	(
		* "function template %to_string relying on non-explicit default \
			constructor of sequence container value type" $since b408
			$= (/ $impl !^ '{}')
		+ "overload with allocator parameter"
			@ "function templates %(to_string, to_string_d)"
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "allocator support" @ "class %Path" @ %Service.FileSystem $=
			(
				+ "alias %allocator_type";
				(
				+ "4 constructors with %allocator_type parameter";
				+ "parameter 'allocator = {}' for all other non-default \
					constructors"
				),
				+ "function %get_allocator",
				/ DLI @ "function %GetString" $=
				(
					- "redundant 'const' preventing copy elision"
						@ "local object";
						// This is necessary for allocators because the \
							allocator here does not propagate on copy (but \
							only on move).
					/ "enabled allocator" ^ $dep_from ("%get_allocator"
						("%ystdex::to_string_d" @ %YBase.YStandardEx.Path)),
				)
			),
			* "missing excluding potentional unexpected ADL lookup"
				@ "friend function templates %operator==" @ "class %ValueObject"
				@ %Core.YObject $since b753
				$= (/ $impl ^ "%ystdex::enable_if_same_param_t")
		),
		/ %NPL $=
		(
			/ %NPLA1Internals $=
			(
				/ "1st element type" @ "type %FrameRecord" -> "%ValueObject"
					~ "%ContextHandler" $dep_from %YSLib.Core.YObject,
					// This relies on the %ValueObject fix to prevent the \
						ambiguity on '==' in the implemenation of \
						%TCOAction::CompressFrameList.
				/ @ "class %TCOAction" $=
				(
					/ DLDI "functions %(CompressForGuard, MoveFunction)"
						^ "%NPL::get",
					/ "function %MoveFunction" -> "function %PopTopFrame",
					+ "function %GetFrameRecordList",
					(
					+ "function %AddOperator";
					/ "2 function overloads %Attach"
						-> "function %Attach" $dep_from $forced "%FrameRecord",
					),
					(
					- "data member %OperatorName"
						$dep_to "removal of TCOAction operator name";
					/ $forced DLI "simplified constructor"
					),
					+ DLI 'YB_ATTR(cold)'
						@ "functions %(MakeOneShotChecker, SaveTailSourceName)",
					/ @ "function %CompressForGuard" $=
					(
						+ DLI 'YB_ATTR(hot)',
						/ "delayed the call to %CompressForContext"
							// This preserves more operator names.
					)
				),
				/ "dropped guard with empty environment pointer support"
					@ ("member functions %(Combine::RelayEnvSwitch#1, \
					(TailCall::NonTailCall)::(RelayNextGuarded, \
					RelayNextGuardedLifted, RelayNextGuardedProbe))";
					$comp "function %PrepareTCOEvaluation",
					"member function %TCOAction::CompressForGuard")
					// The guard should not be constructed with a null pointer \
						value from a running instance of the context normally, \
						because there is the nonnull invariant on the current \
						environment. This is also more consistent to the \
						existing precondition of %Combine::RelayEnvSwitch#2.
			),
			/ %NPLA1 $=
			(
				/ DLDI "reordered declarations of function %SetupTailContext",
				/ @ "functions %(ReduceCombined, ReduceCombinedReferent)" $=
				(
					/ "error handling" $=
					(
						/ "prevented moving of %ContextState::OperandName";
							// This makes it still usable for the handling \
								later.
						/ DLI "prvented allocation for message"
					),
					(
					/ "handled operator before accessing the context handler"
						^ $dep_from ("%TCOAction::(AddOperator, Attach)"
						@ %NPLA1Internals) $dep_to "tail operator setup";
					/ @ 'NPL_Impl_NPLA1_Enable_TCO' $=
					(
						/ "saved operator for each frame instead of \
							the 1st bottom frame of %TCOAction";
						/ "passed prvalues as lvalues" $dep_to
					)
					),
					+ DLI 'YB_ATTR(hot)'
				),
				(
				* "missing supported frames other than the 1st bottom frame of \
					%TCOAction" @ 'NPL_Impl_NPLA1_Enable_TCO'
					@ "function %TraceBacktrace" $since b925
					$= (/ $impl ^ $dep_from ("%TCOAction::GetFrameRecordList"
						@ %NPLA1Internals) ~ "%QueryTailOperatorName");
						// This also relies on the change on \
							%TCOAction::CompressForGuard to get more names.
				- $revert(b947) "function %QueryTailOperatorName"
					$dep_from "removal of TCOAction operator name"
				),
				+ "function %ReduceCombinedReferentWithOperator",
				/ DLDI "renamed internal term name"
					@ "member function %ContextState::TrySetTailOperatorName"
			),
			/ DLI %NPLA1Forms $=
			(
				/ $forced $design "%operator()" @ "vau handler" @ %NPLA1Forms
					$dep_from ("%TCOAction::MoveFunction" @ %NPLA1Internals),
				/ @ "namespace %Forms" $=
				(
					/ "optimized" @ "functions %(Eval, \
						EvalRef, EvalString, EvalStringRef, RemoteEval, \
						RemoteEvalRef)" ^ ("%RelayForCall",
						'YB_LAMBDA_ANNOTATE', 'flatten'),
					/ "optimized functions whose name match glob pattern \
						'*Let*'" !^ "%RelayForCall"
				),
				/ "optimized around the call to %RelayForCall"
					@ "vau handler call" ^ ('YB_LAMBDA_ANNOTATE', 'flatten')
			)
		),
	),
	/ @ "functions %(FetchLocalFHSRootPath, FetchRootPathString)"
		@ %Helper.Initialization $=
	(
		/ DLI "enabled allocator" @ "cache"
			^ $dep_from ("constructors %Path" @ %YSLib.Service.FileSystem);
		* $re_add(b930) "allocator of internal resources might be used out of \
			lifetime" $since b861 ^ "%pmr::new_delete_resource_t"
			// See $2022-10 @ %Documentation::Workflow.
	),
	/ @ "platform %MinGW64" $=
	(
		// See $2022-10 @ %Documentation::Workflow.
		/ $revert_ex(b900) $build "simplified workaround"
			@ "%YFramework library build" ^ '-Og' ~ 'O1';
		* "failed to initializing the framework" @ "static debug configuration"
			$since b947
	)
),

b956
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %UI.Loader $=
			(
				+ "tracing of the string value with level %Informative after \
					the warning message on failure" @ "function %ParseRect",
				/ @ "class %WidgetLoader" $=
				(
					/ DLDI "avoided the use of magic number"
						@ "function %TransformUILayout",
					(
					+ "data member %Convert";
					+ "constructor",
					/ DLI "simplified function %LoadUILayout" ^ "%Convert"
						~ "%NPL"
					)
				),
			),
			/ "parameter type 'const shared_ptr<Shell>&'" @ "function %Activate"
				@ %Core.YApplication -> 'shared_ptr<Shell>'
		),
		/ "parameter type 'const shared_ptr<Shell>&'" @ "function %NowShellTo"
			@ %Helper.ShellHelper -> 'shared_ptr<Shell>',
			// As in %YSLib.Core.YApplication.
		/ %NPL $=
		(
			/ %Dependency $=
			(
				(
				/ @ "functions %(LoadModule_std_io, LoadModule_std_modules)" $=
				(
					/ DLI "simplified" !^ "2nd argument";
					- $revert(b942) "2nd parameter"
				);
				/ $forced $revert(b942) DLI
					"simplified function %LoadStandardContext",
				),
				/ DLI "several target" @ "function %LoadGroundContext" ^ 'cs'
					~ 'renv',
					// Only in a few cases it would be more efficient.
				/ DLDI ^ 'ynothrow' @ "applicative 'remove-file'"
					@ "function %LoadModule_std_system",
				- DLDI "header inclusion <istream>" @ "header"
					$dep_from "NPLA1 inclusion of <istream>"
			),
			/ %Configuration $=
			(
				+ "class %NodeLoader";
					// This is like %A1::LoadNode, except that the supported \
						values are already converted by %NPL::A1::ParseLeaf, \
						so both supported format of the keys and non-key leaf \
						values are different. See %Documentation.YFramework.
				/ DLI "simplified function %operator>>" ^ "%NodeLoader",
					// This is a breaking change on the key format as above.
				- "function %LoadNode" $dep_from ("%FetchMIMEBiMapping"
					@ %Helper.Initialization, %Yeader.Shells)
			),
			/ %NPLA1 $=
			(
				/ @ "constructos %GlobalState" $=
				(
					+ "2 overloads with allocator parameter";
					/ "default argument" @ "'pmr::memory_resource&' parameter"
						-> ("default argument '{}'" @ "allocator parameter")
				),
				* DLDI "missing inclusion <istream>" @ "header" $since b758
					$dep_to "NPLA1 inclusion of <istream>",
					// This was needed for %(std::istream, streambuf). It was \
						fixed for %std::streambuf but not %std::istream by the \
						inclusion of <iosfwd> since b901 because the complete \
						type %std::istream was used since b891. This bug was \
						not shown due to the inclusion of <istream> in \
						%YBase.YStandardEx.String, but this should not been \
						relied on.
				- "functions %(TransformNode; InsertChild)"
					$dep_from ("%A1::LoadNode" @ %Configuration)
			),
			/ @ %NPLA $=
			(
				+ "overload %AssignWeakParent with %EnvironmentReference \
					parameter",
				+ "2 constructor with %allocator_type parameter"
					@ "class %Environment",
				(
				- "function %ParseNPLATermString";
				- "function %MapNPLALeafNode"
					$dep_from ("%TranformNode" @ %NPLA1)
				)
			)
		),
		/ %Helper $=
		(
			/ @ "constructor %Environment" @ %Environment $=
			(
				/ "froze the current environment after the call to \
					%NPL::A1::Forms::LoadStandardContext",
				/ DLI "simplified"
					$dep_from ("constructors %GlobalState" @ %NPL.NPLA1)
			),
			/ %Initialization $=
			(
				* DD "wrong precondition" @ "Doxygen comment"
					@ "function %FetchRoot" $since b550
					$= (/ "'\pre' command" -> "'\exception' command"),
				/ @ "function %FetchMIMEBiMapping" $=
				(
					/ "simplified"
						^ $dep_from ("%NodeLoader" @ %NPL.Configuration);
						// This changes the precondition and it is not fully \
							compatible to the old version. This also a \
							breaking change, see %NPL::A1::NodeLoader.
					+ DD "'\exception' command" @ "Doxygen comment"
				)
			)
		)
	),
	/ DLDI "function %FetchWidgetLoader" @ %YReader.Shells
		$dep_from $forced ("constructor %WidgetLoader" @ %YFramework.UI.Loader)
		^ $dep_from ("%NodeLoader" @ %YFramework.NPL.Configuration)
		// This is a breaking change as %NPL::A1::NoadLoader. See also \
			%Documentation.Test.
),

b955
(
	* "missing refinement on Clang++ version" @ "#pragma directive"
		@ "member function %monotonic_buffer_resource::do_allocate"
		@ %YBase.YStandardEx.MemoryResource $since b948,
		$= (/ $impl '#if YB_IMPL_CLANGPP' -> '#if YB_IMPL_CLANGPP >= 100000'),
		// To eliminate Clang++ warning [-Wunknown-warning-option], or error \
			with [-Werror,-Wunknown-warning-option].
	* $re_add(b953) DD "wrong description of the result type" @ "applicatives \
		('rest&', %restv)" @ %Documentation.NPL $since b951,
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ %YCoreUtilities $=
			(
				/ DLDI "constructor#2" @ "class %ArgumentsVector"
					^ "%CommandArguments::VectorType::allocator_type"
					~ "%vector<string>::allocator_type"
				/ "function %PerformKeyAction" @ %YCoreUtilities
					-> "function template" $=
				(
					^ "template argument" ~ "%function",
					(
					^ "%std::string" ~ "%string";
					* $comp "unexpected implicit dependency on \
						%pmr::get_default_resource" $since b861
						// This would cause it not usable during \
							initialization of namespace scope variables, which \
							was undocumented.
					)
				)
			),
			* $re_add(b879) "missing using allocator for container copy"
				@ "all constructors \
				with 'const Container&' parameter" @ "class %ValueNode"
				@ %ValueNode $since b844,
				// The allocator would not be propagated implicitly (not \
					affected by the constructor transitions from b844 to \
					b845, which were all inconsist to the copy assignment). \
					Now it also behaves as the copy constrctor of %ValueNode \
					and %TermNode. This change effects a call sites in a \
					compatible way.
			* "missing removal of cv-qualifiers for %ValueHolder argument"
				@ "static function template %CreateHolder"
				@ "interface %IValueHolder" @ %YObject $since b761
				// This would make creation of cv-qualified %RefHolder \
					ill-formed.
		),
		/ %NPL $=
		(
			/ %NPLA1Internals $=
			(
				* $doc $impl "wrong internal %ExtraInfo comments"
					@ "class %TCOAction" $since b947,
				/ DLI "simplified member function %TCOAction::operator()",
				* DLDI "redundant unused iterator variable" @ "function %clear"
					@ "class template %FrameRecordList" $since b946,
					// To eliminate Clang++ warning: [-Wunused variable].
				- DLI "anchor" @ !'YB_IMPL_GNUCPP < 120000'
					@ "class %RefContextHandler"
			),
			/ %NPLA1 $=
			(
				* "mismatched argument type" @ "%GKeptGuardAction"
					$since b942
					$= (/ $impl ^ 'std::declval<_tGuard&&>'
						~ 'std::declval<_tGuard&>'),
				/ "allowed return non-void type"
					@ "function template %InvokeIn",
				/ DLI "simplified 3rd parameter type"
					@ "function %ParseLeafWithSourceInformation"
					^ "%SourceName",
				/ "supported trailing parameter pack"
					@ "alias template %GTokenizer",
				/ "class %REPLContext" -> "class %GlobalState" $=
				(
					- "function template %LoadFrom";
						// All instances should use %Perform instead.
					/ "split preprocessing out of term prepration" $=
					(
						- "nested call" @ "function template %Prepare#2";
						- "function template %Prepare#1",
						- $comp "preprocessing" @ ("all overloads %ReadFrom",
							"static function %DefaultLoad";
							"data member %Load"),
						// Preprocessing is now optional and it should be \
							called externally if needed.
						/ $forced DLDI "called %Preprocess"
							@ "function template %Perform"
					),
					(
					+ 'mutable' @ "data member %CurrentSource";
					+ 'const' @ "all member function and function templates \
						not modifying objects except %Root"
					),
					(
					+ "explicit 1st parameter 'ContextNode&' type"
						@ "function templates %(Perform, Prepare)";
						// The change to %Prepare passes the context in the session.
					- "use of %Root" @ "members";
						// This includes %ReadFrom overloads without trailing \
							'ContextNode&' parameter but implying %Root in the \
							implementation.
					- "data member %Root",
					(
					/ "all 9 functions and 2 function templates with trailing \
						context parameter" ^ 'ContextState&' ~ 'ContextNode&';
					/ $forced DLDI "simplified function template %Perform",
					/ $forced DLI "simplified static function %DefaultLoad"
					)
					),
					/ @ "parameter list"
						@ ("alias %Loader", "static function %DefaultLoad") $=
					(
						/ "type of parameter 'ContextNode&'" -> 'ContextState&',
							// This is needed for the source information \
								change of %CurrentSource, see below.
						- "1st parameter"
					),
					(
					/ "added additional source parameter" @ "%SourcedTokenizer"
						$dep_from "%GTokenizer",
					/ ("data member %CurrentSource", "function template \
						%ShareCurrentSource") >> "class %ContextState";
						// So there is no need of 'mutable' and protection \
							(like the global interpreter lock) against \
							concurrent accesses via 'const GlobalState&', \
							which allows concurrent loading on different \
							%ContextState instances.
					/ $forced DLDI "constructor" $dep_from "%CurrentSource"
					)
				),
				(
				+ "class name declaration %GlobalState";
				/ @ "class %ContextState" $=
				(
					+ "data member %Global";
					+ "parameter type" @ "constructor#1"
						-> 'const GlobalState&' ~ 'pmr::memory_resource&',
					/ $forced DLI "constructors" $dep_from "%REPLContext"
				)
				),
				/ "1st parameter type 'REPLContext&'"
					@ "function template %TryLoadSource"
					-> 'const GlobalState&' $dep_from $forced "%REPLContext",
				+ "function template %Perform"
					$dep_from ("%Perform" @ "GlobalState"),
				/ "data members %(EvaluationPasses, EvaluateLeaf, \
					EvaluateLiteral)" @ "class %ContextState"
					>> "class %GlobalState" $dep_to "pass lifting";
					// The guard pass which has no context parameter is not \
						moved.
				/ "simplified constructors and friend function %swap"
					@ "class %ContextState" $dep_from $forced "pass lifting",
				/ "1st parameter type 'ContextState&'" @ "function \
					%SetupDefaultInterpretation" -> 'GlobalState&'
					$dep_from $forced ("class %REPLContext", "pass lifting")
					// This is required by both %GlobalState constructor and \
						the passes lifted to the global state.
			),
			/ %Configuration $=
			(
				+ "allocator support" @ "class %Configuration" $=
				(
					+ "alias %allocator_type";
					+ "constructor with allocator parameter",
					+ "constructor template with allocator parameter and \
						parameter pack",
					+ "function %get_allocator"
				),
				/ DLI "supported allocator" @ "function operator>>"
					^ $dep_from "%Configuration::get_allocator",
				/ "function template %LoadNode" -> "function"
			),
			/ $forced "function %Forms::EvalUnit used context instead of \
				2nd argument from the object language" @ %NPLA1Forms
				$dep_from ("%REPLContext" @ %NPLA1) $=
			(
				+ "2nd parameter of 'ContextNode&' type";
				/ $impl ^ $dep_from ("%A1::Perform" @ %NPLA1)
			),
			/ %Dependency $=
			(
				/ $forced DLDI
					"functions %(ReduceToLoadExternal, RelayToLoadExternal)"
					$dep_from ("%REPLContext::Load" @ %NPLA1),
				+ "applicative 'symbol?'" @ "function %LoadGroundContext",
				+ "applicative 'string?'" @ "function %LoadModule_std_strings",
				/ "1st parameter type 'REPLContext&'" -> 'const GlobalState&'
				/ $forced (("functions %OpenUnique"; "function %PreloadExternal"
					$dep_from ("%TryLoadSource" @ %NPLA1)),
					"function whose name have prefix 'Load'"
					$dep_from ("%REPLContext" @ %NPLA1))
					$= (/ $impl ^ $dep_from ("%A1::Perform" @ %NPLA1))
			)
		),
		/ @ "class %Environment" @ %Helper.Environment $=
		(
			/ $forced DLDI "constructor"
				$dep_from ("%LoadStandardContext" @ %NPL.Dependency),
			(
			/ "data member %Context" => "%Global";
			+ "data member %Main";
			/ "context" ^ "%Main" ~ "%Global.Root"
			)
		)
	),
	* $comp "building failure" @ "platform %Android" $since b942
		$dep_from %(YBase.YStandardEx.MemoryResource,
		"%GKeptGuardAction" @ YFramework.NPL.NPLA1),
	/ %Tools.SHBuild.Main $=
	(
		/ @ "help message" $=
		(
			* "incorrect effect for multiple instances"
				@ "descriptions for the '-xcmd,' option" $since b659,
			/ @ "common descriptions" $=
			(
				* "missing indent before the paragraph of the session epoch"
					$since b905
				+ "newlines between paragraphs"
			),
			* "missing specifying the empty string after ',' for \
				descriptions of OPTIONS" $since b659,
			/ DLDI
				"simplified descriptions for the '-xmode,' option" ^ "macro"
		),
		/ DLI "optional table" ^ "%ystdex::unchecked_function" ~ "%function",
		/ $forced DLI "function %RunNPLFromStream" $dep_from
			("%(LoadStandardContext, LoadModule_SHBuild)"
			@ %YFramework.NPL.Dependency)
	),
	/ $forced DLDI "called %Preprocess function from the global state instance"
		$effective @ ("all 2 function templates %ExecuteNPLA1"
		@ "class %Environment" @ %YFramework.Helper.Environment,
		"function %RunNPLFromStream" @ %Tools.SHBuild.Main)
		$dep_from ("%REPLContext" @ %YFramework.NPL.NPLA1),
	/ $forced DLI "function %TestNPL" @ %YReader.Shells
		$dep_from %YFramework.Helper.Environment
),

b954
(
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ %YObject $=
			(
				- DLDI $re_ex(b949) "'YSLib::' prefix"
					@ "calls to %YSLib::make_observer",
					// As %NPL changes in b947.
				* "ill-formed type access" @ "function %Equals"
					@ "class template %PolymorphicValueHolder" $since b899
			),
			+ "allocator support" @ "class %MessageQueue" @ %YMessage $=
			(
				+ 'using BaseType::get_allocator;';
				+ "constructor with allocator parameter",
				+ 'using BaseType::get_allocator;'
			),
			+ "allocator support" @ "class %Application" @ %YApplication $=
			(
				+ "alias %allocator_type";
				+ "constructor with allocator parameter" ^ $dep_from
					("constructor %MessageQueue with allocator parameter"
					@ %YMessage),
				+ "function %get_allocator"
					^ $dep_from ("%MessageQueue::get_allocator @ "%YMessage)
			)
		),
		/ DLDI "internal header inclusion" @ %'Helper_(DS)'.DSMain
			^ %YSLib.UI.YGUI,
		/ %NPL $=
		(
			/ %Dependency $=
			(
				/ @ "function %Forms::LoadGroundContext" $=
				(
					/ @ "alternative derivation" @ "applicative 'rest&'" $=
					(
						* $revert_ex(b953) "unexpected uncollapsed elements \
							in the result" $since b953;
							$= (/ $impl ^ '&' ~ '@');
						* "xvalue arguments not properly preserved in the \
							result" $since b951
							$= (/ $impl ^ '$resolve-identifier') 
					)
				),
				/ "reducer name 'recover-source-name'" => 'restore-source-name'
					$effective @ "functions %(ReduceToLoadExternal, \
						RelayToLoadExternal, Forms::LoadModule_std_modules)",
				/ "function templates %(InvokeIn, GetModuleFor, LoadModule, \
					LoadModuleChecked)" @ "namespace %Forms"
					>> ("namespace %A1" @ %NPLA1)
			),
			/ %NPLA $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "all 3 function templates %AllocateEnvironment",
				(
				+ "4 functions %AssignParent";
				+ "function template %AssignParent",
				+ "2 functions %AssignWeakParent"
				)
			),
			/ %NPLA1 $=
			(
				/ @ "trailing sequence binding" @ "functions %(BindParameter, \
					BindParameterWellFormed, BindSymbol)" $=
				(
					+ $design "alternative implementation of creation of the \
						subobject reference" ^ "%ReduceAsSubobjectReference",
						// This is not enabled, because the current \
							implementation is better a bit in performance.
					^ $re_add(b953) $design '*' ~ "%NPL::Deref",
					/ "optimized subpair creation"
				),
				* "wrong handling of trailing arguments"
					@ "function template %GuardFreshEnvironment" $since b945,
					// It would be ill-formed if there is any argument.
				/ DLI "removed redundant check on the parent" @ "function \
					templates %(InvokeIn, GetModuleFor)"
					^ "%GuardFreshEnvironment" $dep_from
					("%Forms::(InvokeIn, GetModuleFor)" @ %Dependency),
			),
			/ %NPLA1Forms %=
			(
				+ $dev $lib "assertion to check against the sticky tag"
					@ ("function %Forms::EqualTermValue",
					"static member function %Encapsulation::Equal"),
				/ @ "namespace %Forms" $=
				(
					/ $dev $lib "assertion string for sticky tag check failure"
						@ "functions %(First, FirstVal, Rest, RestFwd, \
						RestVal, Let, LetRef, LetWithEnvironment, \
						LetWithEnvironmentRef, LetRec, LetRecRef, LetAsterisk, \
						LetAsteriskRef, BindingsWithParentToEnvironment, \
						BindingsToEnvironment)",
						// To be more consistent with other similar \
							implementations.
					/ DLI "simplified function %RestRef"
						^ "%ReduceAsSubobjectReference",
					/ $re_add(b853) DLI "checked to ensure first-class object \
						representation in the subterm" @ "functions \
						%(SetFirst, SetFirstAt, SetFirstRef, ApplyContinuation)"
						^ "%AssertValueTags",
					/ DLI "simplified function %ApplyContinuation",
					/ DLDI "simplified" @ ("%operator" @ "vau handler",
						"functions whose name have prefix 'Let' or 'Provide'")
						$dep_from
						^ ("%(AssignParent, AssignWeakParent)" @ %NPLA)
				)
			)
		),
		/ %Helper $=
		(
			/ %GUIApplication $=
			(
				/ DLI "allocated %Environment with allocator"
					@ "class %GUIApplication"
					^ $dep_from ("%Application::(allocator_type, get_allocator)"
					@ %YSLib.Core.Application),
				(
				/ "function %Execute" -> "2 functions" $=
				(
					- "default argument";
					+ "overload with 1 parameter"
						^ $dep_from ("%Application::get_allocator"
						@ %YSLib.Core.Application)
				);
				- "header inclusion %GUIShell" $dep_from %'Helper_(DS)'.DSMain
				)
			)
			/ %Environment $=
			(
				/ DLI @ "constructor %Environment" $=
				(
					/ $design "simplified" @ "platform %DS" ^ (("%make_any"
						~ "%(any, in_place_type)") @ %YSLib.Core.YObject),
					/ ^ "allocator" @ "initalizing %Root"
						^ $dep_from ("%Application::get_allocator"
						@ %YSLib.Core.YApplication),
					* $design "redundant unused %string variable" $since b725
				),
				(
				+ "macros %(YF_Helper_Environment_UseStdout, \
					YF_Helper_Environment_NPL_UseBacktrace, \
					YF_Helper_Environment_NPL_UseSourceInfo";
				/ @ "class %Environment" $=
				(
					+ "data members %(DefaultOutputStream, Context)";
					+ "non-trivial initialization of %NPL::REPLContext"
						@ "constructor",
					+ "2 function templates %ExecuteNPLA1"
						$dep_from ("%InvokeIn" @ %NPL.Dependency)
				)
				)
			)
		)
	),
	/ %YReader $=
	(
		/ %Shells $=
		(
			/ @ "function %TestNPL" $=
			(
				/ "simplified" ^ $dep_from ("%Environment::ExecuteNPLA1"
					@ %YFramework.Helper.Environment);
				* $comp "mentioned backtrace in the message of the nested \
					exception when the backtrace is not used" $since b928,
					// This should not affect the call site in %ShlExplorer \
						since it should not fail to throw the exception.
				- "'NPL::pmr::memory_resource&', 'std::ostream&' parameters",
				+ "'Environment&' parameter"
			);
			- "header inclusion %NPL::Lexical"
		),
		/ DLI %ShlExplorer $=
		(
			/ $re_add(b942) $design "header inclusion %Functional" -> %Bind,
			/ "NPL test entry for test subitem 2" @ "constructor %ShlExplorer"
				$dep_from $forced ("%TestNPL" @ %Shells)
				^ $dep_from (("%Environment::DefaultOutputStream",
				"%YF_Helper_Environment_UseStdout")
				@ %YFramework.Helper.Environment)
		)
	)
),

b953
(
	/ DD %Documentation.NPL $=
	(
		* "inconsistent grammar of alternative expressions" $since b855
			$= (/ "all '<alternate>'" => '<alternative>'),
			// This is also like [RnRK].
		* "wrong description on evaluation result of consequent and \
			alternative expression",
			// The change is also consistent to the document for '$if'.
		/ "clarified the construct of list to reject reference to list element \
			in a pair as a proper list" $dep_to "list definition clarification",
			// See $2022-08 @ %Documentation::Workflow.
		* "wrong description of the result type" @ "applicative 'rest%'"
			$since b951,
		/ $lib "reordered applicatives prefixed with 'set-first'"
			// This is consistent to both native implementation and \
				derivations in %YFramework.NPL.Dependency at current, as \
				well as the module order in [RnRK].
	),
	/ %YFramework.NPL $=
	(
		/ %SContext $=
		(
			+ "2 function overloads %FindStickySubterm for non-const parameter \
				types",
			(
			+ "function overload %AssertValueTags for tags parameter";
			/ DLDI "simplified function %AssertValueTags#2"
			// Similar to %AssertReferentTags.
			)
		),
		/ DLI "checked to ensure first-class object representation in subterms"
			@ ("functions %(ReduceToReferenceList, ReduceToReferenceUList)"
			@ %NPLA1, "functions whose name match glob pattern '*Let*'"
			@ "namespace %Forms" @ %NPLA1Forms) ^ "%AssertValueTags",
			// This reflects the fact that %TermTags::Temporary is not \
				allowed in the subterms by convention. This relies on the \
				trailing sequence binding change in b951, albeit the \
				convention is new.
		/ @ "namespace %A1" @ %NPLA1Forms $=
		(
			/ @ "namespace %Forms" $=
			(
				/ $re_add(b869) DLDI "simplified subterm accesses with already \
					verified boundary" ^ '*' ~ "%NPL::Deref" $effective
					@ "functions %(Cons, ConsRef, CheckListReference, \
					CheckPairReference, Apply, ApplyList, ListAsterisk, \
					ListAsteriskRef, SymbolsToImports, Call1CC, \
					ApplyContinuation)",
				/ DLI "functions %(Or, Apply, ApplyList, Cons, ConsRef, \
					ListAsterisk, ListAsteriskRef, AccL, AccR, FoldR1, \
					SetFirstAt, CheckEnvironment, CheckParent, ListConcat, \
					ApplyContinuation)" ^ "%LiftOtherValue" ~ "%LiftOther",
				/ @ "functions %(Apply, ApplyList)" $=
				(
					/ DLI "simplified"
						!^ ("common cons implementation", "new term"),
						// This also decouples with the implemenations of \
							%(Cons, ConsRef, SetRest, SetRestRef).
					/ $revert_ex(b952) "removed improper list handling"
						$dep_from "list definition clarification"
				),
				(
				/ DLI "simplified functions %(ListAsterisk, ListAsteriskRef)"
					!^ ("common splicing implementation",
					"internal check argument");
					// The common splicing shared with other implementations \
						of %(Cons, ConsRef, SetRest, SetRestRef) with \
						different number of arguments is not \
						necessary and a %TermNode::Container::splice call is \
						more succinct.
				/ DLI "simplified"
					@ "functions %(Cons, ConsRef, SetRest, SetRestRef)",
					// The splicing now has same no additional argument \
						required before. Also %(Apply, ApplyList) not sharing \
						the implemenation here can be more efficient.
				),
				* "missing ignoring non-leaf values"
					@ "functions %(EqLeaf, EqReference)" $since b947
					// The meaning was changed by %ReferenceTerm.
					$= (/ $impl ^ $dep_from
						("%ReferenceLeaf" ~ "%ReferenceTerm") @ %NPLA),
				* "missing clear the combining tag before creation of the \
					parameter binding" @ "%operator()" @ "vau handler"
					$since b860
					// The tags is visible in %BindParameterWellFormed, albeit \
						no effects at current. See the comment to the change \
						in %NPLA1Internals above for revision information. By \
						reodering of existing checks, this is even more \
						efficent than before.
					$= (/ $impl ^ "%ClearCombiningTags"),
				* $comp "missing nonmodifying tags in lvalue results"
					@ "functions whose name have prefix 'Unwrap'" $since b858
					$from ("%ReduceForCombinerRef" @ %NPLA1Internals),
				/ DLI "checked to ensure first-class object representation in \
					subterms" @ "functions %(ListExtractFirst, ListExtractRest)"
					^ "%(LiftOtherValue, AssertValueTags)" ~ "%LiftOther",
					// As in %ReduceToReferenceList.
				/ @ "function %RestRef" $=
				(
					* "missing propagation of nonmodifiable object reference \
						to the result" $since b939,
						// The elements in the subterms in the referent were \
							correctly propagated to, though.
					* "missing support of irregular lists" $since b951,
					(
					/ DLI "simplified environment reference";
						// The checked argument is always a reference value.
					- $revert(b913) "2nd parameter"
					)
				),
				* $comp "missing propagation of the unique tag on acceesing \
					non-reference elements" @ "function %(FirstRef, FirstRefAt)"
					$since b925 $dep_from
					("%(ReduceToReference, ReduceToReferenceAt)" @ %NPLA),
				* $re_add(b952) "missing clear tags for newly created operand \
					of binding" @ "function %BindImports" $since b920
					^ "%EnsureValueTags"
			),
			* "missing support objects with irregular represenatation"
				@ ("function %Forms::EqualTermValue" $since b904,
				"static member function %Encapsulation::Equal" $orig
				(@ "function %MakeEncapsulationType" @ %NPLA1 $since b858)),
				// This should have been supported in the very first, because \
					such operands were introduced since b858 (e.g. by %Unwrap).
		),
		/ %NPLA1 $=
		(
			/ @ "functions %(BindParameter, BindParameterWellFormed, \
				BindSymbol)" $=
			(
				/ DLI "enabled allocator" @ "non-trailing sequence copy of \
					subterms for reference operands",
				* DD "outdated nested exception for parameter checks"
					@ "Doxygen comment" $since b939,
					// This was changed in %NPLA1Internals.cpp.
				+ DLI "assertions to ensure value representation on bound \
					objects" $dep_from (("vau handler", "function %BindImports")
					@ "namespace %Forms" %NPLA1Forms),
					// This is only added in entry of the functions here \
						because internally referents are allowed to have the \
						temporary tag in recursive binding.
				+ DLI "assertions to ensure no unexpected temporary tags added \
					on subpairs to be bound",
					// This checks the newly established convention.
				/ DLD "assertion string for unexpected parameter tree \
					reprensentation",
				+ $dev $lib "assertion to ensure the operand term having no \
					sticky bit",
				/ @ "trailing sequence binding" $=
				(
					/ $re_ex(b952) DLDI "simplified allocator using",
						// This is more consistent to non-trailing sequence \
							cases. It has no similar magic performance boost, \
							though.
					* "wrong handling of sigil '@' for the last non-null \
						element" @ "trailing sequence" $since b951
						$dep_to "trailing @ binding fix"
						// This should be like '&' instead of others.
				)
			),
			/ "enabled allocator for inserting reference values"
				@ "functions %(ReduceToReferenceList, \
				ReduceToReferenceUList)",
			(
			/ $forced $revert(b952) @ "function %CheckArgumentList"
				$dep_from "list definition clarification";
			/ $revert(b952) DLI @ "function %FetchArgumentN"
			)
		),
		/ %NPLA1Internals $=
		(
			* "missing protecting the resources from unexpected move as \
				prvalues" @ "member function %RefContextHandler::operator()"
				@ %NPLA1Internals $orig (@ %NPLA1 $since b860),
				// The context handler was originally %GRefContextHandler in \
					%NPLA1 since b858. The tag to enable the optimization and \
					the optimization in %VauHandler were add in \
					%ReduceCombined since b860.
				$= (/ $impl ^ "%ClearCombiningTags"),
			+ "%TermTags parameter" @ "function %ReduceAsSubobjectReference",
			/ @ "function %ReduceForCombinerRef" $=
			(
				/ $forced "specified tags from reference"
					$dep_from "function %ReduceAsSubobjectReference";
				* $comp "missing propagation of reference tags"
					$orig (@ %NPLA1 $since b859)
					// Currently only %TermTags::Nonmodifying is significant. \
						The real original implementation was in %Forms::Unwrap \
						in b858, but this was not a separated interface.
			)
		),
		/ $re_ex(b947) DLI "all term value construction of %TermReference \
			values with no %TermReference arguments" ^ "allocator"
			$effective @ %(NPLA1, NPLA1Forms),
			// This is generally more efficient.
		/ $revert_ex(b947) DLI "all term value setting with \
			%TermNode::SetValue calls %TermReference values" ^ "allocator"
			$effective @ %(NPLA, NPLA1Forms, Dependency),
			// Ditto. There are no arguments of %TermReference.
		/ %NPLA $=
		(
			(
			+ "2 functions %ReferenceLeaf";
			+ "functor %ReferenceLeafOp";
			+ "function template %ComposeReferencedLeafOp"
			),
			* "missing propagation of tags other than %TermNode::Nonmodifying"
				@ ("function %ReduceToReferenceAt";
				$comp "function %ReduceToReference") $since b925
				// The default rules of accessing subobject were changed \
					since b925. Even without this change, the description \
					of getting the uncollapsed reference value also \
					implied it should not only propagate the nonmodifying \
					property.
		),
		/ @ "function %LoadGroundContext" %Dependency $=
		(
			* "missing preserving reference value in the result"
				@ "alternative derivation" @ "applicative 'list*%'" $since b918
				$= (/ ^ '$lambda%' ~ '$lambda'),
			* $comp "missing ignoring non-leaf values" @ ("applicative 'eql?'"
				$dep_from "%EqLeaf" @ %NPLA1Forms, "applicative 'eqr?'"
				$dep_from "%EqReference" @ %NPLA1Forms) $since b947,
			/ @ "applicative 'equal?'" $=
			(
				/ @ "alternative derivation" $=
				(
					* "wrong leaf comparison for 'eqv?'" $since b950;
						// This would be always '#t' for both atom values in \
							enclosing elements, albeit the top-level ones are \
							guarded by 'eql?'.
					/ $revert(b950) DLI "simplified" !^ ('$lambda/e', 'eql?',
						'get-current-environment', 'lock-current-environment')
						// These are not necessary once 'rest&' is correct. \
							Even the old derivation (before b950) would \
							succeed in most cases. Actually the only \
							difference the current derivation applied is \
							replacing 'branch?' to 'pair?'.
				),
				/ $comp $re_add(b950) "missing support objects with irregular \
					represenatation" @ "native implemenation" $since b951
					$dep_from ("%EqualTermValue" @ %NPLA1Forms)
			),
			* "missing propagation of nonmodifiable reference elements"
				@ "alternative derivation" @ "applicative 'first&'" $since b939,
			* $comp "native implementation" @ "applicative 'rest%'" $since b951
				$dep_from ("%RestRef" @ %NPLA1Forms),
			* "misleading error message for improper lists"
				@ "alternative derivation" @ "applicatives ('list%', 'list*%')"
				$since b951
				// It would report expecting a pair (by binding \
					mismatching in the last recursive call) instead of \
					a list.
				$= (/ $impl ^ 'apply-list' ~ 'apply'),
			/ "all <pair> argument 'l'" => 'pr' $effective @ "derivation"
				@ "applicatives (%first, 'first@', 'first%', 'first&', \
				'rest&', 'set-first!', 'set-first@!', 'set-first%!')",
			/ $forced "alternative derivation" @ "applicative 'list$'"
				$dep_from "list definition clarification"
				$= (/ $impl ^ $dep_from 'eql?' ~ 'null?'),
			* $comp "unique reference not preserved on accessing \
				non-reference elements of xvalue arguments"
				@ "native implementation" @ "applicatives ('first@', \
				'first&', 'rest&')" $since b951
				$dep_from ("%(FirstRef, FirstRefAt, RestRef)" @ %NPLA1Forms)
				// The common rule was changed since b925, but invisible until \
					the removal of special rule in b951.
			/ "derivation" @ "applicative 'first@', 'first&'" $=
			(
				* "missing support of xvalue arguments" $since b951;
					// The supported was dropped in b913 and documented. This \
						was changed by dropping the explicit check in b951 to \
						follow the common convention of element access since \
						b925, which requires to support xvalue arguments.
				* "unique reference not preserved on accessing \
					non-reference elements of xvalue arguments" $since b951
					// This is invisible without the change above.
			),
			/ @ "derivation" @ "applicative 'rest&'" $=
			(
				* "missing support of xvalue arguments" $since b951,
				* "unique reference not preserved on accessing \
					non-reference elements of xvalue arguments" $since b951
					$= (/ $impl $dep_from "trailing @ binding fix")
			)
		)
	)
),

b952
(
	+ $revert_ex(b826) "recovered header %ftmodapi.h from FreeType"
		@ "directory %freetype/include/freetype" @ "%3rdparty",
		// See $2022-08 @ %Documentation::Workflow.
	/ %YFramework $=
	(
		/ %YSLib.YAdaptor.Font $=
		(
			/ DLDI "simplified internal FreeType version access" ^ "macro",
			/ "prevented <freetype/internal/internal.h> and \
				%FT_INTERNAL_TRUETYPE_TYPES_H" @ \
				"'defined(FT_CONFIG_OPTION_OLD_INTERNALS)' since FreeType 2.5"
				// See $2022-08 @ %Documentation::Workflow.
			(
			/ @ "class %FontCache" $=
			(
				/ "initialized %::FT_Library instance" ^ "%::(FT_New_Library, \
					FT_Add_Default_Modules, FT_Done_Library)"
					~ "%::(FT_Init_FreeType, FT_Done_FreeType)"
					$dep_from "%3rdparty",
				- $comp "the call to %FT_Set_Default_Properties whether \
					FreeType is configured with \
					%FT_CONFIG_OPTION_ENVIRONMENT_PROPERTIES"
					// See $2022-08 @ %Documentation::Workflow.
			);
			* $comp $lib "mismatched deallocation"
				@ "destructor %Typeface::SmallBitmapData" $since b420
				// See $2022-08 @ %Documentation::Workflow.
			),
			/ DLDI "simplified header inclusion" $=
			(
				/ ^ %YSLib.Core.Exception ~ %YSLib.Core.YApplication,
				- "unused FreeType header inclusions"
			)
		),
		/ %NPL $=
		(
			/ %SContext $=
			(
				+ "4 constructors with %TermTags parameters with \
					'const TermNode&'/'TermNode&&' and optional \
					%allocator_type parameter" @ "class %TermNode",
					// Other constructors are not touched, as the \
						simplification of other constructors using new ones \
						would be inefficient.
				+ "function %IsSingleElementList"
			),
			* "missing support irregular representation of reference \
				values to environment"
				@ "functions %ResolveEnvironment#(3, 4)" @ %NPLA $since b949
				// The irregular representation was supported since b949 and \
					it could be introduced by interoperations, while the \
					object language devices (non-list trailing sequences in \
					binding constructs) allowing to construct such reference \
					values was supported since b951.
				$= (/ $impl ^ "%IsAtom" ~ "%IsExtendedList"),
			/ %NPLA1 $=
			(
				* DD "outdated mentioning of the tail operator name setting \
					function" @ "Doxgyen comment"
					@ "function %EvaluateIdentifier" $since b948
					$= (/ "'\sa' command"
						^ 'ContextState::TrySetTailOperatorName'
						~ 'EvaluateIdentifier'),
				/ ("alias template %GTokenizer", "alias %REPLContext::Loader")
					^ "%ystdex::unchecked_function" ~ "%function",
				/ DLDI "simplified allocator using" @ "binding with sigil '&'"
					@ "functions %(BindParameter, BindParameterWellFormed, \
					BindSymbol)",
				* "ill-formed access of non-existing state" @ "trailing \
					sequence matching" @ !'NPL_Impl_NPLA1_AssertParameterMatch'
					@ "functions %(MatchParameter, BindParameter, \
					BindParameterWellFormed)" $since b951,
				/ DLI "simplified static member function \
					%ContextState::DefaultReduceOnce" ^ ($dep_from
					("%IsSingleElementList" @ %SContext), 'YB_PURE'),
				* "redundant indirection level of the referent of subpair \
					reference created" @ "trailing bindings with sigil '&'"
					@ "functions %(MatchParameter, BindParameter, \
					BindParamaterWellFormed)" $since b951,
				/ @ "function %CheckVariadicArity" $=
				(
					/ "%RemoveHead call"
						-> ("skipping the 1st subterm" @ "exception message");
					+ 'const' @ "term parameter type"
				),
				/ @ "function %CheckArgumentList" $=
				(
					* "missing accepting list with null reference element at \
						end" $since b951
						$= (/ $impl ^ ("%ResolveSuffix" @ %NPLA)),
					* "missing supported reference mark" @ "exception message"
						$since b951
				),
				* "incorrect results for lists with irregular representation \
					as the last pair element" @ "function %FetchArgumentN"
					$since b951 ^ "%CountPrefix" ~ "%TermNode::size"
			),
			/ @ %NPLA1Forms $=
			(
				+ DLDI "header inclusion <ystdex/functor.hpp>",
				/ @ "namespace %Forms" $=
				(
					/ DLDI "simplified function %CheckListReference"
						^ "%ThrowListTypeErrorForNonList",
					/ DLDI "alternative implementation" @ "functions \
						%ListExtractFirst and other binding functions"
						^ "%AssertValueTags",
						// To be consistent with the changes below.
					* $re_add(b925) "missing clearing %TermTags::Temporary for \
						nested list elements from the referent" @ ("functions \
						%(ListContcat, Append)" $since b912, "function %RestFwd"
						$since b913, "functions %(FoldR1, Map1)" $since b899)
						^ "%EnsureValueTags",
					/ DLI "simplified reference propagation" @ "functions \
						%(RestFwd, FoldR1, Map1, ListConcat, Append, \
						ListExtractFirst, Let, LetRef, LetWithEnvironment, \
						LetWithEnvironmentRef, LetRec, LetRecRef, LetAsterisk, \
						LetAsteriskRef, BindingsWithParentToEnvironment, \
						BindingsToEnvironment, ProvideLet, Assq, Assv)"
						^ "%LiftPropagatedReference",
					/ @ "functions %(Apply, ApplyList)" $=
					(
						/ "checked variadic arguments at first"
							^ $dep_from ("%CheckVariadicArity" @ %NPLA1);
						* $comp "probable wrong handling of lists due to \
							missing the support of irregular representation as \
							the last element in the object parameter"
							$since b951
							// Previously the object is a list as %ApplyList \
								not requiring to support the non-list argument.
					),
					* "missing checking against improper lists"
						@ "function %Apply" $since b951,
						// This shall be same to %ApplyList. Only in one of \
							the argument there are differences.
					* "missing checking against non-list 2nd argument"
						@ "function %ApplyList" $since b951,
					+ "function %ApplyContinuation"
				)
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "alternative derivation" @ "applicative %restv"
						^ '$defl!' ~ '$def%!',
						// To be more consistent to 'firstv'.
					* "missing forwarding and checking the list parameter"
						@ '!NPL_Impl_NPLA1_Use_Id_Vau' @ "alternative derivation"
						@ "applicative %rlist" $since b951
						// This is inconsistent to the derivation with \
							'NPL_Impl_NPLA1_Use_Id_Vau'.
						$= (/ $re_ex(b951)
							^ (('forward!' ~ 'move!'), 'check-list-reference')),
					* "native implemenation behaviors not same to derivations \
						on syntax error" @ ("applicative %apply" $dep_from
						("%Forms::Apply" @ %NPLA1Forms) $since b859,
						@ "applicative %apply" $dep_from
						("%Forms::ApplyList" @ %NPLA1Forms) $since b951)
						// The old diagnostics in native implemenations were \
							less clear because the exception message of \
							violation of subterms size check would have no \
							term information at all and such check would come \
							first.
				),
				* "unexpectedly moved the 1st argument"
					@ "alternative derivation" @ "applicative %require"
					@ "function %LoadModule_std_modules" $since b942,
				+ "applicative 'apply-continuation'"
					@ "function %LoadModule_std_continuations"
					^ $dep_from ("function %ApplyContinuation" @ %NPLA1Forms)
			)
		)
	),
	/ %Tools.Scripts $=
	(
		/ @ "%SHBuild-BuildApp.txt" $=
		(
			/ "handled empty SHBOPT_BASE as if a single '.'";
			* $comp "implicit building command line argument implied for \
				SRCPATH in SHBOPT_BASE" $since b900
				// Defferent to the previous shell script, SHBOPT_BASE in this \
					NPLA1 script is optional. The wrong SRCPATH is \
					'-std=c++11'. Now it is default to '.' when empty, but \
					still can be wrong when SHBOPT_BASE only has SHBuild \
					options.
		),
		* $comp "possible crashes caused by automatically detected library \
			when external dynamically linked FreeType library is used"
			@ !"platform %(DS, MinGW32, Android)" $since b563
			// See $2022-08 @ %Documentation::Workflow.
	)
),

b951
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ @ "functions %(MatchParameter, BindParameter, \
				BindParamaterWellFormed)" $=
			(
				/ "excluded subterms with %TermTags::Sticky in matching \
					subterms before the ellipsis";
				/ "supported matching pairs"
					^ ("%IsPair" ~ "%IsList", ("%ThrowListTypeErrorForAtom"
					~ "%ThrowListTypeErrorForNonList") @ %Exception)
					$dep_all_from "adding list checks",
					// It depends on the newly added list reference check to \
						keep the old behavior for specific functions.
				/ DLI "enhanced checks" @ 'NPL_Impl_NPLA1_AssertParameterMatch'
					@ "trailing ellipsis handling",
					// Now the term itself is checked agains to pair \
						values when it is used as the suffix of ptree, in \
						addition to the original end iterator check.
				/ "trailing bindings" $=
				(
					(
					/ "no longer expected removal of '.' prefix in the symbol"
						@ "entry";
						// This is a breaking change on %BindParameter.
					/ "supported binding trailing pairs" $dep_from
						"forwarding trailing"
						// This also relies on "forwarding trailing" changes \
							in b950, which also use 'forward!' instead of \
							'move!'.
						$= (/ $impl ^ ("%A1::(AllocateSharedTerm, \
							MakeSubobjectReferent)" @ %NPLA1Internals))
					),
					/ "propagated tags as non-trailing bindings",
						// Notably, '&' guarantees no temporary tag is added \
							to subterms. This is more consistent in rules.
					/ "forbade '@' binding for prvalues"
						// Ditto. This are no use cases in current derivations.
				)
			),
			/ "static functions %CheckArguments" @ "class %FormContextHandler"
				$=
			(
				/ "overload#2" -> "function %CheckArgumentList"
					@ "namespace %A1";
				/ "simplified" ^ "%CheckArgumentList";
				/ $comp "threw %ListTypeError on error"
					~ "%ListReductionFailure" ^ "%ThrowListTypeErrorForNonList"
			),
			/ DLDI "reordered declarations"
				@ "functions %(FetchArgumentN, CheckVariadicArity)",
			(
			/ "supported improper lists" !^ "%FetchArgument" $=
			(
				/ @ "function %CheckVariadicArity"
					^ "%(IsCombiningTerm, CountPrefix)",
				/ @ "exception message" @ "throwing error"
					@ "functions %(ReduceCombinedBranch, \
					ReduceCombinedReferent)" ^ "%TermToStringWithReferenceMark"
			);
			/ @ "function %FetchArgumentN" $=
			(
				- 'ynothrowv';
				/ "checked against improper lists"
					^ $dep_from "%CheckArgumentList"
					~ "%AssertBranchedList" $dep_to "list argument checks"
			)
			),
			+ "function %RetainList" ^ $dep_from "%CheckArgumentList",
			(
			/ "supported pair instead of list as the combining term"
				@ "functions %(FetchArgumentN, Retain)" ^ $dep_from
				("%AssertCombiningTerm" @ %NPLA) ~ "%AssertBranchedList"
				$dep_to "list argument checks",
			/ "supported improper lists" @ "function %ReduceCombinedBranch";
				// By preventing to call %ValueObject::Clear, now the last \
					element would be preserved.
			/ "supported pairs instead of lists"
				@ "member function %ContextState::DefaultReduceOnce",
				"function %ReduceFirst"; "function %SetupDefaultInterpretation"
				($dep_all_from "list argument checks", $dep_from
				("functions %Forms::(EvalString, EvalStringRef)" @ %NPLA1Forms))
				$= (/ $impl ^ "%IsCombiningTerm" ~ "%(IsList, IsBranch, \
					IsBranchedList)")
				// The evaluation algorithm implemented here is now more like \
					[RnRK].
			)
		),
		/ $re_add(b949) DLI "supported checking binding trailing pairs"
			@ "internal matching thunked calls"
			@ "class template %GParameterValueMatcher" @ %NPLA1Internals,
			// As %(MatchParameter, BindParameter, BindParamaterWellFormed).
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			* "redundant term copy" @ "functions %(SetRest, SetRestRef)"
				$since b947,
			/ DLI "optimized functions %(RestFwd, RestVal) without redundant \
				check for move",
			+ DLDI "internal assertion to rule out %TermTags::Sticky"
				@ "functions %(First, FirstFwd, FirstVal)",
			/ "supported object references for 2nd argument"
				@ "function %Forms::ConsRef" ($dep_from "forwarding trailing",
				$dep_all_from "list argument checks") $dep_to "cons reference"
				// It is a breaking change to preserve the reference elements \
					in the 2nd argument. This relies on the changes to avoid \
					the assumption that trailing sequence are always bound as \
					a value ready to move or the non-referent argument for \
					some contexts in derivations, which was changed by \
					"forwarding trailing" massively in b950. This also relies \
					on changes of 'map-reserve' in b948, as well \
					preventing relying on trailing prvalues and predicates \
					changes ('eq?', 'eqv?', 'equal?') in b950.
			+ "function %CheckPairReference",
				// This also changes the exception message.
			/ "allowed empty lists" @ "function %CheckListReference",
			(
			/ "preserved references in elements of the last argument"
				@ "functions %(Cons, SetRest, ListAsterisk)",
				// Even there are unsafe operations, they are not introduced \
					merely by 'cons', 'set-rest!' or 'list*', because the \
					results having unchecked references are from the argument \
					constructed by some other unsafe operations elsewhere. So, \
					there is no need to lift the elements here.
			* $comp "applicative 'set-rest!'"
				$mismatch(Documentation.NPL) $since b868
				// The description only supports the modification on elements \
					other than the 1st one, so there should be no lifting \
					expected. Now even other elements are not lifted (see \
					above) by 'set-rest!'. Compared to 'set-rest%!', it sets \
					the referent of the 2nd argument instead of the reference. \
					This is exactly the old behavior of 'set-rest%!'. The new \
					behavior of 'set-rest%!' allows to set a reference as the \
					rest component, see the pair support below.
			),
			/ @ "functions %(Cons, ConsRef, SetRest, SetRestRef, ListAsterisk, \
				ListAsteriskRef)" $=
			(
				- "list checks by %(IsList, ThrowListTypeErrorForList)";
				/ "supported constructing pairs" $dep_from "cons reference"
			),
			/ "loosed checks of list to pairs" !^ "%IsBranchedList"
				$dep_to "pair handling in native implementations" $=
			(
				/ "loosed list lvalue checks to pairs" $effective @ "functions \
					%(FirstAt, FirstRef, RestRef, SetFirst, SetFirstAt, \
					SetFirstRef, SetRest, SetRestRef, Assq, Assv)"
					^ ("%ThrowListTypeErrorForAtom" @ %Exception),
					// These checks share the implementation of \
						%CheckPairReference.
				/ "loosed list lvalues branching" @ "functions %(First, \
					FirstVal, RestFwd, RestVal, ForwardFirst)"
					// These function still use %ThrowInsufficientTermsError \
						on error.
			),
			/ "checked against improper argument lists" @ "all native \
				combiners expecting list operands not implied by other changes"
				$effective @ "functions %Forms::(And, Or, If, Cond, When, \
				Unless, Seqeuence, MakeEnvironment, ListAsterisk, \
				ListAsteriskRef, Append, BindingsWithParentToEnvironment, \
				BindingsToEnvironment, Import, ImportRef)" $dep_to
				"list argument checks"
				$= (/ $impl ^ ("%RetainList" @ %NPLA1) ~ "%Retain"),
			/ DLDI "reordered declarations" @ "functions %(Sequence, Apply)",
				// As in alternative derivations.
			+ "function %ApplyList" ^ $dep_from ("%RetainList" @ %NPLA1),
			/ "preserved %Value of the result to support concatnating on \
				non-list objects" @ "function %ListConcat",
				// The alternative derivation needs no special change.
			/ DLI @ "function %SymbolsToImports" $=
			(
				/ $design "simplified indirect calls",
				+ "assertion to ensure the argument to internal applicative is \
					a list"
			)
		),
		/ $re_add(b948) "supported pairs" @ "list result lifting"
			!^ "%LiftSubtermsToReturn" $effective
			@ ("value binding without sigil"
			@ "functions %(BindParameter, BindParameterWellFormed)" @ %NPLA1,
			("functions %Forms::(Cons, ListAsterisk, RestVal, SetRest)"
			@ %NPLA1Forms) ^ ("%LiftPrefixToReturn" @ %NPLA)),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			+ "applicative 'check-pair-reference'"
				^ $dep_from ("%Forms::CheckPairReference" @%NPLA1Forms),
			/ "supported pairs" @ "applicatives ('first@', 'first&', 'rest&')"
				$=
			(
				/ $comp "native implementation" $dep_from ("functions \
					%Forms::(FirstAt, FirstRef, RestRef)" @ %NPLA1Forms),
				/ "alternative derivations" ^ $dep_from
					'check-pair-reference' ~ 'check-list-reference'
			),
			/ "supported returning reference values"
				@ "applicatives ('rest%', %restv)" $=
			(
				/ $comp "native implementation"
					$dep_from ("%Forms::(RestFwd, RestVal)" @ %NPLA1Forms),
				/ "alternative derivations"
					^ ('$defl%!' ~ '$defl!', '$move-resolved!' ~ 'move!')
					// To allow reference to reference, 'restv' also make the \
						result forwarded, as 'idv'. '$move-resolved!' is \
						necessary for 'restv' whose parameter has no sigil in \
						the derivation, and also good for 'rest%'.
			),
			(
			/ $comp "accepted empty lists"
				@ "applicative 'check-list-reference'"
				$dep_from ("%Forms::CheckListReference" @ %NPLA1Forms);
			/ DLDI "checked the list parameter" @ "derivations"
				@ "applicatives (%(rlist, foldr1, rulist), 'map-reverse')"
				^ 'check-list-reference' $dep_to "adding list checks",
				// This is nothing different without the changes in the \
					support pairs of variable binding.
			/ $forced DLDI "checked parameter to ensure list"
				$dep_from "cons reference" @ "alternative derivation"
				@ "applicative 'list-push-front!'"
				$= (/ $impl ^ 'check-list-reference')
			),
			/ $comp "supported pairs as argument" @ "applicatives (%(first, \
				firstv, restv), 'first&', 'first%', 'rest&')" $=
			(
				/ "native implementation"
					$dep_from "pair handling in native implementations",
				/ "alternative derivations" @ ("trailing bindings" @ %NPLA1)
			),
			/ $comp "supported forwarding non-list argument"
				@ "applicative %apply" $dep_from ("cons reference",
				"%ContextState::DefaultReduceOnce" @ %NPLA1),
			/ DLDI "reordered alternative derivation"
				@ "applicative %apply before operative '$sequence'",
				// Now 'apply' is more fundamental.
			/ $re_add(b950) "forward parameter" @ "alternative derivation"
				@ "applicative 'rlist'" ^ 'forward!' ~ 'move!'
				$dep_to "forwarding trailing",
				// This is no change even when the traling sequence is a \
					reference, since the bound referent is in the \
					irregular representation. However, it is relied on by \
					the change of trailing binding conceptually.
			(
			+ "applicative 'list?';
			+ "applicative 'apply-list'"
				$dep_from ("%Forms::ApplyList" @ %NPLA1Forms);
			/ $forced DLI "checked against non-list arugment alternative \
				derivations" @ ("operative '$sequence'" $dep_from
				("%Forms::Sequence" @ %NPLA1Forms), "operative '$cond'"
				$dep_from ("%Forms::Cond" @ %NPLA1Forms))
				// The check to ensure the combination having an argument \
					list is before the actual access in the old \
					implementation. It is necessary for the correct \
					behavior of side effects and the exception message \
					("expect a list" instead of "expect a pair").
				$= (/ $impl ^ 'apply-list')
			),
			/ DLI "simplified alternative derivation" @ "applicative 'equal?'",
			* $comp "mismatched native implementation for ('first&', 'rest&')"
				$mismatch(Documentation.NPL) $since b913
				$dep_from %Documentation.NPL
		)
	),
	/ %NPL.Documentation $=
	(
		* $comp "missing non-empty list condition" @ "description of \
			applicative 'check-list-reference'" @ %Documentation.NPL $since b858
			$dep_from
			("function %CheckListReference" @ %YFramework.NPL.NPLA1Forms),
		/ "removed the requirement of calling 'check-list-reference' to check \
			against rvalue arguments support"
			@ "applicatives ('first&', 'rest&')"
			// Now The common rules for subobject access since b925 take effect.
	),
	/ $doc $lib "%LICENSE.txt" $=
	(
		/ @ "preamble" $=
		(
			+ "explicitly referred BSD 2-Clause license with related URLs as \
				intentional equivalence",
			+ "additional permission of the text replacements"
			// These should retain the previous permissions. Additional \
				permissions of not keeping this document are also clarified.
		),
		/ "minor adjustment of clauses",
			// These chagnes should not alter the essential meanings.
	)
),

b950
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1Internals $=
		(
			(
			+ "function template %AllocateSharedTerm";
			+ "function template %AllocateSharedTermValue";
			/ DLDI "simplified function %ReduceForCombinerRef"
			),
			(
			+ "function %MakeSubobjectReferent";
			/ DLDI "simplified function %ReduceAsSubobjectReference"
			)
		),
		* "misleading exception message"
			@ "function %ThrowListTypeErrorForInvalidType" @ %Exception
			$orig (@ %NPLA $since b859)
			// This was OK for original %AccessTerm in NPLA.cpp in b840, but \
				not synchrnized with %CheckRegular in b859.
			$= (- ' a list'),
		+ "function %AssertCombiningTerm" @ %NPLA,
		/ %NPLA1 $=
		(
			/ DLDI @ '!NPL_Impl_NPLA1_Enable_TCO' @ "function %SetupTailContext"
				^ 'yunused',
				// To eliminate G++ warning: [-Wunused-parameter].
			* DLI "wrong 'defined' condition for \
				%NPL_Impl_NPLA1_Enable_ThunkedSeparatorPass"
				@ "constructor %REPLContext#2" $since b944,
				// Also to eliminate G++ warning: [-Wunused-parameter].
			/ DLI "simplified function %ReduceCombinedBranch"
				^ $dep_from ("%AssertCombiningTerm" @ %NPLA),
				// This enhanced the assertion.
			/ @ "class %FormContextHandler" $=
			(
				/ @ "static function %CheckArguments" $=
				(
					/ DLDI "simplified"
						^ $dep_from ("%AssertCombiningTerm" @ %NPLA),
					+ 'const' @ "term reference parameter"
				),
				+ "overload %CheckArguments without wrapping count"
					// This is intended to used for known applicatives.
			)
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			+ $dev $lib "check on arguments" @ "function templates \
				%(CallRawUnary, CallBinary)" ^ "%AssertValueTags",
			* DD "argument formal syntax" @ "Doxygen comment" @ ("functions \
				%(LambdaWithEnvironment, LambdaWithEnvironmentRef, \
				VauWithEnvironment, VauWithEnvironmentRef)" $since b914,
				"functions %(WVauWithEnvironment, WVauWithEnvironmentRef)"
				$since b921),
			/ "lifted the indirect value" @ "evaluating parent term"
				@ "all functions with name suffix ('WithEnvironment', \
				'WithEnvironmentRef')"
				$dep_to "indirect parent environment evaluation",
				// The original implementation in b909 did not support \
					reference values. This is now similar to %Eval.
			/ "supported leaf access of referents with irregular \
				representations" @ "functions %(EqReference, EqValue)"
				^ "%IsAtom" ~ "%IsLeaf",
			* DD "redundant '\exception' command" @ "Doxygen comment"
				@ "functions %(ListAsterisk, ListAsteriskRef)" $since b860,
			* "missing cleanup of %Value of term before evaluation"
				@ "functions %(EvalString, EvalStringRef)" $since b835
				$= (/ ^ $impl ^ "%TermNode::SwapContent"
					~ "%TermNode::SwapContainer")
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				/ DLDI "indent" @ "derivation" @ "operative '$or'",
				+ "applicative 'pair?'",
				+ "applicative 'pairv?'",
				/ "forwarded argument" @ "applicative 'for-each-ltr'",
					// Like the change in 'map-reserve' in b948.
				* "missing preserving reference values" @ "alternative \
					derivation" @ "applicative 'list-push-front!'" $since b921
					$= (/ $impl "simplified" ^ "idv"),
				* "missing support of comparing objects with irregular"
					$since b858 $=
					// Objects with irregular representation were introduced \
						since b858 (e.g. by %Unwrap).
				(
					/ $comp @ "applicatives ('eq?', 'eqv?')"
						$dep_from "%Forms::(EqReference, EqValue)";
					/ "alternative derivation" @ "applicative 'equal?'"
						^ $dep_from 'pair?'
					// The desired behavior is already supported in native \
						implementation 'equal?' by %Forms::EqualTermValue in \
						%NPLA1Forms so there requires no change.
				),
				* "redandant copying expression operand" @ "alternative \
					derivation" @ "operative '$deflazy!'" $since b873
					$dep_to "forwarding trailing"
					// It was not named 'body', hence omitted.
					$= (/ $impl ^ 'forward!'),
					// The original change applied on 'body' was 'move!'.
				/ DLI "reduced value copy for combiner calls" @ "alternative \
					derivations" $dep_to "moving body preparation" $=
				(
					(
					/ "moved alternative derivation of applicative %forward to \
						top" @ 'NPL_Impl_NPLA1_Native_EnvironmentPrimitives';
						// This is necessary for the derivation of '$vau' to \
							use 'forward!'.
					/ $design "forwarded all paramter trees"
						$effective @ "operatives ('$vau', '$vau%', \
						'$deflazy!', '$set!', '$setrec!', '$wvau', '$wvau%', \
						'$wvau/e', '$wvau/e%, '$lambda', '$lambda%', \
						'$lambda/e', '$lambda/e%', '$defv!', '$defv%!', \
						'$defv/e!', '$defv/e%!', '$defw!', '$defw%!', \
						'$defw/e!', '$defw/e%!', '$defl!', '$defl%!', \
						'$defl/e!', '$defl/e%!')" ^ 'forward!',
						// This is necessary for the following changes without \
							undefined behavior.
					),
					/ $design "alternative derivations" @ "operatives \
						('$deflazy!', '$set!', '$setrec!', '$let', '$let%', \
						'$let/e', '$let/e%', '$as-environment')" ^ 'list%'
						~ 'list',
					/ $design "combination for arguments from parameter tree"
						@ "alternative derivations" @ "operatives ('$vau', \
						'$vau%', '$wvau', '$wvau%', '$wvau/e', '$wvau/e%', \
						'$lambda', '$lambda%', '$lambda/e', '$lambda/e%')"
						^ 'cons%' ~ 'cons',
						// For dynamic environment and the operative, this is \
							unnecessary.
					/ $design "operatives ('$defv!', '$defv%!', '$defv/e!', \
						'$defv/e%!', '$defw!', '$defw%!', '$defw/e!', \
						'$defw/e%!', '$defl!', '$defl%!', '$defl/e!', \
						'$defl/e%!')" ^ 'list*%' ~ 'list*'
						$dep_from "indirect parent environment evaluation"
				),
				/ DLI "forwarding non-body trailing sequence" @ "derivation"
					$dep_to "forwarding trailing" ^ 'forward!' ~ 'move!' $=
				(
					/ "clauses" @ "operative '$cond'",
					/ "expression sequences" @ "operatives \
						('$sequence', '$when', '$unless')",
					/ "tail sequences" @ ("operative '$sequence'",
						"applicatives ('list*', 'list*%')"),
					/ "list sequences"
						@ "applicatives (%append, 'map-reverse')",
					/ "binding sequence" @ "operative '$bindings->environment'"
				)
			),
			* DLDI "incomplete inactive alternative native implementations \
				sample of combiner definition operations" $since b921,
			/ "supported forwarding body" @ "alternative \
				derivations" ^ 'forward!' ~ 'move!' $effective
				@ "alternative derivation" @ ("operatives ('$vau', '$vau%', \
				'$deflazy!', '$set!', '$setrec!', '$wvau', '$wvau%', \
				'$wvau/e', '$wvau/e%, '$lambda', '$lambda%', '$lambda/e', \
				'$lambda/e%', '$defv!', '$defv%!', '$defv/e!', '$defv/e%!', \
				'$defw!', '$defw%!', '$defw/e!', '$defw/e%!', '$defl!', \
				'$defl%!', '$defl/e!', '$defl/e%!', '$cond', '$let', '$let%', \
				'$let/e', '$let/e%', '$let*', '$let*%', '$letrec', '$letrec%', \
				'$as-environment')" @ "function %LoadGroundContext" $dep_from
				"moving body preparation", "operatives ('$lazy', '$lazy%', \
				'$lazy/d', '$lazy/d%')" @ "function %LoadModule_std_promises")
				 $dep_to "forwarding trailing",
			/ $comp DLDI "prevented relying on trailing prvalues" ($dep_all_from
				"forwarding trailing", $dep_from "applicative 'for-each-ltr'"
				@ "function %LoadGroundContext")
				// The style matter. Further, it allows the extensions of \
					trailing sequence not as a list prvalue.
		)
	),
	/ DD %Documentation.NPL $=
	(
		* "missing ordinals" @ "operands" @ "applicative 'equal?'" $since b926
		* "wrong name used in the description"
			@ "operative $bindings->environment" $since b839,
		* "missing update description of '<parent>'" $mismatch(
			YFramework.NPL.NPLA1Forms) $since b909,
			// The old description was imprecise for the original \
				implementation because only reference to the single \
				environment was not support and other combination of reference \
				(to the list or to the element of the list) were already \
				supported.
	)
),

b949
(
	+ DD "'\pre' commmand" @ "Doxygen comment" @ "member function \
		%memory_resource::deallocate" @ %YBase.YStandardEx.MemoryResource,
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			+ 2 "function templates %AssertMatchedAllocators" >> %SContext
				$dep_to "lifting allocator assertions";
			/ $lib $design "adjusted assertion messages" @ "remained overloads"
				@ "function template overloads %AssertMatchedAllocators"
			),
			(
			+ "function template %ResolveBy";
			+ "function template %ResolveSuffix",
			/ DLDI "simplified function template %ResolveTerm" ^ "%ResolveBy"
			),
			+ DLI 'inline' @ "function template %ResolveTerm",
				// This is a bit significant to the generate code performance.
			/ "added last parameter with default value '0' to support skipping \
				prefix subterms"
				@ "functions %(TermToString; TermToStringWithReferenceMark)",
			/ $re_add(b928) "simplified member function \
				%Environment::CheckParent" ^ "%IsTyped",
			/ DLDI "declaration order" @ "function %LiftPrefixToReturn",
			(
			+ "function %LiftSuffixToReturn";
			/ DLDI "simplified function %LiftElementsToReturn as inlining \
				function"
			),
			(
			+ "function %LiftPrefixToReturn with 2 parameters";
			/ DLDI "simplified %LiftPrefixToReturn#1"
			)
		),
		/ %SContext $=
		(
			/ DLDI "declaration order" @ "destructor and move %operator="
				@ "class %TermNode",
			+ "2 function template overloads %AssertMatchedAllocators"
				$dep_from "lifting allocator assertions"
		),
		/ %Exception $=
		(
			/ "added last parameter with default value '0' to support skipping \
				prefix subterms" @ "functions with 'const TermNode&' parameter"
				$effective @ "functions %(ThrowInsufficientTermsError, \
				ThrowListTypeErrorForAtom, ThrowListTypeErrorForInvalidType, \
				ThrowListTypeErrorForNonList, ThrowTypeErrorForInvalidType)"
				$impl $dep_from ("%TermToStringWithReferenceMark" @ %NPLA),
			(
			+ "function %ThrowTypeErrorForInvalidType with 2 'const char*' \
				parameters";
			/ DLDI "simplified function %ThrowTypeErrorForInvalidType#2"
			)
		),
		/ "added last parameter with default value '0' to support skipping \
			prefix subterms" @ "functions %ThrowFormalParameterTypeError"
			@ %NPLA1Internals
			$impl $dep_from ("%TermToStringWithReferenceMark" @ %NPLA),
		/ %NPLA1Internals $=
		(
			/ DLI "optimized internal matching thunked calls"
				@ "class template %GParameterValueMatcher"
				^ "%(YSLib::stack, vector)" ~ "%Action",
				// As %(MatchParameter, BindParameter, BindParamaterWellFormed).
			/ "enabled allocators" (@ "class template %GParameterValueMatcher";
				"function template %MakeParameterValueMatcher")
		),
		/ %NPLA1 $=
		(
			/ $re_add(b928) DLDI "simplified function %QueryTailOperatorName"
				@ 'NPL_Impl_NPLA1_Enable_TCO' ^ "%IsTyped",
			/ @ "functions %(MatchParameter, BindParameter, \
				BindParamaterWellFormed)" $=
			(
				* "minor internal comments on \
					%NPL_Impl_NPLA1_BindParameter_ExpandLevel" $since b948,
				/ DLI "enabled allocators for parameter matcher",
				/ DLI "refactored internal calls",
				/ DLI "optimized internal matching thunked calls"
					^ "%(YSLib::stack, vector)" ~ "%Action",
					// Without %vector, it is less efficient than the previous \
						implementation.
				* "unexpected support of more than 1 level of indirection on \
					uncollapsed references" @ "parameter tree"
					$mismatch(Documentation.NPL)
					$orig (@ "function %MatchParameter" $since b855),
					// By adjustment of inlining with one less 'YB_FLATTEN', \
						the fix makes the generated code a bit efficient, but \
						the compilation time still increses due to more split \
						function templates.
				* "missing reference mark" @ "exception message for last \
					parameter subterm check failure" $since b917
					^ "%ResolveTerm" ~ "%ResolveReference",
					// This should respect not only to the term being \
						resolved, but also to the subterm itself.
				/ "trailing ellipsis handling" $=
				(
					* "overly restrictive assertion wrongly against references \
						to the ellipsis sequence token subterm on the matching \
						after the check" $since b858,
						// The original code was added in function \
							%MatchParameter since b780. This only supports to \
							resolve references to symbols since b858.
						$= (/ $impl ^ "%(IsTyped, ReferenceTerm)");
					/ $dev $lib @ "initial check" $=
					(
						/ "supported subterms having irregular representation \
							along with the %TokenValue value"
							// This is not visible since no irregular \
								representation of symbol are yet supported. \
								However, this is more compatible to any future \
								handling on these currently unused \
								representatios.
							$= (/ $impl ^ "%IsAtom" ~ "%IsLeaf");
								// The use of %IsLeaf was also introduced in \
									b858.
						/ $impl "simplified" ^ "%TryAccessLeaf"
							~ "%TryAccessLeafAtom"
					)
				),
				/ DLDI "simplified move check" ^ "%IsMovable",
			),
			/ DLDI "simplified move check" @ "function %ReduceToReferenceList"
				^ "%NPL::IsMovable"
		),
		/ $forced "enabled allocator for parameter value matcher" $efficient
			@ ("function %CheckParameterTree" @ %NPLA1,
			"function %Forms::DefineWithRecursion" @ %NPLA1Forms)
			$dep_from ("%MakeParameterValueMatcher" @ %NPLA1Internals)
			// As %(MatchParameter, BindParameter, BindParamaterWellFormed).
	),
	/ %Tools.SHBuild.Main $=
	(
		- DLDI "'NPL::' before calls to %NPL::make_observer",
			// As %NPL changes in b947, but with a different reason: the name \
				is introduced by a using directive.
		+ "message after linking finished"
			@ "member function %BuildContext::Build"
	)
),

b948
(
	/ $lib $impl %YBase.YStandardEx.MemoryResource $=
	(
		/ $re_ex(b945) "disabled the attribute" @ (!'defined(NDEBUG)',
			!'YB_IMPL_GNUCPP >= 90100')
			@ "member function %resource_pool::deallocate",
			// Also to eliminate Clang++ 13.0.1 warning: [-Wunknown-attributes].
		+ $re_add(b928) $dev "#pragma directive" @ 'YB_IMPL_CLANGPP'
			@ "member function %monotonic_buffer_resource::do_allocate"
			// To elimiante Clang++ 13.0.1 warning: \
				[-Wbuiltin-assume-aligned-alignment].
	),
	/ %YFramework.NPL $=
	(
		* "ill-formed literal" @ !'NPL_Impl_NPLAMath_IEC_60559_BFP'
			@ "function template specialization \
			%WriteFPExponentSubnormalAbs<float>" @ %NPLAMath $since b933,
		/ %Exception $=
		(
			+ "function %ThrowListTypeErrorForAtom",
			/ "function %ThrowListTypeErrorForNonlist"
				=> "%ThrowListTypeErrorForNonList"
		),
		/ %SContext $=
		(
			/ @ "function %RemoveHead" $=
			(
				/ DLI ^ "%pop_front" ~ "%erase",
					// This is now a bit more efficient.
				/ DLI ^ "%AssertBranch",
				/ "stenthened check" @ "assertion" ^ "%IsSticky"
			),
			+ "2 functions %CountPrefix",
			(
			+ "function template %FindSticky";
			+ "2 functions %FindStickySubterms";
			+ "function %HasStickySubterm"
			)
		),
		/ %NPLA $=
		(
			(
			+ "functions %(LiftPrefixToReturn; LiftElementsToReturn)",
			/ "supported pairs" @ "list result lifting"
				^ "%LiftElementsToReturn" ~ "%LiftSubtermsToReturn"
				$effective @ "function %ReduceBranchToListValue"
			),
			/ "changed condition as %IsPair" @ "function %IsCombiningTerm"
				$dep_all_from "operator name out of the combining term",
			/ DLDI "simplified function %LiftOtherValue" ^ "%LiftOther",
			/ "supported list for pair terms" @ "function %TermToString"
		),
		/ %NPLA1 $=
		(
			+ "functions %(TryGetTailOperatorName, TrySetTailOperatorName, \
				GetOperatorNameRef)" @ "class %ContextState";
			(
			/ "function %EvaluateIdentifier set tail operator name"
				^ "member function %ContextState::TrySetTailOperatorName"
				~ "function %SetupTailOperatorName" $dep_to
				"operator name out of the combining term";
			- "function %SetupTailOperatorName"
			),
			/ "consumed operator name on exception"
				@ "functions %(ReduceCombinedBranch, ReduceCombinedReferent)"
				^ "%ContextState::TryGetTailOperatorName" $dep_to
				"operator name out of the combining term",
			/ @ "class %FormContextHandler" $=
			(
				+ "function %CheckArguments"
					^ $dep_from ("%HasStickySubterm" @ %SContext);
				/ "checked arguments list for applicative calls"
					@ "function %operator()"
			),
			/ DLD "assertion string"
				@ "static member function %ContextState::DefaultReduceOnce",
			/ @ "functions %(BindSymbol, BindParameter, \
				BindParamaterWellFormed)" $=
			(
				/ $re_add(b947) @ "'&' binding handling" $=
					// As %ReduceAsSubobjectReference in %NPLA1Internals.
				(
					/ DLI "avoided redundant term container copy"
						!^ "initializer-list",
					* "missing tagging for the irregular representation"
						$since b947
						$= (/ $impl
							^ "%(TermTags::Sticky, NPL::AsTermNodeTagged)")
						// With the changes in %(ResolveReference, \
							ResolveTerm) in b947, this would cause various \
							failure among subjobject bindings, e.g. using of \
							the derivation of applicative %apply.
				),
				/ DLI "adjusted internal inlining by controlling macro \
					%NPL_Impl_NPLA1Forms_LetAsterisk_ExpandLevel"
					// Now the compilation time of NPLA1.cpp is reduced in the \
						release configurations at the cost of a bit worse \
						generated code.
			)
		),
		/ $forced "constructor %TCOAction" @ %NPLA1Internals
			$dep_from ("%EvaluateIdentifier" @ %NPLA1)
			$= (/ $impl ^ $dep_from "%ContestState::GetOperatorNameRef"),
		/ DLDI "simplified function %ReduceForCombinerRef" @ %NPLA1Internals,
		/ %NPLA1Forms $=
		(
			* "redundant subterms for equal arguments"
				@ "function %EqualTermValue" $since b904,
			* "wrong exception thrown for non-list argument in list position"
				@ ("functions %(FoldR1, Map1)" $since b916,
				"functions %(ListConcat, Append, ListExtractFirst, \
				ListExtractRestFwd)" $since b917),
				// The native check was first introduced in b913, which was \
					consistent to the derivation then. This is broken since \
					b916 when the derivations introduced the check in \
					'foldr1', which should be more proper with regard to the \
					'<list>' typecheck for the arguments.
				$= (/ $impl ^ "%ThrowListTypeErrorForNonlist"
					~ "%ThrowInsufficientTermsError"),
			* "wrong mark for rvalues" @ "exception messages for insufficient \
				subterms" @ "functions %(ListExtractFirst, ListExtractRestFwd) \
				and functions prefixed with 'Let'" $since b940
				// The extraction applicatives were added with 'forward!' in \
					the derivations.
		),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			/ DLDI "simplified indent" @ "derivation"
				@ "applicative 'list-push-front!'",
			* "missing moving the list for the 'cons%' call"
				@ "derivation" @ "applicative 'map-reverse'" $since b875,
				// The applicative was introduced since b791, but forwarding \
					was supposed to work since b828 and 'cons%' was used since \
					b875. This change also makes it not relying on that \
					'cons%' always treats its 2nd parameter as a prvalue.
		)
	)
),

b947
(
	(
	/ DLP "updated platform %MinGW64 toolchain"
		$dep_to "MinGW64 toolchain update";
	/ $re_ex(b900) $forced "rebuilt library %FreeImage"
	),
	/ $build %Tools $=
	(
		/ @ "%SHbuild-build.sh" $=
		(
			/ DLI "%LDFLAGS_LOWBASE_" => "%LDFLAGS_WKRD_",
			/ "disabled workaround" @ "platform %MinGW64",
			+ "workaround for mingw-w64-x86_64-binutils 2.38-3"
				^ '-fuse-ld=lld' $dep_from $forced "MinGW64 toolchain update"
				// This is also faster.
		),
		+ "selected '-flto=jobserver' over '-flto=auto' for G++ only on \
			platform %MinGW32" @ "%SHBuild-common-options.sh",
			// Now only MinGW32 uses '-flto=jobserver'.
		/ @ "applicative %build-with-conf-opt"
			@ "%SHBuild-YSLib-common.txt" $=
		(
			+ "2nd argument 'host-arch'"
				$dep_to "passing host architecture to build";
			+ "selected '-flto=jobserver' over '-flto=auto' for G++ only on \
				platform %MinGW32"
				// Ditto.
		),
		/ $forced "%SHBuild-YSLib-build.txt"
			$dep_from "passing host architecture to build"
	),
	/ %YFramework.NPL $=
	(
		+ 'ynothrow' @ "function %(QueryTailOperatorName, \
			SetupTailOperatorName)" @ %NPLA1,
		- DLDI "unnecessary qualified 'A1::' before 'NameTypedReducerHandler'"
			$effective @ "%(NPLA1, NPLA1Internals, NPLA1Forms)",
		/ DLI "simplified term value setting with a single value of types \
			except environment references" ^ '=' ~ "%TermValue::SetValue"
			$effective %(NPLAMath, NPLA1Forms),
			// In %NPLA1Forms, all modified instances are for %TermRange. It \
				is a bit more efficient to use assignment directly in this case.
		/ %Dependency $=
		(
			* "missing source name recovery" @ (("functions \
				%(ReduceToLoadExternal, RelayToLoadExternal)",
				"applicative %load" @ "function %LoadModule_std_io")
				$since b899, "native implementation" @ "applicative %require"
				@ "function %LoadModule_std_modules" $since b923)
				$= (/ $impl ^ $dep_from
					("%TCOAction::SaveTailSourceName" @ %NPLA1Internals)),
			/ DLDI "simplified native implementation" @ "applicative %force"
				@ "function %LoadModule_std_promises"
				^ "%TermNode::SetValue" ~ "%ValueObject::assign",
			/ DLI ("applicative 'make-standard-environment'" @ "funciton \
				%LoadGroundContext", "native implementation"
				@ "applicative 'get-module'" @ "function \
				%LoadModule_std_modules") ^ "%TermNode::SetValue" ~ '.Value =',
				// To be consistent to other modificiation of environments.
			/ DLI "applicative 'get-current-repl'" @ "%function \
				%LoadModule_std_system" ^ "%TermNode::Value::assign" ~ '='
		),
		/ DLI "all term value assignment from %TermReference"
			^ "%(SetValue, in_place_type<TermReference>)" $effective
			@ %(NPLA, Dependency)
			// It is a bit more efficient with the tag argument.
		/ DLDI "simplified term container construction" $effective
			@ ("functions %(ReduceToReferenceList, ReduceToReferenceUList)"
			@ %NPLA1, "functions %Forms::(Let, LetRef, LetWithEnvironment, \
			LetWithEnvironmentRef, LetRec, LetRecRef, \
			BindingsWithParentToEnvironment, BindingsToEnvironment, ProvideLet)"
			!^ "explicit %ValueObject initialization" @ %NPLA1Forms),
		/ @ %NPLA1Internals $=
		(
			+ 'DefDeCopyMoveCtorAssignment(OneShotChecker)'
				@ "class %OneShotChecker",
			+ "class %SourceNameRecovery"
			/ @ "class %TCOAction" $=
			(
				/ DLDI "simplified function %CompressForGuard",
				/ DLDI "simplified copy constructior",
				(
				/ DLDI "functions %(MakeOneShotChecker, ReleaseOneShotGuard)";
				+ "support of source name guard" @ "data members"
					^ $dep_from "%SourceNameRecovery";
				+ "function %SaveTailSourceName"
				)
			),
			/ @ 'NPL_Impl_NPLA1_Enable_Thunked' @ "class %NonTailCall" $=
			(
				- DLDI 'YB_FLATTEN' @ "static function %RelayNextGuardedLifted",
				(
				+ "static function %MakeLiftResult";
				/ DLI "simplified static function templates \
					%(RelayNextGuardedLifted, RelayNextGuardedProbe)"
				)
			),
			* "exception specification" @ "constructor %FrameRecordList"
				$since b946,
				// Also to eliminate Clang++ error. This is related to CWG \
					1330. The original code is really not wanted here. \
					(Clang++ does have other related bugs as in \
					https://stackoverflow.com/questions/48340412.)
			/ @ "function %ReduceAsSubobjectReference" $=
			(
				/ DLI "avoided redundant term container copy"
					!^ "initializer-list",
				/ "tagged for irregular representation" ^ $dep_from
					("%(TermTags::Sticky, NPL::AsTermNodeTagged)" @ %SContext)
			)
		),
		/ %SContext $=
		(
			(
			/ $src "initializer" @ "enumerator %Unqualified"
				@ "enum class %TermTags" -> '0' ~ '1 << UnqualifiedIndex';
				// Actually the non-zero value is not expected at the very \
					beginning of the design. However, no other code relies on \
					the fact previously, so this is not a bug.
			(
			- "enumerator %UnqualifiedIndex" @ "enum %TermTagIndices";
			/ $comp $src "underlying values" @ "all enumerators"
				@ "enum %TermTags"
			),
			* "exception specification"
				@ "member function template % TermNode::SetValue#1" $since b918,
			(
			+ "function %IsReferentTags";
				// To be simpler, this relies on the change of \
					%TermTags::Unqualified above.
			+ "2 functions %AssertReferentTags"
			)
			),
			/ @ "constructors %TermNode" $=
			(
				/ DLDI "reordered and simplified with %ValueNode::Container \
					parameter",
				(
				+ "12 overloads with %TermTags parameter"
					$dep_to "tagged term constructor";
				* "allocator used to initialize %Value instead of the container"
					@ "overload with 'const Container&' parameter" $since b944
				),
				(
				* "copy" @ "overload with single 'ValueNode&&' parameter"
					$since b853
					$= (/ $impl ^ "%GetContainerRef" ~ "%GetContainer"),
				* "missing propagating allocator to subterms"
					@ "all 2 overloads with single %ValueNode reference and \
					allocator parameters" $since b853,
				)
			),
			+ "2 function templates %AsTermNodeTagged"
				$dep_from "tagged term constructor",
			(
			+ "macro %NPL_SContext_CompressTermTags";
			+ "enumerator %StickyIndex" @ "enum %TermTagIndices";
			+ "enumerator %Sticky" @ "enum class %TermTags";
			+ "functions %(IsPair; IsAtom)"
			)
		),
		/ %NPLA $=
		(
			+ DLI "invariant, precondition and check" @ "constuctors \
				%TermReference" ^ $dep_from "%AssertReferentTags#1",
			+ DLI "precondition and check" @ "function %TermToTags"
				^ $dep_from "%AssertReferentTags#2",
			+ "2 function templates %TryAccessLeafAtom"
				^ $dep_from ("%IsAtom" @ %SContext),
			+ DLDI 'const' @ "operand" @ "exception specification"
				@ "function template %ReferenceTerm#2"
		),
		/ "distinguished pairs from leaf values for first-class object accesses"
			$effective @ (("function template %ResolveTerm", ("all 2 functions \
			%ReferenceTerm"; $comp "functor %ReferenceTermOp"), "all 2 \
			function templates %TryAccessReferencedLeaf", "functions \
			%(Collapse, MoveCollapsed, TermToTags, IsReferenceTerm, \
			IsUniqueTerm, IsModifiableTerm, IsTemporaryTerm, \
			IsBoundLValueTerm, IsUncollapsedTerm, LiftToReturn, \
			MoveRValueToForward, MoveRValueToReturn, ReduceToReference)")
			@ %NPLA, "functions %(EvaluateIdentifier, ReduceCombinedBranch, \
			ReduceCombinedReferent, MatchParameter, BindParameter, \
			BindParameterWellFormed, BindSymbol, ReduceToReferenceList, \
			ReduceToReferenceUList)" @ %NPLA1, ("function \
			%SetEvaluatedReference", "class template %GParameterValueMatcher")
			@ %NPLA1Internals, ("function %Decapsulate::operator()",
			("all functions with prefix 'Lambda', 'Vau', 'WVau', 'SetFirst', \
			'Acc', 'Let', 'Bindings', 'ListExtract', 'Import' or 'Ass'",
			"functions %(MakeEnvironment, CheckParent, ForwardFirst, First, \
			FirstFwd, FirstVal, RestFwd, RestVal, FoldR1, Map1, ListConcat, \
			Append, SymbolsToImports, ProvideLet, ListPushFront)")
			@ "namespace %Forms") @ %NPLA1Forms, ("combiners ('as-const', \
			%(expire, deshare), '$lvalue-identifier?')" @ "function \
			%LoadGroundContext", "native implementation" @ ("applicative \
			%force" @ "function %LoadModule_std_promises", "applicative \
			%require" @ "function %LoadModule_std_modules")) @ %Dependency) 
			// These include almost all call sites of %TryAccessLeaf \
				except a few exceptions: the implementation of \
				%(TryAccessLeafAtom, TryAccessTerm), the access of leaf for \
				saved operand name before throwing %ListReductionFailure in \
				%ReduceCombinedBranch, and %TermRange accesses. In particular, \
				the 'GetObject<TermReference>()' call in \
				%LiftPropagatedReference would be protected by these changes \
				in the call sites.
			$= (/ $impl
				^ ($dep_from "%TryAccessLeafAtom" ~ "%TryAccessLeaf") @ %NPLA),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			+ DLDI 'YB_ATTR_nodiscard' @ "internal implemenation"
				@ "%(AccL, AccR)",
			/ DLDI "simplified member function %Decapsulate::operator()"
				^ "%TermNode::SetValue" ~ "%ValueObject::assign",
			/ DLDI "simplified explicit %ValueObject with allocator \
				assignment" ^ "%TermNode::SetValue" ~ '.Value =',
			/ @ "functions %(Cons, ConsRef, SetRest, SetRestRef, \
				ListAsterisk, ListAsteriskRef, Apply)" $=
			(
				/ DLDI "simplified by transferring 1st subterm from the \
					operand instead of the rest";
				+ DLDI "assertion to check against self move"
					^ "%ystdex::ref_eq",
				(
				/ DLDI "throwing exception" ^ "%ThrowListTypeErrorForNonlist";
					// This changes the exception message a bit.
				/ "merged error handling"
				)
			)
		),
		- DLDI "all 'NPL::' before calls to function templates with \
			prefix 'Access' or 'TryAccess', or name %make_observer"
			$effective @ %(NPLA, NPLAMath, NPLA1, NPLA1Forms, NPLA1Internals,
			Dependency, SXML)
			// See $2022-06 @ %Documentation::Workflow.
	)
),

b946
(
	/ %YFramework.NPL $=
	(
		/ DLI "enabled conditinoal inclusion for different G++ versions"
			@ %(NPLA, NPLA1Forms),
		/ @ "class %REPLContext" %NPLA1 $=
		(
			+ "'\invariant' command to ensure the values as pure functions \
				when returning" @ "Doxygen comment"
				@ "data member %(ConvertLeaf, ConvertLeafSourced)";
			+ DLI 'YB_ATTR_nodiscard YB_PURE' @ "internal converter"
		),
		/ @ 'NPL_Impl_NPLA1_Enable_TCO' @ %NPLInternals $=
		(
			/ "%FrameRecord" ^ "%pair" ~ "%tuple";
				// This makes the destruction of its data members fully \
					defined. This makes real differences in implementations, \
					see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66699.
				$dep_from "function %TCOAction::operator()",
			/ "alias %FrameRecordList" -> "class",
				// As %ContextNode::ReducerSequence with defined order of \
					elements destrution.
			/ @ "class %TCOAction" $=
			(
				* "wrong destruction order between the handlers holding \
					combiner prvalues and environment guard"
					@ $orig (@ 'YF_Impl_NPLA1_Enable_TCO' @ %NPLA1 $since b820)
					$= (/ $impl
						"reordered data member of the stashed context handler")
						// This is also consistent to the destruction in \
							%operator(). Note simply reorder of the stashed \
							context handler after the frame record list would \
							be (somewhat surprisingly) significantly more \
							efficient, but this should be logically wrong.
				/ @ "function %operator()" $=
				(
					* "active combiner prvalues wrongly released before the \
						environment pointer in the frame list entry"
						$since b910,
						// This was inversed, if the frame reusing in the call \
							to %Attach#2 previously was not considered.
					/ DLI "simplified" !^ "%(NPL::get, ActiveEnvironmentPtr)"
						$dep_from "%FrameRecord"
				),
				* "wrong destruction order between term guard and frame record \
					list" $since b909
					$= (/ $impl
						"reordered data member of the stashed context handler"),
				* $comp "underspecified order of destruction of frame records"
					$dep_from "%FrameRecordList"
					@ $orig (@ 'YF_Impl_NPLA1_Enable_TCO' @ %NPLA1 $since b820),
				- $dev "public data members %(RecordList, EnvGuard, AddRecord)"
					// Some members are made public only for convenience when \
						%TCOAction is private to %NPLA1. This is not necessary \
						because %TCOAction is now local to %NPLA1Internals. \
						By having more data members declared 'private', it \
						also makes most data members private and free to the \
						layout restrictions of ISO C++ [class.mem] (although \
						already relaxed in a different way by CWG 2404 but \
						blocked by incoming WG21 P1847).
			)
		)
	),
	/ DLDI "all 'yconstexpr static'" -> 'static yconstexpr'
		$effective @ "function template %openmode_conv#1"
		@ %YBase.YStandardEx.CStandardIO,
	/ %YBase.YStandardEx $=
	(
		- DLDI "header inclusion %CAssert" @ %IteratorOperation,
			// This is already included in %DereferenceOperation.
		- DLDI "header inclusion <algorithm>" @ %(Tree, List),
			// This is now already included by %Range from %Allocator.
		/ "header inclusions (<algorithm>, <memory>, <iterator>)" @ %Array
			-> %Range
			// Ditto.
	)
),

b945
(
	(
	+ DLI "workaround for GCC 12" $effective @ "functions %Forms::(ProvideLet, \
		Provide, MakeEncapsulationType)" @ %YFramework.NPL.NPLA1Forms;
		// See $2022-05 @ %Documentation::Workflow.
	/ $re_ex(b919) DLP "updated platform %Linux toolchain";
	/ $re_ex(b919) $forced "rebuilt library %FreeImage" @ "platform %Linux"
		// This is required because for incompatibility in LTO update.
	),
	/ $build %Tools $=
	(
		/ ('-flto=jobserver' -> '-flto=auto') @ !"platform %Win32"
			$effective @ ("%SHBuild-common-options.sh", \
			"%SHBuild-YSLib-common.txt") @ %Scripts,
			// See $2022-05 @ %Documentation::Workflow.
		/ ('-flto' -> '-flto=jobserver') @ "platform %Win32"
			$effective @ (("%SHBuild-common-options.sh",
			"%SHBuild-YSLib-common.txt") @ %Scripts, %ProjectGenerator.Main)
			// Ditto.
	),
	+ $lib $impl 'YB_ATTR(optimize("Os"))' @ "member function \
		%resource_pool::deallocate" @ %YBase.YStandardEx.MemoryResource,
		// GCC 12.1 does not generate optimal code as before without this \
			attribute. See also $2022-05 @ %Documentation::Workflow.
	/ %YFramework.NPL $=
	(
		/ DLI @ "static member function %ContextNode::DefaultResolve" @ %NPLA $=
		(
			/ $impl "simplified" ^ ("%ystdex::unchecked_function"),
			/ "disabled the flatten attribute on the enclosing loop"
				@ 'YB_IMPL_GNUCPP >= 120000'
				// See $2022-05 @ %Documentation::Workflow.
		),
		/ @ %NPLInternals $=
		(
			+ "function %ReleaseOneShotGuard" @ "class %TCOAction",
			(
			+ "function template %RelaySubsequent";
			/ DLDI "simplified function template %ReduceSubsequent"
			)
		),
		/ %NPLA1 $=
		(
			/ @ "static function member %ContextState::DefaultReduceOnce" $=
			(
				/ DLDI "non-list check" ^ "%IsList",
				* "missing excluding non-list values for nested one-element \
					list reductions" $since b881
					// This leads to wrong results of self-evaluation of \
						objects with irrgular representation (e.g. reference \
						to subobjects introduced by %Forms::Unwrap since b858) \
						enclosed in one-element lists.
			),
			+ "function template %GuardFreshEnvironment"
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			/ DLI "macro %NPL_Impl_NPLA1_TraceVauCall"
				=> 'NPL_Impl_NPLA1Forms_TraceVauCall',
			/ DLI @ "functions %(LetAsterisk, LetAsteriskRef)" $=
			(
				/ "simplified %TermRange handling",
				+ "macro %NPL_Impl_NPLA1Forms_LetAsterisk_ExpandLevel to \
					control the conditional inclusion branch used",
				+ "more specific optimized expansion of non-empty calls"
			),
			- DLI "redundant call to setting next term"
				@ 'NPL_Impl_NPLA1_Enable_Thunked'
				@ "functions %(Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef, LetRec, LetRecRef, LetAsterisk, \
					LetAsteriskRef, ProvideLet)",
			/ "avoided denpending on the 1st subterm"
				@ "functions %(And, Or, LetAsterisk, LetAsteriskRef)",
			/ DLI "merged assertions and simplified common internal calls"
				@ "functions %(Let, LetRef, LetWithEnvironment, \
				LetWithEnvironmentRef, LetRec, LetRecRef)",
			/ @ 'NPL_Impl_NPLA1_Enable_TCO' @ "captured function body"
				@ "function %Call1CC" $=
			(
				+ DLI "assertions for TCO action as the top of current \
					captured frame" @ 'NPL_NPLA1Forms_CheckContinuationFrames',
				* "incorrectly released TCO action instead of the one-shot \
					guard" $since b943
					// This is not observable in the current implementation of \
						the object language, but not expected. And it is a \
						performance defect because of unnecessary destroy and \
						creation of TCO actions.
					$= (/ $impl ^ $dep_from ("%TCOAction::ReleaseOneShotGuard"
						@ %NPLA1Internals))
			),
			/ DLI @ "functions 'Let*'" $=
			(
				+ "macro %NPL_Impl_NPLA1Forms_LetParent_ExpandLevel to \
					control the conditional inclusion branch used",
				/ "expanded branch without parent"
			),
			(
			// See $2022-05 @ %Documentation::Workflow.
			* "incorrectly captured strong environment reference for weak \
				environment reference" @ "parent environment evaluation"
				@ "functions %(LetWithEnvironment, LetWithEnvironmentRef)"
				$since b917;
			/ DLDI "simplified common parent evaluation"
				@ "functions %(LetWithEnvironment, LetWithEnvironmentRef, \
				LambdaWithEnvironment, LambdaWithEnvironmentRef, \
				VauWithEnvironment, VauWithEnvironmentRef, \
				WVauWithEnvironment, WVauWithEnvironmentRef)"
			),
			/ DLDI "simplified" ^ ("%GuardFreshEnvironment" @ %NPLA1)
				~ "%(EnvironmentGuard, SwitchToFreshEnvironment)"
				$effective "all functions with prefixes ('Let', 'Lambda', \
				'Vau', 'WLambda')",
			/ DLDI "simplified function %AsEnvironment" (!^ 'p_parent',
				^ $dep_from ("%RelaySubsequent" @ %NPLA1Internals)
				~ "%A1::RelayCurrentNext"),
				// This is a weak reference, not a pointer.
			/ DLI "optimized call by avoiding body lifting"
				@ "functions %(Let, LetRef, LetWithEnvironment, \
				LetWithEnvironmentRef, LetRec, LetRecRef, LetAsterisk, \
				LetAsteriskRef, Provide, ProvideLet)",
			/ DLI "optimized interal call layout"
				@ "functions %(ProvideLet, Provide)"
	)
),

b944
(
	/ %YBase.YStandardEx $=
	(
		* "ill-formed expression" @ "'yconstraint' operand"
			@ "static function %call" @ "class template specialization \
			%function_traits for %empty_function_policy::no_check"
			@ %YBase.YStandardEx.Function $since b849,
		/ "constructor#1" @ "class template %prefix_eraser" @ %Container
			^ "first iterator in the range" ~ "last iterator in the range"
			// Subsequent insertions would not be guarded by the old behavior. \
				And it is also more natural to construct a no-op guard by \
				default.
	),
	/ DLDI "simplified 1st operand" @ "%YAssert invocations" !^ 'bool'
		$effective @ %(YBase.YStandardEx.CAssert,
		YFramework.(Helper.ShellHelper, NPL.(NPLA1, NPLA1Internals),
		YCLib.FileSystem, YSLib.Service.(ImageProcessing, TextRenderer,
		YBlend))),
		// A few exceptions are in %YFramework.YSLib.Service.YGDI, which need \
			casts.
	/ %YFramework.NPL $=
	(
		/ @ "class %TermNode" @ %Scontext $=
		(
			(
			* "missing swapping tags" @ "function %SetContent#3" $since b857
				^ "%std::swap";
				// Also to be consistent %SetContnet. Now this is same to the \
					friend function %swap.
			/ DLDI "simplified friend function %swap" !^ "%std::swap"
			),
			(
			+ "2 static function %AreEqual";
			+ "friend function %operator==";
			+ "friend %operator!="
				^ "private base %ystdex::equality_comparable<TermNode>"
			// If a container of list is saved in %Value, it requires '==' of \
				%TermNode to work with %ValueObject.
			),
			(
			/ "constructors with parameter of 'const TermNode&'"
				^ "allocator from the 1st argument";
				// This is more consistent to the copy constructor.
			* $re_add(b916) "missing nested call safety in handling terms from \
				object language" @ (("copy constructor with allocator";
				$comp "copy constructor"), "constructors with pamameter of \
				'const Container&'") $orig (@ "type %TermNode" $since b674)
				$= (/ $impl ^ ("%ystdex::unchecked_function"
					@ $dep_from %YBase.YStandardEx.Function))
			)
		),
		/ %NPLA1Internals $=
		(
			- DLDI "unused variable" @ "member function \
				%TCOAction::CompressFrameList",
				// Also to eliminate G++ waraning: [-Wunused-variable].
			/ DLDI "simplified one shot guard initialization"
				^ "brace-initializer '{}'",
			/ DLDI "simplified" @ ("copy constructor",
				"function %MakeOneShotChecker")
				^ ('->' ~ ('*', '.'), "cast" ~ "%optional::has_value"),
			/ "%Action" ^ "%ystdex::unchecked_function" ~ "%function",
			+ "macro %NPL_Impl_NPLA1_Enable_ThunkedThreshold",
			/ "function %SetEvaluatedValue" $=
			(
				+ 'const' @ "3rd parameter",
				+ DD "'\pre' command" @ "Doxygen comment",
				/ DLI "optimized for nonnull value"
					^ "explicit %EnvironmentReference construction",
				/ DLI ^ "allocator"
			)
		),
		/ %NPLA $=
		(
			+ "function %LiftSubtermsToReturn with parameter of \
				'TermNode::Container&'";
			/ DLDI "simplified %LiftSubtermsToReturn#2"
		),
		/ %NPLA1 $=
		(
			/ @ "constructors %REPLContext" $=
			(
				+ DLDI "assertion" @ "default %Preprocess",
				/ DLI "improved nested calls efficiency"
					^ $dep_from ("%NPL_Impl_NPLA1_Enable_ThunkedThreshold"
					@ %NPLA1Internals)
			),
			/ DLDI "simplified function %DefaultEvaluateLeaf"
				^ "%ReduceReturnUnspecified",
			/ DLDI "simplified function %ReduceReturnUnspecified"
				!^ "%TermNode::SetValue",
				// To be consistent with other uses. This is also a bit \
					tighter in generated code.
			(
			+ "enumerator %Pair" @ "enum class %ValueToken";
			+ "%ValueToken::Pair support" @ "%to_string"
			)
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			/ @ "function %Apply" $=
			(
				+ DLDI "internal assertion",
				* $re_ex(b913) "move-only object not allowed in terms handled \
					by functions as native implemention of applicatives"
					@ ("function %Apply" $since b859)
					$= (/ $re_ex(b914) "avoided unexpected copy by list \
						initialization via %std::initializer_list instance"
						@ "%TermNode construction")
			),
			/ DLDI "accessed rest list value by container" @ "functions \
				%(LetAsterisk, LetAsteriskRef, RestFwd, RestVal, SetRest, \
				SetRestRef)" $dep_from ("%LiftSubtermsToReturn" @ %NPLA),
			- $revert(b943) DLI "redundant %ClearCombiningTags call"
				@ "function %Call1CC",
			* "missing preserving tags" @ "modified lists" @ "functions \
				%(SetRest, SetRestRef)" $orig (@ %NPLA1 $since b857),
			* $comp DLI "missing clearing the container before the calls \
				of the applicative" @ "functions %(AccL, AccR)" $since b942
				$dep_from %YBase.YStadardEx.Container,
				// This would not be exposed when the 1st subterm of the \
					combining term is regular. However, it is unreliable.
			/ DLDI "all %YSLib::in_place_type" -> "%in_place_type",
				// The using declaration is already in NPLA.h.
			/ DLI "setting reference result" @ "%(ListExtractFirst, \
				LetAsterisk, LetAsteriskRef)" ^ "allocator"
		),
		/ %Dependency $=
		(
			* $comp "unexpected copy of initializers on calls"
				@ "native implementation" @ "applicative %apply" $since b859
				$dep_from ("%Apply" @ %NPLA1Forms)
			* $comp "missing preserving reference property" @ "modified lists"
				@ "applicatives ('set-rest!', 'set-rest%!')"
				$dep_from ("functions %(SetRest, SetRestRef)" @ %NPLA1Forms)
				$since b857
				// The applicatives were introduced in b834, but the \
					%TermTags::Temporary was used since b857.
		)
	)
),

b943
(
	/ %Tools $=
	(
		/ %Scripts $=
		(
			+ $re_add(b942) "support of varaible %C_CXXFLAGS_EXT"
				@ "%SHBuild-common-options.sh",
				// This should better be consistent between stage 1 and stage \
					2. It is also actually relied on in the stage 1 \
					bootstraping.
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				* "minor descriptions when adding addtional fixes of the \
					options" $since b906,
				* $re_ex(b900) $revert_ex(b904) "missing restoring %LIBS \
					before building the YBase library" $since b904
					// This fixes the regression since b904, which was an old \
						bug since b796 fixed by b900 and revised in b902. The \
						restore should not be removed even it is set in the \
						YFramework library build later, because it would \
						affect the YBase library build.				
					$= (+ "restore of %LIBS before building the libraries of \
						each configuration"),
						// This fix is different to b902, because %LIBS is \
							printed in the call to 'build-with-conf-opt' with \
							possible changes on %LIBS by the call to \
							'SHBuild_Extend_CallVariables' since b906. The \
							value must include these changes (if applicable).
				// There is no need to restore %LDFLAGS as \
					'build-with-conf-opt' will always set it with \
					'safeenv-set' based on the initial value get by \
					'safeenv-get' implied by '$env-de!' since b840.
				- DLDI $revert(b838) "restore of the saved %LDFLAGS before \
					stage 2 %SHBuild build",
					// Ditto. Note the original one used ad-hoc saved value \
						instead of the cached environment variable and \
						'safeenv-restore' was later introduced in b840.
				- DLDI $revert(b900)
					"restore of %LIBS before stage 2 %SHBuild build",
					// The value from 'safeenv-get "LIBS"' is enough.
				/ DLDI "simplified the definition of 'extra-opts'"
			)
		),
		/ DLI @ "%install-sysroot.sh" $=
		(
			- "unused setting of %SHBuild_UseRelease",
				// The concrete value is not used.
			(
			/ "stage 2 SHBuild call" ^ '"$@"' ~ 'SHBuild_Opt'
				$dep_to "removal the use of SHBuild_Opt";
			- DLD "ShellCheck directive on the last command to eliminate \
				warning SC2086"
			),
			(
			- $revert(b546) "exports of variables \
				%(SHBuild_LogOpt, SHBuild_BuildOpt, SHBuild_Opt)";
				// They are only used in this script.
			- $revert(b546) "variables %(SHBuild_Opt; SHBuild_LogOpt, \
				SHBuild_BuildOpt)" $dep_from "removal the use of SHBuild_Opt"
			)
		)
	),
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ DLDI "reordered object predicate functions",
			/ DLDI "simplified function %IsCombiningTerm",
			+ DD "Doxygen command '\ingroup guards'"
				@ "class %ContextNode::ReductionGuard",
			+ DLDI 'yimpl' @ "function %ClearCombiningTags",
			+ "function %GetCurrentRef" @ "class %ContextNode"
		),
		/ %NPLA1 $=
		(
			+ $lib "assertion for comining terms"
				@ "functions %(ReduceCombinedReferent, SetupTailContext)",
			/ "function templates %MakeKeptGuard" => "%MoveKeptGuard",
			/ DLDI "simplified functions %(ReduceCombined, \
				ReduceCombinedReferent)" ^ "%ClearCombiningTags",
			/ @ "class %FormContextHandler" $=
			(
				+ "function %CallHandler";
				/ DLDI "simplified internal calls" @ "%operator()"
			)
		),
		/ %NPLA1Internals $=
		(
			+ "class %OneShotChecker";
			/ @ "class %TCOAction" $=
			(
				+ "data member %OneShotGuard";
				+ "support of early check by moved %OneShotGuard away"
					@ "%operator()"
			)
		),
		/ %NPLA1Forms $=
		(
			(
			+ "macro %NPL_NPLA1Forms_CheckContinuationFrames";
			+ "function %Call1CC" $dep_from %NPLA1Internals
			),
			+ "function %ContinuationToApplicative",
			(
			+ DLI "assertion for the common internal call"
				@ "functions %(AccL, AccR)";
			/ DLDI "internal calls for iterator arguments with narrow \
				contracts and no other implied assertions" ^ "%NPL::Deref" ~ '*'
			),
			* DD "missing escaping '\' before '<'" @ "Doxygen comment"
				@ ("functions %(AccL, AccR)" $since b898,
				"function %FoldR1" $since b899)
		),
		/ %Dependency $=
		(
			/ DLI @ "function %LoadGroundContext" $=
			(
				/ $design "reordered object predicates",
				/ "simplified derivation" @ "applicative %assv" !^ '()',
				/ $lib "added native implementation enabled by default"
					@ "applicative %assv" $dep_from ("%Assv" @ %NPLA1Forms),
				+ "applicative %assq" $dep_from ("%Assq" @ %NPLA1Forms)
			),
			+ "function %LoadModule_std_continuations" ^ $dep_from
				"%(Call1CC, ContinuationToApplicative)" @ %NPLA1Forms
		)
	)
),

b942
(
	/ %YBase.YStandardEx $=
	(
		+ "transformation_traits %(empty_pack_t, sizeof_pack_t)" @ %Meta,
		/ %TypeOperation $=
		(
			+ "metafunction %nonempty_pack_or_t"
				^ $dep_from ("%empty_pack_t" @ %Meta);
			+ "metafunction %head_of_t"
		),
		/ DLDI "all '_tKey' parameter 'key'" => 'k'
			$effective ("%exists" @ %Container, "%cache_lookup" @ %Cache),
			// To be consistent to most other container routines.
		/ DD %Placement $=
		(
			+ "Doxygen group %guards";
			+ '\ingroup grauds' @ "Doxygen comment"
				@ "alias template %placement_ptr"
		),
		/ ("class template %variadic_param", "function templates \
			%(sizeof_params, varg, chain_apply, unseq_apply)") @ %Function
			>> %Apply,
		/ %Container $=
		(
			/ DLI "%is_piecewise_mapped" ^ '_tCon' ~ '_tAssocCon',
			+ 'ynothrow'
				@ "function templates %(extract_key, extract_mapped)",
			(
			+ "type traits %(has_mem_key_comp, has_mem_lower_bound)";
			* "missing support of unordered containers"
				@ ("function templates %search_map" $since b680,
				"function template %emplace_hint_in_place" $since b708;
				$comp "function templates %search_map_by" $since b734,
				$comp "function templates %(try_emplace, try_emplace_hint, \
				insert_or_assign, insert_or_assign_hint)" $since b680)
			),
			/ "function templates %(cast_mutable#2, search_map, search_map_by)"
				^ "ADL %cast_mutable" ~ "%ystdex::cast_mutable",
			/ @ "all 2 function templates %cast_mutable" $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
				+ "exception specification"
			),
			/ "all 2 function templates %range_size" >> %Range,
			/ DLDI "header inclusion %Function" -> "%Apply"
				$dep_from ("%seq_apply" @ %Function),
			+ "functor %prefix_eraser",
			+ "support of default key template argument"
				@ "all 2 function templates %search_map"
		),
		/ %Cache $=
		(
			+ $re_add(b937) DD "'\warning' command for missing virtual \
				destruction" @ "Doxygen comment" @ "class templates \
				%(recent_used_list, used_list_cache)",
			/ @ "class template %recent_used_list" $=
			(
				/ "enabled allocator" $=
				(
					/ "type %list_type" ^ "%allocator_type",
					+ 'using list_type::list_type;'
				),
				- "check on the function" @ "function template %shrink#2",
				/ 'ynothrow' @ "function %undo_emplace" -> 'ynothrowv'
			),
			/ @ "class template %used_list_cache" $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ ("all 2 functions \
					%(begin, end)", "functions %(get, list, size)")
				+ 'ynothrow' @ "all 2 functions %(begin, end)",
				/ @ "data member %flush" $=
				(
					/ "supported empty state" ^ "%optional_function"
						~ "%function" $dep_to "optional flush",
					+ DD "commands" @ "Doxygen comment"
				),
				/ DLI "internal maximum used elements check" $=
				(
					/ $comp $design $dep_from "optional flush"
						$dep_to "optional flush for internal check",
					/ "prevented copy of data member %flush" ^ "%std::ref"
				),
				/ DLDI "removed internal checks" @ "%recent_used_list::shrink"
					$dep_from $forced "optional flush for internal check",
				/ @ "function template %emplace with parameter of \
					'const key_type&'" $=
				(
					* "missing excluding key type at the front of the \
						parameter type" $since b611
						$= (/ $impl
							^ $dep_from ("%head_of_t" @ %TypeOperation)),
					* "wrong used list access" $since b611
						$= (/ $impl ^ 'emplace' ~ 'emplace_front'),
					* "ill-formed iterator component returned" $since b611,
					/ DLDI "simplified" ^ "%ystdex::make_guard"
				),
				+ "function template %emplace with parameter of \
					%std::piecewise_construct_t",
				/ @ "function template %emplace with parameter of '_tParams&&'"
					$=
				(
					/ "optimized for associative containers"
						^ ($dep_from ("%ystdex::search_map_by" @ %Container),
						"%used_cache_type::emplace_hint")
						~ "%used_cache_type::emplace",
					/ DLDI "simplified" ^ "%ystdex::unique_guard"
				),
				* "wrong return value for const-qualified %(begin, end)"
					$since b611
					$= (/ ^ ('begin', 'end') ~ ('cbegin' ~ 'cend')),
					// The results are from the mutable data member. 
				/ $lib "functions %(begin, end)" ^ "%ystdex::(begin, end)"
					~ "member functions"
			),
			+ "friend function %cast_mutable" @ "class templates \
				%(recent_used_list; used_list_cache)";
			/ @ "function template %cache_lookup" $=
			(
				/ DLDI "parameter 'cache'" => 'm',
				/ ^ $dep_from ("%ystdex::search_map_by",
					"ADL %emplace_hint_in_place") @ %Container
					~ "check to throwing exception on insertion failure"
					$dep_from ("%(cast_mutable, emplace)" @ "%used_list_cache",
					"%cast_mutable" @ %Container)
					// The check is needed because no support of concurrent \
						accesses is provided.
			)
		),
		- DLDI "redundant header inclusion" @ %MemoryResource
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %SContext $=
			(
				/ DLDI !^ "%ystdex::decay_t",
				/ @ $impl "return type" @ "function template %AsTermNode#1" $=
				(
					/ "allowed not excluding allocator type other than at the \
						front of the parameter pack"
						^ $dep_from ("%ystdex::head_of_t"
						@ %YBase.YStandardEx.TypeOperation)
						~ "%ystdex::(bool_, cond_or_t_)";
					/ DLDI "simplified" ^ "%enable_if_convertible_t"
						~ ("%ystdex::(enable_if_t, not_, false_)",
						"%std::isconvertible", 'sizeof...')
				)
			),
			/ DLI %NPLA1Forms $=
			(
				- "several internal 'YB_FLATTEN'",
				/ "reused subterm on preparation" @ "functions %(FoldR1, Map1)",
				/ $forced $design "function templates %(RegisterUnary, \
					RegisterBinary)" $dep_from ("%RegisterHandler" @ %NPLA1)
			),
			/ %NPLA1 $=
			(
				+ '\ingroup grauds' @ "Doxygen comment"
					@ "alias %EnvironmentGuard",
				/ "function template %RegisterHandler"
					-> "2 function templates %RegisterFormHandler",
				/ DLI @ "functions %(RegisterForm, RegisterStrict)" $=
				(
					/ $design $dep_from $forced "%RegisterHandler",
					+ 'YB_ATTR_always_inline'
				),
				/ DLDI "leaf handling" @ "functions %(MatchParameter, \
					BindParameter, BindParameterWellFormed)" $=
				(
					"simplified the check"
						^ $dep_from ("%HandleOrIgnore" @ %NPLA1Interals),
					+ 'inline' @ "internal function templates"
				)
			),
			/ DLI %Dependency $=
			(
				/ DLI "avoided redundant %string copy" @ ("function \
					%ReduceToLoadExternal", "native implementation"
					@ "applicative %require"
					@ "function %LoadModule_std_modules"),
				/ DLI "function %ReduceToLoadExternal" ^ "allocator",
					// The copy constructor would not propagate the allocator \
						by default.
				/ DLI "module name concatenations" @ "function \
					%LoadStandardContext" ^ ("allocator", "%string::resize"),
				* DLI "redundant %string argument copying"
					@ "native implementation"
					@ "applicatives ('find-requirement-filename', %require)"
					@ "function %LoadModule_std_modules" $since b923,
				/ DLI "simplified %(AccL, AccR)" ^ $dep_from
					("%ystdex::prefix_eraser" @ %YBase.YStandardEx.Container),
				/ DLDI "newline" @ "alternative derivation" @ "appliative \
					'env-empty?'" @ "function %LoadModule_std_system",
				+ DD ("'\pre' command", "'\exception' command")
					@ "Doxygen comment" @ "functions %(LoadModule_std_io, \
					LoadModule_std_system, LoadModule_std_modules)",
				/ "forwareded function parameter"
					@ "function templates %(InvokeIn, GetModuleFor)",
				+ "pamameter pack as invocation arguments" @ "function templates \
					%(InvokeIn, (GetModuleFor; LoadModule; LoadModuleChecked))",
				/ DLI @ "function %LoadGroundContext" $=
				(
					/ $design "parameter name 'wenv'" @ "native implementation"
						@ "applicative 'lock-environment'" -> 'r_env',
						// To be consistent to other uses.
					/ "simplified native implementation"
						@ "applicative 'make-standard-environment'"
						!^ ('YB_LAMBDA_ANNOTATE', 'flatten'),
					/ DLDI "alternative derivation" @ "operatives ('$and', \
						'$or')" ^ ('eval%', 'cons') ~ ("%apply", 'wrap')
						// See also the update in the rationale in \
							%Documentation.NPL (zh-CN).
				),
				/ @ "function %LoadModule_std_io" $=
				(
					+ "2nd parameter of 'const shared_ptr<Environment>&' to \
						reperesent the ground environment"
						$dep_to "requiring ground for std.io";
					+ "applicative 'get-module'"
						$dep_from ("%MakeKeptGuard" @ %NPLA1)
				),
				/ @ "function %LoadModule_std_modules" $=
				(
					+ "2nd parameter of 'const shared_ptr<Environment>&' to \
						reperesent the ground environment"
						$dep_to "requiring ground for std.modules",
					(
					+ $impl "interna registry saved fresh standard environment";
					/ "returned the fresh standard environment"
						@ "appliative 'register-requirement!'"
					),
					/ @ "applicative %require" $=
					(
						* "missing parameter arity check"
							@ "native implementation" $since b923,
						* "wrongly moved arguments if modifiable when loaded at \
							1st time" $since b923,
						* "missing switching to the fresh standard environment \
							before loading" $since b923
							$dep_from "appliative 'register-requirement!'",
						(
						* "missing preserving reference results"
							@ "alternative derivation" $since b923;
						/ "saved cached result and took it as the call result \
							after the 1st loading"
							// This is an explicit change on the interface \
								different to [RnRK] to make it easier to use.
						),
						+ "support of optional 'module-parameters'",
							// As 'get-module'.
						/ DLDI "simplified guard"
							^ $dep_from ("%MakeKeptGuard" @ %NPLA1)
					),
					* "missing saving %errno before throwing the exception"
						@ "applicative %SHBuild_MakeTempFilename"
						@ "function %LoadModule_SHBuild" $since b904
						// The evaluation of the other argument may overwrite \
							%errno.
				),
				/ DLDI "function %LoadStandardContext" $=
				(
					/ "simplified"
						$dep_from "%LoadModuleChecked" !^ "%std::(bind, ref)",
					/ $dep_from $forced ("requiring ground for std.io",
						"requiring ground for std.modules")
				)
			),
			/ %NPLAMath $=
			(
				/ $re_add(b940) DLDI "header inclusion %Functional"
					-> %(ExpandedFunction, Functor),
				/ DLDI "simplified internal static assertions" ^ '()'
					~ '::value',
				/ $re_add(b941) DLDI "all member type %traits"
					=> "%traits_type",
				+ DLI "workaround on exception specifications"
					@ !'!YB_IMPL_GNUCPP || YB_IMPL_GNUCPP >= 90000'
			),
			/ %NPLA $=
			(
				+ DD "'\return' command" @ "Doxygen comment"
					@ "function templates %AllocateEnvironment"
				+ 'ynothrow' @ "move %operator="
					@ 'NPL_NPLA_CheckEnvironmentReferenceCount'
					@ "class %EnvironmentReference",
					// Also to eliminate Microsoft VC++ 2022 warning: C26439.
				/ @ "class %ContextNode" $=
				(
					+ "function template %AccessCurrentAsUnchecked";
					/ DLDI "simplified function template %AccessCurrentAs"
						^ "%AccessCurrentAsUnchecked"
				)
			),
			/ %NPLA1Internals $=
			(
				/ ("functions %(MoveGuard, MakeMoveGuard)",
					"alias %MoveGuardAction") @ 'NPL_Impl_NPLA1_Enable_Thunked'
					-> ("function templates %(KeepGuard, MakeKeptGuard)",
					("alias tempalte %GKeptGuardAction") @ %NPLA1),
					// Since the guard is sequenced in %ReducerSequence, it \
						is guaranteed to be released in order in both the \
						normal and exceptional paths, so there is no need to \
						explicit move and release the guard (except in \
						%TCOAction::operator() needing to be ordered with \
						other resource releases in the same action, which is \
						not handled here).
				/ $forced DLI "simplified guard" $effective
					@ "class %NonTailCall",
				(
				+ "function template %HandleOrIgnore";
				/ DLDI "simplified matching" @ "class tmeplate \
					%GParameterValueMatcher" ^ "%HandleOrIgnore"
				),
				- DLDI 'YB_FLATTEN' @ ("function %SetupNextTerm",
					@ "all 4 function templates %RelayCurrentNextThunked",
					"function template %RelayNextGuardedLifted"
					@ "struct %TailCall"),
				- DLI 'YB_FLATTEN' @ ("all 4 function templates \
					%RelayCurrentNext", "function %SetEvaluatedValue"),
					// This now improves the performance.
				(
				+ "function %AccessTCOActionUnchecked" ^ $dep_from
					("%ContextNode::AccessCurrentAsUnchecked" @ %NPLA);
				/ DLI "optimized %EnsureTCOAction"
					^ ('YB_UNLIKELY', "%AccessTCOActionUnchecked")
				)
			)
		)
	),
	+ "support of varaible %C_CXXFLAGS_EXT" @ "%SHBuild-YSLib-common.txt"
		@ %Tools.Scripts
		// This allows to configure %_POSIX_C_SOURCE automatically when it is \
			not available by default (e.g. native Termux).
),

b941
(
	/ %YBase.YStandardEx $=
	(
		/ %Placement $=
		(
			/ DLDI "header inclusion %IteratorOperation"
				-> ("%DereferenceOperation", "<iterator>", "%Variadic"),
			/ @ "class template %default_init_allocator" $=
			(
				+ DD '\ingroup allocators' @ "Doxygen comment",
				+ DD '\ingroup functors' @ "Doxygen comment"
					@ "class template %rebind"
			),
			+ "5 function templates %copy_assign",
			(
			+ DLDI 'yunused'
				@ "function templates %(construct_default_in, construct_in)",
			/ DLDI "simplified function %construct" ^ "%construct_in"
				~ "%construct_within",
			/ DLDI "simplified function %construct_default"
				^ "%construct_default_in" ~ "%construct_default_within";
			+ $dev $lib 'YB_ATTR_nodiscard YB_ATTR_returns_nonnull'
				@ "function templates %(construct_default_within, \
				contruct_within)"
			)
		),
		/ %Allocator $=
		(
			/ DD "Doxygen group %functors" >> %Placement,
			/ DLDI "all member type %traits" => "%traits_type",
			(
			+ "customization points %(propagate_copy, propagate_default)";
			+ "class template %propagating_allocator_adaptor"
				^ $dep_from ("%copy_assign" @ %Placement);
			+ $re_add(b939) $lib "class template specialization \
				%is_bitwise_swappable for %propagating_allocator_adaptor"
			)
		),
		/ "class template specializations %compressed_pair_element"
			@ %CompressedPair $=
		(
			// Both the primary template and the explicit specialization are \
				affected.
			* "ill-formed friend functions %swap" $since b939,
			* "missing 'const'"
				@ "conversion function overloads for 'const' type" $since b940
				// This would be ill-formed for ISO C++14 and above because \
					'constexpr' no longer implies no 'const' and the overloads \
					would clash non-const overloads. Also to eliminate Clang++ \
					warning: [-Wconstexpr-not-const].
		),
		/ %MemoryResource $=
		(
			/ @ "class template %polymorphic_allocator" @ %MemoryResource $=
			(
				// Since the member %destroy is deprecated but not removed, \
					%polymorphic_allocator still cannot be in %cpp2020.
				+ '\ingroup allocators' @ "Doxygen comment",
				+ $lib 'ynothrowv' @ "constructor#2",
				/ "redundant verification of length overflow"
					@ "function %deallocate",
				* "wrong resolution implemented for LWG 3038 and missing of \
					LWG 3237" @ "function %allocate" $mismatch $since b842,
					// The proposed resolution was superseded since 2018-06 \
						and this outdated solution should not have been \
						adopted.
				/ @ "function template %allocate_object" $=
				(
					/ DLDI 'SIZE_MAX' -> 'size_t(-1)',
						// To be consisten with the supposed implementation of \
							LWG 3038 above (which was already correct \
							previously).
					/ "implemented LWG 3237" ^ "%std::bad_new_array_length"
						~ "%std::length_error"
				)
			),
			/ DLI "optimized class %resource_pool" $=
			(
				/ @ "function %deallocate" $=
				(
					+ "internal assertion to ensure one more dereferenceable \
						iterator",
					/ "simplified full chunk handling",
					/ "simplified full chunk detection",
					/ "rechecked candidate chunk empty"
						$dep_to "allowing deferred empty chunks"
				),
				/ "reduced iterator accesses" @ "function %allocate"
					$dep_from "allowing deferred empty chunks"
			),
			/ @ "class %monotonic_buffer_resource" $=
			(
				* DD "wrong '\note' command" @ "Doxygen comment"
					@ "function %do_deallocate" $since b845
					$= (/ "Doxygen comment" >> "%do_allocate"),
				/ @ "function %do_allocate" $=
				(
					(
					- DLDI "redundant 'const'" @ "parameters";
					* "missing adjusting zero size allocation to ensure it \
						meeting to the ISO C++ allcation function requirements \
						on the results" $since b845
					),
					* "violating the ISO C++ requirment of throwing" $since b845
						$= (/ $impl ^ "throwing upstream allocation requrest")
				)
			)
		)
	),
	/ %YFramework $=
	(
		/ %YCLib.Container $=
		(
			(
			+ "alias template %default_allocator" $dep_from
				("%ystdex::propagating_allocator_adaptor"
				@ %YBase.YStandardEx.Allocator);
				// This is not enabled by default.
			/ DLDI "all container templates with allocator default template \
				argument" ^ "%default_allocator" ~ "%pmr::polymorphic_allocator"
				$dep_to "default allocator changes"
			),
			/ "class template specialization %std::hash for \
				%ystdex::basic_string instances"
				-> "for %platform::strings::basic_string instances"
		),
		/ ^ ("default_allocator" ~ "%pmr::polymorphic_allocator")
			$effective %(NPL.(SContext.NPLA, NPLA1), YSLib.Core.ValueNode)
			$dep_from "default allocator changes",
		/ %NPL $=
		(
			/ %NPLA1Internals $=
			(
				+ $design "%YBase.YStandardEx inclusions for %ystdex names",
				+ $design "header inclusion <iterator>",
					// For %std::next.
				/ "simplified constructor %TCOAction",
				(
				/ DLI "simplified member function %TCOAction::CompressFrameList" $=
				(
					!^ "%ystdex::cast_mutable",
					^ "%FrameRecordList::remove_if"
				);
				/ DLI "%FrameRecordList" ^ "%forward_list" ~ "%list"
					// Other sequences are likely more inefficient (e.g. %vector \
						with reversed sequence) with proper alloators.
				),
				/ @ "class %TCOAction" $=
				(
					/ "function %AttachFunction" -> "2 functions %Attach";
					/ "added a record before each prvalue attaching" @ "function \
						%Attach with parameter of 'ContextHandler&&'";
					/ DLI "simplified function %MoveFunction"
						!^ "%LastFunction";
					+ 'const' @ "function %MoveFunction";
					/ "simplified guards release" @ "%operator()";
					/ "data member %LastFunction"
						-> "simplified stashed handlers",
						// Instead of guards, one stashed function is enough.
					* $comp "wrong order of function prvalue stored" $orig
						(@ 'YF_Impl_NPLA1_Enable_TCO' @ %NPLA1 $since b820)
						// This also implies the order of destruction and the \
							interleaving behavior with releasing of the \
							environment pointers stored in the frame records.
				),
				/ DLI "constructions of %ReferenceSet"
					@ "member function %RecordCompressor::Compress" ^ "allocators"
			),
			/ $forced "simplified functions %(ReduceCombined, \
				ReduceCombinedBranch, ReduceCombinedReferent)" @ %NPLA1
				$dep_from (("%TCOAction::LastFunction"
				^ $dep_from "%TCOAction::Attach") @ %NPLA1Internals),
			/ %NPLA $=
			(
				+ "4 functions %AssertMatchedAllocators";
				/ DLI "simplified function template %AllocateEnvironment#3"
			),
			/ @ "class %TermNode" @ %SContext $=
			(
				(
				/ "function %MoveContainer" ^ "%Container::operator="
					~ "%SwapContainer";
				- $revert(b917) "redundant allocator equality"
					@ "functions %(MoveContent, MoveContainer)";
					// This was never actually required for %MoveContent.
				* DD "wrong '\pre' command" @ "Doxygen comment"
					@ "function %MoveContent"
				),
				/ DLI "inlined functions %(MoveContainer, MoveContent, \
					MoveValue)" !^ "local object",
				* DD "wrong Doxygen '\brief' command" @ "comment"
					@ "copy constructor" $since b879,
				+ $dev $lib ($design $impl "alternative implementation",
					"postcondition and assertion") @ "function %ClearContainer",
				/ DLI ("function %SwapContent", "friend function %swap")
					-> "inlined functions"
			),
			/ DLDI %NPLA1Forms $=
			(
				/ "simplified" @ 'NPL_Impl_NPLA1_Enable_TCO'
					@ "%operator()" @ "vau handler",
				/ "simplified" @ "functions %(Let, LetRef, LetWithEnviornment, \
					LetWithEnvironmentRef, LetAsterisk, LetAsteriskRef, \
					LetRec, LetRecRef)" ^ "%TermNode::Remove"
					~ "%TermNode::Container::erase"
			)
		)
	)
),

b940
(
	* DD "wrong value category" @ "descriptions" @ "applicative %rulist"
		@ %Documentation.NPL $since b915,
	/ %YBase.YStandardEx $=
	(
		/ %IntegralConstant $=
		(
			+ "conditionally defined macro %__cpp_lib_logical_traits";
			/ "detected and used %std::(conjunction, disjunction, negation)"
				@ "inline namespace %cpp2017" ^ "%__cpp_lib_logical_traits"
		),
		/ %Utilities $=
		(
			* "missing excluding parameters" @ "construct template"
				@ "class template %nifty_counter" $since b425
				$= (/ $impl ^ "%exclude_self_params_t"),
			+ $dev $lib "'YB_PURE yconstfn' or 'YB_PURE yconstfn_relaxed'"
				@ "member conversion functions" @ "class template %boxed_value"
		),
		/ DLDI "made internal identifier in small cases"
			$effective @ %TypeOperation,
			// To be consistent with other names in %YBase.
		* "missing inclusion <tuple>" $since b833 @ %Iterator
			$= (+ $revert(b667) $impl '#include <tuple>'),
			// Since b650, %TypeOperation included <tuple> indirectly by \
				including %Tuple, but this is changed in b833.
		(
		+ DLDI "header inclusion %IntegerSequence" @ %(Iterator, Utilities);
		/ "header inclusion %IntegerSequence" @ %TypeOperation -> %Variadic
		),
		/ DLI "lifted internal allocator guard types to the classes and \
			used it at several other member functions requiring lvalues"
			@ %(Tree, List),
		+ "unary type trait %is_inheritable_class" @ %Meta,
		/ %CompressedPair $=
		(
			+ "unary type trait %is_compressible_class",
			/ @ "class template %compressed_pair_element" $=
			(
				/ DLDI "simplified default template argument"
					^ $dep_from "%is_compressible_class",
				* $src "redundant %value_type data member"
					@ "explicit specialization" $since b938,
				+ "default constructor" @ "primary template",
					// To be consistent to the explicit specialization.
				+ "2 explicit conversion operators"
			);
			+ "transformation trait %compressed_base"
				^ $dep_from ("%is_inheritable_class" @ %Meta)
		),
		/ %Allocator $=
		(
			- DLDI "defaulted (copy, move) (constructor, %operator=)",
				 @ ($revert(b718) "class template %allocator_guard_delete",
				 $revert(b843) "class template %allocator_delete"),
				 // They should be same to implicily declared ones, hence \
					redundant.
			(
			/ "header inclusion %Placement" -> "%ComporessedPair",
			/ DLDI "function %get_allocator"
				@ "class templates %(allocator_guard_delete, allocator_delete)"
				!^ "using-declaration",
			/ DLI "optimized and simplified class templates \
				%(allocator_guard_delete, allocator_delete)"
				^ $dep_from ("%compressed_pair_element" @ %CompressedPair)
				~ "internal base class"
				// This depends on the 2nd template default argument and \
					%get_mutable in %compressed_pair_element since b939.
			)
		),
		/ %Tree $=
		(
			* $revert(b864) DLDI "redundant %YB_PURE" @ "member function \
				%access" @ "class template %tree_node" $since b864,
			/ DLI "optimized %tree_key_compare"
				^ $dep_from ("%compressed_pair_element" @ %CompressedPair)
		),
		* "missing support of final allocators" $effective @ (%List $since b865,
			(%Tree; $comp %Map) $since b830)
			// This is also buggy in libstdc++ and still not fixed \
				yet, see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82758, \
				and more generally, \
				https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60921.
			$= (/ $impl ^ "%(compressed_base, compressed_pair)"
				$dep_from %CompressedPair),
				// The incomplete type support relies on the fix of traits in \
					%compressed_pair in b939.
		/ DLI "internal representaton class template" @ %List $=
		(
			/ "functions %(allocate_node, deallocate_node)" ^ "%link_type"
				~ "allocator pointers",
				// As %Tree. Fancy pointers are not yet supported.
			/ 'YB_ATTR_nodiscard' @ "function %allocate_node"
				-> 'YB_ALLOCATOR YB_ATTR_returns_nonnull'
				// Ditto. Note 'YB_ATTR_returns_nonnull' only works for raw \
					pointers, which is satisfied by %link_type.
		)
	),
	/ DLDI "all 'yconstfn YB_PURE'" -> 'YB_PURE yconstfn' $effective \
		@ %(YBase.YStandardEx.(CompressedPair, MemoryResource, Path, Pointer),
		YFramework.YSLib.Service.YGDI),
	/ DLDI "all 'yconstfn_relaxed YB_PURE'" -> 'YB_PURE yconstfn_relaxed'
		$effective @ %YBase.YStandardEx.CompressedPair,
	/ $re_add(b939) DLDI "header inclusion %Functional" @ ((%(Concurrency,
		Container) -> %Function, %ScopeGuard -> %(FunctionAdaptor, Function))
		@ %YBase.YStandardEx, (%YCLib.YCommon -> %ExpandedFunction,
		(%YSLib.Core.YException -> %Invoke)) @ %YFramework)
		$dep_from "reducing header dependencies",
	/ %YFramework $=
	(
		/ %YSLib.Core.ValueNode $=
		(
			/ $re_add(b915) DLDI "all %TermNode argument 'node' to be accessed \
				directly" @ %ValueNode => 'nd',
				// As %TermNode in %NPL.SContext.
			- "header inclusion %Variadic",
			(
			- "header inclusions %(Functor, DereferenceOperation)",
			+ DLDI "header inclusions %(Bind, Compose)"
				$dep_to "reducing header dependencies"
			)
		),
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "functions %(ClearCombiningTags, IsCombiningTerm)"
					>> ("namespace %NPL" @ %NPLA);
				* $comp DD "wrong '\pre' command" @ "Doxygen comment"
					@ "function %IsCombiningTerm" $since b939
			),
			/ %NPLA $=
			(
				/ "ensured value representation of the terms" @ "function \
					%RegularizeTerm" ^ $dep_from "%ClearCombiningTags",
				/ "ensured value representation of first-class object on \
					the parameter as conditional preconditon and \
					postcondition" @ (("function %LiftToReturn";
					$comp "function %ReduceForLiftedResult"))
					$dep_all_from "native forms temporary tag fixes",
				/ @ "class %TermReference" $=
				(
					/ DLDI "declaration order" @ "getters",
					+ "function %PropagateFrom"
				),
				(
				+ "function %LiftPropagatedReference"
					^ $dep_from "%TermReference::PropagateFrom";
				/ DLDI "simplified function %ReduceToReference"
					^ "%LiftPropagatedReference",
				),
				/ DLI "ensured value tags on the 2nd argument"
					@ "function %(ReduceToReference, \
					ReduceToReferenceAt)" ^ "%AssertValueTags",
				/ DLI "ensured postcondition" @ "function %LiftMovedOther"
					^ "%AssertValueTags"
			),
			* $re_add(b939) $comp "missing cleanup combining tags for results \
				of operations in general" $since b860
				$dep_from ("%RegularizeTerm" @ %NPLA)
				$dep_to "native forms temporary tag fixes",
				// %TermTags::Temporary was introduced in %ReduceCombined \
					since b860, while some functions were introduced previously.
			/ %NPLA1Forms $=
			(
				/ DLDI "internal variable name 'x' got from \
					%AccessFirstSubterm calls" => 'tm',
					// This is usually not the variable, but the referenced \
						object.
				/ DLDI "simplified the call to detect internal range expiration"
					@ "functions %(FoldR1, Map1)",
				/ DLDI "simplified functions %(Let, LetRef, LetRec, LetRecRef, \
					ProvideLet)",
				* DLI "redundant nonmodifying tag setting on the lvalue terms"
					@ "functions %(LetAsterisk, LetAsteriskRef)" $since b917
					// This may cause unnecessary copies.
				(
				* ("missing detecting movable list xvalues for non-reference \
					elements"; "wrongly moved non-unique non-reference \
					elements") @ "functions %(ListExtractFirst, \
					ListExtractRest, Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef, LetRec, LetRecRef, \
					BindingsToEnvironment, BindingsWithParentToEnvironment)"
					$since b917;
					// Uses of term tags with %TermRange should be consistent \
						to %(FoldR1, Map1).
				* DLI "redundant nonmodifying tag setting on the lvalue terms"
					@ "functions %(Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef, LetRec, LetRecRef)" $since b917
					// Ditto. However, this rely on the fix above, otherwise \
						it might moved the binding list elements unexpectedly.
				),
				* $re_add(b927) "body not evaluated properly for non-empty \
					lvalue binding lists due to missing cleanup of %Value \
					before the call" @ "functions %(Let, LetRef, LetRec, \
					LetRecRef, LetAsterisk, LetAsteriskRef, ProvideLet)"
					$since b919,
					// This is in %LetCombineBody. Empty lists are optimized \
						in other paths in %LetEmpty which has the precondition \
						check to prevent non-empty %Value objects which have \
						been fixed since b92u7. Note %(LetAsterisk, \
						LetAsteriskRef) are not affected because they have \
						only prvalues non-empty binding lists.
				* $re_add(b925) "wrong temporary tag preserved"
					$dep_to "native forms temporary tag fixes" $=
				(
					* "before the application" @ "function %ForwardFirst"
						$orig (@ "%ForwardListFirst" @ %NPLA1 $since b875),
					* "for the forwarded arguments"
						@ ("functions %(AccL, AccR)" $since b898
						@ "functions %(FoldR1, Map1)" $since b899)
				),
				/ $re_add(b939) DLI "internal body lifting for let-family \
					bodies" ^ "%LiftOtherValue" ~ "%LiftOther",
				/ DLDI "simplified functions %(Cons, ConsRef)",
				/ DLDI "simplified alternative implementations" @ "functions \
					%(First, ListExtractFirst, LetAsterisk, LetAsteriskRef, \
					Let, LetRef, LetRec, LetRecRef, BindingsToEnvironment, \
					BindingsWithParentToEnvironment, ProvideLet)"
					^ $dep_from ("%LiftPropagatedReference" @ %NPLA)
			),
			/ @ "function %LoadGroundContext" %Dependency $=
			(
				/ @ "applicatives ('list-extract-first', 'list-extract-rest%')"
					$=
				(
					* "missing forwarding xvalues" @ "alternative derivations"
						$since b916
						$= (/ $impl ^ 'forward!');
						// The implementations had used 'map1' since b916, \
							which had used 'forward!' since b915.
					* $comp "inconsistency of native implementation of "
						// The native implementations since b917 also assumed \
							the forwarding.
				),
				* DLI "redudant copy made for lvalues" $since b917
				(
					/ @ "operative ('$let*', '$let*%')" $since b917 $=
					(
						/ $comp "native implemenation" $dep_from
							("%(LetAsterisk, LetAsteriskRef)" @ %NPLA1Forms),
						/ "alternative derivations" ^ 'id' ~ 'as-const'
					),
					/ @ "operative ('$let', '$let%', '$let/e', '$let/e%', \
						'$letrec', '$letrec%')"
						$since b917 $=
					(
						/ $comp "native implemenation" $dep_from
							("%(Let, LetRef, LetWithEnvironment, \
							LetWithEnvironmentRef, LetRec, LetRecRef)"
							@ %NPLA1Forms),
						/ "alternative derivations" ^ 'id' ~ 'as-const'
					)
				),
				(
				/ "simplified common native implementations"
					@ "operatives ('$resolve-identifier', '$move-resolved!')"
					$= (/ ^ $impl "%EnsureValueTags");
				* $comp $re_add(b925) "possible wrong temporary preserved"
					@ "native implementation"
					@ "operative '$resolve-identifier'" $since b857
					$dep_to "native forms temporary tag fixes"
					// As '$move-resolved!'. The operative was introduced in \
						b834, but the %TermTags::Temporary was used since b857.
				),
				* $comp $re_add(b925) "possible wrong temporary preserved for \
					prvalue lists" @ "native implementation" @ "applicative \
					'forward-first%'" $orig @ ('forward-list-first' $since b875)
					$dep_from ("%function %ForwardFirst" @ %NPLA1Forms)
			)
		)
	)
),

b939
(
	* "unexpected ADL '!' of traits results"
		$effective @ %YBase.YStandardEx.(Any, CompressedPair, Optional),
	+ DLDI "%yunused" @ '!YReader_Impl_TestNPL_UseBacktrace'
		@ "function %TestNPL" @ %YSTest.Shells,
		// To eliminate G++ warning in release modes: [-Wunused-parameter].
	/ %YBase.YStandardEx $=
	(
		/ %CompressedPair $=
		(
			/ DLDI "type-parameter-key" @ "template parameter list"
				@ "class template specialization %compressed_pair_element"
				-> 'class' ~ 'typename',
			/ $lib "worked around EBO not enabled for Microsoft VC++ in \
				multiple inheritance by default"
				@ "class template %compressed_pair" ^ '__declspec(empty_bases)',
			/ @ "class template %compressed_pair_element" $=
			(
				+ "default argument '0'" @ "2nd template parameter",
				(
				+ $impl 'mutable' @ "internal value" @ "primary template";
				+ "function %get_mutable"
				),
				+ "friend function %swap"
			),
			+ $re_add(b931) $lib "class template specialization \
				%is_bitwise_swappable for %compressed_pair_element"
		),
		/ %Any $=
		(
			+ DD "detailed descriptions" @ "Doxygen comment"
				@ "union %any_trivial_local_data"
			/ @ "class template %allocator_value_handler" $=
			(
				- DLDI "redudant template parameters" @ "internal \
					implementations",
				/ "optimized" ^ $dep_from "%compressed_pair"
				/ "owner type implementations" $=
				(
					// There are no effects for some cases since the \
						alternative implemenation of the owner type is disabled.
					* DLDI "wrong owner type" $since b926,
					* DLDI "missing member function %get_allocator"
						@ "alternative implementation" $since b887,
						// The current implementation does not need this since \
							it directly inherits the function from the \
							allocator deleter.
					/ $lib "worked %is_in_place_storable checks failures on \
						owners for Microsoft VC++" ^ '__declspec(empty_bases)',
					* "wrong internal data type not guaranteed for EBO as per \
						ISO C++11 rules" $since b887
						$= (/ $impl ^ "%(lref, compressed_pair)")
				)
			),
			/ "%(trivial_swap_t, trivial_swap)" @ "namespace %any_ops" @ %Any
				>> ("namespace %ystdex" @ %Swap) $dep_to "trivial tag move"
		),
		/ $dev $lib @ %AnyItearator $=
		(
			+ 'YB_ATTR_nodiscard YB_PURE' @ "all functions named %(get, \
				is_undereferenceable, operator==, operator->)",
			+ 'YB_ATTR_nodiscard' @ "function %operator*"
				@ "class template %any_input_iterator"
		),
		* "2nd parameter not used" @ "metafunctions %(nonvoid_result_t, \
			object_result_t)" @ %Invoke $orig (@ %Ref $since b636),
			// This is buggy in the very first: the result type is always the \
				template default argument.
		- DLDI "redundant header inclusion <cstring>" @ %Functor,
		/ "split %Functional" $dep_from "functional trivial tag move" $=
		(
			(
			+ %Bind,
			+ %Compose
				$= (+ "header inclusion %Functor"),
			+ %FunctionAdaptor
				$= (+ "header inclusions %(Bind, Compose)");
			+ "header inclusion %FunctionAdaptor" @ %Functional;
			/ "%(bind1, bind_forward)" @ %Functional >> %Bind,
			/ "%(composed, compose, composed_n, compose_n, \
				generalized_composed, generalized_compose, get_equal_to, \
				get_less)" @ %Functional >> %Compose,
			/ "%(update_thunk, one_shot)" @ %Functional >> FunctionAdaptor;
			- DLDI "header inclusion %Functor"
			),
			(
			+ %ExpandedFunction
				$= (+ "header inclusion %Function");
			+ "header inclusion %ExpandedFunction" @ %Functional;
			/ "%(expand_proxy, expanded_caller, make_expanded, \
				is_expandable, expanded_function, retry_on_cond)"
				@ %Functional >> %ExpandedFunction;
			- DLDI "header inclusion %Function"
			)
		),
		/ %Functional $=
		(
			/ "function template %invoke_for_value",
			(
				* "unexpectedly decayed results"
					$orig @ ("%call_for_value" $since b606)
					$= (/ "return type" ^ $dep_from
						("%nonvoid_result_t" @ %Invoke) ~ "%common_nonvoid_t");
					// This is buggy because it is intended to forward the \
						value for a void call result, and if the result is \
						decayed, it voids the effort. Since %common_type_t \
						fixed in b938, %common_nonvoid_t result is always \
						decaysed, so it is always wrong.
				>> %Invoke
					// Using of %common_nonvoid_t needs dependency on \
						%Variadic, which is not intended. With the fix above, \
						this is not the case.
			),
			/ ("header inclusion <numeric>", "functor %default_last_value")
				>> %Functor $dep_to "default value functor lift"
		),
		/ DLDI "header inclusions" @ %Optional $=
		(
			/ %Placement -> %Swap;
			/ %Functional -> %Functor $dep_from "default value functor lift"
		),
		/ $re_add(b937) DLDI "adjusted minor comments" @ %Swap,
		+ '&&' @ "return type" @ "%operator()" @ "class specialization"
			@ "functor %id" @ %Functor
			// Now it is more consistent to other functors, and same to \
				%std::identity of ISO C++20.
	),
	/ $forced "removed 'any_ops::' before 'trivial_swap_t' and 'trivial_swap'"
		$dep_from "trivial tag move" $effective
		@ %(YBase.YStandardEx.(Functional $dep_to "functional trivial tag move",
		Function, AnyIterator), YFramework.(YSLib.Core.(YEvent $dep_to
		"trivial tag simplification", YObject) $dep_from %Adaptor.YAdaptor,
		NPL.(NPLA, NPLA1, NPLA1Internals, NPLA1Forms, Dependency) $dep_from
		"NPL trivial tag adaption"), YSTest.Shells, Tools.SHBuild.Main),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ ('using ystdex::trivial_swap;', 'using ystdex::trivial_swap_t')
				@ %YSLib.Adaptor.YAdaptor $dep_from "trivial tag move",
			- $revert(b926) 'namespace any_ops = ystdex::any_ops;'
				@ %Core.YEvent $dep_from "trivial tag simplification"
		),
		/ %NPL $=
		(
			/ %SContext $=
			(
				+ "function %IsMovable with %TermTags parameter",
				+ $lib $impl 'YB_NONNULL(2)' @ "functions %(AssertBranch, \
					AssertBranchedList)",
				+ "function %AssertValueTags"
			),
			/ %NPLA $=
			(
				+ ('using YSLib::trivial_swap;', 'using YSLib::trivial_swap_t')
					$dep_from %YSLib.Adaptor.YAdaptor
					$dep_to "NPL trivial tag adaption",
				/ DLDI "simplified member function %TermReference::IsMovable"
					^ ("%NPL::IsMovable" @ %SContext),
				* DLDI "wrong environment reference source"
					@ "alternative implementation"
					@ "function %ReduceToReference" $since b915,
					// Also to be consistent to the existing implementation \
						contributing to the reference elimination of 'first&', \
						which is same to the alternative derivation after the \
						change below.
				/ ^ $dep_from ("%AssertValueTags" @ %SContext) $=
				(
					+ "function %LiftOtherValue",
					/ "ensured value representation of first-class object on \
						the parameter as conditional preconditon and \
						postcondition" @ ("functions %(MoveRValueToForward, \
						MoveRValueToReturn)" ^ $dep_from "%LiftOtherValue")
				),
				* DLDI "alternative implementation" @ "function" $since b915
			),
			/ %NPLA1 $=
			(
				/ DLD "function %ReduceOnceLifted" @ %NPLA1
					^ $dep_from (("%LiftOtherValue" ~ "%LiftOther") @ %NPLA),
				+ "precondition to ensure value representation of first-class \
					object on the parameter in the post condition"
					@ (("functions %(RewriteTerm, RewriteTermGuarded)")
					@ "class %ContextState", (("member function \
					%ContextState::DefaultReduceOnce", "function %ReduceOnce"
					$dep_all_from "combining tags fixes");
					$comp "function %Reduce")
					^ $dep_from ("%AssertValueTags" @ %SContext),
				/ DLDI "declaration order" @ "function %IsCombiningTerm",
				+ "function %ClearCombiningTags"
			),
			* $re_add(b849) "missing exclusion of self type"
				@ "constructor template %GParameterValueMatcher" $since b917,
			/ "threw nested exception when matching parameter failure without \
				%ParameterMismatch already thrown" @ %(NPLA1, NPLA1Internals)
				^ "%ParameterMismatch" ~ "%InvalidSyntax" $=
				$= (/ "function %ThrowNestedParameterTreeCheckError"
					-> "%ThrowNestedParameterTreeMismatch")
			/ %NPLA1Forms $=
			(
				// These are not less efficient with x86_64-pc-linux G++ 11.1 \
					at current.
				- $re_add(b937) $revert(b876) DLI 'YB_FLATTEN'
					@ ("internal function reducing the 1st subterm"
					@ "functions %(FirstAt, FirstRef)", "wrapping and \
					unwrapping" @ "functions %(Wrap, WrapRef, WrapOnce, \
					WrapOnceRef, Unwrap)"),
				/ DLI "enabled simpler implementation for reducing the 1st \
					subterm" @ "functions %(ListExtractFirst, Let, LetRef, \
					LetWithEnvironment, LetWithEnvironmentRef, LetRec, \
					LetRecRef, LetAsterisk, LetAsteriskRef, First, \
					BindingsToEnvironment, BindingsWithParentToEnvironment)",
				- $revert_ex(b912) DLI "simplified function %Append"
					!^ 'YB_FLATTEN',
				* "missing specifying no lifting on result"
					@ "function %LetRecRef" $since b917,
				- $re_add(b937) $revert_ex(b914) DLI "several 'YB_FLATTEN'"
					@ "internal function reducing the rest subterms"
					@ "functions %(RestFwd, RestVal, Let, LetRef, \
					LetWithEnvironment, LetWithEnvironmentRef, LetRec, \
					LetRecRef, LetAsterisk, LetAsteriskRef, \
					ListExtractRestFwd, ProvideLet, BindingsToEnvironment, \
					BindingsWithParentToEnvironment)",
					// The shared implementation of %(RestFwd, RestVal) is \
						less optimal without the changes in the list \
						extraction simplification above.
				(
				/ $revert(b875) "removed unified forwarding"
					@ "function %First" $dep_from ("applicative %assv"
					@ "function %LoadGroundContext" @ %Dependency);
					// See the comment on the change of %assv below.
				/ DLI "simplified list exraction" @ "functions %(Let, LetRef, \
					LetRec, LetRecRef, BindingsWithParentToEnvironment, \
					BindingsToEnvironment, ProvideLet, ListExtractFirst, \
					ListExtractRestFwd, LetAsterisk, LetAsteriskRef)"
					^ $dep_from
					("%IsMovable" @ %SContext, "%LiftMovedOther" @ %NPLA)
					// No %TermTags::Temporary in the references are cared now.
				),
				/ @ "constructor" @ "vau handler" $=
				(
					* "missing cleanup combining tags for the evaluation \
						structure" $orig (@ %NPLA1 $since b860)
						$dep_to "combining tags fixes"
						// %TermTags::Temporary is introduced in \
							%ReduceCombined since b860.
						$= (/ $impl ^ $dep_from
							("%ClearCombiningTags" @ %NPLA1));
					/ DLDI "ensured no comining tags for the evaluation \
						structure" ^ $dep_from ("%AssertValueTags" @ %SContext)
				),
				* "missing cleanup combining tags" @ ("functions %(Eval, \
					EvalRef, EvalString, EvalStringRef, RemoteEval, \
					RemoteEvalRef)" $orig (@ "functions %(Eval, EvalRef, \
					EvalString, EvalStringRef)" @ %NPLA1)
					"functions %(DefineLazy, DefineWithNoRecursion, \
					DefineWithRecursion, SetWithNoRecursion, SetWithRecursion)"
					$orig %NPLA1) $since b860 $dep_to "combining tags fixes",
					// Ditto.
					$= (/ $impl ^ $dep_from ("%ClearCombiningTags" @ %NPLA1))
				/ DLDI "simplified" @ "functions %(DefineLazy, \
					DefineWithNoRecursion, DefineWithRecursion, \
					SetWithNoRecursion, SetWithRecursion)",
				* "missing copy elision for movable lists" @ "function \
					%FirstVal" $orig (@ %NPLA1 $mismatch(Documentation.NPL)
					$since b870),
					// %FirstVal did not support elision at all since b859, \
						but this was not required then. It was changed in b874 \
						but it is still not sufficient. Note %RestVal \
						(introduced since b910) did splice in other paths for \
						xvalues, so it is not directly affected.
				* "missing returning value conversion for reference values from \
					rvalue lists" @ "function %First" $since b925
					// This should have been changed as the alternative derivation.
			),
			/ DLDI "simplified internal %YSLib names" @ %NPLA1
				^ "using declarations",
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				(
				/ DLDI "applicative %assv" ^ 'first%' ~ 'first';
					// This is needed for the following change, otherwise it \
						would incur undefined behavior with some nested list \
						prvalue operand (easily detectable by \
						%NPL_Impl_NPLA1_Enable_Thunked disabled).
				* "wrongly moved object referenenced by reference in lists \
					with the temporary tag" @ ("applicative %first" $since b875
					$dep_from ("%First" @ %NPLA1Forms), "alternative derivation"
					@ "applicative 'first%'" $since b913),
					// Only temporary tags on the element should be respected. \
						This also included the wrong copying behavior of \
						%first when the 1st element is an unique nonmodifying \
						reference.
				* $comp $re_add(b925) "missing return value conversion for \
					elements in rvalue lists"
					$dep_from ("%First" @ %NPLA1Forms) $since b859
					// This was fixed in alternative derivations since b925.
				),
				* $comp "missing preserving reference on the result"
					@ "native implementation" @ "operative '$letrec%'"
					$since b917 $dep_from ("%LetRecRef" @ %NPLA1Forms),
				* "unique tag not collapsed in the reference results"
					@ "native derivation"
					@ "applicatives (%first, 'first&')" $since b873,
					// It is intended to get the result by reference value \
						elimination instead of reference collapsing here.
				* "missing copy elision on xvalue parameters" @ ("applicative \
					%firstv" $since b870, "alternative implementation"
					@ "applicative %collapse" $since b870) $=
				(
					/ $comp "native implementation"
						$dep_from ("%FirstVal" @ %NPLA1Forms),
					/ "altarenative derivations" ^ '$move-resolved!'
						// This was never changed since the introducing in \
							b859 of %first and b869 of %collapse. It was \
							not required to support the elision until the \
							documentation did.
				),
				* "nonmodifying tag not propagated to results" @ "alternative \
					derivation" @ "applicative %collapse" $since b869
			),
			/ @ "promise creation" @ "function %LoadModule_std_promises" $=
			(
				* "missing cleanup combining tags for the saved expression"
					@ "native implementation" @ "operatives '$lazy', \
					'$lazy%', '$lazy/d', '$lazy/d%'"
					$dep_to "combining tags fixes"
					$= (/ $impl
						^ $dep_from ("%ClearCombiningTags" @ %NPLA1));
				/ DLDI "ensured no comining tags for the saved expression \
					structure" ^ $dep_from ("%AssertValueTags" @ %SContext)
			)
		)
	)
),

b938
(
	/ $re_add(b937) DLDI "simplified localized URLs" @ "comments" $effective
		@ %YFramework.(YCLib.(Debug, FileIO, Host, HostedGUI, NativeAPI,
		YCommon), 'YCLib_(Win32)'.Consoles, Helper.Initialization),
	* DLDI 'yconstfn static' $mismatch(%Documentation.ProjectRules)
		$effective @ %YBase.YStandardEx.(Examiner $since b895,
		Function $since b848, Ref $since b870)
		$= (/ ^ 'static yconstfn' ~ 'yconstfn static'),
	/ %YBase.YStandardEx $=
	(
		+ DD '\ingroup functors' @ "Doxygen comment"
			@ "class template %function_base" @ %Function,
		/ %Range $=
		(
			* "incomplete inclusion condition check" @ "using declarations of \
				%std::(rbegin, rend, crbegin, crend)" $since b834
				$= (/ $impl ^ "conditions as %ystdex::(cbegin, cend)"),
			* $re_add(b836) "ambiguous calls by ADL from %std"
				@ "function templates %(rbegin, rend, crbegin, crend) when ISO \
				C++14 and above is enabled"
				@ !'__cpp_lib_array_constexpr >= 201603L' $since b834,
				// The function templates are already defined in %std since \
					C++14.
			(
			/ "enhanced %ystdex::(cbegin, cend) with underlying 'constexpr' \
				guarantee on calling %std::(begin, end)"
				$= (/ $impl ^ '__cpp_lib_array_constexpr >= 201603L');
			/ "all %(cbegin, cend) overloads except for \
				%std::initializer_list instances" @ "inline namespace %cpp2014"
				>> "inline namespace %cpp2017"
			),
			* "YStandard extensions of %(cbegin, cend, crbegin, crend) \
				overloads for %std::initializer_list instances wrongly treated \
				as replacements depending on missing of the resolution of CWG \
				1591" $since b664 $=
			(
				/ "definitions" >> "namespace %ystdex"
					~ "inline namespace %cpp2014";
				/ "defined unconditionally"
					$dep_to "initializer_list range access fix";
				+ DD '\ingroup YBase_replacement_extensions'
					@ "Doxygen comment"
			)
		),
		* "wrongly defined %range_size overload for %std::initializer_list \
			instances conditionally" @ %Container $since b664,
		/ %IntegerSequence $=
		(
			+ $doc "'\pre' command to constraint the 1st template parameter"
				@ "Doxygen comment" @ ("class template %integer_sequence",
				"metafunction %make_successor"),
			* "missing check to ensure the 1st template parameter as an \
				integer type" @ "class template %integer_sequence" $since b589
				$= (+ $impl "static assertion"),
				// ISO C++ mandates the check.
			+ DLI "static assertion to ensure the 1st template parameter is \
				valid" @ "metafunction %make_successor"
				// Witout the check, it can produce the wrong result using \
					%common_type_t without the resolution of LWG 2141 \
					(since ISO C++14). This would still be constrianted in \
					a conforming implementation of %integer_sequence. \
					Nevertheless, check it earlier is better.
		),
		/ %TypeInspection $=
		(
			/ "header inclusion %CStandardDefinition" -> "%IntegralConstant"
				$dep_to "collapsed type inspection header inclusion",
			+ "conditionally defined macro %__cpp_lib_is_final";
			+ "unary type trait %is_final" @ "inline namespace %cpp2014"
				// This is implemented with compatibility limitations, i.e. \
					either %std::is_final or __is_final is used to get the \
					correct result. Otherwise, it would be always treated \
					non-fianl, which is wrong for final classes. Though naive \
					implementations %is_empty also does not work on final \
					classes, it is already supported via %std::is_empty, which \
					is in ISO C++11. For final class it also internally \
					requires an implementation-specific intrinsic.
		),
		/ %Meta $=
		(
			- DLDI "unused template parameter name" @ "primary template"
				@ "metafunction %when",
			/ "transformation traits %(common_type, common_type_t)"
				-> "traits compatatible to ISO C++20 definitions"
				@ "inline namespace %cpp2020"
				$dep_to "LWG 2141 fix on common_type",
				// The fix is in ISO C++14. Features in the future versions of \
					the standard are not yet relied on in YSLib. Most use \
					cases do not rely on LWG 2141, as all the template \
					arguments are explicitly decayed (uses in \
					%YBase.YStandardEx.Rational) or guaranteed already decayed \
					if well-formed (%ystdex::common_underlying_t, uses in \
					%YBase.YStandardEx.(Enum, IntegerSequence, Pointer) and \
					%YFramework.(YCLib.Common, \
					'YCLib_(DS)'.DSIO, NPL.NPLAMath)). Derivative uses of \
					%ystdex::common_array_t (using %ystdex::common_nonvoid_t) \
					are also guaranteed to have decayed types when well-formed.
			- DLDI "header inclusion %IntegralConstant"
				$dep_from "collapsed type inspection header inclusion"
		),
		/ $comp "guaranteed a decayed type as the result (if any)"
			@ ("transformation trait %common_nonvoid_t" @ %TypeOperation,
			"function %invoke_for_value" @ %Functional)
			$dep_from ("ystdex::common_type_t" @ %Meta),
		/ %Array $=
		(
			/ "simplified function template %cast_array" !^ "%decay_copy"
				$dep_from ("%common_nonvoid_t" @ %TypeOperation);
			* "missing qualified 'ystdex::' before 'decay_copy'" $since b562
				$= (+ $impl "'ystdex::' before 'decay_copy'"
					@ "function template %make_array")
		),
		+ DD "explicitly guarantee of standard layout class"
			(%Base; "Doxygen comment" @ "class template %lref" @ %Ref),
		/ %Invoke $=
		(
			/ "worked around libstdc++ bugs for C++17 mode or above on \
				invocable traits only" @ $=
				// See GCC PR 91456.
				(/ $impl !^ "%std names" @ !'__cplusplus < 201703L \
					|| !defined(__GLIBCXX__) || __GLIBCXX__ > 20191024'),
			- DLDI $revert(b845) "redundant header inclusion %Variadic"
		),
		+ %CompressedPair $=
			(+ "class templates %(compressed_pair_element; compressed_pair)")
	),
	* $comp "wrong result when template parameter types have reference type"
		$effective @ ("binary_type_traits \
		%(is_narrowing_from_floating_to_floating, \
		is_narrowing_from_floating_to_integer; is_narrowing_from_floating)"
		@ %YBase.YStandardEx.Cast $since b709
		$dep_from "LWG 2141 fix on common_type",
		// This does not affect the only use case of the %Cast API in YSLib, \
			i.e.%ystdex::narrow_cast, because the template arguments of \
			%is_narrowing_from_floating has been checked with static \
			assertions in its implementation.
	* $comp "missing to prevent a reference type as result" @ ("transformation \
		trait %common_int_type" @ %YBase.YStandardEx.CStandardInteger;
		"function templates %(CheckLowerBound, CheckUpperBound)"
		@ %YFramework.YSLib.Core.YCoreUtilities $since b833) $since b744
		$dep_from ("ystdex::common_type_t" @ %YBase.YStandardEx.Meta),
	/ %Test.YBase $=
	(
		- "redundant 'static'" $effective
			@ "function template %bitseg_test::expect",
		+ "test cases for %ystdex::(function, is_invocable_r) with guaranteed \
			copy elision" @ '__cpp_guaranteed_copy_elision >= 201606L \
			|| __cplusplus >= 201703L',
			// As GCC PR 91456. It turns out that %ystdex::invocable_r is OK \
				because %is_convertible is not used.
		+ "test case for %ystdex::is_invocable_r with explicit convertible \
			result type",
			// To test the current simpler implementation (than the GCC fix \
				for PR 91456) with direct use %is_constructible is OK.
		+ DLI 'final' @ "all class definitions not in a class hierarchy"
			// Just add them even G++ 11.1 does not warn with \
				[-Wsuggest-final-types] and '-O3', as it seems no translation \
				performance hit. Note %ystdex::(has_nonempty_virtual_base, \
				have_common_nonempty_virtual_base) do not support final \
				classes, so not all instances of non-base classe can use it.
		(
		* "missing support of %std::byte" @ '__cpp_lib_byte >= 201603'
			$since b802;
			// The case of using %byte is since b549, and the support of \
				%std::byte is added to %YBase.YDefinition since b802.
		* $comp "failed building when ISO C++17 and above is enabled"
			$since b664 $dep_from ("initializer_list range access fix",
			%YBase.YStandardEx.Container)
		),
		* "missing using %std::abs" $since b588
			// This would cause wrong integer %abs used instead of %std::abs. \
				Also to eliminate Clang++ warning: [-Wabsolute-value].
	),
	/ %YFramework $=
	(
		/ $re_add(b934) DLDI "updated outdated URLs" @ "comments"
			@ %YCLib.HostedGUI,
		/ %NPL $=
		(
			/ @ %NPLAMath $=
			(
				- $re_add(b937) $revert(b930) DLI 'YB_FLATTEN' @ %NPLAMath,
					// This has no effects now.
				(
				+ "traits %FPCharTraits";
				/ "function %WriteFPString" $=
				(
					/ "default argument" @ "3rd parameter"
						^ "traits %FPCharTraits",
					/ "letter for special value" ^ "traits %FPCharTraits"
						~ "3rd parameter" $dep_to "fixed special value letter"
						// This is also a bit more efficient.
				)
				),
				/ "exception messages for interger type checking failure"
					^ "output as %FPToString results" $effective
					@ "%Math::(IsOdd, IsEven, FloorDivides, FloorQuotient, \
					FloorRemainder, TruncateDivides, TruncateQuotient, \
					TruncateRemainder)",
				+ DLI "internal static assertions to ensure the standard \
					floating-point types supporting infinity and quiet NaN \
					values",
				/ @ "inline namespace %Math" $=
				(
					+ "function %Inexact",
					* "ill-formed due to hidden member not introced by \
						using-declarations" @ "functions %(FloorDivides, \
						FloorQuotient, FloorRemainder, TruncateDivides, \
						TruncateQuotient, TruncateRemainder)" $since b937
						$dep_to "base SFINAE fix",
						// See $2022-02 @ %Documentation::Workflow.
				),
				/ DLDI @ "implementation"
					@ "function template specializations %WriteFPString" $=
				(
					- "unused unsigned 64-bit multiplication routine"
						@ 'NPL_Impl_NPLAMath_has_uint128'
						// Also to eliminate Clang++ warning: \
							[-Wunused-function].
					/ DLDI "cast to 'int'" @ "'long' result of internal \
						computation of decimal exponent",
						// Also to eliminate x86_64-pc-linux Clang++ warning: \
							[-Wshorten-64-to-32].
					* DLDI "wrongly cast to 'std::uint64_t'" @ "32-bit result"
						@ 'NPL_Impl_NPLAMath_has_uint128' @ "internal 32-bit \
						and 64-bit multiplication routine" $since b932,
						// Also to eliminate Clang++ warning: \
							[-Wshorten-64-to-32].
					/ DLDI "parameterized power type"
						@ "internal power computation function template"
						// Also to eliminate Clang++ warning: \
							[-Wshorten-64-to-32] in instances of routine to \
							round significands.
				)
			),
			+ "applicative %inexact" @ "function %LoadModule_std_math"
				@ %Dependency ^ $dep_from ("%Math::Inexact" @ %NPLAMath)
		)
	),
	* $comp "building failure" @ "platform %Android" $since b937
		$dep_from "base SFINAE fix"
),

b937
(
	/ $re_add(b936) DLDI "adjusted minor comments" @ %(YBase.YStandardEx.(
		Addressof, Allocator, MemoryResource, Placement, Pointer, PseudoMutex,
		Rational, StringView), YFramework.NPL.(Dependency, NPLA1)),
	/ $re_add(b936) DLDI "simplified localized URLs" @ "comments"
		@ %(YBase.YStandardEx.(MemoryResource, Placement, StringView),
		YFramework.'YCLib_(Win32)'.(MinGW32, NLS)),
	/ $re_add(b934) DLDI "ensured suffix 'L'" @ "all values compared with \
		%_MSVC_LANG" $effective %YBase.YStandardEx.AddressOf,
	/ $re_add(b933) DLB "updated %__cplusplus detection except for \
		experimental headers" $=
	(
		/ $impl '__cplusplus > 201703L' -> '__cplusplus >= 202002L'
			$effective @ %YBase.YStandardEx.Allocator
		/ $impl '__cplusplus > 201103L' -> '__cplusplus >= 201402L'
			$effective @ %YFramework.Helper.ShellHelper
	),
	/ %YBase.YStandardEx $=
	(
		* $re_add(b935) $lib $impl "missing undefining 'YB_Impl_P0339R6'"
			@ %MemoryResource $since b863,
		* "unsupported member pointer invocation"
			@ "function template %call_once" @ PseudoMutex $since b692
			$= (/ $impl ^ "%ystdex::invoke"),
		/ %Pointer $=
		(
			/ "%ystdex::to_address" >> "inline namespace %cpp2020";
			/ "%ystdex::to_address" @ "inline namespace %cpp2020"
				@ '__cpp_lib_to_address >= 201711L' -> 'using std::to_address;'
		),
		/ %Allocator $=
		(
			+ DLI 'inline' @ "constructor template"
				@ "class template %allocator_delete",
			(
			* "wrong internal type for allocator deleters when the allocator \
				template parameter is a reference" $orig (@ %Memory $since b846)
				$= (/ $impl ^ "%rmove_reference_t"),
				// This would incorrectly form a reference parameter of %lref.
			* "wrong constructor always copying the allocator object"
				@ "class template %allocator_guard_delete"
				$orig (@ %Memory $since b846)
				$= (/ "constructor" -> "constructor template");
				// See $2021-10 @ %Documentation::Workflow.
			* "missing support of reference types" @ "alias template \
				%allocator_guard" $orig (@ %Memory $since b846)
				$= (/ $impl ^ "%rmove_reference_t")
			),
			/ DLDI ("adjusted 'class'" -> 'typename') @ "all allocator \
				parameters" @ "templates supporting allocator references",
			/ DLDI ("adjusted 'typename'" -> 'class') @ "all allocator \
				parameters" @ "templates not supporting allocator references",
			/ DLDI "renamed internal macro",
			* "missing the %to_address call around the allocator pointer"
				@ "function template %create_with_allocator"
				$orig (@ %Memory $since b849),
				// It would break construction using an allocator with a fancy \
					pointer type. Now it is consistent to %allocator_delete.
			- $revert(b887) DLI "all 'YB_FLATTEN"
				// They have no effects now.
		),
		/ DLI "container internal representation class template"
			@ %(Tree, List) $=
		(
			/ @ "node creation" $=
			(
				/ "copied the allocator if the size of the allocator is \
					reasonbly samll";
					// See $2021-10 @ %Documentation::Workflow.
				/ "avoided copying allocator in the guard if the allocator is \
					not copied" $dep_from ("%allocator_guard" @ %Allocator)
			),
			+ $design 'const' @ "allocator copy" @ "%operator=",
			* "wrong %max_size dependency on allocator %max_size"
				@ (%List $since b866, %Tree $since b830)
				// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=104191.
		),
		+ DLI 'inline' @ "internal member template for node creation" @ %List,
			// This is same in %Tree.
		/ DLI @ %Tree $=
		(
			+ 'YB_ATTR_nodiscard' @ "all functions and function templates \
				named %(maximum, minimum, is_insert_left, \
				is_insert_left_strict, insert_left_q, copy_node)",
			/ @ "class template %tree" $=
			(
				- $revert(b864) "all 'YB_FLATTEN" @ %Tree,
					// Now it is less time-comsuing in compilation, and even a \
						bit better code with x86_64-pc-linux G++ 11.1.
				+ 'YB_ATTR_nodiscard YB_PURE' @ "all functions %(root, \
					leftmost, rightmost, node_begin, node_end, select_key, \
					select_value, get_left, get_right, operator==, operator<)",
				/ $design "declaration order" @ "private %copy_node"
			)
		),
		+ "class template %ntcts_compare" @ %CString
	),
	/ %YFramework $=
	(
		/ %'YCLib_(Win32)' $=
		(
			/ DLDI "avoided 'using namespace' internally" @ %(MinGW32, NLS),
			/ %MinGW32 $=
			(
				* DLDI "wrong URL" @ "internal comments" $since b664,
				(
				+ "inline function %FetchModuleHandle";
				/ DLDI "simplified function template %LoadProc#3"
					^ "%FetchModuleHandle",
				(
				+ "function %FetchModuleHandleCached"
					^ $dep_from ("%ntcts_compare" @ %YBase.YStandardEx.CString);
				+ "function %LoadProcCached";
				+ "2 function templates %LoadProcCached";
				/ DLI "optimized by caching" @ "macro %YCL_DeclW32Call"
					^ "%LoadProcCached" ~ "%LoadProc"
				)
				),
				/ DLDI "simplified %TryCategorizeNodeAttributes",
				/ DLDI "reordered declarations",
					// As the declaration order of the underlying Win32 APIs \
						declared in <winbase.h>.
				+ DD '\ingroup functors' @ "Doxygen comment"
					@ "classes %(GlobalDelete, LocalDelete)",
				+ DD "'\warning' command for missing virtual destruction"
					@ "Doxygen comment" @ "class %GlobalLocked",
				+ DLDI "header inclusion %YBase.YStandardEx.Base",
					// For %ystdex::noncopyable. Except names like \
						%YSLib::Debug related to %YSLib::RecordLeval which is \
						in the public API, names not in %YSLib are preferred, \
						to get less dependencies involved in.
				(
				+ "function %IsWOW64Process";
				+ "class %WOW64FileSystemRedirectionGuard"
				)
			),
			/ %NLS $=
			(
				(
				+ DLDI "header inclusion %YCLib.Mutex";
				/ DLDI ^ "%platform::(mutex, lock_guard)"
					~ "%YSLib::(mutex, lock_guard)"
					// To be consistent with using %platform::Deref and \
						%platform::Nonnull instead %YSLib ones.
				),
				/ @ "function %FetchDBCSOffset" $=
				(
					/ DLI "internal NLS cache" ^ "%ystdex::map" ~ "%YSLib::map",
						// There is no custom allocator to use.
					* "missing disabling WOW64 file system redirection on \
						loading the entry" $orig (@ %MinGW32 $since b552)
						$= (/ $impl ^ $dep_from
							("%WOW64FileSystemRedirectionGuard" @ %MinGW32))
				)
			)
		),
		/ DLDI @ %YCLib.XCB $=
		(
			(
			+ "header inclusion %YBase.YStandardEx.Base";
			/ ^ "%platform::(noncopyable, nonmovable)"
				~ "%YSLib::(noncopyable, nonmovable)" @ %YCLib.XCB,
				// Ditto.
			),
			- "header inclusion %YBase.YStandardEx.Pointer"
		)
		/ %NPL $=
		(
			/ "merged namespace %SXML" @ %NPL >> %SXML,
			* "non-deducible redundant template parameter" @ "function \
				template %EmplaceCallResultOrReturn#5" @ %NPLA $since b936,
			/ %NPLAMath $=
			(
				/ @ "inline namespace %Math" $=
				(
					* DD "wrong function name" @ "Doxygen comment"
						@ "functions %(IsOdd, IsEven)" $since b930,
					* "wrong result for negative odd flonums"
						@ "function %IsOdd" $since b930,
					+ "functions %(FloorDivides, FloorQuotient, \
						FloorRemainder, TruncateDivides, TruncateQuotient, \
						TruncateRemainder)" $dep_from %NPLA
						$dep_to "R7RS dividing",
					+ DLI 'YB_ATTR_nodiscard YB_PURE' @ "internal math \
						operations not modifying the parameter",
					/ DLDI "simplified unary operations" $effective
						@ ("functions %(IsZero, IsPositive, IsNegative, IsOdd, \
						IsEven, Add1, Sub1, Abs)"),
					/ DLDI "simplified internal SFINAE expressions",
					/ DLDI "simplified binary operations" $effective
						@ ("functions %(Max, Min, Plus, Minus, Multiplies, \
						Divides, Equal, Less, Greater, LessEqual, \
						GreaterEqual)"),
					* "unnecessary inexact value introduced" @ "%Divides on \
						underflow" $since b930
						$= (/ $impl ^ 'unsigned long long' ~ "%double")
						// Inexact number should not be introduced when there \
							are types being able to represent the value. Now \
							this is also consistent to %Abs.
				),
				* "undefined behavior on priting negative floating-point \
					values" @ "functions %WriteFPString" $since b932,
				/ "%Math::StringBufferSize" -> "%NPL::NumberStringBufferSize",
				/ ("function %ReadDecimal", "function template %WriteFPString",
					"function %FPToString", $impl
					"internal math implemenations") @ "inline namespace %Math"
					>> "%namespace NPL"
			),
			+ "applicatives ('floor/', 'floor-quotient', 'floor-remainder', \
				'truncate/', 'truncate-quotient', 'truncate-remainder')"
				@ "function %LoadModule_std_math" @ %Dependency
				$dep_from "R7RS dividing"
		)
	),
	* "missing specialized rules for the inexact zero dividend"
		@ "applicative '/'" @ "module %std.math" @ %Documentation.NPL
		$mismatch %YFramework.NPL.NPLAMath $since b930
),

b936
(
	/ $re_add(b935) DLDI "adjusted minor comments" @ %(YBase.YStandardEx.(
		Base, CAssert, Cache, DereferenceOperation, Range, TypeOperation,
		TypeIndex, Variadic), YFramework.(YCLib.Keys, 'YCLib_(DS)'.(DSIO,
		DSVideo), YSLib.(Adaptor.(Font, YNew), Core.(YClock, YFunc), UI.(YGUI,
		YWidgetEvent)), NPL.Configuration, Helper.(HostRenderer, HostWindow),
		'Helper_(DS)'.DSMain), "%SHBuild-YSTest.sh" @ %YSTest),
	/ %YBase.YStandardEx $=
	(
		/ %Enum $=
		(
			(
			/ DLDI "simplified constructor template" @ "class %enum_union"
				^ "%empty_base" ~ "%std::tuple";
			/ DLDI "header inclusion %Tuple" -> "%Variadic"
			),
			+ "function template %to_underlying"
		),
		/ %Utilities $=
		(
			(
			+ "header inclusion %Enum";
			/ $lib "function template %underlying" >> %Enum
			),
			+ "header inclusion %IntegerSequence"
		),
		/ %Range $=
		(
			* "ambiguous calls by ADL from %std" @ "function templates \
				%(begin, end)" @ !'__cpp_lib_array_constexpr >= 201603L'
				$since b834 $dep_to "fixed begin and end ambiguity",
				// The function templates are already defined in %std since \
					C++11.
			(
			+ $dev $lib 'YB_ATTR_nodiscard'
				@ "all non-member function templates except %empty";
			+ $dev $lib 'YB_PURE' @ "all function templates and member \
				functions declared with 'YB_ATTR_nodiscard'"
			)
		),
		/ %String $=
		(
			/ DLI "simplified function template %string_length#1"
				^ "%ystdex::ntctslen",
				// This is more consistent to the implemantation of %string_end.
			* "wrong return type" @ "function template %string_empty#(2, 3)"
				$since b708,
			* "ill-formed member function call"
				@ "function template %string_length#3" $since b664,
				// Even if it is well-formed, it is still wrong to get the \
					plain size instead of the string length.
			* "missing overloads for initializer lists" @ "function templates \
				%(string_begin, string_end, string_length, string_empty)"
				!@ '__cplusplus <= 201402L' $since b664,
				// CWG 1581 does not count, as there is also no overload for \
					the array types, so the overload for initializer lists is \
					needed anyway.
			(
			* "missing exclusion of arrays" @ "function templates \
				%(string_begin, string_end, string_length, string_empty) with \
				range parameters" $since b519;
			/ @ "function templates %ystdex::(string_begin, string_end) with \
				range parameters" $=
			(
				/ ^ "ADL %(begin, end)"
					$dep_from "fixed begin and end ambiguity";
					// This consistent to %ystdex::(string_length, \
						string_empty). However, without the fix in %ystdex::( \
						begin, end), it would cause ambiguity with %std types.
				* $re_add(b935) $comp "return type mismatched to the return \
					value in the function body" $since b595
			)
			),
			/ "range access function templates with parameter of \
				%std::initializer_list instance" $=
			(
				/ DLDI "simplified" !^ "trailing-return-type",
					// This is also more consistent to similar function \
						templates in %Range and ISO C++.
				+ 'ynothrow'
			),
			/ "wrong exception exception" @ "function template %string_end#3"
				$since b664
				$= (/ 'ynothrow' -> 'ynothrowv')
		)
	),
	/ $re_add(b935) DLDI "simplified localized URLs" @ "comments"
		@ %(YBase.YStandardEx.Range, YFramework.YCLib.Keys),
	/ DLDI "minor comment" @ "%SHBuild-BuildPkg.sh" @ %Tools.Scripts,
	/ %YFramework $=
	(
		* "missing 'yconstfn'" @ "friend function %operator=="
			@ "class %FileNodeID" @ %YCLib.FileSystem $since b935
			// This would cause ill-formed %IsNodeShared.
		/ %NPL $=
		(
			/ %NPLA1Forms $=
			(
				/ DLI "simplified function %IsSymbol"
					!^ "redundant %ystdex::isdigit call",
				/ "function templates %EmplaceCallResultOrReturn"
					>> "namespace %NPL" @ %NPLA
			),
			/ %NPLA $=
			(
				(
				+ "function %IsAllSignLexeme";
				/ DLDI "simplified %IsNPLAExtendedLiteral"
				),
				(
				+ 'using YSLib::array';
				+ "function template %EmplaceCallResultOrReturn with parameter \
					type of %array instances"
				),
				/ "function templates %(CheckRegular, AccessRegular)"
					@ "Doxygen group %TermReferenceAccess"
					>> "%TermAccessAuxiliary",
				(
				/ DLDI "reordered declarations"
					@ "Doxygen group %TermAccessAuxiliary";
				- DLDI "1st declaration" @ "function %TermToNamePtr"
				)
			),
			/ %NPLA1 $=
			(
				* "invalid 'ynothrowv' around unsupported literals check"
					@ "functions %(ParseLeaf, ParseLeafWithSourceInformation)"
					$since b933,
					// This would terminate with ISO C++, but undefined with \
						'-fno-enforce-eh-specs'.
				/ DLDI "simplified"
					^ ("%(IsAllSignLexeme, IsExtendedLiteral)" @ %NPLA)
			),
			(
			* "operative named with '?' suffix are not predicates"
				$mismatch(Documentation.NPL) $since b932
				$effective @ "function %LoadGroundContext" @ %Dependency $=
			(
				/ "operative '$and?'" => '$and',
				/ $revert(b776) "operative '$or?'" => '$or'
			);
			/ $forced DD "renamed operative names" @ "Doxygen comment"
				@ "functions %(And, Or)" @ %NPLA1Forms
			),
			(
			+ %SXML;
			/ ("function templates %(InsertSyntaxNode, InsertChildSyntaxNode)",
				"namespace %SXML") @ %NPLA >> %SXML
			),
			(
			+ %Exception;
			+ DLDI "header inclusion %Exception" @ %NPLA;
			/ ("class %NPLException", "classes derived from %NPLException",
				"all functions named 'Throw*'") @ %NPLA >> %Exception
			)
		)
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ DLDI ("simplified 'for-each-ltr' arguments", "loading")
				@ "%SHBuild-YSLib-build.txt",
			/ DLDI "simplified minor newlines"
				@ "%(SHBuild-YSLib-common.txt, SHBuild-BuildApp.txt)",
			/ DLDI ('$and?', '$or?') -> ('$and', '$or')
				$dep_from $forced %YFramework.NPL.Dependency,
			/ $re_add(b930) $build "updated %LIBS for %YFramework.NPL.Exception"
				$dep_from $forced %YFramework.NPL.Exception
		),
		/ DLDI "header inclusion" @ %(SXML2XML, ProjectGenerator).Main
			$dep_from $forced ("namespace %SXML" @ %YFramework.NPL.NPLA)
	)
),

b935
(
	/ DLDI "simplified localized URLs" @ "comments"
		@ %(YBase.(YDefinition, YStandardEx.(Apply, Meta)), YFramework.(YCLib.(
		FileSystem, MemoryMapping, Video), 'YCLib_(Win32)'.Registry),
		NPL.NPLAMath),
		// Excluding %3rdparty implicitly. This may change specific localized \
			pages.
	/ %YBase.YStandardEx $=
	(
		/ @ "functions templates %(floor_lb, ceiling_lb, countl_zero_narrow, \
			countr_zero_narrow, countl_zero, countl_zero)" @ %Bit $=
		(
			/ DLDI @ 'YB_IMPL_MSCPP >= 1400' $=
			(
				- "unused variable",
					// To eliminate Microsoft VC++ warning: C4101.
				- "redundant '!='"
					// To eliminate Microsoft VC++ warning: C4552.
			),
			* "ill-formed calls when builtin is unavailable due to wrong \
				template argument list" $since b934,
			* "invalid 'yconstfn'" @ "internal functions" $since b934
				$= (/ $impl ^ 'inline' ~ 'yconstfn')
		),
		* "wrong iterator requirement implied by the template parameter names"
			@ ("function template %split" $orig (@ %String $since b304),
			"function template %split_if" $orig "@ (%split_if_iter" @ %String
			$since b545), "function template %split_l"
			$orig (@ %String $since b408)) @ %Algorithm
			// The results are nonsense without the multi-pass grarantee.
	),
	/ $re_add(b934) DLDI "cleanup trailing whitespaces"
		@ %(YBase.YStandardEx.Tree,
		YFramework.YSLib.(Core.YGDIBase, UI.Viewer)),
	/ DLDI "cleanup redundant empty lines"
		@ %(YBase.YStandardEx.(Container, Tree),
		YFramework.YSLib.Service.TextManager),
	/ DLDI "adjusted names" @ "declarations" @ %(YBase.YStandardEx.Algorithm,
		YFramework.(YCLib.JNI, YSLib.(Service.(ContentType, TextFile),
		UI.(YPanel, YUIContainer)))),
		// This includes function parameters, template parameters and type \
			names in the declarators not interfere with type requirements.
	/ DLDI "adjusted minor comments" @ %(YBase.YStandardEx.(Algorithm, Apply,
		Functor, IntegerSequence, Invoke, Memory, Meta, Optional, Swap),
		YFramework.(CHRLib.(CharacterProcessing, MappingEx), YFramework.(
		YCLib.NativeAPI, YSLib.UI.Loader, Helper.(HostedUI, InputManager)),
		// This includes implementation comments and comments on header \
			inclusions.
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ "moved ISO C++ standard libarary macro detection and definitions \
				to more specific header files" $=
				// To make it defined at the use sites instead of inclusions \
					sites leaks less implementation details (about the \
					standard header inclusion), so less error-prone after \
					removal of specific standard header inclusions (like \
					below), and less inconsistency when the standard library \
					headers are included in different places (e.g. <tuple> and \
					<functional> in %YStandardEx.Utilites but the definitions \
					are in other files). Besides, this, it is also more \
					consistent to most similar macros conditionally defined \
					in %YStandardEx instead of %YDefinition.
			(
				/ "%__cpp_lib_bool_constant" >> %IntegralConstant
					$dep_to "deferred <type_traits> feature macro detection",
				/ "%__cpp_lib_is_invocable" >> %Invoke
					$dep_to "deferred <type_traits> feature macro detection",
				/ "%__cpp_lib_is_null_pointer" >> %TypeInsepection
					$dep_to "deferred <type_traits> feature macro detection",
				/ "%(__cpp_lib_transformation_trait_aliases, __cpp_lib_void_t)"
					>> %Meta
					$dep_to "deferred <type_traits> feature macro detection",
				/ "%__cpp_lib_as_const" >> %Utilities,
				/ "%(__cpp_lib_is_swappable, __cpp_lib_exchange_function)"
					>> %Swap,
				/ "%__cpp_lib_integer_sequence" >> %IntegerSequence
			),
			* $comp "voided effects of detetion of '__cpp_lib*' macros from \
				<type_traits>" $since b933
				$dep_all_from "deferred <type_traits> feature macro detection",
				// Now <type_traits> is included in \
					%YStandardEx.CStandardDefinition. Nevertheless, the \
					definitions are moved to use sites instead.
			+ "conditionally defined macro %__cpp_aligned_new"
				// This would be used in %Memory and %MemoryResource.
		),
		/ %YStandardEx $=
		(
			+ DLI 'inline' @ "function template %strict_none_of" @ %Algorithm,
			/ "macro detection and definition %__cpp_lib_transparent_operators"
				@ %Invoke >> %Functor,
				// Similar to %YDefinition.
			+ DLDI 'yimpl' @ "base class" @ "traits"
				@ "inline namespace %cpp2017",
				// This indicates the inheritance is not the part of the \
					public interface.
			/ %Swap $=
			(
				* $lib $impl "missing undefining %(YB_Impl_Swap_ns, \
					YB_Impl_Swap_Traits)" @ $since b834,
				* "wrong condition of detetion for %__cpp_lib_is_swappable"
					$since b834 $dep_from %YDefinition
					$= (/ $impl ^ "%(_MSC_FULL_VER, _MSVC_LANG)"
						~ "%YB_IMPL_MSCPP")
			),
			/ "wrong condition of detetion for %__cpp_lib_clamp" @ %Algorithm
				$since b835
				$= (/ $impl ^ "%(_MSC_FULL_VER, _MSVC_LANG, __cplusplus)"
					~ "%(YB_IMPL_MSCPP, __cpp_lib_clamp)"),
			* $dev $lib "wrong inclusion condition" @ "%get_temporary_buffer"
				$since b835
				$= (/ $impl ^ '__cplusplus >= 201606L'
					~ '__cplusplus >= 201611L'),
				// Deprecated features are still mandated, so this should not \
					break the client code.
			* "return type mismatched to the return value in the function \
				body when using ADL" @ "function template \
				%make_move_iterator_pair" @ %IteratorOperation $since b595
				// There are no addition using-declarations since b624, so \
					plain trailing returning type suffices.
		)
	),
	/ %YFramework $=
	(
		/ DLDI "adjusted minor implementation header inclusions"
			@ %(Adaptor.Font, Service.ImageProcessing, UI.Loader),
		/ DLDI "default constructor %Color" @ %YSLib.Core.YGDIBase
			^ "%DefDeCtor",
		+ DLDI "header inclusion %YBase.YStandardEx.DereferenceOperation"
			@ %Helper.HostedUI,
		/ $dev %CHRMap $=
		(
			/ $lib $design $impl "simplified Doxygen comments"
				@ %CharacterProcessing,
			/ $doc "'\bug' command" @ "Doxygen comment" @ "function template \
				%Decode" @ "template class specialization \
				%GUCSMapper<CharSet::GBK>" @ %MappingEx -> "'\note' command"
		),
		/ %YCLib $=
		(
			/ DLDI "adjusted '\brief' command" @ "Doxygen comment" @ %NativeAPI,
				// To be consistent with the header file.
			/ %Video $=
			(
				/ "cleanup outdated Doxygen '\bug' command"
					@ "Doxygen comment" @ "%PixelQuadruple and related types",
				/ @ "union %PixelQuadruple" $=
				(
					+ $dev $lib "static assertion to ensure elements of \
						%ArrayType same as %byte" ^ "%ystdex::remove_extent_t",
					/ DLI "specifying additional alignment requirement on the \
						1st data member" ^ 'yalignas_type',
					+ 'YB_ATTR(may_alias)' @ "data members"
						@ '__has_attribute(may_alias)'
				)
			),
			/ %FileSystem $=
			(
				/ "alias %FileNodeID" -> "class";
				* $comp $dev "pollution of %operator(==, !=) on %pair \
					instances used as %FileNodeID" $orig (@ %YCLib $since b638)
			)
		),
		* "missing removal of the deprecated C++ feature"
			@ "function %GetCopyOnWritePtr" @ "class template %GDependency"
			@ %YSLib.Core.YObject $since b835,
			// This is deprected since ISO C++17, see WG21 P0521R0. This is \
				removed by ISO C++20, see WG21 P0619R4 3 D.14.
			$= (/ $re_add(b835) ^ 'use_count' ~ 'unique'),
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "class %SeparatorTransformer" $=
				(
					(
					/ DLDI "function %operator()" !^ "%AddRange";
					- "function template %AddRange"
					),
					+ DD '\ingroup functors',
					- "branch check" @ "%operator()"
						// This does not changed the behavior of \
							%ReplaceChildren.
				),
				/ DLI "simplified separator pass" @ "constructor %REPLContext"
					^ "%SeparatorTransformer::(ReplaceChildren, std::ref)"
			),
			/ DLDI "cast to 'char'" @ "printing trailing integer with no more \
				than 9 digits" @ %NPLAMath
				// To eliminate Microsoft VC++ warning: C4244.
		)
	)
),

b934
(
	/ $re_add(b933) DLDI "ensured suffix 'L'" @ "all values compared with \
		%_MSVC_LANG" @ %YBase.YStandardEx.(Memory, Range, StringView),
	/ DLDI "changed the format of copyright notice" $effective
		@ %(YFramework.(YCLib.Input, Helper.ScreenBuffer,
		'Helper_(DS)'.DSScreen), Tools.PredefinedMacroDetector.Main),
		// This includes fixes on the initial copyright format (see \
			'$long_term_code_evolution' in %Documentation.Meta) and years (to \
			make it more precisely fit to the contents).
	/ DLDI "updated outdated URLs" @ "comments"
		@ %(YBase.YStandardEx.CWideCharacterType,
		YFramework.YSLib.Service.YGDI),
	/ $re_add(b906) DD $impl "simplified all tags with '\>' escape'"
		@ "Doxygen comments" $effective @ %YBase.YStandardEx.Invoke,
	/ DD "all '\sa' command referencing URLs" @ "Doxygen comments"
		-> "'\see' command" $effective
		@ %(YBase.Invoke, YFramework.YCLib.(HostedGUI, Platform)),
	/ DD "adjusted minor texts" @ "Doxygen comments" @ %(YBase.YStandardEx.(
		Cast, Invoke, Map, NodeBase, Ref), YFramework.YSLib.(Core.YConsole,
		Service.(YBrush, YTimer), UI.ComboList)),
	/ DLDI "adjusted declaration orders"
		@ %YBase.YStandardEx.(Ref, TStringView),
	/ DLDI "adjusted newlines for code" @ %(YBase.(LibDefect.String,
		YStandardEx.Mixin), YFramework.(YSLib.UI.Animation,
		'Helper_(Android)'.AndroidHost, 'Helper_(DS)'.Shell_DS),
		YReader.DSReader),
	- $re_add(b932) '-ffast-math' @ "default value" @ "variable \
		%C_CXXFLAGS" @ "%Toolchain.Android.mk" @ %Tools.Scripts,
	/ %YBase.YStandardEx $=
	(
		+ $dev $lib 'YB_ATTR(alloc_size(1))' and 'YB_ATTR(alloc_size(2))'
			@ "internal allocations" @ "function template %get_temporary_buffer"
			@ %Memory,
		/ $dev $lib "header guard name" @ %Exception,
		/ $dev $lib %BitSegment $=
		(
			+ 'YB_ATTR_nodiscard YB_STATELESS' @ "all static member functions",
			+ 'YB_ATTR_nodiscard YB_PURE' @ ("all friend functions,
				"all const-qualified member functions")
		),
		/ %Bit $=
		(
			/ DLDI "cleanup trailing whitespace",
			/ "transformation traits %enable_if_unsigned_t" >> %Meta,
			/ DLI @ "function templates %(floor_lb, ceiling_lb)" $=
			(
				/ "optimized internal calls" @ "function templates \
					^ 'YB_ATTR_always_inline',
				/ "worked around inefficient code generated by the compiler \
					for the builtins" @ "specializations for 32-bit or 64-bit \
					integers" @ "%(i386, x86_64) targets" @ 'YB_IMPL_GCC',
				+ "overloads for 8-bit and 16-bit integers by converting to \
					32-bit integers"
					// This is still more efficient than the fallback in \
						general.
				/ $design "internal shifting" ^ 'yconstfn' ~ 'inline'
					// This is not relied on, though.
			),
			* DD "missing '\' before '<'" @ "Doxygen comment" $since b933 
		),
		* "wrong operators used" @ "%(xorable, andable, orable, \
			left_shiftable, right_shiftable)" @ %Operators $since b682,
			// As a result, derived operations like %shiftable also used wrong \
				operators.
		/ "function template %invoke" @ %Invoke >> "namespace cpp2017",
		/ %Meta $=
		(
			(
			+ "inline namespace %cpp2020";
			/ "transformation traits %(remove_cvref, remove_cvref_t)"
				>> "namespace %cpp2020"
			),
			(
			+ "conditionally defined macro %__cpp_lib_remove_cvref";
			/ "detected %std::(remove_cvref, remove_cvref_t)"
				^ "%__cpp_lib_remove_cvref" ~ "%__cplusplus"
				// This also does not require the update on '__cplusplus' value.
			),
			(
			+ "conditionally defined macro %__cpp_lib_type_identity";
			+ "transformation traits %(type_identity; type_identity_t)"
				@ "namespace %cpp2020"
			)
		)
	),
	/ %YFramework $=
	(
		+ DLDI "'::' before 'swiWaitForVBlank'" @ "function %WaitForKey"
			@ "platform %DS" @ %YCLib.Input,
		/ %YSLib $=
		(
			/ "trace message" @ "destructor %Application" @ %Core.YApplication
				^ 'Deinitialization' ~ 'Uninitialization',
				// This is more consistent to current use of terms.
			+ DLDI 'YB_ATTR(alloc_size(1))' @ "commented out functions \
				%operator (new, new[])" @ %Adaptor.YNew,
			/ DLDI "cast to 'std::uint16_t'" @ "the return value" @ "function \
				%FetchResizedLineN" @ %Service.TextLayout
		),
		/ %NPL $=
		(
			/ $dev $lib %Lexical $=
			(
				+ 'YB_ATTR_nodiscard YB_PURE' @ "function %QueryLastDelimited"
					@ "class %BufferedByteParserBase",
				/ $impl "simplified function %EscapeLiteral"
					!^ "explicit construction of %string"
			),
			/ DLI %NPLA $=
			(
				/ DLI ^ "allocator" @ ("function %EscapeNodeLiteral"
					$dep_from ("%EscapeLiteral" @ %Lexical),
					"function %DecodeNodeIndex"; "function %PrintNode"),
				/ DLI "simplified message initialization"
					@ "constructors %BadIdentifier"
			),
			/ @ "function template specializations %WriteFPString"
				@ %NPLAMath $=
			(
				/ DLDI "cast to 'int'" @ "presicions",
					// To eliminate G++ warning: [-Wsign-compare] when \
						%std::uint_fast8_t is 'unsigned' or larter type.
				(
				+ "'\pre' command to limit the range of precision \
					parameters" @ "Doxygen comment";
				+ "assertion to check the precision parameters in the valid \
					range"
				),
				- DLDI "disabled internal functions when unused more precisely \
					by preprocessing directives",
					// To eliminate Clang++ warning: [-Wunused-function].
				/ "128-bit integer replacement"
					@ "built-in 128-bit integer is unavailable" $=
				(
					* "wrong trailing zero counting" $since b933,
						// This does not change the result for the client \
							code, but misses the fast path for integer greater \
							than 2^64.
					* "improper implicit narrow conversion" $since b932 $=
						(- "implicit conversion to interger type");
					+ $forced "shifting for explicit 'size_t' or 'int' types";
					(
					/ DLI "impoved operand type of shifting"
						$dep_from %YBase.YStandardEx.Operators;
						// This avoids redandant construction of the 128-bit \
							integer from the 2nd operand the integer. This \
							relies on the fix of the bugs in \
							%ystdex::(operators, shiftable).
					* $comp "ill-formed ambiguous overloads for %operator(<<, \
						>>) when the operand needing conversion"
						@ 'YB_IMPL_CLANGPP' $since b932
						// G++ occasionaly worked, but not Clang++, which \
							also broke platform %Android (after removing \
							'-ffast-math' in the compiler option) by default. \
							This does still not work before the change of \
							operand type of the overloaded shift operators, \
							even with the %YBase.YStandardEx.Operators fixes, \
							due to missing viable %operator(<<=, >>=). The \
							differences might be caused by handling of \
							operator overloading for subtle cases, e.g. WG21 \
							CWG 954.
					)
				)
			)
		),
		* $comp "building failure" @ "platform %Android" $since b932
			$dep_from %Tools.Scripts
	),
	/ %YReader $=
	(
		/ ($re_ex(b863) "updated copyright year", "version") @ "label text"
			@ "constructor %AboutPanel" @ %About,
		/ DLI "optimized label texts" @ "constructor %FileInfoPanel"
			@ %ShlReader ^ "encoding-prefix 'u'"
	),
	/ $dev $repo $re_add(b879) "all edited file with module name not the same \
		as base filename" @ !%YBase ^ 'hg mv' $effective
		@ %Tools.PredefinedMacroDetector.("%main.cpp" => "%Main.cpp")
),

b933
(
	/ $re_add(b932) DLDI "indented 'YB_Diag_*' macro invocation guarded in \
		conditional inclusion" @ 'YB_IMPL_MSCPP'
		$effective @ %YFramework.YCLib.NativeAPI,
	/ DLDI "ensured suffix 'L'" @ "all values compared with %(__cplusplus, \
		__STDC_VERSION__)" $effective %YBase.YDefinition,
	/ %YBase $=
	(
		/ DLDI "ensured suffix 'L'" @ "all values compared with %_MSVC_LANG"
			@ %(YDefinition,
			YStandardEx.(CStandardDefinition, MemoryResource, Placement)),
			// This follows %__cplusplus. See https://docs.microsoft.com/en-us/cpp/preprocessor/predefined-macros \
				for the predifined macros.
		/ %YStandardEx
		(
			+ $dev $lib "public inclusion %Hash" @ %Functional,
			+ "header inclusion %CWideCharacterType" @ %CString,
			(
			/ ("function templates %(towlower, towupper)";
				"header inclusion <cwctype>") @ %CCharacterType
				>> %CWideCharacterType
				$dep_from %(CString, YFramework.YCLib.YCommon);
			/ "header inclusion %CWideCharacterType" @ %CWideCharacterType
				-> "%YDefinition"
			),
			(
			+ %CStandardDefinition;
			/ "header inclusion %YDefinition"
				@ %(TypeInspection, IntegralConstant) -> %CStandardDefinition
				$dep_to ("ystdex::nullptr_t transition",
				"ystdex::ptrdiff_t transition", "ystdex::size_t transition",
				"ystdex::byte transition")
			),
			+ DLDI "header inclusion <cstdint>"
				@ %(CAssertion, CStandardInteger),
			/ DLB "updated %__cplusplus detection except for experimental \
				headers" @ %MemoryResource
				(/ $impl '__cplusplus > 201703L' -> '__cplusplus >= 202002L')
		),
		/ %YDefinition $=
		(
			/ ("alias %wint_t"; "header inclusion <cwchar>")
				>> %CWideCharacterType $dep_from (%CCharacterType,
				"removal of ystdex::wint_t in the platform header"),
			* DD "wrong group name" @ "command '\ingroup'"
				@ "Doxygen comment" @ "pseudo keyword %yunused" $since b435,
			(
			/ ("macro %__cpp_lib_byte"; "type %byte";
				"header inclusion <climits>") >> $dep_from
				%YStandardEx.CStandardDefinition $dep_all from
				("standard type header transition", "ystdex::byte transition")
				$= (/ DLI ^ 'unsigned' ~ 'std::uint8_t');
					// This avoids the dependency on <cstdint>.
			- "header inclusion <cstdint>" $dep_from %(CAssertion,
				CStandardInteger, YFramework.YCLib.NativeAPI)
			),
			/ ('using std::ptrdiff_t;', 'using std::size_t',
				"types %(octet, nullptr_t)")
				>> %CStandardDefinition $dep_all from ("standard type header \
				transition", "ystdex::nullptr_t transition"),
			/ ("class %offsetof_check"; "pseudo keyword %yoffsetof";
				"header inclusion <type_traits>")
				>> $dep_from %YStandardEx.CStandardDefinition
				$= (/ DLDI ^ 'struct' ~ 'class'),
			/ ("class template %empty_base", "struct raw_tag",
				"header inclusion <cstddef>")
				>> $dep_from %YStandardEx.CStandardDefinition,
			/ "header inclusion <cassert>"
				>> ("implementation" @ %YFramework.YCLib.Debug),
			/ DLI "all default substitution '1' of macros" -> 'true'
				$effective @ "macros %(YB_Use_YAssert, YB_Use_StrictNoThrow, \
				YB_Use_YTrace)",
			* "missing support of overriding macro %YB_Use_YAssert"
				$mismatch(Documentation.Definitions) $since b595
				$dep_all_from "allowing skipping tracing"
		),
		(
		+ %Bit $=
			(+ "transformation trait %ystdex::enabled_if_unsigned_t");
		(
		+ DLDI "header inclusion %Bit" @ %(MemoryResource, Placement);
		/ "functions %((is_power_of_2; is_power_of_2_positive), ceiling_lb, \
			floor_lb)" -> "function templates with 'YB_ATTR_always_inline'"
			@ %Bits;
		- DLDI "header inclusion %CStandardInteger" @ %MemoryResource,
		/ ("header inclusion %CStandardInteger" -> "%IteratorOperation")
			@ %Placement,
		+ $dev $lib 'YB_ATTR_always_inline'
			@ "functions %(is_power_of_2, is_power_of_2_positive)"
		),
		/ ("functions %(native_byte_order, native_little_bit_order)",
			"enum class %byte_order") >> @ %Bit;
		/ %Bit $=
		(
			+ $dev $lib 'YB_ATTR_nodiscard YB_ATTR_always_inline'
				@ "functions %(floor_lb, native_byte_order, \
				native_little_bit_order)",
			+ "inline namespace %ystdex::cpp2020"
				$= (+ "function templates or alias declarations %(countl_zero, \
					countr_zero)"),
			+ "function templates %(countl_zero_narrow, countr_zero_narrow)",
			/ DLI "simplified and optimized with Microsoft VC++ intrinsics"
				@ "function template %floor_lb",
				// This now shares the underlying implementations with \
					%(countl_zero_narrow, countr_zero_narrow).
			/ 'ynothrow' @ "function templates %(floor_lb, ceiling_lb)"
				-> 'ynothrowv'
				// This is more consistent with the narrow contract.
		)
		)
	),
	/ $dev $impl "updated dead links with prefix 'https://gcc.gnu.org/git/' \
		@ "comments" ^ "prefix 'https://gcc.gnu.org/viewcvs/'" $effective
		@ YBase.YStandardEx.(Allocator, Meta),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %Platform $=
			(
				/ $re_add(b932) DLB "condition of defining macro %YF_API"
					@ 'YF_BUILD_DLL' @ ^ '(__has_attribute(__visibility__) \
					|| YB_IMPL_GNUCPP >= 40000 || YB_IMPL_CLANGPP >= 20800)'
					~ 'YB_IMPL_GNUCPP >= 40000',
					// Similar to %YB_API.
				/ "header inclusion %YBase.YDefinition"
					-> $dep_from %YBase.YStandardEx.CStandardDefinition
					$dep_to "standard type header transition"
			),
			+ DLDI "%yunused" @ "platform %DS" @ ("functions %upopen" @ %FileIO,
				"functions %CreateHardLink" @ %FileSystem),
				// To eliminate G++ warning in release modes: \
					[-Wunused-parameter].
			(
			- DLDI ^ @ "function %ConvertToAlias" @ %FileSystem ^ '%std::wint_t'
				~ 'wint_t';
			- $revert(b245) 'using ystdex::wint_t' @ %Platform
				$dep_from "removal of ystdex::wint_t in the platform header"
			),
			+ DLDI "header inclusion %YBase.YStandardEx.CCharacterType"
				@ %YCommon,
				// This removes the dependency between headers \
					<ystdex/cwctype.h> and <ystdex/cctype.h>, although \
					<ystdex/cstring.h> would still hide the dependency.
			/ %Debug $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "function templates %(FwdIter, Deref)",
				* "invalid empty substitution" @ '!YB_Use_YTrace'
					@ "macro %YTraceDe" $since b498
					$dep_to "allowing skipping tracing",
				/ "supported skipping calls to %ystdex::ytrace"
					@ '!YB_Use_YTrace' $dep_to "allowing skipping tracing"
			),
			+ DLDI "header inclusion <cstdint>" @ "platforms %(DS, Win32)"
				@ %NativeAPI
		),
		/ DLDI "prevented unused variables besides %YTraceDe" ^ 'yunused'
			$effective @ %(YCLib.(YCommon, FileIO), YCLib_'(Win32)'.MinGW32,
			Helper.(Initialization, ShellHelper, NPL.NPLA1),
			// To elimitate G++ warnings: [-Wunused-variable] and \
				[-Wunused-parameter] when 'YB_Use_YTrace' is evaluated to false.
		/ %NPL $=
		(
			/ @ "function template specializations %WriteFPString"
				@ %NPLAMath $=
			(
				* DLDI "unnecessary type conversion by wrong type argument \
					used in the internal fraction writing" $since b932,
					// This causes no problem with modern compilers, but still \
						unwanted.
				/ DLDI "floating-point type traits declaration order and uses",
				(
				/ DLI "simplified 'long double' internal conversion"
					!^ "bitsets";
					// Anyway, only 128-bit internal representation is \
						supported at current.
				* $comp "wrong exponents or crashes in printing 'long double' \
					values" @ '!NPL_Impl_NPLAMath_LongDoubleAsDouble'
					@ "%release configurations" $since b932
					// XXX: The code generated by x86_64-pc-linux G++ 11.1.0 \
						at '-O3' is broken. For example, in x86-64 Linux, \
						'1l0' may crash, and '1l-4' may result '1le-7'.
				),
				/ $dev $impl "detected '_M_FP_FAST'" ~ '__USE_FAST_MATH__'",
					// The former detects Microsoft VC++'s /fp:fast. The \
						latter has no reliable source in the known supported \
						C++ implementations for the YSLib project.
				/ "computation of the minimal exponent value"
					@ "shorter interval detecting"
				(
					* "unexpected imprecise results caused by wrong sign of the"
						" exponent bias term" $since b932
						$= (/ $impl ^ "%std::numeric_limits"),
						// This is imprecise when the value is small (but \
							normal).
					* "implicit dependency on the exponent bias"
						$mismatch(Documentation.YFramework) $since b932
						// This is wrong, although all supported platforms are \
							not affected.
				),
				* "redundant dependency on exponent bias"
					$mismatch(Documentation.YFramework) $since b932,
					// This requirement was not documented, and proven not \
						necessary.
				(
				* "wrong exponent specified for subnormal numbers" $since b932;
					// This would incur unexpected error for small subnormal \
						numbers.
				* "wrong handling for hidden bit of the significand"
					$mismatch $since b932
					// Actually the x87 extended precision floating-point \
						number does not have the hidden bit. This requirement \
						is also proven necessary.
				),
				(
				/ DLDI "removed redundant static assertions";
				* "wrong static assertion" @ 'FLT_RADIX == 2 \
					&& NPL_Impl_NPLAMath_Has_UInt128 && LDBL_MANT_DIG == 113'
					$since b932,
				),
				/ DLI "simplified integer writing",
				* "missing handling of large integer out of the range of \
					%std::uint64_t" @ 'LDBL_MANT_DIG > 64 \
					&& LDBL_MANT_DIG <= 113 && NPL_Impl_NPLAMath_Has_UInt128'
					$since b932,
				/ DLI "simplified writing sequence of 1-8 digits",
				/ DLI "specialized writing sequence of 1-16 digits",
				/ DLI "optimized writing fraction for %float values"
					@ 'FLT_MANT_DIG <= 24',
				/ DLI "extended the fast path of writing integers for \
					floating-point values to all ranges",
					// This is not usual since values greater than the \
						64-bit maximum unsigned integer are rare.
				/ DLI "simplified the fallback significand writing"
					^ 'float' ~ 'double'
					// Since the supported siginificand would be no more than
					//	113-bit, it is OK even for the minimal %FLT_MAX with
					//	1E+37 required by ISO C++. %DBL_MAX has no difference
					//	%FLT_MAX in the minimal guarantee, but 'float' can be
					//	more efficient (e.g. soft FP).
			),
			/ DLI "optimized functions %(ParseLeaf, \
				ParseLeafWithSourceInformation)" @ %NPLA1
				!^ "%IsNPLAExtendedLiteral"
		),
		/ DLDI @ "%floor_lb" @ %YBase.YStandardEx.CStandardInteger
			@ %YSLib.Core.ValueNode ^ $dep_from %YBase.YStandardEx.Bit,
		/ DLDI @ "%byte_order" @ %YBase.YStandardEx.CStandardInteger
			@ %CHRLib.Encoding ^ $dep_from $forced %YBase.YStandardEx.Bit
	)
),

b932
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ DLDI "indented 'YB_Diag_*' macro invocation guarded in \
				conditional inclusion" @ 'YB_IMPL_MSCPP >= 1200',
			+ "macro %YB_ATTR_always_inline",
			/ DLB "conditions of defining macros 'YB_Diag_*'" $=
			(
				/ "condition implemented by '#pragma clang'"
					-> 'YB_IMPL_CLANGPP >= 20600',
				/ "condition implemented by '#pragma GCC'"
					-> 'YB_IMPL_GNUCPP >= 40600' ~ 'YB_IMPL_GNUCPP >= 40200'
					// It should be usable since G++ 4.2, albeit somewhat \
						buggy, at least on platform %DS for the implementation \
						of %ystdex::has_common_nonempty_virtual_base in \
						<ystdex/cast.hpp> since b178 (moved away and renamed \
						%have_common_nonempty_virtual_base later) at a decade \
						ago.
			),
			/ DLB "condition of defining macro %YB_API" @ 'YB_BUILD_DLL'
				^ 'YB_IMPL_CLANGPP >= 20800' ~ 'YB_IMPL_CLANGPP',
			* "ineffective suppression of warning [-Wpointer-bool-conversion] \
				for Clang++" @ "macro %YB_ASSUME" $since b922
				// The condition would be never true because the Clang++ has \
					been already handled previously. As a result, uses like \
					%yconstraint with 'defined(NDEBUG)' may still incur the \
					warnings.
		),
		/ %YStandardEx $=
		(
			/ DLDI @ "class template %fixed_point" @ 'YB_IMPL_MSCPP >= 1200'
				@ %Rational ^ "%YB_Diag_Ignore" $=
			(
				/ "disabled warning C4146 around the unary - operation"
					@ "unary %operator-",
					// To eliminate Microsoft VC++ warning: C4146. A quick \
						search show the warning is effective at least in \
						Microsoft VC++ 6.0: https://forums.codeguru.com/showthread.php?333202, \
						but there are no clues showing the precise version \
						introducing the warning (plus 1200 is the minimal \
						value of the officially documented %_MSC_VER currently \
						found).
				/ "disabled warning C4146 around the unary - operation"
					@ "unary %operator-"
					// To eliminate Microsoft VC++ warning: C4554. This is \
						known annoying for vairous versions, including (at \
						least) VC++ 6 and VS 2015.
			),
			/ @ 'YB_Impl_has_builtin_clz' @ "function %floor_lb"
				%CStandardInteger $=
			(
				* "wrong byte width of %std::uintmax_t used \
					instead of the corret bit size" $since b842,
					// This would be usually ill-formed unless \
						'sizeof(std::uintmax_t)' is 32 or 64, which were \
						the only specialized widths.
				/ DLI "optimized 64-bit integer case with a different lookup \
					table and the corresponding de Brujin sequence",
				/ DLI "optimized the table" ^ ("%std::uint_fast8_t", 'yalignas')
					~ "%size_t"
			),
			+ $dev $lib ($dep_from 'YB_ATTR_always_inline' @ %YDefinition)
				@ ("all function templates %addressof not defined as deleted"
				@ %AddressOf, ("function template %is_aligned_ptr")
				@ %Placement, ("all non-member function templates",
				"member functions or function templates named ('get', \
				'access', 'data')") @ %TypePun),
				// There are no need to blindly apply this attribute on most \
					function templates in %Placement and similar ones in \
					%TypePun which may likely have degraded perforamnce with \
					the attribute.
			/ %Placement $dep_to "removal of unreliable inlining attribute" $=
			(
				- 'YB_ATTR(always_inline)' @ "function template %destruct_in",
					// Ditto.
				+ DLI "workaround to avoid removing the inlining attribute"
					@ '(YB_IMPL_GNUCPP && !YB_IMPL_CLANGPP) && \
					defined(NDEBUG) && __OPTIMIZE__'
					@ "function template %construct_within"
					// However, it is buggy that removal the attribute on \
						%construct_within would cause x86_64-pc-linux G++ \
						11.1.0 in release modes generating wrong code that \
						crashes. It also causes i686-w64-mingw32 G++ to \
						generate the wrong code, leading SHBuild crash in \
						interpreting NPLA1 code as 'for-each-ltr l' when 'l' \
						is a list has more than 1 elements, thus any NPLA1 \
						building script would fail.
			),
			+ $dev $lib 'YB_ATTR_nodiscard' @ "function templates %(make_pun, \
				make_pun_default, standard_layout_storage::(access, data, pun, \
				pun_default))" @ %TypePun,
			/ @ "function template %swap_underlying" @ %Swap $=
			(
				// See $2021-10 @ %Documentation::Workflow.
				/ "type precondition" ^ "%is_bitwise_swappable"
					~ "%is_standard_layout";
				* ("missing guarantees of the behavior of %swap",
					"possible undefined behavior for strict aliasing")
					$orig (@ %Utilities $since b620)
					$= (/ $impl ^ "%std::memcpy"
						~ "%ystdex::aligned_replace_cast")
			),
			/ DLDI "internal order of attributes with 'inline' or 'yconstfn'"
				@ %Operators
		)
	),
	/ DLDI "all 'YB_ATTR(always_inline)" -> (($dep_from 'YB_ATTR_always_inline'
		@ %YBase.YDefinition) $effective @ %(YBase.(YStandardEx.Swap,
		CStandardInteger, Operators, Placement), YFramework.(YSLib.Core.YObject,
		NPL.(SContext, NPLA1, NPLA1Internals, NPLA1Forms))),
		$comp $dep_from "removal of unreliable inlining attribute"),
	* DD "missing '<eformal>'" @ "operatives ('$wvau', '$wvau%', '$wvau/e', \
		'$wvau/e%')" @ %Documentation.NPL $since b921,
	/ @ %Tools.Scripts $=
	(
		+ "library option '-lquadmath'" @ "linker commands"
			$effective @ ("%SHBuild-bootstrap.sh", "%SHBuild-BuildApp.txt",
			"%SHBuild-YSLib-build.txt"),
			// Clang distributions still does not has the header, but the \
				option is safe to be ignored.
		- '-ffast-math' @ "default value" @ "variable %C_CXXFLAGS_ARM9"
			@ "%Toolchain.DS.mk"
	),
	/ %YFramework $=
	(
		/ DLI "function %Create" @ "class template %PointerHolder"
			@ %YSLib.Core.YObject ^ 'yconstexpr_if',
		/ YB_IMPL_GNUCPP && YB_IMPL_GNUCPP >= 90000
		/ DLI @ "function template %Decode" @ "class template specialization \
			%GUCSMapper<CharSet::UTF_8>" @ %CHRLib.StaticMapping $=
		(
			(
			/ "state table entry type" ^ 'unsigned char' ~ "%unsigned"
				@ 'YB_IMPL_GNUCPP && YB_IMPL_GNUCPP >= 90000';
			/ "optimized the main state lookup table" ^ 'yalignas(64)'
				// Similar to the optimization for lookup tables in \
					%YBase.YStandardEx.CStandardInteger.
			),
			/ "main state table lookup" ^ "static %yconstfn_relaxed function"
				// This avoids duplication in the instances of %Decode for \
					different template arguments. The access in the function \
					does not fit ISO C++'s requirement on 'constexpr', though.
		),
		/ %NPL $=
		(
			/ %NPLAMath $=
			(
				/ @ "function %ReadDecimal" $=
				(
					+ "support of more exponent letters" @ "exponents syntaxes \
						on inexact numbers",
						// As [RnRS].
					/ DLI "simplified scale calculation when exponent exists",
					* "underflow by power value" $since b931
						$= (/ $impl ^ "%std::ldexp")
						// For example, 1e-323 is correct for a 'double' value \
							encoded in IEEE-754 binary64 format, but 1.1e-323 \
							is wrongly converted to 0.0 because 1e-324 is too \
							small to multiply with 11.
				),
				/ DLDI "disabled warning C4146 around the internal unary \
					- operation" @ 'YB_IMPL_MSCPP >= 1200'
					@ "functions %(Abs, Divides)" ^ "%YB_Diag_Ignore",
					// To eliminate Microsoft VC++ warning: C4146.
				+ DLDI 'ynothrow' @ "internal implementation"
					@ ("function %IsIntegerValue", "dynamic number casts)",
				- DLI "internal 'ynothrowv" @ "dispatching"
					// This is not a bug now since all the operations do not \
						throw.
			),
			* $re_add(b844) "invalid 'YB_API YB_ATTR_nodiscard'" $effective
				@ ("function %Ensigil" $since b920,
				"function %CheckEnvironmentFormal" $since b917)
				$= (/ $impl 'YB_API YB_ATTR_nodiscard'
					-> 'YB_ATTR_nodiscard YB_API'),
				// To eliminate Clang++ error: 'nodiscard' attribute cannot be \
					applied to types.
			/ DLI "optimized function %IsIntegerValue" ^ "%std::nearbyint"
				~ "%std::floor",
			(
			+ "%yconstexpr ojbect %StringBufferSize";
			+ $dev "static assertion to constraint %StringBufferSize",
			+ "function template %WriteFPString and 3 extern specializations"
				$dep_from %Tools.Scripts;
				// If %NPL_Impl_NPLAMath_UseQuadMath is not set, it detects \
					<quadmath.h>, which is avaiable with GCC.
			+ "3 function %FPToString"
			)
		)
	)
),

b931
(
	/ $re_ex(b773) $build "updated to Microsoft VC++ 2022" ~ "Microsoft VC++ \
		2019" @ "Microsoft VC++ projects" $effective @ %(YBase, YFramework,
		Tools.(CreationTimeManager, PredefinedMacroDetector, SHBuild))
		$= (/ $re_ex(b862) "retargeted platform toolset" -> 'v143' ~ 'v142'),
	+ $re_add(b928) $dev $lib "#pragma directive" @ ('YB_IMPL_GNUCPP \
		|| YB_IMPL_CLANGPP' @ "alias templates %(equal_t, not_equal_t)"
		@ %TypeTraits, "functors %(equal_to, not_equal_to)" @ %Functor)
		@ %YBase.YStandardEx,
		// To elimiante Clang++ warning: [-Wfloat-equal].
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			* DD "wrong precondition" @ "'\pre' command" @ "Doxygen comment"
				@ "function %IsNPLAExtendedLiteral" $since b822,
			/ DLI "list environment redirection"
				@ "static member function %ContextNode::DefaultResolve" $=
			(
				/ "simplified" !^ "identifier",
					// This does not perform better without the allocator.
				/ ^ ("allocator", 'any_ops::trivial_swap_t')
			),
			/ DLI "term tag merging" ^ 'YB_STATELESS' ~ 'YB_PURE',
			/ @ "namespace %ystdex" $=
			(
				* "wrong '\relates' command" @ "Doxygen comment"
					@ "class template specialization \
					%is_bitwise_swapple<NPL::EnvironmentSwitcher>" $since b926,
				+ $re_add(b927) $lib "class template specializations \
					%is_bitwise_swappable for %NPL::EnvironmentReference"
			)
		),
		* DD "wrong syntax" @ "Doxygen comment" @ "function %SymbolToString"
			@ %NPLA1Forms $since b924,
		/ @ "function %ReadDecimal" @ %NPLAMath $=
		(
			* "wrong parsing result of flonums with '.' caused by wrong factor \
				adjustment used" $since b930,
				// Both exact and inexact number parsing were wrong.
			* "wrongly rejected number literals with '.' at the end and in \
				the range of fixnums" $since b930,
				// There would be an error of unsupported literal suffix \
					'' if the value is acceptable by the largest integer \
					type, or the wrong value for flonums (see ablove).
			* "wrongly treated integer zero lexeme prefixed with a sign as \
				empty lexemes" $since b930,
				// The wrong results were caused by the trailing zeros \
					removal.
			(
			* "too lossy intermediate results" $since b930 $=
			(
				/ "saved internal data for ineacxt results"
					^ "common type of internally used extended integer \
					type (i.e. 'long long') and %std::uint64_t" ~ "%double";
					// With some changes on the call sitees, this also to \
						eliminate Microsoft VC++ warning: C4244.
				/ $impl "converted to %double at last"
					^ "signed shift on the final result"
			);
			* $comp "wrong infinite values caused by the overflow fraction \
				even after the decimal point has occurred" $since b930,
				// This should not overflow to infinite.
			),
			+ "support of exponents syntaxes on inexact numbers"
		)
	),
	/ @ "class %DualScreenReader" @ %YReader.DSReader $=
	(
		/ "moving scrolling area"
			@ "functions %(Execute, (MoveUpForLastLine; ScrollByPixel))" $=
		(
			/ $lib $design ^ "more precise assertion message"
				@ "space checking for scrolling",
			* "missing scrolling of the old text area caused by negated \
				condition of scrolling check" $since b850
		),
		/ @ "function %Execute" $=
		(
			/ DLDI "simplified condition checks",
			/ DLI "simplified command selection",
				// The %Scroll bit in the command parameter is just ignored now.
			/ @ "the scrolling up command execution" $=
			(
				/ $revert_ex(b292)
					"extended allowed line height to %size_t" ~ "%FontSize";
					// %FontSize is effectively %std::uint8_t, which is too \
						small in some cases. Originally (before b292) it was \
						'u32' as the type of the total height and there was \
						no implicit limitation of the height of a line.
				/ "showed error on the size too large";
				* $comp "missing the check to prevent the use of the wrongly \
					wrapped size as the line height" $since b292
			)
		)
	),
	- $dev "unused 'data' files" @ "filter" @ "platform %Android"
		@ "Microsoft VC++ project"
),

b930
(
	+ "'-fno-semantic-interposition' after '-fPIC' except for platform %Android"
		$effective @ ("%SHBuild-common-options.sh", "%SHBuild-YSLib-common.txt")
		@ %Tools.Scripts,
	/ $dev '<bool>' => '<boolean>' @ %Docuemntation.NPL,
		// This is related to the type predicate name, i.e. 'boolean?' \
			instead of 'bool?' (although not introduced in NPLA1 now). It is \
			also consistent to [RnRK] and [RnRS] now (for 'boolean?' and the \
			name of the syntactic element).
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			* DD "typo" @ "comment" @ "Doxygen group %traits" $since b845,
			/ $resolve(#39) $dev "cleared substitution list" @ "macros \
				%(ynoexcept_param, ynoexcept_qual)" @ 'YB_IMPL_MSCPP',
			/ $re_add(b927) DLDI "all 'yconstexpr const'" @ "namespace scope"
				-> 'yconstexpr_inline const',
			/ "disabled %YF_FLATTEN" @ '__OPTIMIZE_SIZE__',
				// This would make binary image size platform %DS shrink \
					significantly (from 1863 KiB to 1306 KiB in the recent \
					version without linking to %NPL.NPLAMath APIs in \
					YFramework, and finally 1342 KiB with the changes of the \
					current revision).
			* DD "wrong name" @ "'\def' command" @ "Doxygen comment"
				@ "macro %YB_IMPL_CLANGPP" $since b458
				$= (/ 'YB_IMPL_CLANGCPP' -> 'YB_IMPL_CLANGPP'),
			/ $dev $lib "'__has_extension' fallback" ^ '__has_feature',
				// This follows the current Clang documentation, with a little \
					different of preserving the explicit '(...)'.
			+ "feature-test macro %__cpp_if_constexpr",
			+ "pseudo keyword %yconstexpr_if"
		),
		/ %YStandardEx $=
		(
			/ @ "function template %are_equal" @ "struct %equal" @ %Examiner $=
			(
				* "wrong conditional inclusion" $since b929
					$= (/ 'YB_IMPL_CLANGCPP' -> 'YB_IMPL_CLANGPP'),
				/ $revert_ex(b929) $dev $lib "#pragma directive to ensure the \
					exception-specification is also covered"
					// To elimiante Clang++ warning: [-Wfloat-equal]. It seems \
						only Clang++ (but not G++) would complain it whether \
						the condition above is fixed.
			),
			/ "namespace %pmr" @ %MemoryResource $=
			(
				(
				+ "class %new_delete_resource_t";
					// See $2020-11 @ %Documentation::Workflow.
				/ DLI "simplified function %new_delete_resource"
					@ 'YB_Has_memory_resource != 1' ^ "%new_delete_resource_t",
				/ DLDI "removed unnecessary attributes on the definition"
					@ "%pool_resource::do_is_equal"
				),
				+ $dev $lib "'YB_ATTR(alloc_align(3), alloc_size(2))' on \
					allocator functions with size and alignment parameter"
					$effective @ ("all 6 member functions %do_allocate",
					"function %allocate" @ "class %memory_resource"),
					// See https://clang.llvm.org/docs/AttributeReference.html#alloc-align \
						and https://clang.llvm.org/docs/AttributeReference.html#alloc-size.
				+ $dev $lib "'YB_ATTR(alloc_size(2))' on allocator functions \
					with size parameter" $effective @ "function %allocate"
					@ ("class template %polymorphic_allocator",
					"class %oversized_map")
					// Ditto.
			)
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			* "missing inclusion %YBaseMacro" @ %JNI $since b905,
				// This worked until the removal of inclusion %YBaseMacro in \
					%Container.
			/ @ "platform %Win32" @ %Debug $=
			(
				* "missing level and thread information" @ "static member \
					function %Logger::FetchDefaultSender" $since b737,
					// This is inconsistent to %Logger::DefaultSendLog and \
						%SendDebugString.
				/ DLDI "simplified function %SendDebugString",
				* "allocator of internal resources might be used out of \
					lifetime" @ ("default sender" @ "class %Logger",
					"function %Echo") $since b861
					^ $dep_from ("%pmr::new_delete_resource_t"
					@ %YBase.YStandardEx.MemoryResource)
					// This is mainly used in the %WConsole output having \
						strings with %pmr allocators implicitly initialized to \
						refer some static objects by default (i.e. from \
						%pmr::new_delete_resource). The change of the string \
						type to remove 'std::' in the called functions was \
						from b593 in %'YCLib_(Win32)'.MinGW32 and the changes \
						to use the strings in %Debug was from b742, but the \
						%pmr was actually used for strings in %Container since \
						b861.
			)
		),
		* "wrong 'YB_NONNULL(2)'" @ "function template %TryExecute"
			@ %YSLib.Core.YException $since b929,
			// Also to eliminate Clang++ exception: [-Wpointer-bool-conversion].
		/ %NPL $=
		(
			(
			+ %NPLAMath;
			/ "all %Internals API for math" @ %NPLA1Internals
				>> %NPLAMath,
				// These are added since b929.
			/ "inline namespace %Math" @ "namespace %NPL::A1" @ %NPLA1
				>> ("namespace %NPL" @ %NPLAMath);
			/ @ "inline namespace %Math" @ %NPLAMath $=
			(
				/ $dev 'NPL_NPLA1_EnsureInPlaceNativeNumbers'
					=> 'NPL_NPLA_EnsureInPlaceNativeNumbers',
				* "missing definition caused by redundant 'inline'"
					@ "function %IsFlonumValue" $since b929
					$dep_to "math operations",
				/ DLI "asserted invalid input value type" @ "function %IsZero"
					~ "throwing exception",					
				/ DLI "order of check" @ "function %IsFlonumValue",
					// The type 'double' is assumed more frequent. This is \
						also consistent to implementation of other functions \
						in %A1::Math.
				* DLI "workaround for disabling [-Wfloat-equal] not enabled \
					for Clang++" @ "function %IsZero" $since b929
					$= (/ 'YB_IMPL_CLANGCPP' -> 'YB_IMPL_CLANGPP'),
				+ $dev 'ynothrowv' @ "function %IsZero",
				/ DLDI "simplified functions %(AddOne, SubOne)"
					!^ "internal static member functions",
				/ "underflow extension" $dep_to "math operations" $=
				(
					* "wrong interanl type for unsgined underflow whose width \
						not less than %int" $orig (@ "primary class template \
						%NExtType" @ %NPLA1Internals $since b929),
					/ "underflow extension type 'float' for 'unsigned long long'"
						-> 'double'
						$effective @ "functions %(Sub1, Plus, Minus)",
						// This is more presice.
				),
				+ "functions %(IsRationalValue, IsIntegerValue, IsFinite, \
					IsInfinite, IsNaN, Equal, Less, Greater, LessEqual, \
					GreaterEqual, IsPositive, IsNegative, IsOdd, IsEven, Max, \
					Min, Divides, Abs)" $dep_to "math operations",
				+ "function %ReadDecimal"
					$= (/ $impl
						^ $dep_from ('yconstexpr_if' @ %YBase.YDefinition))
			)
			),
			/ %Dependency $=
			(
				+ "function %LoadModule_std_math"
					$dep_all_from "math operations";
				+ "call of %LoadModule_std_math"
					@ "function %LoadStandardContext"
			),
			/ @ "function %DefaultEvaluateLeaf" @ %NPLA1 $=
			(
				/ DLI "optimized" ^ ('switch', 'case')
					~ ('if', "%ystdex::isdigit"),
				(
				+ "support of parsing number signs";
				+ "support of parsing special flonums",
				/ "decimal numeric values parsing" $=
				(
					/ $impl ^ $dep_from ("%ReadDecimal" @ %NPLAMath);
					* $comp "potential undefined behavior"
						@ "integer overflow check" $since b880,
						// This was still wrong since b928.
					/ $comp "error message of literal suffix"
						^ "explicit suffix not parsed yet",
					+ $comp "support of parsing 'long long' value",
					+ $comp "support of parsing %double value for values \
						larger than 'long long' or with a single decimal point"
				)
				)
			)
		)
	),
	/ $re_add(b882) $build "updated %LIBS for %YFramework.NPL.NPLAMath"
		$dep_from $forced %YFramework.NPL.NPLAMath $dep_from (("function \
		%DefaultEvaluateLeaf" @ %NPLA1, %Dependency) @ %YFramework.NPL)
),

b929
(
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ "function %TryExecute" @ %YSLib.Core.YException
				-> "function template" !^ "%function",
			/ @ "class %String" @ %YSLib.Core.YString $=
			(
				+ "alias %std_u16string",
				/ @ "constructors" $=
				(
					+ 'ynothrow' @ "move constructor",
					+ "3 constructors with allocator parameter",
					+ "allocator parameter with default argument"
						@ "constructor with %std::initializer_list instance",
					/ "all default template arguments of allocator"
						-> "rebound allocator" ^ "%ystdex::rebind_alloc_t"
						~ "%std::allocator",
					/ "all %u16string parameter" -> $dep_from "%std_u16string",
						// This allows initialize from %std::basic_string from \
							the standard library even %std::basic_string is \
							not same to %YSLib::basic_string.
					/ "all %basic_string parameters" -> "%std::basic_string \
						parameters" ^ "%ystdex::make_string_view"
						$dep_to "standard string conversion"
						// Ditto.
				)
			),
		),
		/ %NPL $=
		(
			/ "made '#ignore' a value token instead of a symbol" $=
			(
				// This is more like [RnRK] now. The change allows '#ignore' \
					used as an escaped identifier of a variable name \
					accessible by binding constructs which have to distinguish \
					the special literal '#ignore' and the value name.
				/ %NPLA1 $=
				(
					+ "%Ignore" @ "enum %ValueToken";
					/ "supported %ValueToken::Ignore" @ "function %to_string",
					(
					- "%IsIgnore check" @ "function %BindSymbol";
					/ "function %IsIgnore checked %TermNode parameter"
						~ "%TokenValue parameter"
						$= (/ $impl ^ "%HasValue")
					),
					+ "'#ignore' support" @ "function %DefaultEvaluateLeaf"
				),
				/ $forced "%IsIgnore check" $effective @ ("functions \
					%(BindParameter, BindParameterWellFormed, \
					CheckEnvironmentFormal)" @ %NPLA1, "functions \
					%Forms::(DefineWithRecursion, SetWithRecursion)"
					@ %NPLA1Forms, "class template %GParameterValueMatcher"
					@ %NPLA1Internals) $dep_from ("%IsIgnore" @ %NPLA1),
				/ %Dependency $=
				(
					/ "all 'ignore'" @ "derivation" -> '#inert'
						$dep_from ("%DefaultEvaluateLeaf" @ %NPLA1)
						$effective @ "function %LoadGroundContext";
					- $forced "object definition %ignore"
						@ "function %LoadGroundContext"
						$dep_from ("%DefaultEvaluateLeaf" @ %NPLA1)
				)
			),
			(
			/ "simplified symbol binding" !^ "%IsNPLASymbol"
				$effective @ ("function %(BindParameter, \
				BindParameterWellFormed, BindSymbol)" @ %NPLA1, "functions \
				%Forms::(DefineWithRecursion, SetWithRecursion)"
				@ %NPLA1Forms, "class template %GParameterValueMatcher"
				@ %NPLA1Internals);
				// This also reduces all %ThrowInvalidTokenError checks.
			/ "supported code literals as symbols" $=
			(
				+ "empty identifier support" @ "function %ExtractSigil"
					@ %NPLInternals;
				/ %NPLA1 $=
				(
					/ "allowed binding empty symbol" @ "functions \
						%BindParameter, BindParameterWellFormed, BindSymbol)",
					(
					- ("empty token check", "extended literal check")
						@ "function %EvaluateLeafToken";
					/ @ "functions %(ParseLeaf, ParseLeafWithSourceInformation)"
						$=
					(
						+ "unsupported literal check for symbols",
						/ "skipped the immediate literal evaluation for code \
							literals" 
					)
					)
				),
				- "%IsNPLASymbol check" @ "symbol resolution accesses"
					$effective @ ("function %Forms::Undefine" @ %NPLA1Forms,
					"native implementation" @ "combiners ( \
					'$resolve-identifier', '$move-resolved!', 'bound?', \
					'$binds1?')" @ "function %LoadGroundContext" @ %Dependency),
				/ "allwed empty symbol for recursive checks" @ "functions \
					%Forms::(DefineWithRecursion, SetWithRecursion)"
					@ %NPLA1Forms
			),
			- $revert(b917) "function %ThrowInvalidTokenError" @ %NPLA1
			),
			* "missing %RelayCurrent overloads with %any_ops::trivial_swap_t \
				parameter" @ '!NPL_Impl_NPLA1_Enable_InlineDirect \
				&& !NPL_Impl_NPLA1_Enable_TCO' @ %NPLA1Internals $since b926,
				// Calls to %TailCall::RelayNextGuardedProbe with a \
					%Contination argument would be fail without these overloads.
			/ %NPLA $=
			(
				- $lib "assertion" @ "function %CategorizeBasicLexeme"
					// This is already covered by %CheckLiteral.
				/ "escaped identifier" @ "constructos %BadIdentifier"
					// This was not a bug when the identifier are limited, \
						even sometimes it would not be prettily printed \
						(e.g. '\v').
			),
			/ %Lexical $=
			(
				/ "function %IsGraphicalDelimiter" => "%IsSimpleDelimiter",
				/ "function %IsDelimiter" $=
				(
					/ "accepted whitespaces instead of characters classified \
						by %std::isgraph" ^ "%ystdex::isspace"
						$dep_from ("%BadIdentifier" @ %NPLA);
						// As a side effect, now '\a' and '\b' can be inside \
							an identifier, so it relies some special treatment \
							in the exception message.
					* $comp "non-explicit locale-specific behavior"
						$mismatch(Documentation.LanguageConvention)
						$orig (@ %Documentation.CommonRules $since b512)
				)
			),
			/ %NPLA1Internals $dep_to "NPLA1 common math support" $=
			(
				+ "function %MoveUnary",
				+ "transforamtion traits %(ExtType, NExtType, MulExtType; \
					MakeExtType, MakeNExtType, MakeMulExtType)",
				+ "function template %DoNumLeaf",
				(
				+ "enum %NumCode";
				+ "4 functions %MapTypeIdToNumCode",
				+ "function template %DoNumLeafHinted",
				),
				(
				+ "function %ReportUnsupportedNumber";
				+ "functor %ReportMismatch";
				+ "functor %DynNumCast" $dep_from "%NumCode"
				),
				(
				+ "functor %AssertMismatch";
				+ "functor %Cast"
				)
			),
			+ "inline namespace %Math" @ "namespace %A1" @ %NPLA1 $=
			(
				+ $dev "2 static assertions to ensure number host types \
					in-place storable" @ 'NPL_NPLA1_EnsureInPlaceNativeNumbers',
				+ "tags %(NumberLeaf, NumberNode) with explicit \
					%NPL::TypedValueAccessor specializations",
				+ "functions %(IsExactValue, IsInexactValue, IsFixnumValue, \
					IsFlonumValue, IsNumberValue)",
				+ "functions %(IsZero, Add1, Sub1, Plus, Minus, Multiplies)"
					^ $dep_from "NPLA1 common math support"
			),
			* "wrong result" @ "function %IsSymbol" @ %NPLA1Forms $since b785
				// This was at least buggy for empty strings regardless of \
					concrete lexical rules of the identifiers.
		)
	),
	/ DLI "simplified %String assignment" @ 'YReader_Impl_TestNPL_NoStdout'
		@ %YReader.ShlExplorer $dep_from "standard string conversion",
	* $re_add(b603) DLI "redundant '/'" @ "inclusion path for \
		%Toolchain.options.mk" @ "makefiles" $effective
),

b928
(
	/ %YBase.YStandardEx $=
	(
		/ "function templates %(to_string, to_wstring)" @ %String $=
		(
			// The following changes are also more efficient in general.
			/ "moved template parameter %_tString to the 1st place",
				// It is more convenient to specify explicitly.
			/ "deduced stream by the string" @ "overload#3"
				~ "default arugment %std::basic_ostringstream";
			+ "3 overloads with an allocator argument"
		),
		* "wrong %YB_STATELESS used" @ %TypeInfo $=
		(
			* $revert(b895) @ "class %type_id_info",
			* $revert(b879) @ "function template %type_id"
		),
		+ $dev $lib "#pragma directive" @ 'YB_IMPL_GNUCPP || YB_IMPL_CLANGCPP'
			@ "function template %are_equal" @ "struct %equal" @ %Examiner,
			// To elimiante G++ and Clang++ warning: [-Wfloat-equal].
		/ %Functional $=
		(
			+ DD '\ingroup functors' @ "Doxygen comment" @ "class templates \
				%(composed, composed_n, generalized_composed, one_shot, \
				expanded_caller, expanded_function)",
			+ "3 function templates %update_thunk with allocator \
				or %any_ops::trivial_swap_t parameters"
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %YCommon $=
			(
				/ "member function %CommandArguments::ToVector" @ !'YCL_Win32'
					^ "allocator specified on construction"
					$dep_from "%constructor %CommandArguments",
				* $dev $lib "wrong pragmas" @ 'YB_IMPL_CLANGPP' $since b689
					$= (/ $impl 'pragma GCC' -> 'pragma clang')
					// Although not complained, "-Wweak-vtables" should be \
						indeed Clang++ specific.
			),
			/ "function template %ComposeMessageWithSignature" @ %Debug
				^ "ADL %to_std_string" ~ "ADL %to_string with %ystdex overloads"
		),
		/ %YSLib.Core.YObject $=
		(
			+ 'using ystdex::type_id;';
			(
			+ "function template %IsType with 'const type_info&' parameter";
			/ DLDI "simplified" ^ "%IsType" $effective @ ("member function \
				template %CreateHolder" @ "class template \
				%AllocatedHolderOperations", "member function %Equal"
				@ "class templates %(PolymorphicValueHolder, \
				PolymorphicAllocatorHolder)"),
			+ "function template %IsTyped with 'const ValueObject&' parameter"
			),
			/ DLDI "simplified 'ystdex::type_id'" -> 'type_id',
				// As %type_info.
			+ DLDI "header inclusions %YBase.YStandardEx.(Exception, \
				TypeOperation, Memory, Utility, Ref)",
				// Use public headers with public dependencies.
			+ "2 function templates %TryAccessValue",
			/ @ "constructors %ValueObject" $=
			(
				+ $re_add(b850) $dev $lib "static assertion of holder \
					instances to ensure efficient allocation" @ "constructor \
					%ValueObject with pointer parameter",
				+ 'ynothrow' @ "constructos with parameter of pointer, \
					%OwnershipTag or %unique_ptr instance"
			)
		),
		/ %NPL $=
		(
			/ DLDI %SContext $=
			(
				/ "%IsRegular" ^ "%(IsLeaf, IsList)",
				/ "%IsTypedRegular" ^ "%IsLeaf",
				+ 'using YSLib::type_id'
					$dep_from ("%YSLib::type_id" @ %YSLib.Core.YObject),
				+ 'using YSLib::type_index',
				+ 'using YSLib::type_info',
				(
				+ 'using YSLib::IsTyped'
					$dep_from ("%IsTyped" @ %YSLib.Core.YObject);
				/ DLDI "simplified function %IsTyped",
				),
				+ $dev $lib 'YB_ATTR(always_inline)' @ "function IsTyped"
			),
			+ DD '\ingroup functors' @ "Doxygen comment"
				@ ("functor %ReferenceTermOp" @ %NPLA,
				"functor %PassesCombiner" @ %NPLA1),
			/ %NPLA $=
			(
				(
				+ "functions %(ThrowTypeErrorForInvalidType, \
					ThrowListTypeErrorForInvalidType) with 'const char*' \
					parameter";
				/ DLDI "simplified functions %(ThrowTypeErrorForInvalidType, \
					ThrowListTypeErrorForInvalidType)#2"
				),
				(
				+ "class template %TypedValueAccessor";
				+ "function template %AccessTypedValue",
				),
				(
				+ "class template %ResolvedArg";
				+ "2 class template specializations %TypedValueAccessor for \
					%ResolvedArg" $dep_from "%TypedValueAccessor"
				),
				(
				+ 'using YSLib::TryAccessValue;'
					$dep_from ("%TryAccessValue" @ %YSLib.Core.YObject);
				/ DLDI "simplified %TryAccessLeaf" ^ "%TryAccessValue"
				)
			),
			/ %NPLA1Forms $=
			(
				/ "supported customization" @ "all call sites of typed value \
					accesses" ^ (($dep_from "%NPL::AccessTypedValue"
					~ "%NPL::ResolveRegular") @ %NPLA) $effective
					@ "%Forms::(CallUnaryAs, CallBinaryAs, CallBinaryFold)",
					// Now the results can be xvalues. This is only done here, \
						since other sites (in %Dependency) only uses the \
						regular value.
				* "several subterms unexpected skipped" @ "friend function \
					%operator==" @ "class %Encapsulation"
					$orig (@ "%Forms::MakeEncapsulationType" $since b904),
				/ DLDI "simplified functions %Forms::(Wrap, WrapRef, WrapOnce, \
					WrapOnceRef)"
			),
			/ $dev $lib "all 'ystdex::type_info'" -> 'type_info'
				$dep_from ('using YSLib::type_info' @ %SContext)
				$effective @ %(NPLA, NPLA1, NPLA1Forms),
			/ $dev $lib "all 'ystdex::type_id'" -> 'type_id'
				$dep_from ('using YSLib::type_id' @ %SContext)
				$effective @ %(NPLA, NPLA1, NPLA1Forms, NPLA1Internals),
			/ DLDI "simplified comparison to 'type_info' values" ^ ("%IsTyped"
				$dep_from 'using YSLib::IsTyped;' @ %SContext)
				~ ('==', '!=', 'type_id')
				$effective @ %(NPLA, NPLA1, NPLA1Internals),
			/ DLDI "all 'type_info' parameter name 'tp'" => 'ti'
				$effective @ %(NPLA, NPLA1, NPLA1Internals),
				// The name 'tp' is better fit for other arguments like tuples \
					and touch positions.
			/ DLDI "simplified" @ %NPLA1
				$dep_from ('using YSLib::type_index;' @ %SContext),
			/ %Dependency $=
			(
				/ DLI "simplified native implementation" @ (
					"applicatives ('first-null?', 'nonfoldable?')"
					@ "function %LoadGroundContext",
					"applicatives ('string<-', 'string->symbol')"
					@ "function %LoadModule_std_strings")
					^ $dep_from ("%ResolvedArg" @ %NPLA),
				/ DLDI "simplified native implementation" @ "applicatives \
					('move!', 'transfer!')" @ "function %LoadGroundContext"
					^ "%ystdex::bind" ~ "%std::(bind, placeholders::_1)",
				* "wrong result" @ ("applicative %newline";
					$comp "alternative derivation" @ "applicative %puts")
					@ "function %LoadModule_std_io" $since b925
					$= (/ $impl ^ "%ReduceReturnUnspecified")
					// This is different to b922 where the similar change is \
						not a bug then. This is buggy because 'newline' \
						returns '#inert' and it is required by \
						%NPL.Documentation since b858 to be the same here.
			),
			/ %NPLA1 $=
			(
				/ @ "function %DefaultEvaluateLeaf" $=
				(
					* "wrong value upper bound for integers" $since b880,
						// For 32-bit integers, 2147483647 should be \
							supported, but it typically could not reach \
							2147483600, as it would first add '0' as a number \
							having the integer value 48 (in ASCII-compatible \
							execution codesets) and then overflowed with \
							undefined behavior.
					/ "adjusted some exception messages"
				),
				/ DLI "internal trampoline action" ^ "allocator and \
					%any_ops::trivial_swap" $dep_from
					%YBase.YStandardEx.Functional,
				/ DLI ("guard creation" @ "constructor %ContextState#1",
					"handler creation" @ "function %SetupDefaultInterpretation")
					^ "allocator",

			)
		)
	),
	/ %Tools.SHBuild.Main $=
	(
		/ DLI "enabled memory pool on resources except the command arguments \
			vector" ^ "%ystdex::pmr::pool_resource" $dep_from %YCLib.YCommon,
		- DLDI "redundant ','" @ "the end of option table initializer",
		/ DLDI "simplified" ^ "%ystdex::bind1" ~ "%(std::bind, _1)",
		/ @ "help message" $=
		(
			* "missing brackets around the optional 'ARGS...' after '--'"
				@ "usage with 'SRCPATH'" $since b797,
			+ "more concrete message for 'ARGS' parsing",
			+ "description of the exit status",
			(
			/ "clarified accepted settings as environment variables";
			- "environment variable syntax"
				// This is external and shell-dependent.
			)
		),
		* "mode name" @ "%Informative message before construction of the build"
			@ "log messages" $since b905,
		+ DLI 'YB_UNLIKELY' @ "'--' handling",
		/ $re_add(b926) DLDI "all 'yconstexpr const'" @ "namespace scope"
			-> 'yconstexpr_inline const',
		/ DLI "function %RunNPLFromStream" ^ "any_ops::trivial_swap_t",
		* DLDI "PMR container" @ "option table" $since b861,
			// This is safe only when the allocator lives longer. This is the \
				current case, so it is only a bug of the implementation. \
				Although a global allocator can be added for the current \
				program with only 1 translation unit (so the desctructor calls \
				of the global objects can have a controlled order), better \
				avoid it.
		* DLDI "missing conditional inclusion with %SHBuild_UseBacktrace"
			@ "guard declaration for backtrace cleanup" $since b925
			// This had no effect because %SHBuild_UseBacktrace is true by \
				default.
	),
	/ %YReader $=
	(
		/ %Shells $=
		(
			/ "updated %G_APP_VER" @ %Shells !^ 'PreAlpha',
			+ "function %TestNPL"
		),
		/ @ "constructor %ShlExplorer" @ %ShlExplorer $=
		(
			/ "strings for tests" @ "test menu subitems",
				// The intents are now clearer.
			+ "NPL test entry for test subitem 2"
				^ $dep_from ("%TestNPL" @ %Shells)
		)
	)
),

b927
(
	+ "static assertion to test %ystdex::is_bitwise_swappable with \
		appropriate %ystdex::(lref, observer_ptr) instances" @ %Test.YBase,
	/ DD %Documentation $=
	(
		* "URL for release version" @ %ProjectRules $since b897,
		/ "updated issue tracking information" @ %Meta
	),
	/ %YBase.YStandardEx $=
	(
		* DD "'\ingroup' command" @ "Doxygen comment"
			@ ("trait %mapped_set_traits" @ %Set $since b845,
			"trait %path_traits" @ %Path $since b852)
			$= (/ ^ 'customization_points'),
		/ DLDI "type %(iterator, const_iterator)" @ "class template %list"
			@ %List ^ 'yimpl',
		+ $re_add(b926) $lib "class template specializations \
			%is_bitwise_swappable for" @ ("%details::(list_iterator, \
			list_const_iterator)" @ %List, "%details::(tree_iterator, \
			tree_const_iterator)" @ %Tree, "%path" @ %Path, "%(composed, \
			composed_n, generalized_composed)" @ %Functional)
			@ "namespace %ystdex",
		/ @ "traits %(conjunction, disjunction, negation)" @ %IntegralConstant
			$=
		(
			* "nonconforming implementation" $since b723
				$= (/ "alias templates" -> "class templates with base classes"),
			+ DD '\ingroup traits' @ "Doxygen comment"
		),
		* "wrong bases" @ "class template specialization %is_bitwise_swappable \
			for %transformed_iterator" @ %Iteartor $since b926,
			// This would wrongly instantiate the result with \
				ambiguity %value members sometimes.
		/ %AnyIterator $=
		(
			/ DLI "simplified header inclusion %Iterator"
				-> "%IteratorOperation"
			- DLI "redundant static assertions"
				@ "constructor template %any_forward_iterator",
				// This is redandant because it will be also checked in the \
					protected base constructo.
			(
			* "wrong base object initialization" @ "constructor \
				%any_bidirectional_iterator" $since b686,
			+ $re_add(b926) "template type parameter with default argument to \
				specify local storage" @ "class templates \
				%any_ops::(iterator_handler; input_iterator_handler; \
				forward_iterator_handler; bidirectional_iterator_handler)";
				// As %any_ops::wrap_handler.
			+ "constructor template with %trivial_swap_t parameter"
				@ "class templates %(any_input_iterator, any_forward_iterator, \
				any_bidirectional_iterator)" $dep_from %Iteartor
				$dep_to "any iterator trivial swap support"
			)
		),
		/ %Any $=
		(
			+ "2 function templates %make_any with %any_ops::trivial_swap_t \
				parameter",
			/ @ "class %any" $=
			(
				* "static assertion failure in handlers caused by wrong local \
					argument 'true_' used instead of \
					%any_ops::is_in_place_storable instances" @ "constructors \
					with %trivial_swap_t parameter for holder handler"
					$since b926,
				/ DLDI "simplified %(allocated_value_handler_t, \
					allocated_holder_handler_t) and ctor-initializers of some \
					constructors"
			),
			/ @ "namespace %any_ops" $=
			(
				* "spelling error" @ "assertion message"
					@ "static member function %init with %unique_ptr instance"
					@ "class template %holder_handler" $since b926,
				/ @ "union %any_trivial_local_data"
					$dep_from "any iterator trivial swap support" $=
				(
					// See $2021-10 @ %Documentation::Workflow.
					+ 'long long ll;',
					+ 'unsigned long long ull;',
					+ 'double d;',
					+ 'long double ld;'
				)
			),
			/ "default argument" @ "traits %(any_ops::is_in_place_storable, \
				any::(opt_in_place_t, allocated_value_handler_t, \
				allocated_holder_handler_t))" $since b926
				// Although this should usually be beta-eta-equivalent beteewn \
					the metafunction applications of \
					%ystdex::is_bitwise_swappable with or without '::type' \
					(since they are lazy), it should be better with the nest \
					'type' for better conceptual treatment.
				$= (/ $impl "default argument" ^ "%_t"),
		),
		* "missing wrapping checks when the alignment is greater than 1"
			@ 'YB_Impl_aligned_new' @ "member function \
			%pmr::new_delete_resource::do_allocate" @ %MemoryResource
			$since b843
			// This also eliminate G++ warning: [-Walloc-size-larger-than=] \
				when this function is effectively inlined (by LTO, etc.).
	),
	/ %YFramework $=
	(
		/ @ "class %Terminal" %YCLib.Host $=
		(
			* "'tput setaf' command construction" $since b921,
				// Also to eliminate Clang++ 12 warning: \
					[-Wstring-plus-int].
			* DLI "redundant private field" @ "ISO 6429 terminal data"
				$since b921
				// Also to eliminate Clang++ 12 warning: \
					[-Wunused-private-field].
		),
		/ %YSLib $=
		(
			/ %Core.YObject $=
			(
				+ 'using ystdex::make_any;',
				+ "6 constructor templates with %any_ops::trivial_swap_t \
					parameter" @ "class %ValueObject",
				+ "9 function templates %EmplaceCallResult with \
					%any_ops::trivial_swap_t parameter",
				+ DLI 'YB_PURE' @ "member function %ValueObject::type"
			),
			* $comp "potential ill-formed constructions" @ "member functions \
				%MUIContainer::(begin, end)" @ %UI.YUIContainer $since b926,
				$dep_from "any iterator trivial swap support"
				// See $2021-10 @ %Documentation::Workflow.
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ 'using YSLib::make_any;' $dep_from %YSLib.Core.YObject,
				+ "function template %EmplaceLeaf with \
					%any_ops::trivial_swap_t parameter"
					$dep_from ("class %ValueObject" @ %YFramework.YSLib.Core),
				* DD "missing '//@{' and '//@}' around the group members \
					for '\ingroup BindingAccess'" @ "Doxygen comments"
					$since b914,
				+ "3 functions %ToBindingsAllocator"
			),
			/ %NPLA1 $=
			(
				/ @ "namespace %A1" $=
				(
					+ "2 constructor template %FormContextHandler with \
						%any_ops::trivial_swap_t parameter",
					(
					+ "metafunction %WrapContextHandlerTarget";
					/ DLDI "simplified function templates %WrapContextHandler",
					+ "6 function template %WarpContextHandler with \
						%any_ops::trivial_swap_t parameter"
						$dep_to "trivially swap wrapped context handler"
					),
					/ DLI ^ "allocator for %ContextHandler initialization"
						@ "function template %RegisterHandler"
						^ $dep_from ("%ToBindingsAllocator" @ %NPLA)
				),
				+ $re_add(b926) $lib "class template specializations \
					%is_bitwise_swappable for \
					%NPL::A1::(WrappedContextHandler, FormContextHandler)"
					@ "namespace %ystdex",
			),
			/ %NPLA1Forms $=
			(
				/ @ "namespace %Forms" $=
				(
					/ ("unary constructor" -> "constructor template with \
						parameter pack") @ "classes %(UnaryExpansion, \
						UnaryAsExpansion, BinaryExpansion, BinaryAsExpansion)",
					/ ("function parameter" -> "parameter pack to initialize \
						the function") @ "function templates %(RegisterUnary, \
						RegisterBinary)",
					+ "(function, function template) \
						%EmplaceCallResultOrReturn with \
						%any_ops::trivial_swap_t parameter" ^ $dep_from
						("%EmplaceCallResult" @ %YSLib.Core.YObject),
					/ @ "function %(Let, LetRef, LetRec, LetRecRef, \
						LetAsterisk, LetAsteriskRef)" $=
					(
						* "body not evaluated properly for empty lvalue \
							binding lists due to missing cleanup of %Value \
							before the call" $since b919;
							// This would probably cause wrong results.
						+ $lib $impl "assertion to ensure the empty term layout"
					)
				),
				/ $re_add(b926) $lib "class template specializations \
					%is_bitwise_swappable for classes %(EncapsulationBase, \
					Encapsulation, Encapsulate, EncapsulateValue, \
					Encapsulated, Decapsulate, UnaryExpansion, \
					UnaryAsExpansion, BinaryExpansion, BinaryAsExpansion)"
					@ "namespace %ystdex"
			),
			/ $re_add(b926) DLI "optimized member function templates \
				%(RelayNextGuarded, RelayNextGuardedLifted, \
				RelayNextGuardedProbe)" @ "classes %(NonTailCall, TailCall)"
				@ %NPLA1Internals ^ "%any_ops::trivial_swap",
			/ DLI %Dependency $=
			(
				/ $re_add(b926) "registration calls of all context handler \
					not specialized for %is_bitwise_swappable"
					^ "any_ops::trivial_swap_t" $dep_from
					("%FormContextHandler constructors" @ %NPLA1,
					"trivially swap wrapped context handler",
					"%Forms::(RegisterUnary, RegisterBinary)" @ %NPLA1Forms),
				/ "native derivation" @ "applicative 'promise?'"
					@ "function %LoadModule_std_promises"
					^ ('YB_LAMBDA_ANNOTATE', 'ynothrow', 'pure'),
			),
			/ $re_ex(b869, b871) DLDI "renamed internal resolved 'TermNode&' \
				variable names" ^ 'nd' ~ 'tm' $effective
				@ %("%LoadModule_std_promises" @ Dependency,
				"%Forms::Not" @ %NPLA1Forms),
			/ $re_add(b869) DLDI "renamed internal 'TermNode&' parameter names \
				for %RegisterUnary" $effective @ ("functions \
				%(LoadGroundContext, LoadModule_std_promises)" @ %Dependency)
		)
	)
),

b926
(
	/ %YBase.YStandardEx $=
	(
		+ "unary trait %is_bitwise_swappable as customization point \
			with specializations for reference types and \
			%std::(reference_wrapper, unique_ptr, shared_ptr, weak_ptr)"
			@ %Placement,
		* DD "'\brief' command" @ "Doxygen comment"
			@ "class template specialization %numeric_limits for \
			%ystdex::fixed_point" @ %Rational $since b540,
		/ $re_add(b831) DLD "all 'yconstexpr const'" @ "namespace scope"
			-> 'yconstexpr_inline const'
			$effective @ %(Any, Iterator, Placement, PseudoMutex),
		/ %Any $=
		(
			/ @ "namespace %any_ops" $=
			(
				/ "metafunction %is_handler_constructible_t"
					=> "%is_handler_constructible",
					// This is more appropriate because it is actually just a \
						trait.
				/ DLDI "renamed some metafunctions to remove '_t' postfix",
					// Ditto.
				* "missing qualified 'ystdex::' before 'make_unique'"
					@ "memory thunk initialization"
					$orig (@ "class %value_handler" $since b848),
					// This might lead to ambiguous overloads via ADL.
				+ ("tag %trivial_swap_t"; "constexpr object %trivial_swap"),
				+ DD '\ingroup tags' @ "Doxygen comment"
					@ ("tag %use_holder_t", "object %use_holder"),
				/ "unary type trait %is_in_place_storable" $=
				(
					+ "2nd paramter with default argument"
						^ $dep_from ("%is_bitwise_swappable" @ %Placement)
						$dep_from ("bitwise swappable specializations");
						// See $2021-08 @ %Documentation::Workflow.
					* $comp "wrong local allocation for types not trivially \
						swappable by default" $since b848 
				),
				/ "type name non-type parameter" @ "class template %value_handler"
					-> "template type parameter",
					// This allows more consistent detection by metaprogramming.
				+ "template type parameter with default argument to specify \
					local storage" @ "transformation trait %wrap_handler",
				/ @ "class template %holder_handler" $=
				(
					(
					+ "template type parameter with default argument to detect \
						local storage";
					/ "passed local storage to %value_handler"
					),
					/ @ "static member function %init with %unique_ptr instance"
						$=
					(
						+ "assertion to ensure nonnull pointer argument value",
						+ "assertion to prevent non-dervied object being saved \
							locally" 
					)
				)
			),
			/ @ "class %any" $=
			(
				* DLI "wrong 'YB_ATTR_returns_nonnull' for returning default \
					manager" $since b922,
					// Also to eliminate Clang++ warning: [-Wnonnull].
				/ DLDI "simplified internal metafunctions"
					^ $dep_from "%any_ops::is_handler_constructible",
				* $re_ex(b851) "missing exclusion of non-allocators"
					@ "SFINAE-friendly constructor overloads with \
					%use_holder_t and allocator parameters" $since b851
					$dep_to "any constructor SFINAE fix"
					$= (/ $impl ^ "%is_allocator"),
					// This should have been SFINAE-friendly, but actually not \
						always, in-place construction of %NPL::TermReference \
						with %TermTags value as its 1st argument would cause \
						ill-formed instantiation.
				* $comp "non-relocated held value corruptied by swapping or \
					moving" $since b352
					$dep_from "%any_ops::is_in_place_storable",
					// See $2021-08 @ %Documentation::Workflow.
				+ "support of %any_ops::trivial_swap_t"
					@ ("alias template %opt_in_place_t"; "constructors",
					"function templates %emplace"; "alias templates \
					%(allocated_value_handler_t, allocated_holder_handler_t)")
					$dep_from "%any_ops::(trivial_swap, value_handler, \
					holder_handler)"
			),
		),
		/ %Function $=
		(
			/ DLI "function template %function_not_empty#5"
				^ 'YB_STATELESS' ~ 'YB_PURE',
			+ "constructor template overloads supporting \
				%any_ops::trivial_swap_t" @ "class templates %function_base"
				$dep_from ("%any constructors" @ %Any)
		),
		/ "constructor templates" @ "class template specialization \
			%expanded_function" @ %Functional $=
		(
			+ DLDI 'inline',
			/ "constructor template with '_fCallable' paremter"
				^ '_fCallable&&' ~ '_fCallable',
				// Different to %function_base, keeping '&&' is more \
					efficient. This is also more consistent to other overloads.
			+ "overloads supporting %any_ops::trivial_swap_t"
				$dep_from ("%function_base constructors" @ %Function)
		)
	),
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ %YEvent $=
			(
				+ 'namespace any_ops = ystdex::any_ops;';
				/ "constructor templates"
					@ "class template specialization %GHEvent" $=
				(
					+ "overloads supporting %any_ops::trivial_swap_t"
						$dep_from ("%expanded_function constructors"
						@ %YBase.YStandardEx.Functional)
				)
			)
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ DLDI "simplified exception throwing"
					@ "overloads %ResolveEnvironment",
				/ @ "class %EnvironmentReference" $=
				(
					+ "friend function %swap";
					* "wrong reference count" @ "(copy, move) operator="
						@ 'NPL_NPLA_CheckEnvironmentReferenceCount' $since b856
				),
				/ "%SetupFront" @ "class %ContextNode" $=
				(
					(
					+ "overload with %Reducer parameter",
					+ "2 overloads with %any_ops::trivial_swap_t \
						and %Reducer parameter" $dep_from %YSLib.Core.GHEvent
						$dep_to "skipping reducer and trivial swapping hint";
						// This is necessary since %Reducer has no overloads \
							of allocator copy/move constructors with the hint.
					/ DLI "simplified function template"
						// This may be less efficient without 'YB_FLATTEN'.
					),
					+ 'YB_FLATTEN' @ "function template"
				),
				/ "supported parameter pack"
					@ "function template %RelaySwitched"
					$dep_from "skipping reducer and trivial swapping hint"
			),
			/ %NPLA1Internals $=
			(
				+ DLI 'final' @ "class %RefContextHandler",
				+ "function template %ReduceSubsequentPinned",
					// This is old %ReduceSubsequent. %ReduceSubsequentPinned \
						is to be changed to imply %any_ops::trivial_swap \
						explictly, see below.
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified function %CheckEnvironmentFormal"
					!^ 'YB_UNLIKELY',
				/ DLI "optimized member function %FormContextHandler::operator()"
					^ "%any_ops::trivial_swap" ~ "%NPL::ToReducer",
				/ @ "function %DefaultEvaluateLeaf" $=
				(
					- "'#n' and '#null' handling",
						// This is undocumented in %Documentation.NPL. If \
							needed, it can be introduced again in the extended \
							literal handlers in the leaf passes.
					/ "required the input identifier not empty"
				),
				(
				/ @ "functions %(ParseLeaf, ParseLeafWithSourceInformation)" $=
				(
					+ "'TermNode&' parameter",
					- "allocator parameter",
					/ "required the input identifier not empty"
				);
				/ $forced DLDI "constructor#1"
				),
				+ "constructor templates overloads supporting \
					%any_ops::trivial_swap_t" @ "class %Continuation"
					$dep_from ("%GHEvent constructors" @ %YSLib.Core.YObject)
			),
			/ %NPLA1Forms $=
			(
				/ DLI "member function %Decapsulate::operator()"
					^ "%ValueObject::assign" ~ "%TermNode::SetValue",
				/ @ "namespace %Forms" $=
				(
					/ DLDI "smplified functions %(ProvideLet, \
						Provide)" ^ "%TermNode::SetValue"
						~ "%ValueObject::assign",
					+ $lib "reducer name" @ "function %AsEnvironment",
					/ DLDI "simplified combiner rvalue unwrapping"
						@ "functions %(Unwrap, Apply, ForwardFirst)",
					* $impl "captured %TermNode not satisfying trivially \
						swapping requirement used in %Reducer"
						@ 'NPL_Impl_NPLA1_Enable_Thunked'
						@ "Forms::(DefineWithNoRecursion, SetWithNoRecursion, \
						DefineWithRecursion, SetWithRecursion)"
						$since b868 $dep_to
							"violation of any trivially swappable requirement"
							// See $2021-08 @ %Documentation::Workflow.
						$= (/ $impl ^ ("%ReduceSubsequentPinned"
							~ "%ReduceSubsequent" @ %NPLA1Internals))
				)
			),
			/ $dev $design $dep_from ($forced "%GHEvent constructors"
				@ %YSLib.Core.YEvent) $dep_from ("%RelaySwitched" @ %NPLA) $=
			(
				// See $2021-08 @ %Documentation::Workflow. The performance \
					should be similar to the implementation without \
					'any_ops::is_in_place_storable' fix, although calls to \
					%A1::RelayCurrentOrDirect in %(NonTailCall, TailCall) are \
					not touched yet.
				/ $lib "optimized %RelaySwitched calls"
					^ "%any_ops::trivial_swap" $effective @ ("member function \
					%ContextNode::SaveExceptionHandler" @ %NPLA, "function \
					%RelayToLoadExternal" @ %Dependency,
					("static member function %ContextState::DefaultReduceOnce",
					'!NPL_Impl_NPLA1_Enable_TCO \
					&& NPL_Impl_NPLA1_Enable_Thunked'
					@ "function %ReduceCombinedBranch") @ %NPLA1,
					'NPL_Impl_NPLA1_Enable_Thunked'
					@ ("friend function %operator==" @ "class %Envasulation",
					"function %Forms::EqualTermValue") @ %NPLA1Forms,
					'NPL_Impl_NPLA1_Enable_Thunked' @ "member function \
					templates %(RelayNextGuardedLifted, RelayNextGuardedProbe)"
					@ "struct %NonTailCall" @ %NPLA1Internals),
				+ "function template overloads with \
					%any_ops::trivial_swap_t parameter" @ %NPLA1Internals $=
				(
					/ @ 'NPL_Impl_NPLA1_Enable_Thunked'
						$dep_from ("%Continuation" @ %NPLA1)
						$dep_to "optimization relaying for continuations" $=
					(
						+ "%RelayCurrent";
						+ "%RelayCurrentOrDirect"
					),
					(
					+ "3 %RelayCurrentNext overloads" $dep_from "%RelayCurrent";
					/ "function template %ReduceCurrentNext" ^ "parameter pack"
					),
					(
					+ "3 %RelayCurrentNextThunked overloads";
					/ "function template %ReduceCurrentNextThunked"
						^ "parameter pack"
					)
				),
				/ $lib "optimized %ToReducer calls" ^ "%any_ops::trivial_swap"
					$effective @ ("functions \
					%Forms::(Let, LetRef, LetAsterisk, LetAsteriskRef, LetRec, \
					LetRecRef, BindingsWithParentToEnvironment, \
					BindingsToEnvironment, ProvideLet, Provide)"
					@ %NPLA1Forms),
					// %ContextState::(RewriteTerm, RewriteTermGuarded) do not \
						need the change becuase %std::reference_wrapper is \
						specialized enough. Other enclosing calls (if any, \
						e.g. to %RelayCurrentNext) also do not need \
						optimization by %any_ops::trivial_swap after the change.
				/ $lib "optimized %ReduceCurrentNextThunked calls"
					^ "%any_ops::trivial_swap" $effective @
					("function %Forms::(AccR, FoldR1)" @ %NPLA1Forms)
					$dep_from ("%ReduceCurrentNextThunked" @ %NPLA1Internals),
				/ $lib "optimized %RelayCurrentNext calls"
					^ "%any_ops::trivial_swap" $effective @
					("member function %FormContextHandler::operator()",
					('!NPL_Impl_NPLA1_Enable_TCO \
					&& NPL_Impl_NPLA1_Enable_Thunked'
					@ "function %ReduceOrdered") @ %NPLA1, "function \
					%Forms::AsEnvironment" @ %NPLA1Forms,
					"member function templates %(RelayNextGuarded, \
					RelayNextGuardedProbe)" @ "struct %NonTailCall")
					$dep_from ("%RelayCurrentNext" @ %NPLA1Internals),
				/ $lib "optimized %ReduceCurrentNext calls"
					^ "%any_ops::trivial_swap" $effective
					@ (("function template %ReduceSubsequent",
					"function template %ReduceCallSubsequent"
					@ "class template %Combine") @ %NPLA1Internals, "functions \
					%Forms::(AccR, FoldR1, Map1)" @ %NPLA1Forms)
					$dep_from ("%ReduceCurrentNext" @ %NPLA1Internals,
					"violation of any trivially swappable requirement"),
				/ "optimized %Continuation construction"
					$dep_from ($forced "%Continuation" @ %NPLA1) $=
				(
					/ $lib ^ "%any_ops::trivial_swap" $effective
						@ ("member function %FormContextHandler::operator()"
						@ %NPLA1),
					/ $comp $dep_from "optimization relaying for continuations"
				)
			),
			/ $lib "added native implementation enabled by default"
				@ "all applicatives" @ "function %LoadModule_std_promises"
				@ %Dependency
				$= (/ $impl (^ $dep_from "%EnvironmentReference" @ %NPLA,
					"any constructor SFINAE fix",
					^ $dep_from "%ReduceCurrentNext" @ %NPLA1Internals,
					^ "%any_ops::trivial_swap" $dep_from %YSLib.Core.YEvent))
		)
	),
	+ $lib "class template specializations %is_bitwise_swappable for"
		(("%tagged_value" @ %Placement, "%boxed_value" @ Utility,
		"%function_base" @ %Function, "%(one_shot, expanded_function)"
		@ %Functional, "%fixed_point" @ %Rational, "%(any_input_iterator, \
		any_forward_iterator, any_bidirectional_iterator)" @ %AnyIterator,
		"%pointer_iterator" @ %Pointer, "%(pseudo_iterator, \
		transformed_iterator, tuple_iterator, indirect_input_iterator, \
		transposed_iterator, prototyped_iterator, subscriptive_iterator)"
		@ %Iterator, ("%(value_holder, pointer_holder, \
		details::memory_thunk) and %allocator_value_handler internal \
		classes" @ "namespace %any_ops", "%any") @ %Any,
		"%(details::allocator_delete_base; allocator_guard_delete, \
		allocator_delete)" @ %Allocator, "%(guard, state_guard)"
		@ %ScopeGuard, "%pmr::polymorphic_allocator" @ %MemoryResource)
		@ %YBase.YStandardEx, (("%YSLib::(ValueHolder, PolymorphicValueHolder, \
		AllocatorHolder, PolymorphicAllocatorHolder, PointerHolder, RefHolder)"
		@ %YObject, "%GHEvent" @ %YEvent) @ %YSLib.Core,
		("%NPL::EnvironmentSwitcher" @ %NPLA, "%NPL::A1::Continuation" @ %NPLA1)
		@ %NPLA) @ %YFramework) @ "namespace %ystdex" $dep_from
		("%is_bitwise_swappable" @ %YBase.YStandardEx.Placement) $dep_to
		"bitwise swappable specializations"
		// To warrant bitwise-swappable guarantees for existing types. For \
			%(lref, observer_ptr), the primary template of \
			%is_bitwise_swappable is enough.
	)
),

b925
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			+ "function %EnsureValueTags",
			/ %NPLA $=
			(
				/ "class %ContextNode::ReducerSequence" $=
				(
					/ $impl "simplified (copy, move) constructor"
						^ "%DefDeCopyMoveAssignment",
					- $comp "redundant assertion" @ "move constructor"
				),
				* ("%TermTags::Temporary from the reference tags not ignored";
					"tags other than %TermTags::Unique not preserved")
					@ "functions %(Collapse; LiftCollapsed, MoveCollapsed)"
					$since b857,
					// This was also inconsistent to %PrepareCollapse.
				* $re_add(b917) "missing setting tags"
					@ "function %LiftTermValueOrCopy" $since b872
			),
			/ %NPLA1 $=
			(
				/ @ "function %TraceBacktrace" $=
				(
					// See $2021-08 @ %Documentation::Workflow.
					(
					- "reducer sequence clearing";
					+ 'const' @ "1st parameter"
					),
					(
					/ "wrapped exception thrown before continuation traversing \
						in %YSLib::FilterException";
					+ 'ynothrow'
					)
				),
				/ DLI "optimized member function \
					%FormContextHandler::operator()" !^ "%Continuation the \
					front position of the coposited reducer",
				/ "failure" @ "functions %(ReduceCombinedBranch, \
					ReduceCombinedReferent)" $=
				(
					+ "extracted the identifier from the operand name"
						@ "exception message",
					* "assertion failure due to the existence of the operand \
						name" $since b918
						// The operand name makes the argument not a term of \
							regular list expected by the call to \
							%FetchArgumentN with the recent precondition \
							change. Now the operand name is removed before the \
							call.
				),
				* $revert(b788) DD $impl "unexpected modification"
					@ "'\since' command" @ "implementation unit" $since b788
			),
			* $comp "possible redundant %TermTags::Temporary from return value \
				conversion" @ "reducer functions and binding parameter \
				functions" @ %(NPLA1, NPLA1Forms) $since b857
				$dep_from ("%LiftSubtermsToReturn" @ %NPLA),
			* "missing clearing %TermTags::Temporary of the result from \
				possibly bound objects in referents" @ (("function \
				%LiftMovedOther" $since b876; $comp ("function \
				%MoveRValueToForward" $since b872, "function \
				%MoveRValueToReturn" $since b871, "function %LiftToReturn"
				$since b857)), ($comp "functions ((LiftSubtermsToReturn; \
				ReduceBranchToListValue), ReduceForLiftedResult)" $since b857
				$dep_from "%LiftToReturn", "function %LiftMoved" $since b873)
				@ %NPLA, ($comp ("functions %(First, FirstVal, SetFirst)"
				$since b859, "function %RestVal" $since b910, "functions \
				%(ListExtractFirst, Let, LetRef, LetAsterisk, LetAsteriskRef, \
				LetRec, LetRecRef, BindingsWithParentToEnvironment, \
				BindingsToEnvironment, ProvideLet)" $since b915, "function \
				%ListPushFront" $since b921) $dep_from ("%LiftMovedOther"
				@ %NPLA), $comp "function %ListAsterisk" $since b860 $dep_from
				("%LiftSubtermsToReturn" @ %NPLA), "functions %(Eval, EvalRef, \
				EvalString, EvalStringRef, RemoteEval, RemoteEval)" $since b860)
				@ "namespace %Forms" @ %NPLA1Forms)
				^ $impl $dep_from ("%EnsureValueTags" @ %SContext),
			/ DLDI "simplified functions %Forms::(Let, LetRef, LetAsterisk, \
				LetAsteriskRef, LetRec, LetRecRef, \
				BindingsWithParentToEnvironment, BindingsToEnvironment, \
				ProvideLet)" @ %NPLA1Forms,
			/ %Dependency $=
			(
				/ "applicative %force" @ "function %LoadModule_std_promises" $=
				(
					/ DLI "simplified " ^ '$lambda%' ~ '$let%',
					* "unexpectedly moved resolved referencing shared state of \
						rvalues" $since b872
				),
				/ @ "alternative derivations"
					@ "function %LoadModule_std_modules" $=
				(
					/ DLDI "reordered internal definitions"
						@ "applicative 'find-requirement-filename'",
					* "wrong '&' annotated on the variable"
						@ "applicative %require" $since b923
						// This wrongly makes the defined variable a temporary.
				),
				/ @ "function %LoadModule_std_io" $=
				(
					+ "applicatives %(newline, put)";
					+ DLI "alternative derivation" @ "applicative %puts"
						^ "%(put, newline)"
				),
				/ @ "function %LoadGroundContext" $=
				(
					// See $2021-08 @ %Documentation::Workflow.
					* "missing return value conversion for elements in rvalue \
						lists" @ "alternative derivation"
						@ "applicative %first" $since b859
						$= (/ $impl ^ 'idv' ~ 'id'),
					/ @ "alternative derivation" @ "applicative %collapse" $=
					(
						/ DLDI "simplified" !^ '$resolve-identifier',
						* "unique tag not correctly preserved for unique \
							references" $since b869
							$dep_to "collapse result fix"
					),
					* "unique reference tag unexpectedly changed in the \
						results for xvalue or reference to temporary elements \
						of lvalue lists" @ "alternative derivations"
						@ "applicatives (%first, 'first&')" $since b859
						$= (/ $impl ^ "%collapse"
							$dep_from "collapse result fix"),
					* $comp "wrong temporary tag preserved" @ ("native \
						implementations" @ ("applicative %collapse" $since b869,
						"applicative 'assign%!'" $orig (@ "applicative '<-%'"
						$since b857)), "alternative derivation"
						@ "applicative 'assign!'" $since b870,
						("applicative 'assign%!" $since b858; $comp
						"alternative derivation" @ "applicative 'set-first%!'")
						$dep_from ("%NPL::MoveCollapsed" @ %NPLA),
						"native implementation" @ "applicative 'set-first%!'"
						$since b857 $dep_from ("%NPL::LiftCollapsed" @ %NPLA)),
					* "possible wrong temporary preserved"
						@ ($comp "applicative %list" $since b857
						$dep_from ("%ReduceBranchToListValue" @ %NPLA),
						("operative '$move-resolved!" ^ $impl $dep_from
						("%EnsureValueTags" @ %SContext);
						$comp "alternative derivation" @ "applicative \
						'forward-first%'" $orig (@ "applicative \
						'forward-list-first%'")) $since b897,
						"native implementation" @ (("applicative 'move!'"
						$since b871, "applicative 'transfer!'" $since b872)
						^ $impl $dep_from ("%EnsureValueTags" @ %SContext),
						$comp ("applicatives (%eval, 'eval%', 'eval-string', \
						'eval-string%')" $since b860 $dep_from ("functions \
						%Forms::(Eval, EvalRef, EvalString, EvalStringRef)"
						@ %NPLA1Forms), "operatives ('$remote-eval', \
						'$remote-eval%')" $since b923 $dep_from ("functions \
						%Forms::(RemoteEval, RemoteEvalRef)" @ %NPLA1Forms),
						"applicatives (%first, 'list*', %firstv, 'set-first!')"
						$since b859 $dep_from ("functions %Forms::(First, \
						ListAsterisk, FirstVal, SetFirst)" @ %NPLA1Forms),
						("applicative 'list-extract-first'", "operatives \
						('$let', '$let%', '$let*', '$let*%', '$letrec', \
						'$letrec%', '$bindings/p->environment', \
						'$bindings->environment', '$provide/let!')") $since b915
						$dep_from ("functions %Forms::(ListExtractFirst, Let, \
						LetRef, LetAsterisk, LetAsteriskRef, LetRec, \
						LetRecRef, BindingsWithParentToEnvironment, \
						BindingsToEnvironment, ProvideLet)" @ %NPLA1Forms),
						"applicative %restv" $since b910 $dep_from ("function \
						%Forms::RestVal" @ %NPLA1Forms), "applicative \
						'list-push-front!'" $since b921 $dep_from ("function \
						%Forms::ListPushFront" @ %NPLA1Forms)))),
						// The wrong '$move-resolved!' only affects binding \
							with the '&' sigil and without the return value \
							conversion correction fixed in \
							%NPL::ReduceForLiftedResult.
				)
			)
		)
	),
	* "missing the guarded backtrace cleanup" @ "handler for NPLA1 exceptions"
		@ "commands %(RunNPL, RunNPLFile)" @ %Tools.SHBuild.Main $since b903
		// This may cause undefined behavior if there is no tracing \
			(controlled by %SHBuild_UseBacktrace) or any exception is thrown \
			before the tracing. See also $2021-08 @ %Documentation::Workflow.
),

b924
(
	/ %YBase.YStandardEx $=
	(
	`	* "wrong %std::char_traits specialization used for character types \
			other than %char" @ "function template %openmode_conv#2"
			@ %CStandardIO $since b923,
		/ %TypeInfo $=
		(
			+ 'ynothrow' @ "static function %make" @ "class %type_id_info";
			* "missing 'ynothrow" @ "function template %type_id" $since b683
				// As a replacement for 'typeid' on static types, it should be \
					have same results as an operand of 'noexcept'. Call sites \
					using it (e.g. %type function of holders in %Any) also \
					assume it non-throwing.
		)
	),
	/ %YFramework $=
	(
		/ DLDI @ %YSLib.Service.FileSystem ^ 'mode_t()' ~ '0',
			// To eliminate G++ warning: [-Wsign-conversion].
		/ %YCLib.FileIO $=
		(
			/ DD $revert_ex(b923) "descriptions on %omode_conv failure value";
				// This is not checkable since the failure value from \
					%omode_conv can be same to %OpenMode::Read (except a few \
					platforms like GNU/Hurd).
			* "wrong open flag check"
				@ "functions %uopen with %use_openmode_t parameter" $since b923
				// Due to the improper check, modes like %std::ios_base::in \
					would fail unexpectedly without even touching %errno.
		),
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				* "missing qualified 'A1::' before 'MakeForm'"
					@ "function template %MakeForm#2" $since b921,
				+ "function %CheckVariadicArity"
			),
			/ %NPLA1Forms $=
			(
				+ "classes %(EncapsulationBase; Encapsulation; Encapsulate, \
					EncapsulateValue, Encapsulated, Decapsulate)",
				/ @ "namespace %Forms" $=
				(
					/ "function %MakeEncapsulationType" $=
					(
						/ DLDI ^ $dep_from "%(Encapsulated, Encapsulate, \
							Decapsulate)";
						/ "encapsulation constructor" $=
						(
							* $comp "referent wrongly saved instead of the \
								reference value being forwarded" $since b834;
							* $comp $re_add(b913) "missing support of \
								irregular reprenstation for reference results"
								$since b858
						)
					),
					/ "parameter type 'TermNode&'" @ "function %Not"
						-> 'const TermNode&',
					/ DLI "checked term" @ "%operator()" @ "vau handler"
						^ "%Retain" ~ ("%IsBranchedList", 'throw'),
						// This is also more consistent to other context \
							handler implementations.
					(
					/ DLI "function %RetainN" -> "inline function";
					/ "functions %(Retain, RetainN)" >> "namespace %A1"
						@ %NPLA1
					),
					(
					* $comp "wrong argument for exception" @ "functions \
						%(ListAsterisk, ListAsteriskRef)" ^ $dep_from
						("%CheckVariadicArity" @ %NPLA1) $since b904,
						// The term shown in the exception message is \
							different to that in the derivations.
					/ "simplified exception thrown for insufficient subterms"
						@ "functions %(Vau, VauRef, Lambda, LambdaRef, WVau, \
						WVauRef, VauWithEnvironment, VauWithEnvironmentRef, \
						LambdaWithEnvironment, LambdaWithEnvironmentRef, \
						WVauWithEnvironment, WVauWithEnvironmentRef)"
						^ $dep_from ("%CheckVariadicArity" @ %NPLA1);
					/ DLDI "simplified variadic argument checks" ^ $dep_from
						("%CheckVariadicArity" @ %NPLA1) $effective
						@ "functions %(Let, LetRef, LetWithEnvironment, \
						LetWithEnvironmentRef, LetAsterisk, LetAsteriskRef, \
						LetRec, LetRecRef, BindingsWithParentToEnvironment, \
						ProvideLet, Provide, Import, ImportRef, When, Unless)"
					),
					- DLI 'YB_FLATTEN' @ "several internal implementations"
						@ "functions %(FoldR1, Map1, Apply, ListAsterisk, \
						ListAsteriskRef, Cons, ConsRef, SetRest, First, \
						FirstFwd, FirstVal)",
						// This is now a bit more efficient at least with \
							x86-64 G++ 11.1 on Linux.
					* $re_add(b910) "missing setup the next term"
						@ 'NPL_Impl_NPLA1_Enable_Thunk'
						@ "functions %(RemoteEval, RemoteEvalRef)" $since b923,
					* "environment prvalue wrongly moved after the check"
						@ "function %CheckEnvironment" $since b909
						$= (/ $impl ^ "%ystdex::as_const"),
					* $lib "environment wrongly copied for reference value to \
						temporaries" @ ("function %CheckEnvironment"
						$since b859, "function %CheckParent" $since b909)
						$= (/ $impl ^ "%LiftOther" ~ "%MoveRValueToReturn"),
					* "object in environment list wrongly moved after the \
						construction for nonmodifying contexts" @ "functions \
						%CheckParent and all constructor forms of combiner \
						with environment" $since b909
				)
			),
			/ %Dependency $=
			(
				/ DLDI "simplified function" ^ 'RegisterStrict'
					~ 'RegisterStrict<>'
					$effective @ "function %LoadModule_std_modules",
				/ DLDI "simplified functions" ^ ('RegisterUnary'
					~ 'RegisterUnary<>', 'RegisterBinary' ~ 'RegisterBinary<>')
					$effective
					@ "functions %(LoadGroundContext, LoadModule_std_strings)",
				/ @ "function %LoadGroundContext" $=
				(
					* "missing lifting parameter" @ "applicative %box"
						$since b858
					/ $lib "added native implementation enabled by default"
						@ "applicatives ('box', 'box%', 'box?', 'unbox')"
						$dep_from ("%(EncapsulateValue, Encapsulate, \
						Encapsulated, Decapsulate)" @ %NPLA1Forms),
					/ DLDI "simplified variadic argument checks for native \
						combiner definitions"
						^ $dep_from ("%CheckVariadicArity" @ %NPLA1),
					* "missing forwarding object parameter"
						@ "alternative derivation" @ "operatives \
						('$remote-eval', '$remote-eval%')" $since b923,
					* "ill-formed derivation"
						@ "applicative 'check-environment'" $since b909
						$= (/ $impl ^ '#inert' ~ '#ignore')
				),
				/ $forced DLDI "function %ReduceToLoadExternal"
					$dep_from ("%RetainN" @ %NPLA1Forms),
				/ @ "function %LoadModule_std_promises" $=
				(
					// See $2021-08 @ %Documentation::Workflow.
					* $revert_ex(b909) "wrong environment parameter"
						@ "operative $lazy/e" $since b909
						$= (/ $impl ^ $dep_from 'check-environment'
							~ 'check-parent' $dep_from
							("%Forms::CheckEnvironment" @ %NPLA1Forms));
					/ $operative 'lazy/e' => 'lazy/d',
					/ @ "applicative %force" $=
					(
						* "wrong lvalue-to-rvalue conversion in the forced \
							value" $since b857
							$= (/ $impl ^ '$let%' ~ '$let'),
						* "missing forwarding the result based on the value \
							category of the promise object" $since b857,
						* "missing handling of self-modification after the \
							evaluation for the result" $since b857
							$= (/ $impl ^ '$let%*'),
						* "redundant lvalue-to-rvalue conversion in saving \
							value" $since b857
							$= (/ $impl ^ 'assign%!' ~ 'assign!'),
							// This also means the lazy forms now preserve \
								reference values in the evaluation.
						* $re_add(b918) "unexpected internal argument copy"
							$since b856
					)
				),
				/ DLDI "all parameters for <parent> named 'e'" => 'p'
					// Similar to the rationale for '$lazy/d'.
			),
			+ "function templates %(IsTyped; IsTypedRegular)" @ %SContext,
			/ DLDI "simplified" ^ $dep_from ("%IsTyped" @ %SContext)
				$effective (("2 function template %TryAccessLeaf",
				"functions %(SXML::ConvertDocumentNode, PrepareCollapse, \
				ContextState::DefaultReduceOnce)") @ %NPLA,
				"functions %Forms::(FoldR1, Map1)" @ %NPLA1Forms,
				"constructor %TCOAction" @ %NPLA1Internals)
		)
	),
	/ $forced DLDI @ "%SHBuild-YSLib-common.txt" @ %Tools.Scripts
		$dep_from '$lazy/e' @ "function %LoadModule_std_promises"
		@ %YFramework.NPL.Dependency
),

b923
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ "functions %openmode_conv" @ %CStandardIO -> "function templates \
				with support of character type other than %char",
			* "missing removal of reference" @ "%value_type" @ "class template \
				%transformed_iterator" @ %Iterator $since b667,
				// This would break %std::indirectly_readable_traits and \
					%std::iter_value_t since ISO C++20.
		),
		/ @ 'YB_IMPL_MSCPP' @ %YDefinition $=
		(
			+ "%(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore) definitions";
			/ DLDI "simplified disabling warning C4646" ^ "%YB_Diag_Ignore"
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				(
				+ "function %oflag_extend_binary",
				+ "tag %use_openmode_t";
				+ "2 %uopen overloads with %use_openmode_t parameter",
				),
				/ @ "class template %basic_filebuf" $=
				(
					// See $2021-08 @ %Documentation::Workflow.
					/ DLI "enhanced function template %open#1"
						@ ('!__GLIBCXX__ && !_LIBCPP_VERSION') %FileIO
						^ $dep_from ("%openmode_conv"
						@ %YBase.YStandardEx.CStandardIO, "%::_wfdopen")
						~ "%::_fdopen",
					/ @ "function template %open#2" $=
					(
						* "wrong return value" @ '_LIBCPP_VERSION' $since b866,
						/ @ 'YB_IMPL_MSCPP' $=
						(
							* "wrong handling of filename encoding for \
								'const char*' parameter, %ios_nocreation and \
								possible TOCTTOU access for %ios_noreplace"
								$since b709
								$= (/ $impl ^ "%uopen" ~ "%std::_Fiopen");
							/ $comp DLDI !^ 'std::ios_base::_Openprot'
						)
					)
				),
				+ DLDI 'yimpl' @ "%(ios_nocreate, ios_noreplace)"
					@ '_LIBCPP_VERSION',
				- "function %omode_convb" $dep_all_from "removal of omode_convb"
			),
			- DLDI "unused exception parameter" @ %Host,
				// To eliminate Microsoft VC++ warning: C4101.
			/ $dev "disabled warning C5105 around inclusion of header \
				<Windows.h>" @ %NativeAPI
				^ $dep_from "%YB_Diag_Ignore" @ %YBase.Definition
		),
		/ $dev %'YCLib_(Win32)'.MinGW32 $=
		(
			/ $re_add(b852) "improved compatibility" @ 'YB_IMPL_MSCPP'
				@ "function %LoadProc",
			/ $re_ex(b852) "simplifed compatibility workaround"
				@ "alias %ModuleProc" ^ "%ystdex::remove_pointer_t"
				~ "%ystdex::remove_reference_t or explicit '__stdcall'",
			+ "static assertion to ensure %ModuleProc is a function type"
		),
		/ %NPL $=
		(
			/ %NPLA1Forms $=
			(
				/ $re_add(b617) DLDI "integer-literal" @ "functions"
					^ "unsigned-suffix 'U'",
					// To eliminate Microsoft VC++ warning: C4018.
				* "wrong '\return' command" @ "Doxygen comment"
					@ "functions %(EvalString, EvalStringRef)" $since b835,
				+ "functions %(RemoteEval, RemoteEvalRef)"
			),
			/ %Dependency $=
			(
				* DD "oudated descriptions" @ "Doxygen comments"
					@ ("function %LoadModule_std_promises" $since b907,
					"function %LoadStandardContext" @ $since b922),
				- DLI "all tabs of common intends" @ "NPLA1 literals",
					// This makes less overhead in parsing during the \
						initialization.
				(
				+ "operatives ('$remote-eval', '$remote-eval%')"
					@ "function %LoadGroundContext"
					^ $dep_from ("%(RemoteEval, RemoteEvalRef)" @ %NPLA1Forms);
				+ "function %LoadModule_std_modules"
					$= (+ "applicatives ('registered-requirement?', \
						'register-requirement!' 'unregister-requirement!', \
						'find-requirement-filename'; %require)");
				+ "call of %LoadModule_std_modules"
					@ "function %LoadStandardContext"
				)
			)
		),
		/ %YSLib $=
		(
			/ %Adaptor.YAdaptor $=
			(
				+ ('using platform::oflag_extend_binary',
					'using::platform::use_openmode_t') $dep_from
					"%(oflag_extend_binary, use_openmode_t)" @ %YCLib.FileIO,
				- $revert(b639) 'using platform::omode_convb'
					$dep_to "removal of omode_convb"
			),
			/ "function %OpenFile" @ %Service.File -> "function template",
		)
	),
	+ "option '/Zc:preprocessor'" @ "Microsoft VC++ projects"
		@ %(YBase, YFramework, YSTest, Tools.SHBuild),
	* "'_LIBCPP_VERSION' not checked before '__GLIBCXX__'"
		$effective @ %YFramework.YCLib.FileIO $since b866,
		// '__GLIBCXX__' may be defined with libstdc++ in some cases, e.g. \
			https://reviews.llvm.org/rL173164.
	* "file unexpectedly created with no permissions for invalid mode with \
		its file descriptor leaked" $effective @ ((('_LIBCPP_VERSION'
		$since b866, '__GLIBCXX__' $since b618) @ "function template %open#2"
		@ "class template %basic_filebuf" @ %YCLib.FileIO, "constructor#3"
		@ "class %UniqueLockedOutputFileStream" @ %YSLib.Service.File)
		^ $dep_from ("%uopen" @ %YCLib.IO), ("%CopyFile#(2, 4, 6)"
		@ %YSLib.Service.FileSystem, "applicative 'SHBuild_BuildGCH_existed_'"
		@ "function %LoadModule_SHBuild" @ %NPL.Dependency) ^ $dep_from
		("%OpenFile" @ %Service.File, "%use_openmode_t" @ %Adaptor.YAdaptor)
		@ %YSLib) @ %YFramework ~ "%omode_convb"
		$dep_to "removal of omode_convb"
),

b922
(
	/ $dev %YBase $=
	(
		/ $lib "suppressed Clang++ warning [-Wpointer-bool-conversion]"
			@ "macro %YB_ASSUME" @ %YDefinition,
		/ @ "class %any" @ %YStandardEx.Any $=
		(
			/ $lib $design $impl ^ "%has_value" ~ "manager converted to bool",
			/ "disabled warning '-Wmaybe-uninitialized' by pragma for G++ 4.4 \
				above" @ "moving the internal storage"
				// This is false positive. It would not occur with %debug \
					configurations or some old versions of G++.
		),
		/ %CAssert $=
		(
			/ $revert_ex(b739) $dev "pragma to disable warning \
				'-Wnonnull-compare' for G++ 6 above" >> %YDefinition;
				// Also to eliminate G++ 11.1 warning [-Wnonnull-compare] in \
					using 'YB_ASSUME' when %CAssert is not included.
			/ $lib $impl "simplified" @ 'defined(NDEBUG)' "macro %yconstraint"
		)
	),
	/ %YFramework $=
	(
		/ @ "class %Terminal" @ %YFramework.YCLib.Host $=
		(
			* DD "wrong description" @ "Doxygen comment" $since b921,
				// This was outdated as it was specific to some experimental \
					implementations never formally supported.
			/ @ "constructor" $=
			(
				/ DLI "aligned storage" @ "platform %Win32"
					^ "%ystdex::replace_storage_t" ~ 'reinterpret_cast',
				- "message on initialization failure"
			)
		),
		/ %NPL $=
		(
			/ %Dependency $=
			(
				(
				/ "combiners ('bound?', '$bind1?')"
					@ "functions %LoadModule_std_environments"
					>> "function %LoadGroundContext"
					$dep_to "simplified binding combiners",
				- "applicative 'value-of'" @ "function \
					%LoadModule_std_environments" $dep_from "applicative \
					'build-with-conf-opt'" @ "%SHBuild-YSLib-common.txt"
					$dep_to "removal of 'value-of'",
				/ "applicatives ('get-current-repl', 'eval-string', \
					'eval-string%', 'eval-unit')"
					>> "function %LoadModule_std_system"
					$dep_to "merging module std.environments";
				- DLDI "call of %LoadModule_std_environments"
					@ "function %LoadStandardContext"
				- "function %LoadModule_std_environments"
				),
				/ $lib "added native implementation enabled by default"
					@ "operative '$binds1?'" @ "function %LoadGroundContext"
					$dep_from "simplified binding combiners",
				/ DLI "simplified '$import!' subexpression"
					@ "function %LoadModule_std_promises",
					// The import of 'promise?' is used as an export rather \
						than internal dependency.
				/ ("applicative %SHBuild_RaiseError_" @ "function \
					%LoadModule_SHBuild") -> ("applicative 'raise-error'"
					@ "function %LoadGroundContext") ^ "%NPLException"
					~ "%LoggedEvent",
				+ "applicatives ('readable-file?,', 'writable-file?')"
					@ "function %LoadModule_std_io",
				/ @ "function %LoadModule_SHBuild" $=
				(
					/ $re_add(b834) "returned %ValueToken::Unspecified"
						@ "applicative %(SHBuild_BuildGCH_mkpdirp_, \
						SHBuild_EnsureDirectory_, SHBuild_Install_HardLink)",
					/ DLDI "simplified applicative %SHBuild_Install_HardLink"
						^ "%RegisterBinary" ~ "%(RegisterStrict, CallBinary)"
				),
				/ @ "function %LoadModule_std_strings" $=
				(
					/ DLDI "parameter 's'" @ "applicative 'string->symbol'"
						=> 'str',
						// To be consistent to other implementations.
					/ DLI "simplified applicative 'regex-match?'"
						^ "%RegisterBinary" ~ "%(RegisterStrict, \
						NPL::ResolveRegular)"
				)
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				- "function %ValueOf" $dep_from "removal of 'value-of'",
				(
				+ "function overloads %EmplaceCallResultOrReturn";
				/ ("function and function templates %(CallUnary, CallUnaryAs, \
					CallBinary, CallBinaryAs, CallBinaryFold, (UnaryExpansion, \
					UnaryAsExpansion, BinaryExpansion, BinaryAsExpansion) \
					::operator())", DLI "%operator()" @ "internal functors"
					@ "function %MakeEncapsulationType") $=
				(
					/ DLI ^ "%EmplaceCallResultOrReturn"
						~ "%YSLib::EmplaceCallResult";
					/ "returned %ReductionStatus" ~ "%void"
				)
				)
			)
		)
	),
	/ DLDI ^ "%replace_storage_t" ~ "%(standard_layout_storage, \
		aligned_storage_t)" $effective @ %YBase.YStandardEx.(Any, List, Tree),
	/ DLI %Tools.Scripts $=
	(
		/ $design @ "%SHBuild-YSLib-common.txt" $=
		(
			/ $forced "simplified 'std.environments' names"
				$dep_from %NPL.Dependency $effective "combiners \
				('$set-system-var!', '$assert', %SHBuild_CheckCXX)"
			/ "parameter type name 'r'" @ "applicative 'rmatch?'" => 'y'
		),
		/ $design @ "%SHBuild-YSLib-common.txt" !^ ('value-of'
			$effective "applicative 'build-with-conf-opt'",
			'std.environments' $dep_from "merging module std.environments"),
		/ $forced ^ 'raise-error' ~ 'SHBuild_RaiseError_'
			$dep_from ("%SHBuild_RaiseError_" @ %YFramework.NPL.Dependency)
			$effective @ "%(SHBuild-BuildApp.txt, SHBuild-YSLib-common.txt)"
			// The underlying exception type is changed, but not normatively \
				distinguishable in the object language currently.
	),
	* DD "wrong name of function 'symbols->imports!'" @ %Documentation.NPL
		$since b918 -> 'symbols->imports',
	/ DLDI "parameter 's' of string-like class type not dedicated as a string \
		view" => "name prefixed by 'str' or 'sub'" $effective
		%(YBase.YStandardEx.String, YFramework.((YCLib.FileIO,
		YSLib.Core.(YString, Service.FileSystem), Helper.ShellHelper),
		NPL.NPLA1Forms), Tools.SHBuild.Main)
		// Parameters of types with possiblity of non-class type are still \
			preferred to be 's'. This is also a bit more consistent with ISO \
			C++20's internal style on %std::basic_string (but not necessarily \
			others, e.g. %std::regex_replace).
	/ DLDI "parameter 'r' of regression expression type" => 're'
		$effective @ %YFramework.NPL.Dependency
		// This is not more consistent to ISO C++20's internal style on \
			%std::basic_regex (which uses 'e', so not sufficient to \
			distinguish with other types like exceptions), but still more \
			consistent to the abbreviation method of string class, also with \
			external some sources like https://en.cppreference.com/w/cpp/regex/regex_replace.
),

b921
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "namespace %Deployment" @ %Service.FileSystem,
			+ "constructor with 'const string&' parameter"
				@ "class %LoggedEvent" @ %Core.YException
				// This is more efficient when a 'std::string' value is \
					already available. In particular, it is simpler when the \
					'std::string' is materialized from a prvalue not needed to \
					check if it is null-terminated. It is also more consistent \
					with %platform_ex::(Exception, Win32Exception).
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "2 function templates %AddToken",
				(
				+ "2 function templates %AddTokens";
				+ "2 function templates %CollectTokens"
				),
				(
				+ "constructor with 'const string&' parameter"
					@ "class %NPLException";
				/ DLI "enhanced type information" @ "%TypeError thrown"
					@ "static member function \
					%ContextNode::DefaultHandleException"
				)
			),
			/ %NPLA1 $=
			(
				(
				+ "2 function templates %MakeForm";
				+ "function template %AsForm"
				),
				/ "returned %ReductionStatus on non-combining terms"
					@ "function %ReduceCombined" ~ "%ReductionStatus::Clean"
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLDI "simplified throwing exception on failure on operatives"
					@ "functions %(AccL, AccR, FoldR1, Map1, Apply, \
					ForwardFirst, Unwrap)",
				+ "function %ListPushFront",
				/ DLDI "simplified"
					^ $dep_from ("%A1::(MakeForm, AsForm)" @ %NPLA1),
				/ DLDI ^ 'Strict' ~ '1U',
				+ "functions %(WVau, WVauRef, WVauWithEnvironment, \
					WVauWithEnvironmentRef)",
				/ DLDI "simplified formals term extraction"
					@ "functions %(DefineLazy, DefineWithNoRecursion, \
					DefineWithRecursion, SetWithNoRecursion, SetWithRecursion)",
				/ DLDI "simplified wrapping count passing"
					@ "functions ('Lambda*', 'Vau*')"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLI "simplified derivations" @ "all derived operatives \
						with the prefix '$def' in the name" ^ '$def!'
						~ '$set! d',
					/ DLDI "alternative derivation"
						@ "operatives ('$deflazy!', '$setv!')",
					+ "applicative 'raise-type-error'",
					* "missing check of the 1st argument as a modifiable list \
						before trying to move the argument" @ "derivation"
						@ "applicative 'list-push-front!'" $since b897
						// The argument might be copied unexpectedly if it was \
							not modifiable before the final failure. The \
							diagnostic message was also not helpful for a \
							non-list argument.
						$= (/ $impl ^ ('$if','modifiable?',
							$dep_from 'raise-type-error', '$lambda')),
					/ DLI "optimized native implementation"
						@ "applicative 'assign@!'" ^ "%LiftOther" ~ "%LiftTerm",
					/ DLDI "order" @ "alternative derivations"
						@ "operatives ('$defl/e!', '$defl/e%!')",
					(
					/ DLI "all alternative derivations before the definition \
						of applicative 'list*'" ^ '$def!'
						~ "other operative with '$def' prefix";
					/ DLI @ "simplified alternative derivations"
						@ "all operatives with the prefix '$defl' or '$defv' \
						in the name" ^ 'list*' ~ 'list'
						// To be consistent to operatives with prefix '$defw' \
							in the name. This is also more efficient due to \
							one less level of nested expression in the moved \
							'body'.
					),
					/ $lib "added native implementation enabled by default"
						@ ("applicative 'list-push-front!' ^ $dep_from
						("%ListPushFront" @ %NPLA1Forms), "all operatives with \
						the prefix '$defl', '$defv' or '$defw' in the name"
						^ $dep_from ("%NPL::(WVau, WVauRef, \
						WVauWithEnvironment, WVauWithEnvironmentRef)" @ %NPLA)),
					* $impl "undeclared defined function"
						@ "alternative derivation"
						@ "operatives ('$lambda%', '$lambda/e%')" $since b918
						$= (/ ^ 'cons' ~ 'list*'),
						// The order changes made it undeclared before the \
							defintions not introduced in the context. This was \
							still well-formed due to the openness of the \
							ground environment. However, this should not be \
							relied on by design.
					(
					+ "operatives ('$wvau', '$wvau%', '$wvau/e', '$wvau/e%')"
						^ $dep_from ("functions %(WVau, WVauRef, \
						WVauWithEnvironment, WVauWithEnvironmentRef)"
						@ %NPLA1Forms);
					/ DLI "simplified alternative derivations" @ "operatives \
						('$defw', '$defw%', '$defw/e', '$defw/e%')"
					),
					/ DLDI "indent" @ "alternative derivation" @ 'equal?'
				),
				/ "functions %(InstallFile, InstallDirectory, InstallHardLink, \
					InstallSymbolicLink, InstallExecutable)" >> $dep_from
					("namespace %Deployment" @ %YSLib.Service.FileSystem),
			),
			/ DLDI "avoided global 'using namespace YSLib;'" $effective
				@ %(Dependency, Configuration, SContext, NPLA1Forms, \
				NPLA1Internals)
		),
		/ %'YCLib_(Win32)' $=
		(
			* "name" @ "header inclusion" @ %Consoles
				$mismatch(Documentation.ProjectRules) $since b915,
				// This may intefere cross-build environments with header \
					files stored in case-sensitive filesystems. As per the \
					documentation, the only allowed exceptions of the case \
					sensitivity rule are header names with prefix 'Windows.'.
				$= (/ '#include <WinCon.h>' -> '#include <wincon.h>'),
			/ %MinGW32 $=
			(
				+ $dev $lib "#pragma directive" @ 'YB_IMPL_GNUCPP >= 80000'
					@ "%LoadProc#2",
					// To eliminate G++ 10 warning: [-Wcast-function-type].
				/ DLDI "declaration order of constructors"
					// To be more consistent to %platform_ex::Exception.
			)
		),
		/ @ "class %Terminal" @ %YCLib.Host $=
		(
			+ "Cygwin/MSYS PTY detection" @ "platform %Win32",
				// See $2021-06 @ %Documentation::Workflow.
			/ DLI "optimized argument to 'tput setaf'" !^ 'to_string',
			/ "TTY output when the environment varialbe 'YF_Use_tput' not set"
				^ "ANSI control sequence" ~ "'tput' commands"
		)
	),
	/ $forced DLDI %Tools.SHBuild.Main $dep_from ("%(InstallFile, \
		InstallDirectory, InstallHardLink, InstallSymbolicLink, \
		InstallExecutable)" @ %YFramework.NPL.Dependency)
),

b920
(
	/ $lib "supported the resolution of LWG 2839 on replecement of standard \
		containers" $effective @ %YBase.YStandardEx.List,
		// See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85828.
	/ $re_ex(b632) $dev $impl '#undef __STRICT_ANSI__'
		-> '#define _POSIX_C_SOURCE 200809L' @ '!defined(_POSIX_C_SOURCE)'
		$effective @ %YFramework.YCLib.FileIO,
		// To eliminate G++ 11.1 warning introduced by libstdc++ in the \
			standard modes: [-Wc++]. See also $2021-06 \
			@ %Documentation::Workflow.
	* DD "formal syntax" @ ("operative '$import!'" $since b838,
		"operative '$import&!'" $since b909) @ %Documentation.NPL,
	/ %YFramework.NPL $=
	(
		/ %NPLA1Internals $=
		(
			* "missing the case for a list" @ "exception message"
				@ "function %ThrowNestedParameterTreeCheckError" $since b919,
			+ "functions %(SetEvaluatedReference, SetEvaluatedValue)"
		),
		/ %NPLA1 $=
		(
			/ DLDI "simplified function %EvaluateIdentifier"
				^ $dep_from ("%(SetEvaluatedReference, SetEvaluatedValue)"
				@ %NPLA1Internals),
			+ "function %BindSymbol",
			+ "function %Ensigil"
		),
		* DD "outdated host type 'weak_ptr<Environment>'" @ "Doxygen comment"
			@ "functions %ResolveReference" @ %NPLA $since b827,
		/ DLDI ^ "%EnvironmentGuard" ~ "%ystdex::guard<EnvironmentSwitcher>"
			$effective @ "function templates %(InvokeIn, GetModuleFor)"
			@ %Dependency,
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			+ "functions %(Import, ImportRef)" ^ $dep_from
				("%(SetEvaluatedReference, SetEvaluatedValue)"
				@ %NPLA1Internals, "%(BindSymbol, Ensigil)" @ %NPLA1),
			- DLDI "redundant assertion in case of empty let parameter list"
				@ "functions %(Let, LetRef, LetAsterisk, LetAsteriskRef, \
				LetRec, LetRecRef, Provide)",
			/ @ "functions %(ProvideLet, Provide)" $=
			(
				* "missing validity check for locked environment" $since b919,
					// This can occur if the reducer is captured and the
					//	captured environment is then destroyed.
				(
				* "wrong handling of trailing symbol with prefix '.'"
					$since b919
					$= (/ $impl ^ $dep_from ("%BindSymbol" @ %NPLA1));
				/ DLI !^ "import list construction"
					// This also avoids one redundant continuation of the \
						binding creation.
				)
			),
			/ DLDI "simplified functions %(AccL, AccR)"
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				* "wrong handling of trailing symbol with prefix '.'"
					@ ("derivation" @ ("operative '$import!'" $since b838,
					"operative '$import&!'" $since b909, ("operative \
					'$provide/let!'" $since b907; $comp "operative '$provide!'"
					$since b837)), $comp "native implementation"
					@ "operatives ('$provide/et!', '$provide!')"
					$dep_from ("%(ProvideLet, Provide)" @ %NPLA1Forms)),
				/ $lib "added native implementation enabled by default"
					@ (("operatives ('$import!', '$import&!')"
					^ $dep_from ("%(Import, ImportRef)" @ %NPLA1Forms),
					"applicative 'nonfoldable?'")
			),
			/ DLDI "simplified native implemenatation" @ "applicative %ensigil"
				@ "function %LoadStandardDerived" ^ ("%Ensigil" @ %NPLA1)
		)
	)
),

b919
(
	+ "ensured exception thrown with clear messages carrying the information \
		of the path for internal %MappedFile initialization failure"
		^ "%std::(throw_with_nested, invalid_argument)"
		$effective @ ("function %FetchDBCSOffset" @ 'YCLib_(Win32)'.NLS,
		"function %A1::OpenFile" @ %NPL.Dependency) @ %YFramework,
		// To make the message clear as loading of the character mapping and \
			modules in shared input file streams in %Helper.Initialization. \
			This also avoids confusion of errors in loading nested source \
			files in NPLA1.
	(
	/ $re_ex(b916) DLP "updated platform %Linux toolchain",
	/ $re_ex(b916) $forced "rebuilt library %FreeImage" @ "platform %Linux"
		// This is required because for incompatibility in LTO update.
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				+ $impl "workaround of 'noexcept' function"
					@ 'YB_IMPL_GNUCPP && YB_HAS_NOEXCEPT \
					&& __cplusplus >= 201703L'.
					// This is needed with G++ when 'noexcept' has the effect \
						on the function type since b918.
				/ DLI "optimized layout of the extracted 1st binding"
					@ "functions %(LetAsterisk, LetAsteriskRef)",
				/ DLI @ "functions %(Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef, LetRec, LetRecRef, LetAsterisk, \
					LetAsteriskRef, BindingsWithParentToEnvironment)" $=
				(
					/ $design "strengthened internal assertions",
					/ $design "reused arity check",
					/ "adjusted subterm layout for faster body accesses",
					- "thunked reducers" @ !'NPL_Impl_NPLA1_Enable_TCO'
						// Anyway, the callers called in the enclosing \
							function have the same thunks.
				),
				+ "common reducer name"
					@ "functions %(SetWithNoRecursion, SetWithRecursion)",
				* "wrong strong environment reference used as the parent"
					@ ("functions %(Let, LetRef)" $since b915, "functions \
					%(LetAsterisk, LetAsteriskRef, LetRec, LetRecRef)"
					$since b917, "function %AsEnvironment" $since b918),
				/ $revert_ex(b917) DLDI "simplified binding parameter and the \
					frozen environment check" @ "functions %(DefineLazy, \
					DefineWithNoRecursion, SetWithRecursion)",
				+ "functions %(ProvideLet, Provide)"
			),
			/ @ %Dependency $=
			(
				/ @ "function %LoadModule_std_system" $=
				(
					* "wrong default allocator used" @ "applicatives \
						('system-get', 'cmd-get-args')" $since b845,
						// For some reasons, the bug is shown when the native \
							implementation of '$provide-let!' is called in \
							%SHBuild-BuildApp.txt in %Tools.Scripts. This has \
							already had undefined behavior despite the case, \
							anyway.
					/ DLDI "simplified applicative 'system-get'"
						!^ "%ystdex::swap_dependent",
					/ DLI ^ "allocator" @ "applicative 'env-get'"
				),
				/ $lib "added native implementation enabled by default"
					@ ("operatives ('$provide-let!', '$provide!')"
					@ "function %LoadGroundContext"
					^ $dep_from ("%(ProvideLet, Provide)" @ %NPLA1Forms)
			),
			/ DLI "renamed reducer name for continuation without direct \
				evaluations" @ 'NPL_Impl_NPLA1_Enable_Thunked \
				&& !NPL_Impl_NPLA1_Enable_TCO' $effecitve @ %(NPLA1, NPLA1Forms)
		),
		(
		+ ("class %CommandArguments",
			"function %FetchNativeDynamicModuleExtension") @ %YCLib.YCommon;
		+ "aliases %YSLib::(CommandArguments, \
			IO::FetchNativeDynamicModuleExtension)" @ %YSLib.Adaptor.YAdaptor
		),
		/ @ "class %ArgumentsVector" @ %YSLib.Core.YCoreUtilities $=
		(
			+ "constructors",
			/ $lib "type" @ "member %Arguments"
				-> $dep_from ("%CommandArguments" @ %Adaptor.YAdaptor),
			+ "2 functions %Reset"
				^ $dep_from ("%CommandArguments" @ %Adaptor.YAdaptor)
		),
		/ $dev $lib "enabled explicit debug container support"
			@ '!defined(NDEBUG) && __GLIBCXX__' @ %YCLib.Container
			// See $2021-05 @ %Documentation::Workflow.
	),
	/ %Tools.SHBuild.Main $=
	(
		* "useless argument to %std::throw_with_nested on failure in calling a \
			command" $since b659
			// This logically made no sense as all nested excetpion would be \
				cast to %std::excetpion carrying no exception message (at \
				least in the sense of ISO C++, without extensions like that in \
				Microsoft VC++).
			$= (/ $impl ^ "%std::runtime_error"),
		(
		/ DLDI "simplified platform-specific operations" ^ $dep_from
			("%YSLib::(FetchCommandArguments, \
			IO::FetchNativeDynamicModuleExtension)" @ %YSLib.Adaptor.YAdaptor)
			~ ("%platform_ex::ParseCommandArguments", 'YCL_Win32');
		/ $comp "support extension for platform %'OS X'"
		)
	),
	/ DLDI ^ "accesses based on allocated buffer pointer with more assertions"
		@ "%new_delete_resource" @ !'YB_Impl_aligned_new'
		@ 'YB_Has_memory_resource != 1' @ %YBase.YStandardEx.MemoryResource,
		// To eliminate G++ 11.1 warning: [-Wplacement-new=]. This seems a \
			false positive without the change because the pointer is actually \
			derived from a valid allocated buffer, just G++ misses the size \
			(it would treat the size from 'void*' as '0') via the access. See \
			also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70834.
	- $revert_ex(b564) $re_ex(b456) DLB "%_GLIBCXX_DEBUG" @ "source of the \
		compiler options" $effective @ ("%(SHBuild-YSLib-common.txt, \
		SHBuild-common-options.sh, Toolchain.options.mk)" @ %Scripts,
		%ProjectGenerator.Main) @ %Tools
		// See $2021-05 @ %Documentation::Workflow. Note the Code::Blocks \
			projects are not regenerated at this time.
),

b918
(
	/ %YFramework $=
	(
		/ "all setter macros with 1 argument" @ %YBaseMacro ^ 'yforward'
			$effective @ "macros %(DefSetter, DefSetterDe, DefSetterBase, \
			DefSetterBaseDe, DefSetterMem, DefSetterMemDe)",
		+ "function template %assign" @ "class %ValueObject"
			@ %YSLib.Core.YObject,
		/ %NPL $=
		(
			/ %SContext $=
			(
				+ "3 function templates %SetValue" @ "class %TermNode"
					^ $dep_from ("%ValueObject::assign" @ %YSLib.Core.YObject),
				+ "function %IsRegular",
				+ "function %AssertBranchedList"
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified functions %(ReduceReturnUnspecified, \
					ParseLeaf, ParseLeafWithSourceInformation)"
					^ $dep_from ("%TermNode::SetValue" @ %SContext),
				* "wrong temporary tag added on bound refrerences"
					@ "function %ReduceToReferenceUList" $since b916
					// This should have been changed as %BindParameter in \
						%NPLA1 since b916.
				/ "strenthened precondition" @ "function %FetchArgumentsN"
					^ ($dep_from ("%AssertBranchedList" ~ "%AssertBranch")
					@ %SContext)
					// This also implies the regular representation \
						requirement on the parameter.
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ $lib @ "functions %(Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef, LetAsterisk, LetAsteriskRef, \
					LetRec, LetRecRef)" $=
				(
					/ "minor adjustment" @ "assertion",
					/ $dev $impl "specialized further"
						@ "empty binding list path",
					/ $dev $design $impl "simplified" ^ $dep_from
						("%ValueObject::assign" @ %YSLib.Core.YObject),
					/ $dev $design $impl "minor adjustment of list check"
						@ "%(LetAsterisk, LetAsteriskRef)"
				),
				/ DLI ^ "allocator" @ ("setting the environment"
					$effective @ "functions %(LetWithEnvironment, \
					LetWithEnvironmentRef, GetCurrentEnvironment, \
					LockCurrentEnvironment, MakeEnvironment)",
					"list prepareation" $effective @ ("functions \
					%(FoldR1, Map1, ListExtractFirst, ListExtractRest)",
					"all functions with prefix 'Let' in names"),
					("setting the context handler result"
					$effective @ "all functions with prefix 'Lambda' or 'Vau' \
					in names"), "setting the wrapping result" $effective
					@ "all function with prefix 'Wrap' in names",
					"setting the unwrapping result"
					$effective @ "functions %(Unwrap, Apply, ForwardList)",
					"construction" @ "vau handlers",
					"%operator()" @ "decapsulation operation"
					@ "function %MakeEncapsulationType")
					^ $dep_from ("%TermNode::SetValue" @ %SContext),
				/ DLI "optimized parent environment initialization"
					@ "functions %(VauWithEnvironment, \
					VauWithEnvironmentRef, LetWithEnvironment, \
					LetWithEnvironmentRef)" !^ "%ValueObject::emplace",
				/ DLDI "removed redundant %std::move" @ "function %AccL",
					// Also to eliminate Clang++ warning: [-Wpessimizing-move].
				- DLI 'YB_FLATTEN' @ "internal implementation"
					@ "function %(DefineLazy, DefineWithNoRecursion, \
					DefineWithRecursion, SetWithNoRecursion, SetWithRecursion)",
				+ "function %AsEnvironment",
				/ DLI "renamed reducer name for let-family body evaluation",
					// Now it is same to klisp.
				/ DLDI "function %MakeEnvironment",
					// This makes its implementation easier to be reused.
				+ "functions %(BindingsWithParentToEnvironment, \
					BindingsToEnvironment)",
				(
				/ $comp "strenthened precondition" @ "function %RetainN"
					$dep_from ("%FetchArgumentsN" @ %NPLA1),
				/ @ "function %Retain" $=
				(
					/ "strenthened precondition" ^ ($dep_from
						("%AssertBranchedList" ~ "%AssertBranch") @ %SContext),
						// To be consistent with %FetchArgumentsN and %RetainN.
					/ $lib "return value %ReductionStatus::Retained"
						-> "%ReductionStatus::Regular"
						// This compares equal but not identical to the old \
							value. Nevertheless, it is never used as a \
							template non-type parameter.
				);
				/ DD "strenthened precondition on %TermNode parameter for all \
					reduction functions" @ "Doxygen comment"
				),
				+ "function %SymbolsToImports",
				+ "functions %(LambdaWithEnvironment, \
					LambdaWithEnvironmentRef)",
				/ DLDI "simplified nested exception throwing" @ "functions \
					%(Lambda, LambdaRef, Vau, VauRef, VauWithEnvironment, \
					VauWithEnvironmentRef)",
				/ "thrown nested exception on definition failure"
					@ "funcitons %(DefineLazy, DefineWithNoRecursion, \
					DefineWithRecursion, SetWithNoRecursion, SetWithRecursion)",
					// Now the inner call is also protected by the nest \
						exception handling, as done in combiner constructions.
				/ DLDI "functions %(Lambda, LambdaRef, Vau, VauRef, \
					VauWithEnvironment, VauWithEnvironmentRef, Wrap, WrapRef, \
					WrapOnce, WrapOnceRef, ListExtraceRestFwd, LetAsterisk, \
					LetAsteriskRef, RestFwd, RestVal, SetRest, SetRestRef, \
					And, Or)"
					^ "template non-type parameters of internal function \
					reference" ~ "function value or reference parameters"
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				* "missing '$defv/e%!' for alternative derivations for \
					operatives like '$let'" @ '!NPL_Impl_NPLA1_Native_Forms'
					$since b917,
				/ DLI "merged calls to %REPLContext::Perform for core library \
					combiners",
					// The split calls were once more efficient, but not now.
				/ DLI ^ "allocator" @ "applicative 'copy-environment'"
					$= (/ $impl
						^ $dep_from ("%TermNode::SetValue" @ %SContext)),
				* $re_add(b915) "unexpected internal argument copy"
					@ "alternative derivation" $=
				(
					(
					@ "operative '$set!'" $since b786
						$= (/ $impl ^ 'move!'),
					@ "applicative 'list*%'" $since b829
						$= (/ $impl ^ 'move!');
					@ "operative '$bindings/p->environment'" $since b839
						$= (/ $impl ^ "%rulist");
					@ "operative '$bindings->environment'" $since b839
						$= (/ $impl ^ 'move!')
					),
					@ "operative '$setrec!'" $since b799
						$= (/ $impl ^ 'move!'),
					@ "operative '$provide/let!'"
						$orig (@ '$provide!' $since b837)
						$= (/ $impl "'$let' expression construction"
							^ ('list%', 'forward!') ~ 'list')
				),
				/ DLI "avoided redundant 'symbols' argument copy" $=
				(
					// This is an enhancement but not a bug.
					@ "applicative 'symbols->imports'"
						$= (/ $impl ^ 'forward!'),
					@ "operative '$provide'"
						$= (/ $impl 'list*%' ^ 'list')
				),
				/ DLI "simplified" @ "alternative derivation"
					@ "applicative 'list*%'" ^ '$def!' ~ '$defl%!',
				* $comp "wrong temporary tags on resulted list elements"
					@ "native implementation" @ "applicative %rulist"
					$since b916 $dep_from ("%ReduceToReferenceUList" @ %NPLA1),
				/ DLDI "parameter name 'expr'" @ "alternative derivation"
					@ "operatives '$deflazy!', '$set!', '$setrec!'" -> 'body',
					// This is more consistent to %Documentation.NPL.
				/ $lib "added native implementation enabled by default"
					@ ("operative '$as-environment'" ^ $dep_from
					("%AsEnvironment" @ %NPLA1Forms),
					"operative '$bindings/p->environment'" ^ $dep_from
					("%BindingsWithParentToEnvironment" @ %NPLA1Forms),
					"operative '$bindings->environment'" ^ $dep_from
					("%BindingsToEnvironment" @ %NPLA1Forms), "applicative \
					'symbols->imports'" ^ $dep_from ("%SymbolsToImports"
					@ %NPLA1Forms), "operative '$lambda/e'" ^ $dep_from
					("%LambdaWithEnvironment" @ %NPLA1Forms),
					"operative '$lambda/e%'"
					^ $dep_from ("%LambdaWithEnvironmentRef" @ %NPLA1Forms)),
				/ DLI "simplified derivation" @ "operative $provide/let!"
					!^ ('res', '$vau%')
			)
		)
	),
	/ %YBase.YDefinition $=
	(
		/ "loosed G++ versions" @ "macro %YB_ATTR_LAMBDA",
		+ "macro %YB_ATTR_LAMBDA_PFX",
		/ "adjusted 'YB_IMPL_CLANGPP'" @ "macro %YB_ATTR_LAMBDA_QUAL"
			-> '90000' ~ '90100';
			// This allows call sites to work around with %YB_ATTR_LAMBDA \
				for GCC 9.0.x.
		+ "macro %YB_LAMBDA_ANNOTATE"
	),
	/ $lib $impl "supported of extra attributes powered by 'YB_ATTR_LAMBDA_PFX'"
		@ "all non-standard attributes" @ "lambda-expression" ^ $dep_from
		('YB_LAMBDA_ANNOTATE' @ %YBase.YDefinition) ~ ("'YB_*' attributes",
		'YB_LAMBDA_QUAL') $effective @ ("function %main" @ %SHBuild.Main,
		"class %pool_resource" @ %YBase.YStandardEx.MemoryResource,
		("macros %(YCL_WrapCall_CAPI, YCL_TraceWrapCall_CAPI)" @ %YCommon,
		"member function %Logger::DoLogException" @ %Debug, !'YCL_Win32'
		@ ("constructor %DirectorySession" @ %FileSystem, "function %MakePipe"
		@ %Host), "function %uremove" @ 'YCL_Win32' @ FileSystem,
		"function %ExecuteShellCommand" @ 'YCL_Win32' @ %HostedGUI) @ %YCLib,
		(("lambda-expression" @ "class template specialization %GHEvent"
		@ %Core, "function template %FetchMaxTextWidth" @ %Service.TextLayout)
		@ %YSLib, "several functions" @ %NPL.(Dependency, NPLA1Forms, NPLA),
		("constructor %Environment" @ 'YCL_DS' @ %Environment, "function \
		%LoadComponents" @ %Initialization) @ %Helper, ("macros \
		%(YCL_WrapCall_Win32, YCL_TraceWrapCall_Win32)", "member function \
		%DirectoryFindData::Read") @ %'YCLib_(Win32)'.MinGW32,
		"functions %(Mount, Unmount") @ %'YCLib_(DS)'.DSIO) @ %YFramework)
		// This also works around for G++ 9.0 after the G++ version change in \
			%YB_ATTR_LAMBDA_QUAL. This is an enchancement but not a fix \
			because G++ 9.0 is not a release version branch of G++. Note some \
			offending versions of the buggy compiler can be actually used in \
			production, like g++ (GCC) 9.0.1 20190312 (Red Hat 9.0.1-0.10) in \
			Fedora 30.
),

b917
(
	/ %YFramework $=
	(
		/ %YSLib.Core.ValueNode $=
		(
			/ $re_add(b915) DLDI "all %TermNode argument 'term' to be accessed \
				directly" => 'nd',
				// Also same to %TermNode below.
			/ "required allocator equality" @ "functions %(SetContent#3, \
				MoveContent, MoveContainer") @ "class %ValueNode"
				$= (/ $impl ^ "%SwapContainer")
				// This is a bit efficient due to less assignments of the \
					allocator object.
		),
		/ %NPL $=
		(
			/ @ "class %TermNode" @ %SContext $=
			(
				* $re_add(b914) "missing setting tags"
					@ "function %SetContent#2" @ %SContext $since b857,
				/ $re_ex(b915) DLDI "all %TermNode argument 'term' to be \
					accessed directly" => 'nd',
				/ "required allocator equality"
					@ "functions %(SetContent#3, MoveContent, MoveContainer")
					$= (/ $impl ^ "%SwapContainer")
					// Same to the change to %ValueNode in \
						%YSLib.Core.ValueNode.
			),
			/ @ %NPLA $=
			(
				(
				* "missing resetting tags" @ "destination term"
					@ "function %LiftCollapsed" $since b857;
				* $comp "possible unexpected different effect on tags between \
					calls to %(LiftCollapsed, MoveCollapsed)" $since b854
				),
				+ "function %ThrowTypeErrorForInvalidType",
				/ DLDI "parameter name %is_ref"
					@ "function %ThrowListTypeErrorForInvalidType" => "%has_Ref"
					// To be consistent with other functions.
			),
			/ DLDI "set container to temporary value when the container \
				allocator equality is known" ^ "%TermNode::Container::swap"
				~ "move assignment" $effective @ ("functions %Forms::(AccL, \
				AccR, MakeEncapsulationType, ListConcat)" @ %NPLA1Forms,
				"native implementation" @ "applicative 'cmd-get-args'"
				@ "function %LoadModule_std_system" @ %Dependency),
				// To be consistent to %Forms::(ListExtractRestFwd, Let, \
					LetRef, LetWithEnvironment, LetWithEnvironmentRef, \
					RestFwd, RestVal) in %NPLA1Forms. Changing of these \
					implementations are also a bit more efficient due to one \
					less assignment of the allocator object.
			/ %NPLA1Internals $=
			(
				+ "function %ExtractSigil",
				(
				+ "function %ThrowNestedParameterTreeCheckError",
				+ "function %ThrowFormalParameterTypeError"
					^ $dep_from ("%ThrowTypeErrorForInvalidType" @ %NPLA);
				+ "class template %GParameterValueMatcher"
					^ $dep_from ("%(ThrowNestedParameterTreeCheckError, \
					ThrowFormalParameterTypeError)",
					"%(IsIgnore, ThrowInvalidTokenError)" @ %NPLA1);
				+ "function template %MakeParameterValueMatcher"
				)
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified function %BindParameter" $=
				(
					/ ^ "%list::emplace_back return value" ~ "%list::back",
					// This requires ISO C++17 for %std::list. Nevertheless, \
						%ystdex::list is already capable.
					/ ^ $dep_from "%ExtractSigil" @ %NPLA1Internals
				),
				+ "functions %(IsIgnore, ThrowInvalidTokenError)",
				+ "function %CheckParameterTree" ^ $dep_from
					("%MakeParameterValueMatcher" @ %NPLA1Internals),
				+ "function %CheckEnvironmentFormals" ^ ($dep_from
					"%ThrowInvalidTokenError", "%IsNPLAToken", $dep_from
					("%ThrowFormalParameterTypeError" @ %NPLA1Internals)),
				- $revert(b794) "function template %CheckSymbol"
					$dep_from $dep_to "removal of CheckSymbol",
				- $revert(b794) "function template %CheckParameterLeafToken"
					$dep_from $dep_to "removal of CheckParameterLeafToken",
				/ @ "functions %(BindParameter, MatchParameter)" $=
				(
					(
					/ $impl "aligned token value handling to \
						%CheckParameterTree" ^ ($dep_from "%IsIgnore",
						"%IsNPLASymbol", "%TermToNamePtr",
						($dep_from ("%ThrowInvalidTokenError",
						"%(ThrowNestedParameterTreeCheckError, \
						ThrowFormalParameterTypeError)")
						@ %NPLA1Internals)) ~ "%ParameterMismatch",
						// Exceptions other than %ParameterTree are caught and \
							rethrown with a nested error.
					/ "supported detection of reference values"
						@ "token mismatch failure",
						// This makes differences on the call to \
							%ThrowTypeErrorForInvalidType.
					/ "failure for trailing token type" ^ "same handling to \
						other non-trailing token type failure"
						~ "%ParameterMismatch",
						// This also allows simplified lightweight parameter \
							tree matching checks without binding to ignore the \
							ellipsis (i.e. the existence of the trailing \
							parameter).
					* $comp "wrong base type of exception type \
						%ParameterMismatch thrown from token value check"
						$since b902
						// This should be %InvalidSyntax. Since b902, \
							%ParameterMismatch no longer has the base \
							%InvalidSyntax, but as a type error of \
							%ListTypeError.
					),
					(
					/ ("handled '#ignored' and NPLA symbol check"
						@ "value binding", "handled empty token ignorance \
						after removal of prefix '.'" @ "trailing binding")
						@ "function %MatchParameter";
					/ DLDI "simplified function %BindParameter"
					),
					/ DLI "optimized for cases when parameter leaf node is of \
						a %TermReference value to a non-reference value"
				),
				+ "function %BindParameterWellFormed"
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLDI "adjusted 'YB_ATTR_nodiscard' and name"
					@ "several internal functions",
				/ DLI "simplified list construction" ^ "syncronized calls"
					~ "continuation" $=
				(
					/ "simplified list extraction" $effective @ $impl
						("functions %(ListExtractFirst, ListExtractRest, Let, \
						Let, LetRef, LetWithEnvironment, \
						LetWithEnvironmentRef)")
						$dep_to "avoided uses of context in list operations",
					/ "simplified list concatenation"
						$effective @ "functions %(ListConcat, Append)"
						$dep_to "avoided uses of context in list operations",
					/ "simplified mapping application" @ "function %Map1"
				),
				- "2nd parameter" @ "functions %(ListConcat, Append, \
					ListExtractFirst, ListExtractRestFwd)"
					$dep_all_from "avoided uses of context in list operations",
				/ DLI "simplified in cases for rvalues list of 1st argument by \
					list splicing" @ "function %ListConcat",
				/ DLDI "functions %(RestFwd, RestVal)",
				/ DLDI "simplified function with vau handler parameter checks"
					^ $dep_from ("functions %(CheckParameterTree, \
					CheckEnvironmentFormals)" @ %NPLA1),
				/ DLDI "function %DefineLazy",
				/ "vau handlers" $=
				(
					/ "parameter checks" @ "constructors" $=
					(
						/ $impl ^ $dep_from ("%(CheckParameterTree, \
							CheckEnvironmentFormals)" @ %NPLA1);
						/ $comp ^ "wrapped in the nested %InvalidSyntax \
							exception on failure",
						* $comp $re_add(b916) "missing nested call safety in \
							handling terms from object language"
							$orig (@ %NPLA1 $since b799)
					),
					/ DLI "optimized binding" @ "%operator()"
						^ ("%BindParameterWellFormed" @ %NPLA1)
						~ "%BindParameter"
				),
				/ "optimized functions %(Let, LetRef, LetWithEnvironment, \
					LetWithEnvironmentRef) $=
				(
					/ $design "simplified argument list evaluation"
						!^ "%Continuation",
						// The continuation was already removed in b916. The \
							explicit %Continuation is still redundant.
					/ DLI "simplified" ^ "synchronous calls of binding list \
						decompositions",
					/ DLI "optimized cases for zero arguments with a different \
						path",
					- DLI "redundant parameter check"
						$dep_from ("constructors" @ "vau handlers")
						// The call to %BindParameter now fully implies the \
							check implemented in %CheckParameter.
				),
				+ "functions %(LetAsterisk, LetAsteriskRef, LetRec, LetRecRef)",
				/ @ "functions %(DefineWithRecurison, SetWithRecursion)" $=
				(
					/ @ "thunk initialization" $=
					(
						^ DLI "allocator from the term parameter",
						(
						* "wrong exception specifier" @ "constructor"
							$since b894;
						+ "full token check" ^ $dep_from
							("%MakeParameterValueMatcher" @ %NPLA1Internals);
							// As %BindParameter in %NPLA1.
						* $re_add(b916) "missing nested call safety in \
							handling terms from object language" $since b780
						)
					),
					/ DLI "optimized binding" ^ ("%BindParameterWellFormed"
						@ %NPLA1) ~ "%BindParameter"
				)
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				/ $lib "added native implementation enabled by default"
					@ ("operative '$let*'" ^ $dep_from
					("%LetAsterisk" @ %NPLA1Forms), "operative '$let*%'"
					^ $dep_from ("%LetAsteriskRef" @ %NPLA1Forms),
					"operative '$letrec'" ^ $dep_from ("%LetRec" @ %NPLA1Forms),
					"operative '$letrec%'" ^ $dep_from
					("%LetRecRef" @ %NPLA1Forms)),
				* "wrong base type of exception type %ParameterMismatch on \
					failure thown from call to function template %CheckSymbol"
					$since b902
					// As the implementations of %(BindParameter, \
						MatchParameter) @ %NPLA.
					$= (/ $impl $dep_from ^ "%ThrowInvalidTokenError" @ %NPLA1
						~ "%CheckSymbol" $dep_to "removal of CheckSymbol")
			),
			* "wrong base type of exception type %ParameterMismatch on \
				failure thown from call to function template \
				%CheckParameterLeafToken" $effective
				@ ("function %BindParameter" @ %NPLA1, "functions \
				%Forms::(DefineWithRecursion, SetWithRecursion)" @ %NPLA1Forms)
				$since b902
				// Ditto.
				$= (/ $impl $dep_from ^ "%ThrowInvalidTokenError" @ %NPLA1
					~ "%CheckParameterLeafToken" $dep_to
					"removal of CheckParameterLeafToken")
		)
	),
	/ DD "operatives ('$set!', '$setrec!')" @ %Documentation.NPL
		^ '<definiend>' ~ '<formals>'
		// This is more consistent to the implementation of the parameter tree \
			checks.
),

b916
(
	(
	/ $re_ex(b900) DLP "updated platform %Linux toolchain",
	/ "supported 'FREEIMAGE_LIBRARY_TYPE=STATIC'"
		@ "%3rdparty/FreeImage/Makefile.gnu";
	/ $re_ex(b900) "rebuilt library %FreeImage" @ "platform %Linux"
		// This eliminates unnecessary FreeImage initialization (by calling \
			%::FreeImage_SO_Initialise) and finalization (by calling \
			%::FreeImage_SO_DeInitialise) on loading libYFramework.so.
	),
	/ %Tools.Scripts $=
	(
		* "saving initial value had no effect" @ "applicative 'env-set'"
			@ "%SHBuild-YSLib-common.txt" @ $since b840;
		* $comp "wrong initial value of %LIBS used for stage 2 SHBuild build" @
			@ "%SHBuild-YSLib-build.txt" $since b840
			// This would cause wrong debug libraries linked after debug builds.
	),
	/ %YFramework.NPL $=
	(
		* $re_add(b863) "missing nested call safety in handling terms from \
			object language" @ ("function %ClearContainer"; ("destructor",
			$comp "function %Clear")) @ "type %TermNode" @ %SContext
			$since b674,
			// This would potentionally cause undefined behavior due to native \
				call for large input (usually constructed in the user \
				program). The implementation never supported nested call \
				safety before, but this was introduced in the document since \
				b868 and this case was not explicitly in the documented \
				exceptional ones.
		/ %NPLA1Internals $=
		(
			/ DLDI "function %RelayCurrentNext" ^ "%A1::RelayCurrentOrDirect"
				~ "%RelayNextOrDirect";
			- $revert(b879) "function templates %ReduceNextOrDirect";
			* "missing qualified 'NPL::' before 'RelaySwitched'"
				$effective @ "function template %RelayCurrentNext" $since b878,
			(
			/ "enabled functions %RelayCurrent"
				@ 'NPL_Impl_NPLA1_Enable_InlineDirect';
			+ "function templates %(RelayCurrentNextThunked, \
				ReduceCurrentNextThunked)"
			)
		),
		/ %NPLA1 $=
		(
			* "redundant temporary tag on unique references in the result"
				@ ("function %ReduceToReferenceList" $since b914,
				"function %ReduceToReferenceUList" $since b915),
			/ "avoided the tempoaray tag on non-temporary references bound \
				with sigil '&' in trailing lists" @ "function %BindParameter"
				// The temporary tag was added in b875, to simplify the \
					argument to 'forward!' calls in typical cases. However, \
					this is too aggressive for a trailing binding and there \
					would be no easy and efficient way to undo the addition \
					of the temporary tag on every elements in derived \
					implementations. So, avoided the tag initially in such \
					cases.
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			(
			/ DLI @ "function %Append" $=
			(
				/ "avoided redundant list initialization",
				/ "refactored to avoid redundant term move before the list \
					concatenation"
			),
			/ "avoided copy list lvalues at first" @ "functions %(Append, \
				ListConcat, Map1, FoldR1, ListExtractFirst, ListExtractRest)"
				$dep_to "native list forwarding";
			/ DLI "simplified object layout"
				@ "functions %(Append, ListConcat, Map1, FoldR1)"
			),
			* "missing nested call safety in recursive calls"
				@ 'NPL_Impl_NPLA1_Enable_InlineDirect' $effective @ ("function \
				%AccR" $since b898, "functions %(FoldR1, Map1)" $since b908,
				"functions %(Append, ListConcat)" $since b912, "functions \
				%(ListExtract, ListExtractFirst, ListExtractLast)" $since b914)
				$= (/ $impl ^ $dep_from ("%A1::ReduceCurrentNextThunked"
					@ %NPLA1Internals) ~ "%A1::ReduceCurrentNext"),
			* $impl "wrong continuation type used"
				@ "functions %(ListExtractFirst, ListExtractRest)" $since b914,
				// This made the continuation clash with the one used by \
					%ListConcat.
			/ DLDI "simplified function %AccR",
			* "arguments of reference to temporary objects wrongly moved"
				@ "functions %(RestVal, RestFwd)" $since b910,
			- $revert(b914) "function %ListExtract"
				$dep_from ("applicative 'list-extract%'"
				@ "function %LoadGroundContext" @ %Dependency),
			/ @ "functions %(Let, LetRef, LetWithEnvironment, \
				LetWithEnvironmentRef)" $=
			(
				* @ 'NPL_Impl_NPLA1_Enable_Thunked && \
					!NPL_Impl_NPLA1_Enable_InlineDirect' $since b915 $=
				(
					* "undefined bahavior caused by missing internal \
						variable of the dynamic environment in lambda-capture",
						// Current environment would be corrupted, typically.
					* "wrong term used as the initializers being initialized"
				),
				/ $forced "avoided binding temporary tags on elements of \
					binding list rvalue arguments" $=
					(/ $impl !^ "%BindReferenceTags"),
					// Same to %BindParameter in %NPLA1.
				* "wrongly moved binding parameter of reference with \
					temporary tag" $since b914
					$= (/ $impl ^ "%TermReference::IsMovable"
						~ "%TermReference::IsReferencedLValue"),
				/ $forced DLI "simplified list preparation and avoided \
					redundant copies of list preparation"
					$dep_from "%(ListExtractFirst, ListExtractRest)"
					$dep_to "let-family native list forwarding",
				/ DLI "avoided redundant continuation for argument list \
					evaluation",
				/ DLDI
					"simplified initialization of binding from movable argument"
			)
		),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			/ "allowed shard list references without copies" @ "%foldr1" $=
			(
				/ $impl "alternative derivation"
					^ "variables initialized with '@' sigil";
				* "differences of redundant copies between the alternative \
					derivation and the native implemention"
					@ "call to %foldr1 alternative derivation" $since b913
					$dep_from "native list forwarding" @ %NPLA1Forms),
					// See $2021-04 @ %Documentation::Workflow.
			),
			* "missing lifting of the result" @ "derivation"
				@ "operative '$letrec'" $since b914
				$= (/ $impl ^ '$let' ~ '$let%'),
				// The bug might be hidden by the TCO implementation, though.
			* $comp "native implementation" @ "applicatives ('rest%', %restv)"
				$since b910 $dep_from ("%(RestFwd, RestVal)" @ %NPLA1Forms),
			/ "simplified alternative derivation" @ "applicative %rulist"
				^ "%idv" ~ "%rlist",
			* "redundant temporary tag on unique references in the result"
				@ ("applicative %rlist" $since b914,
				"applicative %rulist" $since b915) $=
			(
				/ $comp "native implementations" $dep_from
					("%(ReduceToReferenceList, ReduceToReferenceList)"
					@ %NPLA1),
				/ $comp "alternative derivations" $dep_from
					("%BindParameter" @ %NPLA1)
			),
			/ @ "applicative %map1"
			(
				* "wrong forwarding" @ "alternative derivation" $since b899;
				* "differences of wrong forwarding between the alternative \
					derivation and the native implemantion" $since b899
					// See $2021-04 @ %Documentation::Workflow.
			),
			/ "supported preserving non-movable lists and avoided redundant \
				copies of subobjects of the list argument"
				@ "applicatives ('list-extract-first', 'list-extract-rest%')" $=
			(
				/ "alternative derivations"
					$= (/ $impl ^ ($dep_from "%map1") ~ 'list-extract%'
						$dep_from ("applicative %foldr1", "%BindParameter"
						@ %NPLA1) $dep_to "avoiding dedicated list extraction"),
				/ $comp "native implementations" $dep_from ("functions \
					%(ListExtractFirst, ListExtractRest)" @ %NPLA1Forms)
			),
			- "applicative 'list-extract%'"
				$dep_from "avoiding dedicated list extraction",
			/ DLDI "simplified derivations" @ "operatives ('$let', '$let%', \
				'$let/e', '$let/e%', '$letrec', '$letrec%')",
			/ $comp "avoided redundant copies of subobjects of the binding \
				list argument" @ "operatives ('$let', '$let%', '$let/e', \
				'$let/e%')" $dep_from "let-family native list forwarding"
				// Similar to 'foldr1' calls, but not a bug.
		)
	
	),
	+ "restriction of copies" @ "applicative %foldr1"
		@ %Documentation.NPL $dep_from ("applicative %foldr1"
		@ "function %LoadGroundContext" @ %YFramework.NPL.Dependency)
),

b915
(
	/ %YFramework.NPL $=
	(
		/ DLDI "simplified all calls to construct %TermNode with a sole \
			allocator argument" ^ "%TermNode" ~ "%NPL::AsTermNode"
			$effective @ %(SContext, NPLA1),
		/ %SContext $=
		(
			/ DLDI "%TermNode argument ('node', 'term', 'tm') to be \
				accessed directly" => 'nd',
				// The direct accesses include member functions and some other \
					related functions.
			+ "function %PropagateTo"
		),
		/ %NPLA1 $=
		(
			* "missing support of term references" @ "trailing \
				parameter term" @ "functions %(BindParameter, MatchParameter)"
				@ %NPLA1 $since b800
				$= (/ $impl ^ "%ReferenceTerm")
				// The term tree matching for other leaf symbols has supported \
					term references since b855. The implementation here uses \
					%ReferenceTerm rather than %ResolveTerm for simplicity.
			+ "function %ReduceToReferenceWithUniqueList",
			* "wrong handler type derived for lvalue callers"
				@ ("function template %NameExpandedHandler";
				$comp "function template %NameTypedReducerHandler") $since b896
				$= (/ $impl ^ "%ystdex::remove_cvref_t"),
			/ DLDI "removed unused capture '&'" @ "function %operator()"
				@ "class %FormContextHandler",
			/ DLDI "simplified functions %(BindParameter, MatchParameter)"
				^ $dep_from ("%PropagateTo" @ %SContext)
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			* $re_add(b803) "missing support of term references"
				@ "formal parameter tree check" @ "vau handler" $since b800
				$= (/ $impl ^ "%ReferenceTerm"),
				// The check for the dynamic environment term has already \
					supported term references since b803. This should also \
					have been done for the parameter tree.
			* "wrong handling for reference terms with temporary tag"
				@ "function %ReduceToReferenceList" $since b913
				// This did not have effects on the derivations because the \
					only use was 'map1 expire (rlist l)' which always behaves \
					the same regardless of the temporar tag on the operand.
			/ @ "functions %(Let, LetRef, LetWithEnvironment, \
				LetWithEnvironmentRef)" $=
			(
				(
				* $comp "wrong handling for reference subterms in bindings"
					$dep_from "%ReduceToReferenceList";
				/ DLI "optimized bindings forwarding"
					!^ $dep_from "%ReduceToReferenceList"
				),
				/ DLI "ompimized abstraction construction"
					$dep_from ("%NameTypedReducerHandler" @ %NPLA1)
			),
			/ $re_add(b912) DLI ^ "allocator" @ "initialization of \
				%ContextHandler" @ "%(Lambda, LambdaRef, Vau, VauRef, \
				VauWithEnvironment, VauWithEnvironmentRef, Wrap, WrapN, \
				WrapOnce, WrapOnceRef)",
			/ DLDI "simplified function %MakeEncapsulationType",
			/ DLI @ "functions %(VauWithEnvironment, VauWithEnvironmentRef)" $=
			(
				/ "renamed reducer name for parent environment evaluation",
				/ "simplified" ^ "%IsLeaf" ~ "%IsExtendedList"
			),
			/ DLI "%operator()" @ "vau handler" $=
			(
				/ "avoided redundant copy of the parent environment object for \
					combiner prvalues",
				/ "removed redundant environment saving for combiner prvalues"
					@ 'NPL_Impl_NPLA1_Enable_TCO'
					// This is actually already saved in the parent.
			)
		),
		* "missing propogation of the nonmodifying tag on reference \
			passing" $effective @ ("function %BindParameter" @ %NPLA1
			$since b856, ("function %ReduceToReferenceAt",
			"function %ReduceToReference") @ %NPLA $since b871,
			"functions %Forms::(FirstFwd, RestFwd)" @ %NPLA1Forms $since b913)
			^ $dep_from ("%PropagateTo" @ %SContext)
			$dep_to "missing tags propogation on reference passing",
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				(
				* $re_add(b874) "unexpected internal argument copy"
					@ "alternative derivation" @ ("applicative 'list*'"
					$since b789, "'operative $sequence'" $since b828)
					// Operative '$sequence' support move-only type since \
						b828, and it is known unable to support it before then.
					$= (/ $impl ^ ('forward!', 'move!')),
				(
				* "unexpected copy" @ "alternative derivations"
					@ ("applicative %idv" $since b828,
					"operative '$quote'" $since b799) $=
				(
					/ "converted argument to rvalue" @ "parameter tree" ^ !'&',
					* "missing parameter forwarding";
						$= (/ $impl ^ '$move-resolved!');
						// This relies on the parameters passed by value.
					* "unexpected result copy"
						$= (/ $impl ^ ('$lambda%', '$vau%')
							~ ('$lambda', '$vau'))
						// This relies on forwarding' to ensure memory safety.
				);
				(
				/ DLDI "reordered derivation" @ "applicatives %(id, idv, list)";
				/ DLDI "alternative derivation"
					@ "operative '$lvalue-identifier?'"
					^ ('$def!', '$vau', 'cons') ~ ('$defv!', 'list');
				/ DLDI "reordered derviations of operative \
					'$lvalue-identifier?' and applicative 'forward!'";
				/ DLDI "alternative derivation of applicative 'forward!'"
					^ ('$def!', '$vau%', 'wrap') ~ '$defl%!';
				* "missing parameter forwarding" @ "alternative derivations"
					@ "applicative 'list%'" $since b828
					$= (/ $impl ^ 'forward!')
				),
				/ "alternative derivation" @ ($comp "applicative 'first%'"
					$comp "applicative %(foldr1; map1)")
					$since b913
					// This differs to the native implementations.
				);
				* $comp "unexpected copy of initializers on calls"
					@ "non-native implementations"
					@ "operatives named with '$let' prefix" $since b914
					// For '$let' and '$let%', this has been fixed with native \
						implementations since b914. The derivations of '$let' \
						and '$let%' does not need the fixes of other combiners \
						than 'list*'. However, '$let*' and '$let*%' need 'idv' \
						and '$quote' fixes; '$letrec' and '$letrec%' further \
						need '$sequence' and 'map1' fixes above.
				),
				+ DLI "alternative derviation" @ "applicative 'forward!'"
					@ 'NPL_Impl_NPLA1_Use_Id_Vau' ^ 'lambda%',
				/ DLDI "simplified alternative derivation"
					@ "applicative 'first%'"
					$= (/ $impl ^ 'lambda' @ 'first%' ~ ('$lambda%', 'idv')),
					// This can fix the wrong behavior without touching \
						'$quote' or 'idv', but it does not fix the root cause. \
						Anyway, this is still more succinct.
				* $re_add(b874) "unexpected internal argument copy"
					@ "alternative derivation" @ "applicative 'map1'"
					$since b829
					$= (/ $impl ^ 'move!'),
					// The applicative added b791 has nothing support of \
						forwarding. It was partially fixed by adding \
						'forward!' to the 1st argument of 'cons%' call, but \
						not the trailing list argument.
				/ DLDI "trailing parameter 'x'" => 'xs'
					$effective @ "alternative derivations"
					@ "applicatives ('rest%', 'rest&', %restv)",
				+ "applicative %rulist"
					^ $dep_from ("%ReduceToReferenceWithUniqueList" @ %NPLA1),
				* "lvalues in bindings moved unexpectedly" @ "operatives named \
					with '$let' prefix" $since b914 $=
				(
					/ "alternative derivations" ^ $dep_from "%rulist"
						~ "%(map1, expire, rlist)",
					/ $comp "native implementations" $dep_from ("%(Let, \
						LetRef, LetWithEnvironment, LetWithEnvironmentRef)"
						@ %NPLA1Forms)
				),
				/ DLDI "qualified broken" @ "term accessor functions on \
					reference passing" $since b856
					$dep_from "missing tags propogation on reference passing",
				* "alternative derivation" @ "operatives ('$when', '$unless')"
					$since b908
					$= (/ $impl ^ 'list*' ~ 'list'),
			),
			/ DLDI "broke down multiline definitions after the formal \
				parameter and the dynamic environment (if any)" $effective
				@ "functions %(LoadGroundContext, LoadModule_std_promises)"
				// This is more consistent.
		)
	)
),

b914
(
	* $revert(b909) DD "wrong 1st parameter type"
		@ "operatives ('$set!', '$setrec!')" @ %Documentation.NPL $since b909,
	/ %YFramework.NPL $=
	(
		/ %SContext $=
		(
			+ DD "Doxygen command '\relates'" @ "function template %HasValue",
			/ @ "class %TermNode" $=
			(
				* "missing swapping tags" @ "friend function %swap" $since \
					b857,
					// This also has effects on assignment and exchange \
						operations (but not for content setting and lifting).
				* "missing setting tags" @ "function %SetContent#3" $since b857
					// This also has effects on content setting and lifting \
						operations.
			)
		),
		/ %NPLA $=
		(
			/ DD "grouped several APIs with Doxygen groups %(LexicalCategory, \
				TermAccessAuxiliary, TermReferenceAccess, BindingAccess, \
				NPLDiagnostics)",
			/ DLDI "reordered several declarations",
				// More consistent with the documentation.
			+ "functions %(AddTags, RemoveTags)" @ "class %TermReference"
		),
		/ DD "grouped several APIs to Doxygen group %NPLADiagnostics" @ %NPLA1
			^ $dep_from ("%NPLADiagnostics" @ %NPLA),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			* DLI "missing %Retain call" @ "%function %Append" $since b912,
			/ DLDI "simplified functions %(AccL, AccR)",
			(
			/ DLI "functions %(Map1, FoldR1)";
				// Loops are less efficient here.
			* DLI "redundant list bound in the initial bindings"
				@ "function %Map1" $since b899
				// This is redundant for %Map1 but not %FoldR1 because the \
					former has less arguments and the last argument (the list) \
					should be bound later in the recursive calls.
			),
			(
			/ $re_ex(b913) "avoided unexpected copy by list initialization via \
				%std::initializer_list instance"
				@ "%TermNode::Container assignment" $effective
				@ "functions %(ForwardListFirst, MakeEncapsulationType)";
			* $comp $re_add(b913) "move-only object not allowed in terms \
				handled by functions as native implemention of applicative"
				@ ("function %ForwardFirst" $orig (@ "%ForwardFirstList"
				$since b875), "function %MakeEncapsulationType" $since b855)
				// This was introduced by %TermNode construction as first. See \
					$2021-03 @ %Documentation::Workflow.
			),
			/ $re_ex(b913) DLI "avoided unexpected copy by list initialization \
				via %std::initializer_list instance"
				@ "%TermNode construction" @ "function %(SetRest, SetRestRef)"
			+ "function %ListExtract",
			/ DLI "avoided redundant list check" @ "underlying list \
				construction calls" @ ("function %Map1",
				("function %ListConcat"; $comp "function %Append")),
				// See $2021-03 @ %Documentation::Workflow.
			+ "function %ListExtractFirst",
			+ "function %ListExtractRestFwd",
			/ DLDI "simplified list operations with null value returned at end \
				with shared implementation to %ListExtract"
				$effective @ "functions %(Map1, Append)",
			/ DLDI "function %Cond" ^ "%IsBranch" ~ "%TermNode::empty",
			+ "functions %(Let, LetRef, LetWithEnvironment, \
				LetWithEnvironmentRef)"
				^ $dep_from ("%TermReference::(AddTags, RemoveTags)" @ %NPLA)
		),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			/ @ "applicative 'list-extract%'" $=
			(
				(
				/ "applicative 'list-extract'" => 'list-extract';
				* $comp $re_add(b913) DD "safety guarantee broken on list \
					lvalues handled by the safe operation subset implying call \
					to 'list-extract'" $mismatch(Documentation.NPL) $since b875
				),
				(
				/ "guaranteed dynamic enviornment used";
					// This is more consistent to other applicatives like \
						'foldr1' and 'map-reverse'.
				/ $lib "added native implementation enabled by default"
					^ $dep_from ("%ListExtract" @ %NPLA1Forms)
				),
				* "redundant lift at the result" @ "derivation"
					@ "operative '$let*%'" $since b857
					$= (/ $impl ^ '$let%' ~ '$let*'),
				/ DLDI "simplified native implementation" @ "applicative \
					'expire'" ^ $dep_from ("%TermReference::AddTags" @ %NPLA),
				+ "applicative 'as-const'"
					^ $dep_from ("%TermReference::AddTags" @ %NPLA),
				* "unexpected copy of initializers on calls"
					@ "operatives named with '$let' prefix" $since b791
			),
			/ $lib "added native implementation enabled by default"
				@ ("applicative 'list-extract-first'"
				^ $dep_from ("%ListExtractFirst" @ %NPLA1Forms),
				"applicative 'list-extract-rest%'"
				^ $dep_from ("%ListExtractRestFwd" @ %NPLA1Forms),
				"operative '$let'" ^ $dep_from ("%Let" @ %NPLA1Forms),
				"operative '$let%'" ^ $dep_from ("%LetRef" @ %NPLA1Forms),
				"operative '$let/e'" ^ $dep_from
				("%LetWithEnvironment" @ %NPLA1Forms), "operative '$let/e%'"
				^ $dep_from ("%LetWithEnvironmentRef" @ %NPLA1Forms))
		)
	)
),

b913
(
	/ %YFramework $=
	(
		/ @ "class %ValueNode" @ %YSLib.ValueNode $=
		(
			* "missing save %Value data member" @ "function %MoveContent"
				$since b803,
			+ "function %MoveContainer",
				// As the old %MoveContent.
			+ "functions %(MoveValue, CopyContainer, CopyContent, \
				CopyValue)"
		),
		/ %NPL $=
		(
			/ @ "class %TermNode" @ %SContext $=
			(
				// Similar to %ValueNode. Note it is not easy to get this \
					bug because %Value normally does not hold a value of \
					%TermNode (and referring to some other term).
				* "missing save %Value data member" @ "function %MoveContent"
					$since b853,
				+ "function %MoveContainer",
					// As the old %MoveContent.
				+ "functions %(MoveValue, CopyContainer, CopyContent, \
					CopyValue)"
			),			
			/ %NPLA $=
			(
				/ DLDI "simplified function %PrepareCollapse" @ %NPLA
					!^ "%NPL::TryAccessLeaf",
				/ DLI "simplified function %LiftTermOrCopy"
					^ (($dep_from "%TermNode::CopyContent"
					~ "%TermNode::MoveContent") @ %SContext),
				/ DLI "simplified functions %(LiftCollapsed, MoveCollapsed)"
					^ "%TermNode::SetContent" ~ "%TermNode::MoveContent",
				(
				* $re_add(b876) "missing support of irregular representation \
					for term copy" @ ("function %LiftOtherOrCopy";
					$comp "function %LiftMovedOther") $since b876
					$= (/ $impl ^ (($dep_from "TermNode::CopyContent"
						~ "%TermNode::SetContent") @ %SContext));
				/ DLI "optimized function %LiftToReturn" ^ "%LiftMovedOther"
					~ "%LiftMoved"
					// This relies on the fix of %LiftOtherOrCopy, otherwise \
						operations like the unwrappng with non-native 'list' \
						would crash.
				)
			),
			/ %NPLA1 $=
			(
				+ "function %ReduceToReferenceList"
					^ $dep_from ("%TermNode::MoveContainer" @ %SContext),
				/ DLI "term reference initlaization" @ "functions \
					%(BindParameter, MatchParameter)" ^ "allocator"
			),
			/ %NPLA1Internals $=
			(
				/ DLD 'ynothrowv' @ "member function %TCOAction::GetTermRef"
					@ NPLA1Internals -> 'ynothrow',
				/ @ "function %ReduceForCombinerRef" $=
				(
					/ !^ "%FetchTailEnvironmentReference"
						$dep_to "removal of tail environment check";
					- "context parameteter" $dep_to
						"simplified combiner subobjct reference construction"
				),
				- $revert(b869) "function %FetchTailEnvironmentReference",
					// See $2021-03 @ %Documentation::Workflow.
				(
				+ "function %ReduceAsSubobjectReference";
				/ DLDI "simplified function %ReduceForCombinerRef"
				)
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ "function %Rest" => "%RestFwd",
				+ "function %FirstFwd",
				(
				/ "avoided move the referent of list element"
					@ "functions %(FoldR1, Map1, ListConcat, Append)";
					// This is required for the change of the semantics of \
						several high-level operations, see %Dependency.
				* $comp "behavior of native list operations for 'foldr1' \
					derviations mismatch with alternative derivations"
					$since b912
					// Notably, list in the 1st turn of the call entry should \
						not be treated as list of reference values, although \
						the alternative derivation of 'foldr1' may also buggy \
						(see below).
				),
				/ DLI "optimized %operator()" @ "vau handler"
					^ "%TermNode::SetContent" ~ "%(LiftOther, LiftOtherOrCopy)",
				/ DLI "decapsulation operation"
					!^ "%FetchTailEnvironmentReference"
					@ "function %MakeEncapsulationType"
					$dep_to "removal of tail environment check",
				(
				/ DLI "simplified combiner subobject reference construction"
					$dep_from $forced "simplified combiner subobjct reference \
					construction" $effective @ "functions (AccL, AccR, Apply, \
					FoldR1, ForwardFirst, Map1, Unwrap, Wrap, WrapOnce, \
					WrapOnceRef, WrapRef)";
				- "context parameter" @ "functions %(Unwrap, Wrap, WrapOnce, \
					WrapOnceRef, WrapRef)"
				),
				* $re_add(b876) "missing support of irregular representation \
					for term copy" @ "function %First" $since b874,
					^ (($dep_from "%TermNode::CopyContent"
					~ "%TermNode::MoveContent") @ %SContext),
					// As %LiftOtherOrCopy.
				/ @ "function %RestRef" $=
				(
					+ "context parameter";
					/ "preserved reference of the result"
				),
				* "move-only object not allowed in terms handled by functions \
					as native implemention of applicatives"
					@ (("%AccL", "%AccR") $since b898, ("%FoldR1", "%Map1")
					$since b899, ("%ListConcat", "%Append") $since b912))
					// See $2021-03 @ %Documentation::Workflow.
					$= (/ "avoided unexpected copy by list initialization via \
						%std::initializer_list instance"
						@ "%TermNode construction")
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				* "redundant copy" @ "alternative dervations"
					@ "applicative %list" $since b828
					$= (/ $impl ^ 'move!')
				+ "applicative 'rlist'"
					^ $dep_from ("%ReduceToReferenceList" @ %NPLA1),
				(
				+ "operative '$lvalue-identifier?'";
				/ DLDI "simplified combiners ()" ^ '$lvalue-identifier?'
					~ ('bound-lvalue?', '$resolve-identifier')
					$effective @ ('forward', 'forward!', 'first')
				),
				+ "applicative 'first%'" $dep_from ("%FirstFwd" @ %NPLA1Forms),
				/ @ "applicatives derived from 'foldr1'" $=
				(
					(
					/ $revert_ex(b858) "alternative derivation" @ "applicative \
						'foldr1'" ^ $dep_from 'first%' ~ 'first',
					/ $comp "native implementations" ($dep_from
						"%(FoldR1, Map1, ListConcat, Append)" @ %NPLA1Forms)
					);
					/ $comp "supported copy elision of the list elements",
					* "safety guarantee broken on list lvalues handled by the \
						safe operation subset implying call to 'foldr1'"
						$mismatch(Documentation.NPL) $since b858
						// See $2021-02 @ %Documentation::Workflow.
				),
				/ "preserved reference of the result" @ "applicative 'rest&'" $=
					$dep_from ("%First" @ %NPLA1Forms)
					// Irregular representation should be supported, esp. for \
						list operands.
				(
					/ $comp "native implementation" $dep_from
						("%RestRef" @ %NPLA1Forms),
					/ "alternative derivation"
						$= (/ $impl ^ ('$def%l!', '$lambda%')
							~ ('$defl', '$lambda'))
				),
				(
				/ DLDI "simplified ('set-first!', 'set-first@!', 'set-first%!')"
					^ 'forward!' ~ 'check-list-reference';
				* "missing check caused by wrong operand used for \
					'check-list-reference'" $effective @ "alternative \
					derivation of appications ('set-first!', 'set-first@!', \
					'set-first%!', 'first@', 'first&')" $since b876
					$= (/ $impl ^ 'forward!')
				),
				* "wrong result due to missing support of list subobject \
					reference" @ "alternative derivation"
					@ "operatives ('$and?', '$or?')" $since b912
					$= (/ $impl ^ 'null?' ~ 'nullv?'),
				/ @ "alternative derivations" @ "applicative %id" $=
				(
					/ $impl "simplified" ^ '$move-resolved!' ~ ('$if', 'move!');
					* $comp "qualifier tags missing in the result" $since b873
						// Since b873, %expire could make %TermTags::Unique \
							visible in the object language.
				)
			)
		)
	)
),

b912
(
	/ $fmt @ "%.clang-format" $=
	(
		+ 'SpaceBeforeCpp11BracedList: false',
		+ 'SpaceBeforeInheritanceColon: true',
		+ 'SpaceBeforeRangeBasedForLoopColon: true',
		/ 'BinPackArguments: false' -> 'BinPackArguments: true',
		/ 'BinPackParameters: false' -> 'BinPackParameters: true',
		+ $design "some commented out configurations documented at Clang 12 \
			documentation but not introduced before LLVM Github Monorepo",
		/ 'BreakBeforeTernaryOperators: false'
			-> 'BreakBeforeTernaryOperators: true',
		/ 'BreakConstructorInitializersBeforeComma: false'
			-> 'BreakConstructorInitializers: BeforeColon',
		+ 'BreakInheritanceList: BeforeColon',
		+ 'AlignConsecutiveMacros: false',
		+ 'AllowAllArgumentsOnNextLine: true',
		+ 'AllowAllConstructorInitializersOnNextLine: true',
		/ 'AllowShortBlocksOnASingleLine: false'
			-> 'AllowShortBlocksOnASingleLine: Never',
		+ 'AllowShortLambdasOnASingleLine: Empty',
		- DLDI "redundant space" @ "%AllowShortLoopsOnASingleLine",
		/ 'AlwaysBreakTemplateDeclarations: true'
			-> 'AlwaysBreakTemplateDeclarations: Yes',
		+ 'BreakStringLiterals: false',
		+ 'FixNamespaceComments: false',
		+ 'IndentGotoLabels: false',
		+ 'PenaltyBreakAssignment: 80',
		+ 'PenaltyBreakTemplateDeclaration: 0',
		+ 'ReflowComments: false',
		+ 'SpaceAfterLogicalNot: false'
		+ 'SpaceInEmptyBlock: false'
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ DLDI "functions %(RelayForEval, RelayForCall)"
					!^ "%RelayForEvalOrDirect"
					$dep_to "simplified evaluation relay",
				/ "bound subobject reference with sigil '&' for traling list \
					arguments" @ "function %BindParameter"
					// Although the %shared_ptr instance is introduced, it can \
						actually benefit performance in some list operations.
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLDI "functions %(Eval, EvalRef, EvalString, EvalStringRef)"
					!^ "%RelayForEvalOrDirect"
					$dep_to "simplified evaluation relay",
				+ "function %ListConcat",
				* DLDI "missing term cleanup"
					@ "functions %(AccL, AccR, FoldR1, Map1)" $since b898,
					// This did not expose wrong behavior because the \
						move-after states of %ValueObject and %TermContainer \
						are empty. Note the postcondition of the move of \
						%ystdex::any is not exposed here.
				/ DLDI "simplified functions %(Cons, ConsRef, AccL, AccR)"
				/ DLI "simplified object layout" @ "recursive calls"
					@ "functions %(AccL, AccR, FoldR1, Map1)",
				/ DLI ^ "allcator for term reference constructed by first \
					element extraction" @ "functions %(FoldR1, Map1)",
				+ "function %Append"
			),
			/ %NPLA1Internals $=
			(
				- "function template %RelayForEvalOrDirect"
					$dep_all_from "simplified evaluation relay"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ $lib "added native implementation enabled by default"
						@ ("applicative \
						'list-concat'" ^ $dep_from ("%ListConcat"
						@ %NPLA1Forms), "applicative %append"
						^ $dep_from ("%Append" @ %NPLA1Forms),
						"applicative 'derive-current-environment'",
						"applicative 'derive-environment'"),
					- DLDI "redundant 'Forms::'" @ "calls",
					* "missing refinement of argument count" @ "native \
						derivation" @ "applicative 'make-standard-environment'"
						$since b910
						$= (/ $impl ^ "%RetainN" ~ "%Retain"),
				//	/ DLDI "simplified derivation" @ "applicative \
						'list-extract'" ^ ('map1', 'list%') ~ ('accr', 'null?',
						'forward-first%', 'rest%', 'cons%'),
					(
					/ DLDI "simplified derivation" @ "operatives '$let', \
						'$let%', '$let/e', '$let/e%'" ^ 'rest%' ~ 'list-rest';
					- $revert(b839) "applicative 'list-rest%'"
					)
				),
				/ DLI "simplified space" @ "alternative derivation"
					@ "function %LoadStandardDerived"
					@ "function 'ensigil'"
					// This get less one line.
			),
			/ DLI ^ "allocator" @ "initialization of %ContextHandler"
				@ ("functions %Forms::(WrapRef, WrapOnceRef, Unwrap, Apply, \
				ForwardFirst)" @ %NPLA1Forms, "function %ReduceForCombinerRef"
				@ %NPLA1Internals)
		),
		- DLDI "unused lambda-capture" @ "member function %ValueObject::Query"
			@ %YSLib.Core.YObject,
			// To eliminate Clang++ warning: [-Wunused-lambda-capture].
		- $dev $lib "header inclusion %YSLib.Core.YEvent" @ 'YF_Use_XCB' @ %XCB
	),
	/ $dev "enhanced %YB_IMPL_GNUPP detection" @ %YBase.YDefinition
),

b911
(
	/ %Tools.Scripts $=
	(
		* "passed wrongly quoted string as the command"
			@ "applicative 'compile-ok'" @ "platform %Win32"
			@ "%SHBuild-YSLib-common.txt" @ $since b796
			// This would detected the wrong compiler style and the compiler \
				options.
			$= (/ ^ "negated %COMSPEC detection" ~ "%SHELL detection"),
				// %SHELL can be set by MSYS shells. %COMSPEC is assumed to \
					be compatible to 'CMD.exe', which is more reliable. See \
					also https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/system-wsystem#remarks.
		/ @ "%SHBuild-common-toolchain.sh" $=
		(
			* "missing optional parameter for options other than '-xc'"
				@ "function %SHBuild_CheckCompiler"
				$= (+ "trailing parameters");
			/ $forced DLDI "functions %(SHBuild_CheckCC, SHBuild_CheckCXX)"
		),
		/ @ "%SHBuild-build.sh" $=
		(
			/ DLDI "quoted all arguments" @ "%SHBuild_Puts calls"
				@ "%SHBuild-build.sh",
			+ "workaround to MSYS2 x86_64 binutils with ASLR enabled by \
				default used with G++" ^ $dep_from
				("%SHBuild_CheckCompiler" @ "%SHBuild-common-toolchain.sh")
		)
	),
	/ %YFramework $=
	(
		* $dev "missing renaming %ymsgdef.h" @ "Microsoft VC++ project"
			$since b872,
		/ %NPL $=
		(
			+ $dev "header inclusion %YException" @ %SContext,
			/ %NPLA1Internals $=
			(
				/ @ 'NPL_Impl_NPLA1_Enable_TCO' $=
				(
					- "call to %HandleResultRequests"
						@ "function %PrepareTCOEvaluation";
					* $comp "invalid lifting requests for TCO" $orig (@ %NPLA1
						$since b854) $dep_to "redundant TCO result lifting",
						// See $2021-02 @ %Documentation::Workflow.
					/ @ "class %TCOAction" $=
					(
						/ ("merged %HandleResultRequests" -> "%operator()"),
						/ "function %SetupTCOLift" -> "2 functions %SetupLift"
					)
				),
				- $revert(b884)
					"function template %ReduceSubsequentCombinedBranch",
					// This is no longer used. A similar function template \
						with an environment guard parameter could be more \
						useful.
				+ "struct %NonTailCall",
				(
				+ "struct %TailCall";
				/ DLDI "simplified function %RelayForEvalOrDirect"
				),
				+ "class template %Combine"
			),
			- '&&' @ "2nd parameter type" @ "constructor %EnvironmentSwitcher"
				@ %NPLA,
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				+ "function %ForwardFirst"
					^ $dep_from ("%EnvironmentSwitcher" @ %NPLA),
				- "function %ForwardListFirst"
					$dep_from "removal of old list forwarding applicative",
				/ DLDI "optimized environment switching",
				/ DLDI "simplified functions %(FoldR1, Map1)",
				(
				/ $revert_ex(b872) "checked host environment values"
					@ "function %Apply" ^ "%Environment::EnsureValid";
				/ DLI "simplified reduction function calls" ^ $dep_from
					("%(NonTailCall, TailCall, Combine)" @ %NPLA1Internals);
				/ $comp DLI "simplified environment switch"
					^ "%NPL::SwitchEnvironmentUnchecked"
					~ "%NPL::SwitchEnvironment"
				)
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				* $comp "missing proper lifting of the call result"
					@ "alternative derivation" @ "operative '$sequence'"
					@ 'NPL_Impl_NPLA1_Enable_TCO' $since b910
					$dep_from "redundant TCO result lifting",
					// See $2021-02 @ %Documentation::Workflow.
				(
				+ "applicative 'forward-first%'" ^ $dep_from
					("%ForwardFirst" @ %NPLA1Forms);
				/ DLDI "simplified" @ ("alternative derivation"
					@ "appliative %first", "derivation"
					@ "applicative 'list-extract'")
					^ 'forward-first%' ~ 'forward-list-first%';
				- "applicative 'forward-list-first%'"
					$dep_from "removal of old list forwarding applicative"
				)
			)
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ $dev "header inclusion %YObject" @ %YEvent
					-> "%YBase.YStandardEx.Examiner",
				(
				+ $dev $lib "include %YException" @ %YMessage;
				/ $dev "header inclusion %YCoreUtilities" @ %YObject
					-> "%YShellDefinition" $dep_from %NPL.SContext,
				),
				/ $dev "header inclusion %YObject" @ %YString
					-> "%YShellDefinition",
				/ $dev "header inclusion %YObject" @ %YDevice
					-> "%(YFunc, YBase.YStandardEx.Exception)"
			)
		)
	)
),

b910
(
	/ DLDI 'friend YB_PURE' -> 'YB_PURE friend' $effective @ "%operator=="
		@ "class template %WrappedContextHandler" @ %YFramework.NPL.NPLA1,
		// More consistent to other code.
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			* "missing saving %ContextNode::LastStatus before passes"
				@ "member function %ContextState::DefaultReduceOnce"
				@ 'NPL_Impl_NPLA1_Enable_Thunked'
				$orig (@ "function %ReduceOnce" $since b841),
			/ DD "restricted precondition" @ 'NPL_Impl_NPLA1_Enable_TCO'
				@ "functions %(RelayForEval, RelayForCall)",
			/ @ "functions %(ReduceCombinedBranch, ReduceCombinedReferent)" $=
			(
				/ "removed combined call request" @ 'NPL_Impl_NPLA1_Enable_TCO'
					$dep_from "reset last status before applicative calls"
					$dep_to "removal of combined call request",
				/ "support destroying temporary objects on exception"
					$dep_from ("temporary guard" @ "class %TCOAction"
					@ 'NPL_Impl_NPLA1_Enable_TCO' @ %NPLA1Interals)
			),
			* "nonmodifying list subobjects wrongly moved on list \
				initialization" @ "function %BindParameter" $since b898
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			* DD "comment" @ ("function %Not" $since b861,
				"functions %(First, FirstVal)" $since b859),
			* "missing reset %ContextNode::LastStatus before the sum call"
				@ ("function %AccR" $since b898, "function %FoldR1" $since
				b899) $dep_to "reset last status before applicative calls",
				// See $2021-02 @ %Documentation::Workflow.
			/ DLDI "simplified resetting %ContextNode::LastStatus before \
				non-tail calls of applicative argument"
				@ "functions %(AccR, FoldR1)" $dep_to
				"reset last status before applicative calls",
				// See $2021-02 @ %Documentation::Workflow.
			/ DLDI "parameter name" @ "function %Not" -> 'x' ~ 'term',
				// To indicate the parameter represents an operand in the \
					object language.
			* "missing setup the next term" @ "functions of native \
				implementations of applicatives with applicative arguments"
				@ '!NPL_Impl_NPLA1_Enable_InlineDirect \
				&& NPL_Impl_NPLA1_Enable_Thunk' $since b898,
				// See $2021-02 @ %Documentation::Workflow.
			+ "assertion to ensure the term same to the next term"
				@ "function %ReduceN",
			(
			+ "function %(Rest, RestVal)";
			/ DLDI "simplified function %(First, FirstVal)"
			),
			+ "function %RestRef"
		),
		/ @ 'NPL_Impl_NPLA1_Enable_TCO' @ %NPLA1Internals $=
		(
			/ @ "function %PrepareTCOEvaluation" $=
			(
				+ "assertion to ensure identities of term in the TCO \
					action and the parameter are same" $dep_from
					("%(RelayForEval, RelayForCall)" @ %NPLA1)
					$dep_to "assertion of TCO preparation"
					^ $dep_from "%TCOAction::GetTermRef",
					// See $2021-02 @ %Documentation::Workflow.
				/ DLDI "simplified"
					^ $dep_from "%TCOAction::CompressForGuard",
				* "result handling did not come before frame compression"
					$since b878 $dep_to "order of TCO result handling"
					// See $2021-02 @ %Documentation::Workflow.
			),
			/ DLDI "classes declaration order",
				// For easier in-class inlining definition in %TCOAction.
			/ @ "class %TCOAction" $=
			(
				+ "function %GetTermRef",
				/ DLI @ "function %operator()" $=
				(
					/ "simplified term" @ "result handling"
						$dep_from "assertion of TCO preparation",
					/ $forced $design "simplified"
						$dep_from "simplified result request"
				),
				/ @ "function %HandleResultRequests" $=
				(
					- "term parameter" $dep_from "%operator()"
						$dep_to "simplified result request",
					- "combiner request check" $dep_all_from
						"reset last status before applicative calls"
						$dep_to "removed combiner request check",
					* "missing reset lifting result request" $orig (@ %NPLA1
						$since b854) $dep_from ("order of TCO result handling"
						@ 'list-concat' @ "%LoadGroundContext" @ %Dependency),
						// See $2021-02 @ %Documentation::Workflow.
					* "missing support of lifting more than once"
						$since b854
						// See $2021-02 @ %Documentation::Workflow.
				),
				+ "functions %(CompressFrameList; \
					CompressForContext; CompressForGuard)",
				+ "function %HandleResultLift",
				+ "function %SetupTCOLift",
				(
				- "function %RequestCombined"
					$dep_from "removal of combined call request";
				- DLI "combined call resquest data member"
					$dep_from "removed combiner request check"
				),
				- "function %RequestLiftResult"
					$dep_from "%A1::SetupTCOLift",
				(
				+ "temporary guard";
				- "data member %TermRef"
				)
			),
			(
			/ DLDI @ "function template %RelayForEvalOrDirect"
				^ $dep_from "%TCOAction::SetupTCOLift"
				~ "%SetupTCOLift";
			- "function %SetupTCOLift"
			),
			/ "parameter order" @ "function template %RelayCurrentNext"
				// To be consisten with other API prefixed with 'Relay'.
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				/ $lib "added native implementation enabled by default"
					@ "applicatives 'make-standard-environment', 'first-null?'",
				* "missing fowrading the 2nd argument"
					@ "applicative 'list-concat'" $since b859,
					// See $2021-02 @ %Documentation::Workflow.
				/ $lib "added native implementation enabled by default"
					@ ("%restv" ^ $dep_from ("%RestVal" @ %NPLA1Forms),
					'rest&' ^ $dep_from ("%RestRef" @ %NPLA1Forms)),
				(
				/ $lib "added native implementation enabled by default"
					@ "applicative 'rest%'"
					$dep_from (("%BindParameter", ^ "%Rest") @ %NPLA1Forms);
				* $comp "inconsistent internal derivation of 'rest%' used"
					$since b909
					// This should have 'move!' in the body.
				),
				+ "%forward call on the argument" @ "derivation"
					@ "applicative 'list-rest%'",
				/ DLDI "order of derivation" @ "operative $as-environment"
					// This does use '$let', so put it later.
			),
			/ DLDI "all parameter name for handler used by \
				'RegisterUnary<>' call" -> 'x' ~ 'term',
				// Similar to %Forms::Not.
			/ "applicative %load" @ "function %LoadModule_std_io" $=
			(
				/ DLI "simplified" @ 'NPL_Impl_NPLA1_Enable_Thunked'
					^ "%ReduceToLoadExternal" ~ "%RelayToLoadExternal"
					$dep_to "avoided use of RelayToLoadExternal",
				/ DLDI "simplified by removing %RetainN call"
					$dep_from "refined arguments for loading"
			),
			// %RelayToLoadExternal is preserved for external \
				implementations.
			/ DLI @ "function %ReduceToLoadExternal" $=
			(
				+ $dep_from "%Forms::RetainN call"
					$dep_to "refined arguments for loading",
				/ "avoid redundant next term setup"
					^ "%ContextState::ReduceOnce" ~ "%ReduceOnce"
					// The consistency is now guaranteed by the NPLA1 \
						reduction function requirements.
			)			
		)
	),
	/ %YBase.YStandardEx $=
	(
		/ @ "binary operator templates" @ %Operators $=
		(
			+ "%std::move calls in pass-by-value arguments",
			/ @ "left binary operator templates" $=
			(
				* "inconsistent parameter types for operator function templates"
					$since b576,
					// One parameter type should be '_type' without 'const&' \
						to be aligned with the non-left ones.
				* "missing specializing template with 2 same template arguments"
					$since b260
					// This would break left binary operator templates \
						combining with non-left ones due to ambiguity.
			)
		),
		/ @ "%operator(+=, -=)" @ "class template %transformed_iterator" $=
		(
			/ "simplified exception specifications",
			(
			/ "friend non-member overloads" -> "member overloads";
				// This is more idiomadic, also fixing the following bug. 
			* $comp "inability to be accessed by modifiable rvalue objects"
				$since b600
			)
		)
	)
),

b909
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ @ "class %Environment" $=
			(
				/ DLDI "simplified function %EnsureValid",
				+ "check to ensure nonnull parent environment pointer"
					@ "function %CheckParent"
					@ 'NPL_NPLA_CheckParentEnvironment',
					// As %EnsreValid.
				+ "function %IsTemporary"
			),
			+ "function %IsTemporaryTerm"
				^ $dep_from "%Environment::IsTemporary",
			+ "function %IsModifiableTerm",
			/ @ "functions %ResolveEnvironment" $=
			(
				+ "overload with parameter of type 'ValueObject&' and \
					additional parameter to specify the move operation";
				+ "overload with type 'TermNode&' to support environment move"
			)
		),
		/ @ "namespace %Forms" @ %NPLA1Forms $=
		(
			/ @ 'NPL_Impl_NPLA1_Enable_Thunked' @ "function %EqualTermValue" $=
			(
				/ DLDI "%EqualTermValue" @ 'NPL_Impl_NPLA1_Enable_Thunked',
					// To eliminate G++ warnings: [-Wunused], \
						[-Wsuggest-attribute=pure].
				+ $lib "reducer names"
			),
			/ DLDI "%MakeEnvironment",
			/ "vau handler" $=
			(
				/ DLI "dispatched call" ^ "reference" ~ "pointer to member",
				(
				(
				- "log information for parents" @ 'NPL_Impl_NPLA1_TraceVauCall',
				- DLDI "parent comparation" @ "friend %operator==",
				(
				/ DLI "dispatched saving check on moving for owning static \
					environments" @ 'NPL_Impl_NPLA1_Enable_TCO',
				/ DLI "parent pointer" -> "parent object";
				);
				- DLI "static parent pointer"
				// See $2021-01 @ %Documentation::Workflow.
				);
				+ "constructor to support explicit parent object"
					$dep_to "direct vau parent"
				)
			),
			/ @ "functions %(VauWithEnvironment, VauWithEnvironmentRef)" $=
			(
				/ "supported environment list as the vau parent"
					$dep_from ("%MakeEnvironment", "direct vau parent"),
				+ "environment check" ^ "%Environment::EnsureValid",
					// This is more consistent to %CheckEnvironment.
				/ "supported move the environment argument"
					^ $dep_from ("%ResolveEnvironment with parameter of \
					'ValueObject&'" @ %NPLA)
			),
			+ "function %CheckParent",
				// The behavior is more consistent to the combiner creation \
					now (e.g. with nested exception thrown).
			/ $comp DLI "supported move the environment argument"
				@ "functions %(SetWithNoRecursion, SetWithRecursion, Eval, \
				EvalRef, EvalString, EvalStringRef, Apply)"
				$dep_from ("%ResolveEnvironment" @ %NPLA)
		),
		(
		/ DLI "all calls to %ReduceNextCombinedBranch"
			-> "calls to %ReduceCombinedBranch"
			$effective @ ("functions %(And, Or)" @ %NPLA1Forms);
			// Setting the next term is redundant due to the change to \
				%ReduceCombinedBranch since b898.
		- $revert(b882) "function %ReduceNextCombinedBranch" @ %NPLA1
		),
		(
		+ "function %AssertNextTerm" @ %NPLA1Internals;
		+ "assertion to ensure no %SetupNextTerm call is needed for NPLA1 \
			reduction functions" $effective @ (("member functions \
			%(ContextState::DefaultReduceOnce, FormContextHandler::operator())"
			'NPL_Impl_NPLA1_Thunked && !NPL_Impl_NPLA1_Enable_TCO'
			@ "function %ReduceOrdered") @ %NPLA1,
			("functions %Forms::(Eval, EvalRef, EvalString, \
			EvalStringRef)", "%operator()" @ "vau handler") @ %NPLA1Forms)
			^ ("%AssertNextTerm" @ %NPLA1Internals)
		),
		/ $dev %NPLA1 $=
		(
			(
			/ $lib $design $impl "setup next term"
				@ 'NPL_Impl_NPLA1_Enable_Thunked' @ "function %ReduceOnce",
				// See $2021-01 @ %Documentation::Workflow.
			+ $doc "'\pre' command to ensure proper next term set"
				@ "Doxygen comment" @ "member object %ContextState::ReduceOnce";
			- $lib $impl "redundant %SetupNextTerm call" @ "functions \
				%(ContextState::DefaultReduceOnce, ReduceCombinedBranch, \
				ReduceCombinedReferent, FormContextHandler::operator())"
				@ 'NPL_Impl_NPLA1_Enable_Thunked'
				// This is redundat due to change to the reducing functions \
					used in %SetupDefaultInterpretation (including \
					%ReduceCombinedBranch) for since b898.
			),
			- $lib $impl "simplified to avoid redundant %SetupNextTerm call"
				@ "functions %(RelayForCall, RelayForEval)",
			/ $lib $impl "simplified" @ 'NPL_Impl_NPLA1_Enable_Thunked'
				@ "member function %FormContextHandler::operator()"
				^ "%A1::RelayCurrentNext" ~ "%A1::ReduceCurrentNext"
			/ $lib $impl "simplified"
				@ 'NPL_Impl_NPLA1_Enable_Thunked && !NPL_Impl_NPLA1_Enable_TCO'
				@ "function %ReduceOrdered"
				^ "%A1::RelayCurrentNext" ~ "%A1::ReduceCurrentNext"
		),
		/ %Dependency $=
		(
			/ $comp "supported parent environment lists" @ "functions with \
				'/e' in the name" $dep_from
				("%(VauWithEnvironment, VauWithEnvironmentRef)" @ %NPLA1Forms)
				$dep_to "parent environment lists support",
			/ @ "function %LoadGroundContext" $=
			(
				+ "applicative %ensigil",
				* "missing preserving reference on generated initializers"
					@ "applicative 'symbols->ipmorts'" $since b908
					$= (/ $impl "combining" ^ 'list' ~ 'list%');
				(
				* $comp "missing preserving reference on initializers"
					@ "operatives (('$provide/let!'; '$provide!'), \
					'$import!')" $since b908,
					// The bug would make it impossible to bind \
						nonmodifying references even with '&'.
				+ "operative '$import&!'" ^ $dep_from "%ensigil"
				),
				(
				+ "applicative 'check-parent'"
					^ $dep_from ("%CheckParent" @ %NPLA1Forms);
				/ "all uses of applicative 'check-environment' for applicative \
					derivation of function name with '/e'" -> 'check-parent'
					$dep_from $forced ("%(VauWithEnvironment, \
					VauWithEnvironmentRef)" @ %NPLA1Forms)
				),
				/ "alternative derivation" @ "applicative 'check-environment'"
					$dep_from $forced ("%(VauWithEnvironment, \
					VauWithEnvironmentRef)" @ %NPLA1Forms)
					$= (/ $impl ^ 'eval%' ~ '$vau/e%'),
				/ "simplified derivation" @ "applicative 'derive-environment'"
					@ 'NPL_Impl_NPLA1_Use_LockEnvironment'
					$dep_from "parent environment lists support",
				+ "applicative 'modifiable?'"
					^ $dep_from ("%IsModifiableTerm" @ %NPLA),
				+ "applicative 'tempoary?'"
					^ $dep_from ("%IsTemporaryTerm" @ %NPLA),
				/ $comp DLI "supported move the environment argument"
					@ "applicative 'freeze-environment!'"
					$dep_from ("%ResolveEnvironment" @ %NPLA),
				/ "avoided redundant copies" @ "applicatives ('restv', 'rest%')"
					^ 'move!'
			),
			/ DLI "optimized variables to be provided" ^ "sigil"
				$effective @ "function %LoadModule_std_promises",
				// Since '$lambda/e' and '$lambda/e%' have no native \
					implementations currently and all such functions \
					derivable are derived from the vau abstractions, all \
					functions are effected uniformly.
			- DLI "reduced number of %ContextNode::Perform calls in the same \
				function" @ "basic derivations" @ "function %LoadGroundContext",
				// See comment in the code.
			/ "set source names before calls to %ContextNode::Perform"
				^ "%REPLContext::ShareCurrentSource"
		)
	),
	/ @ "%SHBuild-YSLib-common.txt" @ %Tools.Scripts $=
	(
		/ @ "prelude" $=
		(
			/ "overrode applicative 'derive-environment' for poisoned functions"
				$dep_from "parent environment lists support",
			/ DLI "optimized poisoning functions" ^ ('ensigil'
				@ "%LoadGroundContext" @ %YFramework.NPL.Dependency)
		),
		(
		/ "supported sigil" @ "operative '$env-de!'" ^ 'desigil';
		/ DLI "defined provided functions with '&' to enable forwarding"
			$dep_from
			('$provide!' @ "%LoadGroundContext" @ %YFramework.NPL.Dependency)
		)
	)
),

b908
(
	/ %Tools.Scripts $=
	(
		/ DLDI "simplified '$lambda'" @ "development tools build calls",
		/ @ "%SHBuild-common-toolchain.sh" $=
		(
			+ "function %SHBuild_CheckCompiler";
			/ DLDI "simplified functions %(SHBuild_CheckCC, SHBuild_CheckCXX)"
		),
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			/ DLDI "reordered imports",
			(
			/ DLI "made static environment closed and avoided imports"
				@ "applicative 'rmatch?'";
			- "top-level imports ('regex-match?', 'string->regex')"
			),
			(
			/ DLDI "avoided imports"
				^ $dep_from ('derive-environment' @ %YFramework.NPL.Dependency);
			- $impl "imports from 'std.strings'",
			- $impl "top-level import 'system'"
			),
			/ DLDI "simplified applicative 'ss-verbose-puts'",
			/ DLI "made static environment closed"
				@ "applicatives ('safeenv-empty?, 'safeenv-restore')"
				^ '$defl/e!' ~ '$defl!',
			/ DLI "function parameters" ^ '&',
			* "missing evaluation on the predicate and message parameters"
				@ "operative '$assert'" $since b837
				// This worked occasionally for operatives '$assert-nonempty' \
					and '$assert-absolute-path' which called '$assert'.
		)
	),
	* DD "wrong applicative %rest" @ %Documentation.NPL $mismatch $since b875,
		$= (/ "%rest" => "%restv"),
	* "missing 'ynothrow'" @ "constructor for moving from the base object"
		@ "class template %basic_string" @ %YBase.YStandardEx.String
		$since b833,
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ @ "member function %TermReference::get"
				@ 'NPL_NPLA_CheckTermReferenceIndirection' @ %NPLA $=
			(
				/ DLI "simplified" ^ 'expire' ~ 'lock',
				* "always failed check without the associatd environment"
					$since b876
			),
			/ @ "namespace %Forms" @ %NPLA1Forsm $=
			(
				/ @ "functions %(AccR, FoldR1, Map1)" $=
				(
					* "unexpected early return"
						@ '!NPL_Impl_NPLA1_Enable_Thunked' $effective @ ("%AccR"
						$since b898, "%(FordR1, Map1)" $since b899) $=
					(
						/ $impl ^ "%A1::ReduceCurrentNext" ~ "%RelaySwitched",
						/ $impl !^ "%ContextNode::LastStatus"
							// See $2021-01 @ %Documentation::Workflow.
					),
					/ "avoided redundant %RelaySwitched calls"
						@ 'NPL_Impl_NPLA1_Enable_Thunked'
						// This was redundant because it actually does not \
							construct recursive calls in C++.
				),
				/ @ "function %EqualTermValue" $=
				(
					/ DLI "avoided redundant accesses for short circuit \
						evaluations" @ 'NPL_Impl_NPLA1_Enable_Thunked',
					* "unexpected early return"
						@ !'NPL_Impl_NPLA1_Enable_Thunked' $since b904
						// See $2021-01 @ %Documentation::Workflow.
				)
			),
			/ DLDI %NPLA1 $=
			(
				+ DLI 'YB_STATELESS' @ "function %QueryTailOperatorName"
					@ '!NPL_Impl_NPLA1_Enable_TCO',
					// To eliminate G++ 10.2 warning: \
						[-Wsuggest-attribute=const].
				* $design "missing reduction status" @ "one of alternative \
					implementations" @ "function %SetupDefaultInterpretation"
					$since b895
					$= (+ "returning %ReductionStatus::Neutral")
					// See $2021-01 @ %Documentation::Workflow.
			),
			/ %Dependency $=
			(
				/ "captured environments" $effective @ ("operative '$binds1?'"
					@ "function %LoadModule_std_environments", "applicative \
					'env-empty?'" @ "function %LoadModule_std_system") $=
				(
					/ $impl ^ "'derive-current-environment'";
					* "missing prevention of injections of 'std.strings' names \
						from the dynamic environment on the call site" $comp
						$since b839
						// The order of parent environments counts.
				),
				/ @ "function %LoadGroundContext" $=
				(
					/ @ "applicative 'make-standard-environment'" $=
					(
						/ DLDI "simplified derivations"
						/ "unwrappable applicative provided" @ $since b802
							$= (/ $impl ^ '$lambda/e' ~ '$vau/e')
					),
					+ "applicative 'derive-environment'",
					/ DLI "moved 'exprseq'" $effective
						@ "alternative derivation"
						@ "operatives ('$sequence', '$when', '$unless')"
						$= (/ ^ 'move!'),
					/ DLDI "construction of evaluation structure" ^ 'list*'
						~ 'list*%' $effective @ ("alternative derivations"
						@ "operatives ('$when', '$unless')",
						"operatives ('$let', '$let%', '$let/e', '$let/e%', \
						'$let*', '$let*%', '$letrec', '$letrec%', \
						'$bindings/p->environment', '$bindings->environment', \
						$provide!)"),
					/ DLDI "construction of evaluation structure" ^ 'list'
						~ 'list*' $effective @ "operatives '$let*', '$let*%', \
						'$letrec', '$letrec%', '$bindings/p->environment', \
						$provide/let!)",
						// Also make the implementations consistent to ones of \
							operatives like '$defl!' and functions in other \
							modules.
					/ DLDI "combined groups of primitive register calls",
					(
					+ "applicative %desigil";
					+ "applicative 'symbols->imports'";
					/ ("supported sigil support for '&' and '%' and forwarding \
						imports", "forwarding imports") @ "operatives \
						('$provide/let!'; '$provide!', '$import!')"
						^ 'symbols->imports'
					)
				),
				/ DLDI "simplified function %InstallHardLink"
			)
		)
	)
),

b907
(
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ @ "%SHBuild-YSLib.sh" $=
			(
				- "'echo' command to print reserved information";
				+ "%(INCLUDES, INCLUDE)",
				+ "%YSLib_BaseDir initialization",
				(
				+ "overridable variable %SHBuild_PCH_stdinc_h";
				+ "function %SHBuild_S1_InitializePCH"
				)
			),
			/ DLDI "simplified quotes" @ "%SHBuild_Verbose_ check"
				@ "%SHBuild-build.sh",
			- DLDI "%SHBuild_BaseDir" @ "%(SHBuild-build.sh, \
				SHBuild-self-host.sh, SHBuild-self-host-DLL.sh)",
				// This is set in %SHBuild-bootstrap.sh.
			/ DLDI @ "%SHBuild-bootstrap.sh" $=
			(
				- "'.' command for %SHBuild-common-toolchain.sh"
					@ "%SHBuild-bootstrap.sh",
				/ "reordered and simplified source inclusion commands"
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				(
				+ "applicative 'use-fsanitize?'";
				(
				+ "applicative 'use-asan?'";
					// This only support options like '-fsanitize=address' but \
						not '-faddress-sanitize'. The latter is nonsense to \
						G++ and current Clang++. See also See $2020-12 \
						@ %Documentation::Workflow.
				+ ' -U_FORTIFY_SOURCE -fno-omit-frame-pointer -fno-common'
					@ "build flags %(CFLAGS, CXXFLAGS) for detected sanitizer \
					builds",
				)
				(
				+ "applicative 'use-san?';
				+ "postfix %LDFLAGS with '-Wl,-z,undefs' for Clang++ when \
					santizers are used"
				),
				+ "applicatives ('use-san?', 'use-tsan?', 'use-msan?',
					'use-ubsan?', 'use-lsan?')"
				),
				+ "output for needed setting on %SS_Verbose"
					@ "applivative %SHBuild_Extend_CallVariables",
				/ @ "applicative 'build-with-conf-opt'"
				(
					+ "%SHBuild_Extend_CallVariables call" @ "final settings"
						$dep_to "SHBuild library variables extension",
					+ "%LIBS echo when %LD is used after %LDFLLAGS echo"
				),
				/ DLDI "simplified static environment" @ "applicatives \
					('safeenv-get', 'safeenv-set', 'ss-verbose-puts')",
				/ DLDI "poisoned unsafe functions and safe environment \
					functions" ^ ('$provide!', 'make-environment')
					~ '$provide/d!' $dep_to "removal of calls to '$provide/d!'"
			),
			(
			/ $forced "callbacks for 'build-with-conf-opt'"
				$dep_from "SHBuild library variables extension"
				$effective @ "%(SHBuild-YSLib-build.txt, SHBuild-BuildApp.txt")
				$= (- "redundant %SHBuild_Extend_CallVariables call");
			* $comp "accumulated %(LDFLAGS, LIBS) more than once"
				@ "development tool builds" @ "%SHBuild-YSLib-build.txt"
				$since b906
			),
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				* "wrong pattern for sanitizer detection" $since b906
					$= (/ $impl ^ $dep_from ('use-ubsan?'
						@ "%SHBuild-YSLib-common.txt")),
						// The address sanitizer pattern was already wrong. \
							And actually the undefined behavior santizer is \
							offending.
				* "%LDFLAGS pollution caused by %SHBuild_LDFLAGS extension \
					when %LDFLAGS is unused" @ "library build" $since b906
					// This is needed fixing even if the call to \
						%SHBuild_Extend_CallVariables is removed, for base \
						%LDFLAGS used by %Win32 at least.
			),
			/ @ "%SHBuild-BuildApp.txt" $=
			(
				* "wrongly adjustedd linker option with '-mwindows' for %debug \
					builds" $since b900
				- $re_add(b838) DLDI "variable %SHBuild_YSLib_Platform",
				* "platform-specific flags fix" $since b900
					// The platform detection now uses %MSYSTEM when \
						specified, which is consistent to \
						%SHBuild-YSLib-build.txt.
			)
		),
		- DLI "redundant inclusion of %Tools/SHBuild-common-toolchain.sh"
			@ "%install-sysroot.sh"
			// See $2020-12 @ %Documentation::Workflow.
	),
	/ "stage 1 build scripts" $=
	(
		/ "simplified scripts with %YSLib_BaseDir initialization and \
			%SHBuild-common-options.sh inclusion" ^ $dep_from ("%(INCLUDE_PCH, \
			INCLUDES, YSLib_BaseDir)" @ "%SHBuild-YSLib.sh" @ %Tools.Scripts)
			$effective @ ("%SHBuild-bootstrap.sh" @ %Tools.Scripts,
			"%test.sh" @ %Test),
		(
		/ "simplified scripts with stage 1 PCH options avaiable"
			^ $dep_from ("%SHBuild_S1_InitializePCH"
			@ "%SHBuild-YSLib.sh" @ %Tools.Scripts) $effective
			@ ("%SHBuild-YSLib.sh" @ %Tools.Scripts, "%test.sh" @ %Test)
			~ "%SHBuild_CheckPCH";
		+ $comp "overridable %SHBuild_PCH_stdinc_h" @ "%test.sh" @ %Test
		),
		- DLI "duplicate initialization of build environment variables"
			$effective @ ("%test.sh" @ %Test, "%SHBuild-bootstrap.sh"
			@ %Tools.Scripts)
			// See $2020-12 @ %Documentation::Workflow.
	),
	/ $dev "unchecked shell scripts" $effective
		@ ("%3rdparty/freetype/builds/build-ds.sh",
		"%doxygen-cjk.sh" @ %Documentation) $=
	(
		// See $2020-12 @ %Documentation::Workflow.
		+ "normalized shebang with 'env'",
		+ "copyright notice",
		+ "description",
		/ "optimized to eliminate ShellCheck issues"
	),
	/ "%doxygen-cjk.sh" @ %Documentation $=
	(
		/ "supported working directory other than 'doc'",
		/ DLDI ^ "%SHBuild_Pushd, SHBuild_Popd",
		* "wrong 'sed' command argument" $since b380
	),
	* $comp "missing console window" @ "default %debug configurations"
		@ "platform %Win32" @ %YSTest $since b903
		$dep_from ("%SHBuild-BuildApp.txt" @ %Tools.Scripts),
	/ %YFramework.NPL $=
	(
		/ %NPLA1Forms $=
		(
			/ DLDI "simplified" @ "%operator==" @ "encapsulation constructed \
				from function %MakeEncapsulationType",
				// To eliminate Clang++ warning: [-Wunused-lambda-capture].
			/ "allowed empty body" @ "functions %(DefineLazy, \
				DefineWithNoRecursion, DefineWithRecursion, \
				SetWithNoRecursion, SetWithNoRecursion)"
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				/ DLDI "simplified operatives ('$let*', '$let*%')"
				- "operative '$let/d%'",
					// See $2021-01 @ %Documentation::Workflow.
				(
				/ "operative '$provide/d!'" -> '$provide/let!'
					$dep_from "removal of calls to '$provide/let!'";
				- "operative '$let/d'",
					// Ditto.
				/ DLDI "simplified operative '$provide!'" ^ '$provide/d!'
				),
				* "wrong parent environment constructed"
					@ "operative '$bindings->environment'" $since b839,
					// See $2021-01 @ %Documentation::Workflow.
					$= (/ $impl !^ 'make-standard-environment'),
				+ "applicative 'derive-current-environment'",
				+ "operative '$as-environment'"
			),
			/ DLI @ "function %LoadModule_std_promises" $=
			(
				/ $design "enforced sigil at the end of name of internal \
					encapsulation applicative",
					// To be consistent to 'box%'.
				/ $design "parameter name 'expr'"
					@ "operatives ('$lazy', '$lazy/e')" -> 'body',
					// To be consistent to %NPL.Documentation changes.
				/ "optimized expression parameter"
					@ "operatives ('$lazy', '$lazy/e')"
					@ "function %LoadModule_std_promises" ^ 'move!',
				/ "providing symbols"
					^ $dep_from (('$provide/let!', '$as-environment')
					@ "%LoadGroundContext") ~ ('$provide!', '__')
			)
		)
	),
	* DD "wrong parameter types" @ ("applicative %memoize",
		"operatives ('$lazy', '$lazy/e') %memoize") @ "promises module"
		@ %Documentation.NPL $since b856
),

b906
(
	/ %YFramework $=
	(
		+ 'YB_ATTR_nodiscard YB_PURE ynothrow'
			@ "member function %Environment::MakeTags" @ %NPL.NPLA,
		+ DLDI 'YB_ATTR_nodiscard YB_PURE' @ "function %MapPoint"
			@ "platform %Win32" @ "class %DSWindow" @ %'Helper_(DS)'.DSWindow,
			// Also to eliminate G++ 10.1 warning: [-Wsuggest-attribute=pure].
		/ %YCLib $=
		(
			+ $lib "workaround of invalid handling of completeness of \
				instantiated %unique_ptr with member initializer for G++ < 9.2"
				@ 'YCL_HostedUI_XCB || YCL_Android' @ "class %ScreenBuffer"
				@ %HostedGUI,
				// Actually no relavant G++ versions have been tested against \
					the defect because the member initializer was added since \
					b888, and either more recent versions of G++ (on Linux) \
					or Clang++ (on Android) are used. Thus, this is not an \
					engineering defect of missing testing.
			/ $design $impl "simplified constructor %Atom" @ %XCB
				// To eliminate Clang++ warning: [-Wunused-value].
		),
		/ %Helper $=
		(
			/ @ "class %Environment" @ %Environment $=
			(
				+ DLDI "brace-init-list '{}'" @ "data member %Root",
				* DD "wrong name" @ "'\sa' command" @ "Doxygen comment"
					@ "constructor" $since b693
			),
			/ DLDI "avoided redundant lambda capture" @ "function %AttachToHost"
				@ "platform %Win32" @ %HostedUI
				// To eliminate Clang++ 9.0.1 warning: \
					[-Wunused-lambda-capture].
		),
		/ DLDI %'YCLib_(Win32)' $=
		(
			/ "header guard names" @ %(COM, Registry, Consoles),
			/ "private data member" @ "class %WConsole" @ %Consoles
		)
	),
	/ @ "%test.sh" @ %Test $=
	(
		- '$EXESFX' @ "build command line",
		- DLDI "%SHBuild_NoAdjustSubsystem setting"
			// This is unused without %SHBuild being called.
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ @ "%SHBuild-common-options.sh" $=
			(
				/ "cleanup variable not used in stage 1" $=
				(
					// See $2020-10 @ %Documentation::Workflow.
					- "variables %(LDFLAGS_DYN; LDFLAGS_DYN_BASE, \
						LDFLAGS_DYN_EXTRA)";
					- "variables %(LIBS_RPATH, LIBPFX, DSOSFX)",
					- "variable %EXESFX"
						$dep_from ("build command line" @ %Test)
				),
				* "wrong warning options for %CFLAGS when the C++ compiler is \
					G++" $since b880
			),
			/ DLI "optimized compiler test commands" ^ '-pipe' $effective
				@ ("SHBuild-common-options.txt", "SHBuild-YSLib-common.txt"),
			(
			+ "applicative %SHBuild_Extend_CallVariables"
				@ "%SHBuild-YSLib-common.txt";
			/ DLDI "simplified %SHBuild-BuildApp.txt"
			),
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				+ "support of %(SHBuild_LDFLAGS, SHBuild_LIBS)"
					^ $dep_from ("%SHBuild_Extend_CallVariables"
					@ "%SHBuild-YSLib-common.txt"),
				/ "library building" $=
				(
					/ "supported %SHBuild_CXXFLAGS"
						@ "building the precompiled header",
					+ "warning to indicate additional flags fix is used",
					+ "detection of address sanitizer and the workaround for \
						building performance with dynamic YFramework build by \
						G++" @ "platform %Linux"
				)
			),
			* "missing check slashes in the 1st argument before call to \
				'hash'" $effective @ ("function %SHBuild_CheckedCall"
				@ "%SHBuild-common.sh" $since b562,
				"functions %(SHBuild_CheckCC, SHBuild_CheckXX)"
				@ "%SHBuild-common-toolchain.sh" $since b897)
			/ @ "%SHBuild-common.sh" $=
			(
				/ DLDI "simplified 'exit' without '$?'" $effective
					@ "functions %(SHBuild_CheckedCall, \
					SHBuild_CheckedCallSlient)",
				/ @ "function %SHBuild_S2_Prepare" $=
				(
					+ DLD "ShellCheck directive for default value from %cd \
						command result",
						// To eliminate ShellCheck warning: SC2164.
					* "missing quotes on the argument of \
						%SHBuild_GetSystemPrefix" $since b905
						// Also to eliminate ShellCheck warning: SC2046.
				),
				/ DLDI "simplified function %SHBuild_GetBuildName"
						// Also to eliminate ShellCheck issue: SC2005.
			)
		),
		/ $dev $lib "split header inclusions" !^ %YSBuild @ %SHBuild.Main
			$= (/ '<YSBuild.h>' -> %(YSLib.Service, NPL).YModules)
			// This should be better for the build performance. And it is bad \
				that stage 1 build is affected by failure of building \
				unrelated modules (like %YFramework.YCLib.HostedGUI worked \
				around above), although the split does not resolve the real \
				issue.
	),
	/ @ "simplified build variable configuration" @ "build scripts"
		$effective @ ("%(SHBuild-common-options.sh, \
		SHBuild-YSLib-common.txt, Toolchain.options.mk)" @ %Tools.Scripts,
		"all project makefiles with %(CFLAGS, CXXFLAGS)") $=
	(
		- "variables %(CFLAGS_COMMON, CXXFLAGS_COMMON)"
			// The value is inlined to the use sites.
		/ "ensured %CFLAGS_STD at front of the default value" @ "%CFLAGS",
		/ "ensured %CXXFLAGS_STD at front of the default value"
			@ "%CXXFLAGS"
	),
	* "wrong '-fno-threadsafe-statics'" @ "%CXXFLAGS" @ "%Makefile"
		@ "platform %Android" $since b492 $effective
		@ %(YBase, YFramework, YSTest),
	- $build "%AUDIOFILES build configuration" @ ("%Makefile" @ %YFramework,
		"ARM9 makefile" @ %YSTest) @ "platform %DS",
		// ARM7 sources are never built here.
	- $build "rule and %OFILES output for unused files except '%.bin'"
		$effective ("%Makefile" @ %(YBase, YFramework), "(ARM7, ARM9) makefiles"
		@ "platform %DS" @ %YSTest,
		"%Makefile" @ "platform %Android" @ %YSTest),
	- DLI "redundant warning option '-Wsign-promo'" @ "%CXXFLGAS" $effective
		("%Makefile" @ %(YBase, YFramework), "(ARM7, ARM9) makefiles"
		@ "platform %DS" @ %YSTest),
	- DLI "redundant warning option '-Wnon-virtual-dtor'" @ "%CXXFLGAS"
		$effective ("%Makefile" @ %YBase, "%Makefile" @ "platform %Android"
		@ %YFramework, "(ARM7, ARM9) makefiles" @ "platform %DS" @ %YSTest)
	- DLI "redundant warning option '-Wctor-dtor-privacy'" @ "%CXXFLGAS"
		$effective ("%Makefile" @ %YBase, "%Makefile" @ "platform %Android"
		@ %YFramework, "ARM9 makefiles" @ "platform %DS" @ %YSTest),
	+ '-Wno-ignored-qualifiers' @ "%(CFLAGS, CXXFLAGS)" @ "%Makefile"
		@ ("%Makefile" @ "platform %DS" @ %YFramework, "ARM9 makefile"
		@ "platform %DS" @ %YSTest),
		// To eliminate G++ warning: [-Wignored-qualifiers]
	/ %YBase $=
	(
		/ %Test $=
		(
			/ $re_add(b860) "all %std::function" -> "%ystdex::function",
			/ "all %std::string" -> "%ystdex::string"
		),
		/ DD "Doxygen comments" @ %YStandardEx $=
		(
			/ @ "Doxygen comments" @ %YBase.YStandardEx.Apply $=
			(
				+ $design '\c' @ "before header name",
				/ $re_add(b877) $impl "simplified all tags with '\>' escape'"
			),
			+ "'\note' command" @ "class %unimplemented" @ %Exception,
			+ "'\note' command" @ "metafunctions %(enable_for_iterator_t, \
				enable_for_input_iterator_t)" @ %IteratorTrait
		)
	),
	/ %YReader $=
	(
		/ $re_add(b860) $dev "all %std::function" -> "%YSLib::function"
			@ %(DSReader, ShlReader),
		+ DLDI "%yunused around %YReader::FetchImage call" @ "main function"
			@ %Main,
			// To eliminate G++ and Clang++ warning: [-Wunused-result].
		/ DD "Doxygen comments" @ %(About, HexBrowser, ReadingList)
	),
	+ DLDI 'YB_STATELESS' @ "unimplemented API" @ !"platform %Win32" $effective
		@ ("member function %GUIHost::GetForegroundWindow" @ %GUIApplication,
		"function %FetchDefaultTopLevelPosition" @ %HostedUI)
		@ %YFramework.Helper
		// To eliminate G++ 10.1 warning: [-Wsuggest-attribute=const].
),

b905
(
	(
	* $doc "fixed annotations method of engineering defects"
		@ %Documentation.ProjectRules $since b874;
		// The old way cannot annotate defects from different original \
			revisions in a same reversion. Thus, the update of the bookmark on \
			the new defects found would not overwrite the old defects having \
			different origins now.
	/ $repo "engineering fault bookmarks" $=
	(
		/ $forced "rearranged current bookmarks under the new annotation rules"
			$=
		(
			/ ("bookmarks ('engineering-fault-b684', 'engineering-fault-b687')"
				@ b684) -> ("bookmarks 'engineering-fault-b684'" @ b687),
			/ ("bookmark 'engineering-fault-b710'" @ b706)
				("bookmark 'engineering-fault-b706'" @ b710),
			/ ("bookmark 'engineering-fault-b723'" @ b717)
				("bookmark 'engineering-fault-b717'" @ b723),
			/ ("bookmark 'engineering-fault-b729'" @ b728)
				("bookmark 'engineering-fault-b728'" @ b729),
			/ ("bookmark 'engineering-fault-b739'" @ b735)
				("bookmark 'engineering-fault-b735'" @ b739)
		),
		+ "bookmark 'engineering-fault-b888'"
			// Insufficient revisions.
	)
	),
	/ %YFramework $=
	(
		/ DLDI "unused %Nonnull result" ^ "%yunused"
			$effective @ (("constructor %platform_ex::Exception#(3, 6)"
			@ %YCLib.Host), "internal debug timer" @ %Helper.ShellHelper),
			// To eliminate Clang++ warning: [-Wunused-value].
		/ %'YCLib(Win32)' $=
		(
			* "active code page wrongly used instead of UTF-8" @ "functions \
				%ParseCommandArguments" @ %MinGW32 $since b901
				$= (/ $impl ^ "%WCSToUTF8" ~ "%WCSToMBCS"),
			/ %NLS $=
			(
				+ DLI 'YB_ATTR_nodiscard' @ "all functions",
				/ DLDI "%NLS_FILE_HEADER cast" ^ "%ystdex::aligned_cast"
					~ 'reinterpret_cast',
				/ @ "functions %(MBCSToMBCS, WCSToMBCS, MBCSToWCS, UTF8ToWCS, \
					WCSToUTF8)"
				(
					+ "overloads with allocator parameters";
					/ DLI $src "inlined remaining overloads"
				)
			)
		),
		/ %YCLib $=
		(
			/ %Container $=
			(
				+ "3 overloads with allocator paramter" @ "function templates \
					%(to_pmr_string, to_std_string)"
					^ "%ystdex::make_obj_using_allocator",
				- "header inclusion %YCommon"
					$dep_to "removal of YCommon for Container"
					// This is consistent to %Refrence. This is also necessary \
						to be includable in %YCommon.
			),
			/ %Host $=
			(
				+ "member function %WriteString" @ "class %Terminal",
				+ $forced DLDI "header inclusion %YCommon"
					$dep_from "removal of YCommon for Container"
					// The dependency is documented. There are no other \
						headers solely included %Container for %YCommon like \
						this previously.
			),
			+ "function %StreamPut overload for %std::FILE* parameter"
				@ %FileIO,
			/ @ "class %Logger" @ %Debug $=
			(
				/ "enhanced function %SendLog" ^ ("%StreamPut" @ %FileIO),
				/ "enhanced function %SendLogToFile"
					$dep_from ^ ("%StreamPut" @ %FileIO)
			),
			/ %YCommon $=
			(
				/ DLDI "unused object" @ "function %FetchLimit" ^ "%yunused",
					// To eliminate Clang++ warning: [-Wunused-value].
				/ "platform %Win32" @ "function %SetEnvironmentVariable"
					^ "%_wputenv" ~ "%_putenv",
				+ "header inclusion %Container"
					$dep_from "removal of YCommon for Container";
					// This allows %string used in API declarations.
			)
		),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/ "default argument '0'" @ "function %OpenFile" @ %File
					-> 'DefaultPMode()',
				/ DLDI "specified default permission for copy"
					@ "functions %CopyFile" @ %FileSystem
					// To avoid the redundant %DefaultPMode call after the \
						change in %File.
			),
			/ ("function %FetchEnvironmentVariable" @ %Core.YCoreUtilities)
				-> ("%FetchEnvironmentVariable" @ %YCLib.YCommon;
				'using platform::FetchEnvironmentVariable;' @ %YAdaptor.Adaptor)
				$dep_from ("header inclusion %Container" @ %YCLib.YCommon)
				// The interface remains the same, except now UTF-8 is \
					enforced on %Win32.
		)
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			(
			/ "exposed initialization of external %SHBuild_Env_TempDir"
				@ "function %SHBuild_PrepareBuild" @ "%SHBuild-common.sh";
			/ @ "%SHBuild-common-toolchain.sh" $=
			(
				- $impl "%SHBuild_GetTempDir calls";
				* $comp @ "wrong command called for temporary directory \
					detection" @ "function %SHBuild_CheckCC" $since b897
			)
			),
			/ "exposed overridable variable %SHBuild_Env_TempDir",
			/ "determined default value depending on the value of %MSYSTEM"
				@ "variable %SHBuild_Host_Arch" @ "%SHBuild_Host_OS is 'Win32'"
				$effective @ ("function %SHBuild_PrepareBuild"
				@ "%SHBuild-common.sh", "%SHBuild-YSLib-common.txt"),
				// Now manual configuration of %SHBuild_Host_Arch is not \
					needed in the correct MSYS2 shell.
			/ @ "%SHBuild-common.sh" $=
			(
				/ DLDI "reordered functions",
				+ "functions %(SHBuild_GetBuildName; SHBuild_S2_Prepare; \
					SHBuild_S2_Prepare_Build)",
				- "function %SHBuild_CheckHostPlatform"
					$dep_from "removal of SHBuild_CheckHostPlatform"
			),
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				/ ("default value" @ "%SHBuild_SystemPrefix",
					"host library location") ^ "host platform deduced from \
					%(SHBuild_Platform_Detect, SHBuild_Host_Arch, \
					SHBuild_Host_Env)" ~ "%SHBuild_Host_Platform"
					$dep_to "fixed build name",
					// Now %SHBuild_Host_Platform only has effects on the \
						builddirectory setting.
				/ "echoing %SHBuild_BuildDir" ~ "%SHBuild_Host_Platform";
					// The value of %SHBuild_Host_Platform is actually not \
						used since the configuration of %SHBuild_BuildDir.
				- "variable %SHBuild_Host_Platform"
			),
			/ @ "%SHBuild-bootstrap.sh" $=
			(
				+ "%SHBuild_EchoVar_N calls for 'SHBuild.Host.Arch' and \
					'SHBuild.Host.OS'",
				- "redundant %SHBuild_PrepareBuild call"
					$dep_from "removal of SHBuild_CheckHostPlatform"
			),
			* "%SHBuild_BuildDir unrespected" @ "default value" @ "private DLL \
				build library" @ "%SHBuild-self-host.DLL.sh" $since b882,
			/ "ignored empty string argument" @ "applicative 'cons-cmd'"
				@ "%SHBuild-YSLib-common.txt"
				// This prevents redundant spaces added after %CXXFLAGS at \
					YFramework library building command lines in \
					%SHBuild-YSLib-build.txt.
			(
			/ "lifted the source path as 1st command line argument" $effective
				@ "%(SHBuild-BuildApp.txt, SHBuild-YSLib-build.txt)";
				// Currently extra options for SHBuild options are known to \
					having only options, but this is still error-prone.
			* $comp "possible unexpected source path injection in SHBuild \
				options" $effective
				@ ("building YSLib libraries" @ "%SHBuild-YSLib-build.txt"
				$orig (@ "%SHBuild-YSLib.sh" @ %Tools.SHBuild $since b520))
				// This could be injected through the command line arguments \
					of the srcipt since b797 and from the environment variable \
					%args b796. The latter is also possible through the \
					command line arguments of \
					%Tools/Scripts/SHBuild-YSLib-common.sh since b791, and \
					older shell scripts.
			)
		),
		/ %SHBuild.Main $=
		(
			/ $impl "reordered '-xcmd,'" $dep_to "command entry reordering"
				@ "option table entries"
				// This also makes the entries ordered alphabatically by \
					chance.
			/ @ "help message" $=
			(
				(
				/ "updated usages and descriptions"
				* $comp "missing cases for SRCPATH not as the 1st command \
					argument" $since b519
				),
				/ $comp "lifted '-xcmd,' entry at the front"
					$dep_from "command entry reordering",
				+ "clarification on environment variables"
			),
			/ DLDI "simplified build context variable initialization",
			+ "option '-xdef,' with variable definitions"
				$= (/ $impl ^ $dep_from
				("%to_pmr_string" @ %YFramework.YCLib.Container),
			/ DLDI ((('using namespace IO;'; 'using namespace YSLib;'),
				'using namespace std::chrono;') -> ('namespace IO = YSLib::IO;',
				"using declarations")) @ "namespace %SHBuild",
				// To avoid namespace pollution.
			/ @ "platform %Win32" $=
			(
				* $comp "wrong encoding of input command line arguments"
					$since b901 $dep_from %YFramework.'YCLib_(Host)'.MinGW32;
				* "output string encoding" $since b901 ^ $dep_from
					("%Terminal::WriteString" @ %YFramework.YCLib.Host)
					// This should have been used Unicode console functions. \
						Some also depend on the input. The old implementation \
						(before b901) using %EncodeArg has limitation on the \
						active code page despite of input encoding issues, \
						though.
			),
			/ $comp "environment encoding converted to UTF-8"
				$dep_from ("%SetEnvironmentVariable" @ %YCLib.YCommon,
				"%FetchEnvironmentVariable" @ %YSLib.Core.YCoreUtilities),
			/ "thrown different exception after the backtrace"
				@ "NPLA1 exception handler",
				// This avoids duplicated innermost exception messages.
			/ @ "log messages" $=
			(
				/ "%Informative message for no build options" -> "%Warning",
				/ "printed %Informative message 'OutputDir = '"
					-> 'Build OutputDir = ',
					// To avoid confusion with build variables.
				* "missing flush the stream around switches of the term color"
					$since b540,
					// This could sometimes cause interleaved color output.
				* "incorrect time output caused by lazy epoch initialized"
					$since b546,
					// This should have been initialized regardless of the 1st \
						call time of the logger. This had few effects in the \
						build mode because there was always a message for \
						switching the output directory sent immediately in the \
						implementation.
				+ "%Debug message to indicate more than 1 command arguments \
					have been loaded",
				+ "%Informative message before construction of the build \
					context",
				+ "%Debug message to show the request command found"
				// New messages also used for the epoch debug, see below.
			),
			(
			* "potential signed duration overflow" $since b520
				^ "%std::(chrono::duration, milli)"
				~ "%std::chrono::milliseconds";
			+ "session epoch with %SHBuild_Epoch handling"
			)
		),
		/ DLDI @ "%install-sysroot.sh" $=
		(
			- "redundant %SHBuild_PrepareBuild call",
			/ "quoted all arguments" @ "%SHBuild_Puts calls",
			+ "session setting" @ "2nd stage %SHBuild call" $dep_from
				("session epoch with %SHBuild_Epoch handling" @ %SHBuild.Main)
		)
	),
	* "missing prefix for %SHBuild-common.sh inclusion" @ "%build-all.sh"
		@ %YDE $since b903,
		$= (+ "prefix '$(dirname "$SHBuild")/'"),
		// This should have been changed as %SHBuild-YSTest.sh in %YSTest for \
			consistency.
	/ "shell variables handling cleanup"
		$dep_from ("%SHBuild-YSLib-build.txt" @ %Tools.Scripts)
		$effective @ ("%SHBuild-YSTest.sh" @ %YSTest, "%test.sh" @ %Test,
		("%install-sysroot.sh", "%(SHBuild-self-host-DLL.sh, \
		SHBuild-commons.sh, SHBuild-bootstrap.sh)" @ %Scripts) @ %Tools,
		"%build-all.sh" @ %YDE) $=
		// This works after the change of %SHBuild-YSLib-build.txt because the \
			vairable only specifies the name of subdirectory.
	(
		/ "all uses of %SHBuild_Host_Platform" => "%SHBuild_GetBuildName calls"
			$dep_from ("%SHBuild_GetBuildName" @ "%SHBuild-common.sh");
		/ "all %SHBuild_CheckHostPlatform" -> "%SHBuild_CheckHostPlatform"
			$dep_to "removal of SHBuild_CheckHostPlatform"
	)
),

b904
(
	/ @ "%test.sh" @ %Test $=
	(
		- "%AR",
			// This is now detected automatically in \
				%Tools/SHBuild-common-options.sh.
		/ DLI "shrinked prefixed tabs" @ "default value" @ "%(INCLUDES, LIBS)",
		(
		/ "fixed test directory" ^ '${BASH_SOURCE[0]}' ~ '$0';
		- "overridable %TestDir"
		),
		* $comp "%SHBuild_Debug not effective" $since b575
			$dep_from ("%(CXXFLAGS_OPT_DBG, LDFLAGS_OPT_DBG)"
			@ "%SHBuild-common-options.sh")
	),
	/ %YBase.YStandardEx $=
	(
		/ %YBase.YStandardEx.CStandardIO $=
		(
			+ "2nd parameter to allow file creation" @ "function %fexists" ,
			/ $lib "all 'yonthrow'" @ "functions with narrow contracts on the \
				parameters" -> 'ynothrowv'
				$effective @ "functions %(vfmtlen, setnbuf, fexists)"
		),
		/ DLDI "member function %monotonic_buffer_resource::release"
			@ 'YB_Has_memory_resource != 1' @ %MemoryResource
			^ "%ystdex::aligned_store_cast" ~ 'reinterpret_cast'
	),
	/ %YFramework $=
	(
		+ "2nd parameter to allow file creation" @ "all 2 functions %ufexists"
			@ %YCLib.FileIO,
		+ "function %RandomizeTemplatedString" @ %YSLib.Core.YCoreUtilities,
		/ %NPL $=
		(
			* "wrong check" @ "function template %CheckRegular" $since b855
				$= (/ $impl ^ "%IsBranch" ~ "%IsList"),
			(
			/ "function %A1::ThrowInsufficientTermsError" @ %NPLA1
				-> ("%NPL::ThrowInsufficientTermsError with 2 parameters"
				@ %NPLA);
			/ $forced "enhanced exception messages for insufficient terms"
				@ "calls of %ThrowInsufficientTermsError" $effective
				@ ("functions %(BindParameter, MatchParameter)" @ %NPLA1,
				"functions %Forms::(Cond, When, Unless, DefineLazy, \
				'Define*', 'SetWith*', 'Lambda*', 'Vau*', First, FirstVal, \
				'ListAsterisk*', FoldR1, Map1, ForwardListFirst)" @ %NPLA1Forms)
			),
			/ %NPLA1Forms $=
			(
				/ "functions %(Equal, EqualLeaf, EqualReference, EqualValue)"
					=> "%(Eq, EqLeaf, EqReference, EqValue)",
				+ "function %EqualTermValue",
				/ "supported thunked recursive comparison" @ "%operator=="
					@ "encapsulation constructed from function \
					%MakeEncapsulationType" ~ "type comparison"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "order with other applicatives"
						@ "applicatives (%restv, 'rest&', 'rest&')",
						// This is now more consistent to %Documentation.NPL.
					(
					+ "applicatives ('branch?', 'branchv?')";
					+ "applicative 'equal?'" ^ $dep_from "%EqualTermValue"
					)
				),
				+ "applicative %SHBuild_MakeTempFilename"
					@ "function %LoadModule_SHBuild"
					^ $dep_from ("%YSLib::RandomizeTemplatedString"
					@ %YSLib.Core.YCoreUtilities,
					"%ystdex::fexists" @ %YBase.YStandardEx.CStandardIO),
				+ "applicative 'remove-file'"
					@ "function %LoadModule_std_system"
			)
		)
	),
	/ %Tools.Scripts $=
	(
		/ $dev @ "%SHBuild-YSLib-build.txt" $=
		(
			- "restore of %LIBS before dynamic library building",
			/ $lib $impl $design "simplified the import of 'env-get'"
		),
		/ @ "%SHBuild-BuildApp.txt" $=
		(
			(
			- "exported %(SHBuild_CFLAGS, SHBuild_CXXFLAGS) from %(CFLAGS, \
				CXXFLAGS)";
			* $comp "exported %(SHBuild_CFLAGS, SHBuild_CXXFLAGS) clashed with \
				%(CFLAGS, CXXFLAGS) set in %SHBuild-YSLib-common.txt"
				$since b900
				// This was OK in the original %SHBuild-BuildApp.sh, since \
					the flags were not used in the command line of %SHBuild \
					called in that script.
			),
			+ "support of %(SHBuild_LDFLAGS, SHBuild_LIBS) as the prefix of \
				%(LDFLAGS, LIBS)",
				// Now prefixed extra flags can coexist with the inferred ones \
					from the build script.
			/ @ "help message" $=
			(
				+ "clarification of %SRCPATH in 'SHBOPT_BASE ...'",
				* "wrong description for %SHBuild_Static"
					$orig (@ "%SHBuild-BuildApp.sh" $since b556)
			),
			* "environment variable %SHBuild_Static not respected" $since b900
		),
		/ @ "%SHBuild-common-options.sh" $=
		(
			/ "set %(CXXFLAGS_OPT_DBG, LDFLAGS_OPT_DBG)" @ '%SHBuild_Debug'
				// As %SHBuild-BuildApp.txt and the old %SHBuild-BuildApp.sh.
			/ DLI "shrinked prefixed tabs" @ "all default values",
		),
		/ DLI @ "%SHBuild-bootstrap.sh" $=
		(
			/ "shrinked prefixed tabs" @ "all default values",
			/ $design "quoted arguments" @ "1st call to %SHBuild_Puts"
		),
		/ @ "%SHBuild-common.sh" $=
		(
			/ @ "function %SHBuild_CheckUName" $=
			(
				* "wrong names used to check the initialization" $since b563 $=
				(
					/ "%SHBuild_OS" -> "%SHBuild_Env_OS",
					/ "%SHBuild_Arch" -> "%SHBuild_Env_Arch"
				),
				* "allowed setting variables ignoring irrelavent initialization"
					$since b563
			);
			+ "minimal cross-build toolchain support" $=
			(
				+ "function %SHBuild_PrepareBuild";
				/ "function %SHBuild_CheckHostPlatform"
					^ "%SHBuild_PrepareBuild" ~ "%SHBuild_CheckUName"
			)
		),
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			/ "optimized away unnecessary initialization when the value \
				of %(CFLAGS, CXXFLAGS) has been already specified externally",
			/ "%LDFLAGS not overridable" $since b796,
			/ DLDI "all dynamic environment variable 'env'" => 'd',
			/ "intialized variables %(SHBuild_Env_OS, SHBuild_Env_Arch) \
				globally as %SHBuild_GetPlatformStrings";
			/ "returned host environment variables" ~ "build environment \
				variables" @ "applicative %SHBuild_GetPlatformStrings";
				// Like %SHBuild_PrepareBuild instead of %SHBuild_CheckUName \
					in %SHBuild-common.sh.
			/ "separated build and host environments"
				@ "applicatives %SHBuild_CheckCXX, 'build-with-conf-opt' and \
					installation routines"
			(
			/ DLDI "simplified use of host NUL and temporary directory \
				without 'env-os'";
			- "applicatives for NUL and temporary directory",
			- "environment OS parameter 'env-os'" @ "applicatives \
				'system-or-puts', 'compile-ok-silent', %(SHBuild_2m, \
				SHBuild_2u, SHBuild_2w, SHBuild_GetTempDir)"
			),
			/ "improved handling of temporary files" $=
			(
				/ "randominzed filename on creation" ^ $dep_from
					("%SHBuild_MakeTempFilename" @ %YFramework.NPL.Dependency),
				/ "deleted files after use"
					^ $dep_from ('remove-file' @ %YFramework.NPL.Dependency)
			)
		),
		(
		/ $forced "separated build and host environments"
			@ "%(SHBuild-BuildApp.txt, SHBuild-YSLib-build.txt)"
			$dep_from ("%SHBuild_GetPlatformStrings"
			@ "%SHBuild-YSLib-common.txt")
			$dep_to "SHBuild build scripts build variables support";
		/ "simplified the use of build environment OS by initialization \
			globally" $effective @ "%(SHBuild-YSLib-common.txt, \
			SHBuild-YSLib-build.txt, SHBuild-BuildApp.txt)"
		)
	),
	/ "supported build variables %(SHBuild_Host_Arch, SHBuild_Host_OS) for \
		build scripts" $=
	(
		/ "call to %SHBuild_CheckUName" -> ($dep_from
			"%SHBuild_PrepareBuild" @ ("%SHBuild-common.sh" @ %Tools.Scripts))
			$effecitive @ ("%install-sysroot.sh", "%(SHBuild-bootstrap.sh, \
			SHBuild-toolchain-options.sh)" @ %Scripts) @ %Tools,
		/ ^ "%(SHBuild_Host_Arch, SHBuild_Host_OS) for host"
			~ "%(SHBuild_Env_Arch, SHBuild_Env_OS)"
			$effective @ "%(SHBuild-self-host.sh, SHBuild-common-options.sh, \
			SHBuild-bootstrap.sh)" @ %Tools.Scripts
		/ $dep_from "SHBuild build scripts build variables support"
	)
),

b903
(
	* "trailing NUL wrongly added to the command" @ "functions \
		%ParseCommandArguments" @ %'YCLib.(Win32)'.MinGW32 $since b901,
	/ %YFramework $=
	(
		/ "function %TraceException" @ %YSLib.Core.YException
			-> "%PrintMessage" $=
		(
			/ DLDI "simplified" !^ "%string",
			/ "function name" @ "exception message"
		),
		/ %NPL $=
		(
			+ "function %TraceException" @ %NPLA,
			+ "function %TraceBacktrace" @ %NPLA1
		)
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ "adjusted shell variables to avoid the assumption on the Sysroot \
				layout" @ "%SHBuild-BuildPkg.sh" $=
			(
				// See $2020-10 @ %Documentation::Workflow.
				/ "inferred path from external variable %SHBuild";
				+ "external variable %NPLA1_ROOT for inferred path of the \
					NPLA1 root";
				/ "adjusted variable definitions based on the inferred paths"
					~ "%SHBuild_Bin" $dep_to "removal of SHBuild_Bin"
			),
			/ @ "%SHBuild-BuildApp.txt" $=
			(
				* "wrong description of %CONF input argument" @ "usage"
					@ "applicative %SHBuild_PrintUsage"
					$since b900,
				* "wrong %LIB set for static builds" since b900
					$= (/ '-Wl,dn' -> '-Wl,-dn'),
				(
				* "wrong use of %SHBuild_AppBaseDir" @ "SHBuild command line"
					$since b900,
					// This accidentally works for default value '.' when the \
						source is also here. Now %SHBuild-BuildPkg.sh also has \
						to pass the %SRCPATH explicitly.
				/ "%SHBuild_AppBaseDir output" -> "%SHBuild_BuildDir output",
				/ "output directory configured based on %SHBuild_BuildDir"
					$dep_to "applying build directory configuration";
				- "%SHBuild_BuildPrefix"
				- "%SHBuild_AppBaseDir"
				),
				- "%SHBuild_BuildPrefix"
					$dep_from "%SHBuild_BuildDir" @ ("%build-all.sh" @ %YDE),
				/ "quoted configuration names for output",
				/ "trimmed %SHBuild_YSLib_Flags",
				* "flags workaround overriden unexpectedly" $since b900
			),
			/ @ "%SHBuild-BuildPkg.sh" $=
			(
				* "wrong handling of the path for the default value of %SHBuild"
					$since b900,
				* "missing '--' to prevent arguments captured by %SHBuild \
					being called directly" $since b900
			),
			/ "removed build functionality" @ "%SHBuild-BuildApp.sh"
				($dep_from "removal of SHBuild_Bin",
				$dep_all_from "removing use of SHBuild-BuildApp.sh"),
				// See $2020-10 @ %Documentation::Workflow.
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				/ @ "%AR detection" $=
				(
					* "wrong command constructed" $since b902,
					/ DLI "enhanced command 'ar' with %SHBuild_2m conversion"
				),
				/ DLDI "simplified %SHBuild_TrimOptions_ calls"
					@ "setting %LDFLAGS",
				/ "trimmed %SHBOPT" ^ "%SHBuild_TrimOptions"
			),
			- "variable %SHBuild_AppBaseDir"
				@ "%(SHBuild-common-options.sh, SHBuild-common-toolchain.sh)",
			+ 'set -e' @ "%(PatchRevision.sh, GenerateProject.sh, \
				SHBuild-BuildPkg.sh)"
				// Also to prevent ShellCheck warning: SC2164.
			/ @ "%SHBuild-bootstrap.sh" $=
			(
				/ "'true' and ShellCheck directives for SC2164" -> 'set -e',
				+ "%SHBuild_CheckHostPlatform call",
					// This is explicitly lifted so the client scripts can use \
						nonempty %SHBuild_Host_Platform despite of \
						%SHBuild_BuildDir.
				/ "%SHBuild_BuildDir" $=
				(
					/ "exposed overridable variable",
					/ "default value" -> "stage 1 default build directory"
				)
			),
			/ "ShellCheck directive for SC2164"
				@ "%(SHBuild-common-toolchain.sh, SHBuild-common-optionsl.sh)"
				-> 'set -e',
			/ @ "%(SHBuild-self-host.sh, SHBuild-self-host-DLL.sh)" $=
			(
				/ DLI "simplified output directory initialization"
					$dep_from ("%SHBuild_BuildDir" @ "%SHBuild-bootstrap.sh")
					 $= (- "%SHBuild_BuildDir"),
				/ "build subdirectory"
					// To avoid mixture to other build libraries in normal \
						SHBuild stages.
			),
			/ "worked around to disable LTO" @ "%platform %MinGW32"
				@ "%SHBuild-self-host.sh",
				// This resolves the allocation failure due to limited address \
					space in linking with %MinGW32 host toolchain. Even \
					without this issue, it would still choke with LTO like \
					other builds in MinGW32 release static configuration.
			/ @ "%SHBuild-YSLib-build.sh" $=
			(
				/ "loading external unit"
					^ "%SHBuild_ToolDir" ~ "%SHBuild_Common",
				(
				/ "all %YSLib_BuildDir" -> "%SHBuild_BuildDir";
				/ "stage 2 build directory" -> "subdirectory '.shbuild-dll' of \
					directory specified by %SHBuild_BuildDir"
					$dep_from "build subdirectory" @ "%SHBuild-self-host-DLL.sh"
					// The new location is the old location for self-hosted \
						package of %SHBuild. The old location is in the \
						Sysroot and there is no way to make the directories \
						for different hosts coexist by default, so it is not \
						friendly to package.
				),
				/ DLDI "simplified library output directory construction",
				/ DLDI "simplified library installation",
				* "wrong skipping description output" @ 'SHBuild_NoDynamic'
					$since b838
			)
		),
		/ @ "%install-sysroot.sh" $=
		(
			/ DLDI "simplified script call" !^ "%SHBuild_Common"
				$dep_from ("loading external unit" @ "%SHBuild-YSLib-build.sh"),
			(
			- "passing %AR to the script call";
				// This is for stage 2.
			- "variable %AR"
				// This is then for stage 1.
			),
			(
			/ "all use of %YSLib_Build" -> "%SHBuild_BuildDir";
			- "%YSLib_BuildDir" $dep_from "%YSLib_BuildDir"
				@ "%SHBuild-YSLib-build.sh"
			)
		),
		/ %SHBuild $=
		(
			/ %Main $=
			(
				* $comp "truncated quoted command name shown" @ "usage"
					@ "help message" @ "platform %Win32" $since b901
					$dep_from %'YCLib.(Win32)'.MinGW32,
				/ "trimmed options of flags",
					// This eliminates whitespaces after the '-c' compiler \
						option when the flag (e.g. %SHBuild_CXXFLAGS) is empty.
				/ "commands %(RunNPL, RunNPLFile)" $=
				(
					/ "name of NPL unit from standard input"
						-> '*STDIN*' ~ '<stdin>',
					(
					/ "loading source by rewriting and rethrowing of exceptions"
						~ "%TryLoadSource";
					/ "traced source location on NPLA1 exception",
					+ "optional trace for backtrace output at %General log \
						group for NPLA1 exceptions controlled by external \
						%SHBuild_NoBacktrace macro (undefined by default)"
						^ $dep_from ("%TraceException" @ %YFramework.NPL.NPLA,
						"%TraceBacktrace" @ %YFramework.NPL.NPLA1)
					)
				)
			),
			/ $doc "%Readme.en-US.txt" -> "%Readme.en-US.md"
		)
	),
	/ @ "%SHBuild-YSTest.sh" @ %YSTest $=
	(
		// See $2020-11 @ %Documentation::Workflow.
		(
		/ "located other scripts" ^ "possibly overriden %SHBuild location";
		+ "external variable %NPLA1_ROOT for inferred path of the NPLA1 root"
		),
		(
		- $revert_ex(b902) "support of overriding %SHBuild_SysRoot",
			// %SHBuild_SysRoot is documented to specify the output directory. \
				For input, %SHBuild can be specified directly now.
		* "wrong default value" @ "%SHBuild_AppBaseDir" $since b549
			'${BASH_SOURCE[0]}' ~ '$0'
		/ DLDI "simplified" ^ $dep_from "%SHBuild-BuildPkg.sh"
			~ "%SHBuild-BuildApp.sh"
			$dep_from ("removal of SHBuild_Bin", "SHBuild_AppBaseDir passing")
			$dep_to "removing use of SHBuild-BuildApp.sh";
		^ "%SHBuild_BuildDir" ~ "%SHBuild_AppBaseDir",
		(
		+ "check for missing arguments before 'mkdir -p'";
		/ $comp "required configuration name argument without '-c' prefix"
			// This is a breaking change.
		)
		),
		- DLI "output directory creation"
			// This should be the same because %SHBuild would create the \
				directory if not already existed.
	),
	- "undocumented %SHBuild_Bin" $effective @ ("%(SHBuild-BuildPkg.sh, \
		GenerateProject.sh, PatchRevision.sh)" @ %Tools.Scripts,
		"%SHBuild-YSTest.sh" @ %YSTest) $dep_from "removal of SHBuild_Bin",
		// See $2020-10 @ %Documentation::Workflow.
	/ "%test.sh" @ %Test $=
	(
		/ DLI "shell subcommand calls" ^ "$(...)" ~ "legacy `...`",
			// Also to eliminate ShellCheck issue: SC2006.
		* "missing quotes on default values for assignments" $since b575,
			// Also to eliminate ShellCheck issue: SC2223.
		* "missing quotes on the result of %dirname command as command or \
			argument" $since b575,
			// Also to eliminate ShellCheck warning: SC2046.
		+ DLD "ShellCheck directive for %(CXXFLAGS_OPT_UseAssert, \
			SHBuild_Debug, SHBuild_NoAdjustSubsystem)",
			// To eliminate ShellCheck warning: SC2034.
		- "redundant single quotes" @ "default value" @ "variable %AR",
		+ DLD "ShellCheck directive for souce inclusions",
			// To eliminate ShellCheck warning SC1090. Note this relies on \
				'shellcheck -x -P SCRIPTDIR', or there is issue SC1091.
		* "missing quotes on the 'mkdir' and 'SHBuild_Pushd' arguments"
			$since b740,
			// Also to eliminate ShellCheck issue: SC2086.
		+ DLD "ShellCheck directive on the last command",
			// To eliminate ShellCheck issue SC2086 and warning SC2154.
		+ DLD "ShellCheck directive for %SHBuild_Host_Platform",
			// To eliminate ShellCheck warning: SC2154.
		/ DLI ^ "%SHBuild-common-options" ~ "%SHBuild-BuildApp.sh"
			 $dep_to "removing use of SHBuild-BuildApp.sh",
			 // There is no need to call %SHBuild here.
	),
	/ @ "%build-all.sh" @ %YDE $=
	(
		(
		/ "located other scripts" ^ "possibly overriden %SHBuild location";
		+ "external variable %NPLA1_ROOT for inferred path of the NPLA1 root"
		),
		/ DLI "simplified" ^ "%SHBuild-BuildPkg.sh" ~ "%SHBuild-BuildApp.sh"
			$dep_to "removing use of SHBuild-BuildApp.sh",
			// This is a bit inefficitent because the configuration is not used.
		/ DLI "shell subcommand calls" ^ "$(...)" ~ "legacy `...`",
			// Also to eliminate ShellCheck issue: SC2006.
		* "missing quotes on default values for assignments" $since b556,
			// Also to eliminate ShellCheck issue: SC2223.
		+ DLD "ShellCheck directive for souce inclusions",
			// To eliminate ShellCheck warning SC1091.
		(
		* "missing quotes on '$SHBuild_ThisDir' and the 'echo' arguments"
			$since b556;
			// Also to eliminate ShellCheck issue: SC2086.
		/ DLI ^ 'SHBuild_Puts' ~ 'echo'
		),
		/ "%SHBuild_BuildPrefix" -> "%SHBuild_BuildDir"
			$dep_from "applying build directory configuration",
		/ "wrapped package path for %SHBuild_Puts with %SHBuild_2m"
	),
	/ DLI "'echo Done.' where %SHBuild_Puts is available"
		-> "SHBuild_Puts 'Done.'" $effective @ ("%test.sh" @ %Test,
		"%SHBuild-YSTest.sh" @ %YSTest, "%build-all.sh" @ %YDE,
		"%(SHBuild-self-host.sh, SHBuild-self-host-DLL.sh)" @ %Tools.Scripts),
	* "wrong default value" @ "%SHBuild_ToolDir"
		$effective @ (("%install-sysroot.sh" $since b546, ("%SHBuild-build.sh",
		"%SHBuild-bootstrap.sh", "%SHBuild-self-host.sh",
		"%SHBuild-self-host-DLL.sh") @ %Scripts $since b540) @ %Tools,
		"%test.sh" @ %Test $since b575)
		$= (/ $impl ^ '${BASH_SOURCE[0]}' ~ '$0'),
	/ "exposed overridable variable %SHBuild_ToolDir"
		$effective @ (("%install-sysroot.sh", ("%SHBuild-bootstrap.sh",
		"%SHBuild-self-host.sh", "%SHBuild-self-host-DLL.sh") @ %Scripts)
		@ %Tools, "%test.sh" @ %Test),
	(
	- DLI "shell path check with 'cd' and 'pwd' for embedded path components"
		$effective @ (("%GenerateProjects.sh, PatchRevision.sh, \
		SHBuild-BuildPkg.sh")
		@ %Tool.Scripts, "%test.sh" @ %Test, "%build-all.sh" @ %YDE);
		// Such cases should not fail because they are already assumed existing.
	/ "all shell path detection before 'pwd' ignored 'cd' error"
		$effective @ (("%(SHBuild-bootstrap.sh, SHBuild-common-options.sh, \
		shbuild-common-toolchain)") @ %Tool.Scripts, "%test.sh" @ %Test,
		"%build-all.sh" @ %YDE)
		// This prevents empty results being used if there is 'set +e'.
	)
),

b902
(
	/ %YBase.YStandardEx $=
	(
		/ DLI "simplified and optimized function template %extract#1" @ %String,
		+ "function template %flush_input" @ %StreamBuffer
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				/ DLDI @ "platform %DS" @ "function %ReadLink#1" ^ 'yunused',
					// To eliminate G++ warning: [-Wunuwed-variable].
				* "wrong %FileTime conversion from %::time_t"
					@ !"platform %Win32" @ "functions %(GetFileAccessTimeOf, \
					GetFileModificationTimeOf, \
					GetFileModificationAndAccessTimeOf)" $orig (@
					"member %FileDescriptor::GetModificationTime" $since b624)
			),
			+ "function %StreamGet" @ %FileIO ^ $dep_from
				("%ystdex::flush_input" @ %YBase.YStandardEx.StreamBuffer)
		),
		/ %YSLib.Adaptor $=
		(
			+ 'using platform::StreamGet;' @ %YAdaptor
				$dep_from ("%StreamGet" @ %YCLib.FileIO),
				// See $2020-10 @ %Documentation::Workflow.
			/ DLDI @ "class %Typeface" @ %Font $=
			(
				+ 'ynothrow' @ "internal bitmap data",
				/ "destructor" ^ "%ystdex::aligned_cast" ~ 'reinterpret_cast'
			)
		),
		/ %NPL $=
		(
			/ @ "function %LoadModule_SHBuild" @ %Dependency $=
			(
				* "missing basic hook adjustment" $since b901
					$= (/ $impl ^ "%REPLContext::GetOutputStreamRef"
						~ "%std::prinf"),
				/ "applicative %SHBuild_EchoVar returned '#inert'"
			),
			/ "base class %InvalidSyntax" @ "class %ParameterMismatch" @ %NPLA
				-> "%ListTypeError",
				// Now exceptions from %ThrowInsufficientTermsError \
					and %ListTypeError can be caught together.
			/ %NPLA1 $=
			(
				/ "function %ThrowValueCategoryError"
					-> "%ThrowValueCategoryError",
					// This is more general, although at current all the uses \
						are still for the cases of 1st argument.
				+ "function %ThrowListTypeErrorForNonlist",
				/ ThrowListTypeErrorForInvalidType
				* "missing check for list of arguments"
					@ "functions %(MatchParameter, BindParameter)"
					$orig (@ "function %BindParameter" $since b777)
					$= (/ "checked to throw %ListTypeError on failure"
						^ $dep_from "%ThrowListTypeErrorForNonlist"),
					// This is for the case like a parameter subterm '(.x)' \
						matching a non-list argument.
				/ DLI "avoided deprecated lambda capture '=' with implicit \
					'this'" @ "functions %(BindParamater, MatchParameter)"
					// To eliminate Clang++ 10 warning: \
						[-Wdeprecated-this-capture].
			),
			/ %NPLA1Forms $=
			(
				(
				/ $forced "removed 'for the 1st argument'" @ "error messages"
					@ "functions %(FirstAt, FirstRef, SetFirst, SetFirstAt, \
					SetFirstRef, SetRest, SetRestRef, CheckListReference)"
					$dep_from "%ThrowValueCategoryError";
				/ $comp "possible wrong 'for the 1st argument'"
					@ "message" @ "function %CheckListReference" $since b855
					// The corresponding applicative is for the general case, \
						rather than only for the 1st argument.
				),
				/ "removed 'for the 2nd argument" @ "exception message"
					@ "functions %(SetRest, SetRestRef)"
					^ $dep_from ("%ThrowListTypeErrorForNonlist" @ %NPLA1),
					// This is consistent to the change above. It also enables \
						the possibility to be reused with other cases.
				* $impl "redundant 'YF_API' on entity without external linkage"
					$since b899 $dep_to "Clang++ compiling error"
					// Also to prevent Clang++ error.
			)
		),
		* $re_add(b896) "wrong 'YB_NONNULL(1)'" @ ("lambda-expression"
			@ "platform %Win32" @ "function %uremove" @ %FileSystem $orig
			(@ %FileIO $since b639), "member function %DirectoryFindData::Read"
			@ %'YCLib_(Win32)'.MinGW32 $since b701)
			$dep_to "Clang++ compiling error"
			$= (/ $impl 'YB_NONNULL(1)' -> 'YB_NONNULL(2)')
			// Also to prevent Clang++ error.
	),
	/ %Tools $=
	(
		/ "improved basic terminal hook and string printing" @ %SHBuild.Main
			^ "%(std::cout, YSLib::IO::StreamPut, ystdex::write_literal)"
			~ "%std::(printf, puts)",
			// See $2020-10 @ %Documentation::Workflow.
		/ %Scripts $=
		(
			(
			- "%AR setting" @ "%SHBuild-common-options.sh",
			+ "default value" @ "%AR" @ "%SHBuild-common-toolchain.sh"
				^ "detection";
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				- "%AR setting";
				* "%AR overriden from the environment not used"
					$orig (@ "%SHBuild-appconf.sh" $since b546)
			)
			),
			/ "Clang++ detection" @ "%SHBuild-BuildApp.txt"
				^ "%SHBuild_CheckCXX" ~ 'rmatch?',
				// This is more accurate, but a bit inefficiet.
			/ "improved thread detection and distinguished thread flags \
				for %CXXFLAGS and %LDFLAGS" $=
			(
				// MinGW Clang++ supports '-mthreads' at the linker command, \
					but not the compiler command.
				/ "improved detection" @ "%SHBuild-common-toolchain.sh",
				/ @ "%SHBuild-YSLib-common.txt" $=
				(
					/ "functions ('get-thread-option', \
						'get-thread-option-silent')
						-> ('get-thread-options', 'get-thread-options-silent');
					* $comp "thread flags detection"
						$orig (@ "%SHBuild-common-toolchain.sh" $since b791)
						// This was not consistent to the original \
							%SHBuild-common-options.sh since then.
				);
				/ "default value" @ "%LDFLAGS" ^ "thread-specific flags"
					@ "(%SHBuild-common-toolchain.sh, \
					SHBuild-YSLib-common.txt)";
				- "redundant system library option '-lpthread'"
					$effective @ ("%(SHBuild-BuildApp.sh, \
					SHBuild-BuildApp.txt, SHBuild-YSLib-build.txt)")
			),
			/ "improved support for LLVM-based toolchains"
				@ "%(SHBuild-common-toolchain.sh, SHBuild-YSLib-common.txt)"
				$=
			(
				/ "refined options to supported LLD as the linker";
				+ "stub to enable LLD for Clang++" @ "platform %Win32"
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				+ "%AR detection",
					// This is consistent with %SHBuild-common-toolchain.sh.
				+ "'lib' prefix" @ "installed import library names",
					// This already works without the prefix. Now the names \
						are more consistent to Cygwin and MSYS2.
				/ "simplified" @ "%LD not used in the command" $=
				(
					/ "disabled showing %LDFLAG";
					/ DLI "disabled unused 'LDFLAGS*' and 'LIBS*' settings"
				),
				+ "real import library installation support"
					// See $2020-11 @ %Documentation::Workflow.
			),
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				/ DLDI "simplified 'system-quote' with 'SHBuild_2m' calls",
				/ "YSLib libraries building" $=
				(
					/ $dev "restored %LIBS only for dynamic libraries",
					* $re_add(b838) "possibly missing quotes on '-L' argument \
						of output directory on the %LIBS environment"
						$since b796 ^ 'system-quote',
					+ "import library generation",
					* "missing compiler check" @ "workaround specific for G++"
						$since b900
						// The option '-fno-var-tracking-assignments' is not \
							compatible to Clang++.
				),
				/ $forced DLDI "library installation"
					$dep_from ("real import library installation support"
					@ "%SHBuild-YSLib-common.txt")
					// See $2020-11 @ %Documentation::Workflow.
			),
			/ "disabled LTO for Clang++" @ "%(SHBuild-YSLib-common.txt, \
				SHBuild-common-options.sh)" $dep_to "cross-compiler ABI fix",
				// LLD seems the only option to recognize the LLVM bitcode, \
				but the final linking still does not work. Note this is \
				directly fixed in the common scripts.
			(
			/ DLI "simplified quotes in path not following ','"
				^ "simplified 'system-quote' with 'SHBuild_2m' calls"
				$effective @ "%(SHBuild-YSLib-build.txt, SHBuild-Buildapp.txt)";
			* $comp "wrong normalization of path" @ "%LIBS"
				@ "%SHBuild-BuildApp.txt"
				$orig (@ "%SHBuild-BuildApp.sh" $since b563)
			),
			* $comp "wrong normalization of path" @ "%LIBS"
				@ "%SHBuild-BuildApp.sh" $since b563
				(/ $impl ^ 'SHBuild_2m' ~ 'SHBuild_2w')
		)
	),
	(
	* "missing fat LTO object support" @ "%(Makefile.mingw, Makefile.gnu)"
		@ "%3rdparty/FreeImage" $since b900;
	/ $forced "rebuilt library %FreeImage for %release configurations"
		@ "platform %(MinGW32, MinGW64, Linux)" $dep_to "cross-compiler ABI fix"
	),
	* $comp "Clang++ build issues" $since b639 $=
	(
		* "Clang++ compiling error" @ "platform %Win32" $since b639,
		* $comp "Clang++ linking broken" $since b900
			$dep_all_from "cross-compiler ABI fix",
			// Currently fat LTO objects are the only way to support both G++ \
				and Clang++ with probably partial LTO support in some \
				confiugrations.
	),
	/ "make %C_LTO overridable" $effective @ "all makefiles"
		@ "%3rdparty/FreeImage",
	/ @ "%SHBuild-YSTest.sh" @ "project %YSTest" $=
	(
		/ "checked %SHBuild_BuildDir to override application base directory"
		/ "checked %SHBuild_SystemPrefix and %SHBuild_SysRoot to set and \
			export %SHBuild_Bin"
			// This allows overriding of %$SHBuild_SysRoot to determine \
				different Sysroot directory and build directory being used.
	)
),

b901
(
	/ %YBase.YStandardEx $=
	(
		+ $re_ex(b178) $dev $lib "#pragma directive"
			@ 'YB_IMPL_GNUCPP >= 100000' @ "metafunction \
			%have_common_nonempty_virtual_base" @ %TypeOperation,
			// To eliminate G++ 10 warning: [-Winaccessible-base].
		/ %Path $=
		(
			/ @ "class template %path_traits" $=
			(
				(
				+ "specialization for %basic_string_view instantiations";
				/ "simplified specialization for %basic_string instantiations",
				),
				+ $dev $lib 'YB_ATTR_nodiscard' @ "all static memeber functions"
			),
			+ "function template %is_parent_or_self"
		),
		* "missing check exceptions mask"
			@ "function template %rethrow_badstate" @ %IOS $since b663,
		/ %String $=
		(
			/ DLI @ "function templates %write" $=
			(
				/ "overload %write#1"
					-> "3 function templates without default arguments",
					// This is more efficient.
				- "overload for arrays",
					// This should be already covered by other overloads.
				/ $impl "all 'class _tString'" -> 'typename _tString'
					// The string objects of array type are also supported \
						uniformly.
			),
			(
			* "missing inclusion %CString" @ 'YB_Has_string_view == 1'
				$since b833;
			+ "function template %write_ntcts"
			),
			/ DLDI "sentry" @ "function template %extract#1"
				^ "direct initialization"
		)
	),
	/ %YFramework $=
	(

		* "missing 'inline'" @ "namespace %Android" @ ".cpp file"
			@ %'YCLib_(Android)'.Android $since b492,
			// Also to eliminate Clang++ warning.
		* "missing return value" @ "branch traversal"
			@ "constructor %DEntry#5" @ %'YCLib(DS)'.DSIO $since b900,
			// Also to eliminate G++ warning: [-Wno-unused-result].
		/ %'YCLib(Win32)'.MinGW32 $=
		(
			+ "2 functions %ParseCommandArguments",
				// See $2020-10 @ %Documentation::Workflow.
			* "missing 'YF_API'"
				@ "functions %(LockFile, TryLockFile, UnlockFile)",
			+ $dev $lib 'YB_ATTR_nodiscard' @ "all functions with non-void \
				return type and without 'YF_ATTR_nodiscard' other than \
				declared by 'Def*' or %(DirectoryFindData::Read, UnlockFile)",
			+ $dev $lib 'YB_PURE' @ ("functions %(Win32Exception::( \
				GetErrorCategory, FormatMessage), CategorizeNode#4)",
				$impl "internal error category member functions")
		),
		/ %YCLib $=
		(
			+ "class name declaration %FileDescriptor" @ %FileSystem,
			/ %FileIO $=
			(
				/ ("all functions %(uaccess, ugetcwd, uchdir, umkdir, urmdir, \
					uunlink, uremove)",
					"function template %FetchCurrentWorkingDirectory and its \
					specializations") >> %FileSystem,
				(
				/ "member functions %FileDescriptor::(GetAccessTime, \
					GetModificationTime, GetModificationAndAccessTime, \
					SetAccessTime, SetModificationTime, \
					SetModificationAndAccessTime)" -> "functions \
					%(GetFileAccessTimeOf, GetFileModificationTimeOf, \
					GetFileModificationAndAccessTimeOf, SetFileAccessTimeOf, \
					SetFileModificationTimeOf, \
					SetFileModificationAndAccessTimeOf)";
				/ "all functions ('SetFile*TimeOf, 'GetFile*TimeOf'))"
					>> %FileSystem $dep_from ("%FileDescriptor" @ %FileSystem)
				),
				(
				/ "member function %FileDescriptor::GetNumberOfLinks"
					-> "function %FetchNumberOfLinks";
				/ "all functions %FetchNumberOfLinks"
					>> %FileSystem $dep_from ("%FileDescriptor" @ %FileSystem)
				),
				(
				+ 'ynothrow' @ "%operator(==, !=) for %FileNodeID",
				/ "member function %FileDescriptor::GetNodeID"
					-> "function %GetFileNodeIDOf";
				/ "type %NodeID"; "functions %operator(==, !=) for %NodeID",
					"functions %(GetFileNodeIDOf, IsNodeShared)"
					>> %FileSystem
				),
				+ "function %StreamPut" $dep_from (%YBase.YStandardEx.IOS,
					"%ystdex::write_ntcts" @ %YBase.YStandardEx.String)
			),
			/ @ "platform %Win32" @ %NativeAPI $=
			(
				* "'__has_include(<specstrings_undef.h>)' broke Visual C++ \
					builds" $since b900
					$= (/ "commented out the check"),
				/ @ "namespace %platform_ex" $=
				(
					+ "function %IntPtrToHandle";
					+ "check for special invalid return value '-2'"
						@ "function %ToHandle"
						// This is not a bug since the special value is \
							documented recently. Note the earliest \
							implementation in this project dates back to b475 \
							in %YCLib.FileSystem.
				)
			)
		),
		/ %YSLib $=
		(
			/ @ "namespace %YSLib::IO" @ %Adaptor.YAdaptor $=
			(
				+ 'using platform::FileTime;',
				+ 'using platform::SetFileAccessTimeOf;'
					$dep_from ("%FileDescriptor::SetAccessTime" @ %FileIO),
				+ 'using platform::SetFileModificationTimeOf;' $dep_from
					("%FileDescriptor::SetModificationTime" @ %FileIO),
				+ 'using platform::SetFileModificationAndAccessTimeOf;'
					$dep_from
					("%FileDescriptor::SetModificationAndAccessTime"
					@ %FileIO),
				+ 'using platform::StreamPut;'
					$dep_from ("%StreamPut" @ %FileIO)
			),
			* $forced DLDI "object definitions %(PreserveModificationTime, \
				PreserveModificationAndAccessTime)" @ %YSLib.Service.FileSystem
				$dep_from ("%FileDescriptor" @ %YCLib.FileIO)
				$= (/ $impl ^ "%(SetFileModificationTimeOf, \
					GetFileModificationTimeOf, \
					SetFileModificationAndAccessTimeOf, \
					GetFileModificationAndAccessTimeOf)"
					$dep_from %YAdaptor.Adaptor)
		),
		/ %NPL $=
		(
			+ "common reducer name" @ "functions %(AccR, FoldR1, Map1)"
				^ "%A1::NameTypedReducerHandler" @ %NPLA1Forms,
			/ %NPLA1 $=
			(
				/ DLDI
					"simplified member function %Continuation::GetNextTermRef",
				/ @ "class %REPLContext" $=
				(
					+ "data member %OutputStreamPtr";
					+ "function %GetOutputStreamRef"
				)
			),
			/ "applicative %puts" @ "function %LoadModule_std_io" @ %Dependency
				^ ($dep_from "%REPLContext::GetOutputStreamRef" @ %NPLA1,
				"%YSLib::IO::StreamPut" @ %YSLib.Adaptor.YAdaptor)
				~ "%std::puts"
				// This hack makes it possible to work for priting Unicode BMP \
					codepoints from a UTF-8 input on the traditional (broken) \
					Windows console in %MinGW32 platforms when libstdc++ is \
					used, though it still chokes from the console input;
		)
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ "relocated installed NPLA1 scripts to 'share/NPLA1'" ~ 'var/NPLA1'
				@ %SHBuild-build-YSLib.txt,
				// This should be better read-only.
			/ DLDI "renamed internal path prefix variable for loading"
				// Ditto, but actually not sensitive to the actual behavior, \
					as the loaded script %SHBuild-YSLib-common.txt is still in \
					the same directory to %SHBuild-BuildApp.txt.
		),
		/ %SHBuild.Main $=
		(
			/ $forced DLI "registered %std::cout as the output stream"
				@ "NPLA1 context initialization"
				$dep_from %YFramework.NPL.Dependency,
			* "wrong ANSI code page assumptions on handling external command \
				arguments" @ "platform %Win32" $since b476
				$= (/ $impl ^ "%platform_ex::ParseCommandArguments"
					~ "%platform_ex::(EncodeArg, DecodeArg)")
					// See $2020-10 @ %Documentation::Workflow.
		)
	),
	/ DLI "optimized dot strings comparision"
		^ $dep_from ("%ystdex::is_parent_or_self" @ %YBase.YStandardEx.Path)
		$dep_from ("ystdex::path_traits specialization for %basic_string_view \
		instantiations" @ %YBase.YStandardEx.Path)
		$effective @ ("constructors#(4, 5)", "function %IsDot")
		@ "class %DEntry" @ %'YCLib_(DS).DSIO'
		// This is in general more efficient than comparing to string literals \
			more than 3 by times when dot and dot-dot string are all compared \
			(also having significantly improving in a string string comparison).
),

b900
(
	/ $re_add(b826) DLB "removed targets generated from 'objcopy -O binary'"
		@ "makefile" @ "project %YSTest_ARM9" @ "platform %DS",
		// This is not used since b826. See $2018-05 @ %Documentation::Workflow.
	/ $re_ex(b800) "updated year" @ "%SUBTITLE2" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	/ %YFramework $=
	(
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			/ @ "member function %Partition::StatFromEntry" $=
			(
				/ "removed assignments to implementation-specific 'st_spare*' \
					data members" $dep_to "newlib compatibility",
					// This is also compatible to newlib > 3.1.
				/ "set .tv_nsec to 0" @ 'st_*time'
					@ "newlib version greater than 3.1"
					// See also https://github.com/devkitPro/libfat/issues/19.
			),
			/ "read FSInfo for FAT32 unconditionally"
				@ "member function %Partition::StatFS"
				~ "creation of FSInfo on the special 'SCAN' command magic",
				// Same to https://github.com/devkitPro/libfat/commit/42fe5af38d0d48a1a3a874c96ee89ecb62f7a4a1.
			/ $dev "type of all free count value" ^ $dep_from
				("%ClusterCount" @ "namespace %FAT" @ %FileSystem) ~ "%size_t",
			+ DLDI 'YB_ATTR_nodiscard' @ "internal functions",
			/ @ "class %AllocationTable" $=
			(
				(
				+ "function %UpdateFSInfo";
				+ "function %SynchronizeClusters" ^ $dep_from
					("%FAT::Clusters::UnknownFreeCount" @ %YCLib.FileSystem)
				),
				- "function %WriteFSInfo" $dep_from "%Partition::CreateFSInfo",
				- "function %ReadClusters"
					$dep_from "%Partition::SynchronizeClusters",
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions %(QueryNext, \
					QueryLast, LinkFreeCleared, CountFreeCluster, TrimChain)",
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "function %IsFreeOrValid",
			),
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
				@ ("functions %IsFATRoot16Cluster",
				"friend function %operator==") @ "class %DEntryPosition",
			/ @ "class %Partition" $=
			(
				/ DLDI "simplified function %CreateFSInfo"
					^ $dep_from "%AllocationTable::UpdateFSInfo"
					~ "%AllocationTable::WriteFSInfo",
				/ "updated FSInfo on reading" @ "function %ReadFSInfo"
					^ $dep_from "%AllocationTable::SynchronizeClusters"
					~ "%AllocationTable::ReadClusters",
					// Same to https://github.com/devkitPro/libfat/commit/42fe5af38d0d48a1a3a874c96ee89ecb62f7a4a1.
				/ "consolidated MBR sector check" @ ("constructor#2",
					"function %FindFirstValidPartition") ^ $dep_from
					("%(CheckValidMBR, MatchSignature)" @ "namespace %FAT"
					@ %YCLib.FileSystem),
					// Different to LibFAT 1.1.2. See the comments in the source
					//	code for details.
				+ DLDI 'YB_ATTR_nodiscard' @ "private function",
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions %(EntryExists, \
					ExtensionResult, LockOpenFiles, ReadFSInfoSector, \
					ReadSector, WriteSector)",
				/ DLI "cached file system type by initialization of cluster \
					reader"
					$= (/ "function %ReadClusterFromEntry" -> "data member")
			),
			/ @ "member function %DirState::Iterate" $=
			(
				/ "throwing" -> "return value %int";
					// This now follows the corresponding change in \
						https://github.com/devkitPro/libfat/pull/9. Note there \
						is no need to change elsewhere, as the %::devoptab_t \
						handler is already self adapted to both cases.
				+ $dev $lib 'YB_ATTR_nodiscard'
			),
			/ $dev $lib @ "class %FileInfo" $=
			(
				+ 'YB_ATTR_nodiscard YB_PURE'
					@ "functions %(CanAppend, CanRead, CanWrite)"
				+ 'YB_ATTR_nodiscard' @ "function %(Read, Seek, Write)"
			),
			+ $dev $lib 'YB_ATTR_nodiscard'
				@ "functions %(FetchPartitionFromPath, Mount, Unmount)",
			+ "function %IsSimpleAbsolute",
			/ @ "class %DEntry" $=
			(
				(
				+ "function %IsFAT32Root";
				/ "split constructor %DEntry#4" -> "2 constructors"
					^ ($dep_from "%IsSimpleAbsolute", "%IsFAT32Root")
					$dep_to "DEntry constructor split";
				/ $comp DLDI "avoided unused variable"
					@ "release configurations"
					@ "constructor %DEntry with 5 parameters" ^ 'yunused',
					// To eliminate G++ warning: [-Wunused-variable].
				),
				+ "default move (constructor, %operator=)",
					// To avoid unexpected copies.
				+ 'const' @ "parameter" @ "constructor#1"
			),
			/ DLDI "simplified (member function %Partition::ChangeDir, \
				constructor %DirState)"
				$dep_from $forced "DEntry constructor split",
			+ DLD "2 'nullptr' at end of %devoptab_t object"
				$dep_from "devkitARM update"
				// To eliminate G++ warning: [-Wmissing-field-initializers].
		),
		/ %YSLib $=
		(
			+ $dev $lib "friend functions %operator(==, <)" @ "class %Path"
				@ %Service.FileSystem,
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
			/ DLDI "%std::forward_as_tuple" -> "%YSLib::forward_as_tuple"
				$effective @ %Core.(YMessage, YEvent),
			/ DLDI "%std::tuple" -> "%YSLib::tuple" $effective @ %Core.YEvent,
			* "missing overrider %get" @ "class templates \
				%(PolymorphicValueHolder, PolymorphicAllocatorHolder)"
				$since b899
		),
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				/ DLDI "cast to 'std::wint_t'" @ "function template \
					%FetchRootNameLength_P#(3, 4)",
					// To eliminate G++ 7.1 warning: [-Wsign-conversion].
				/ @ "namespace %FAT" $=
				(
					(
					+ "alias %ClusterCount";
					+ "static yconstexpr object %UnknownFreeCount"
						@ "namespace %Clusters"
					),
					(
					+ "static yconstexpr object %FATSignature";
					+ "function %MatchSignature";
					+ "function %CheckValidMBR"
					),
					+ $dev $lib 'YB_ATTR_nodiscard'
						@ ("functions %(ConvertFileTime, FetchDateTime, \
						ConvertToAlias, FetchLongNameOffset, ConvertToMBCS, \
						GenerateAliasChecksum, ValidateName)", "functions \
						%(FindAlias, GenerateAlias)" @ "class %EntryData")
				),
				+ $dev $lib 'YB_ATTR_nodiscard' @ ("all 2 functions \
					%(IsDirectory, ReadLink)",
					"function %GetNativeName" @ "class %HDirectory")
			)
			+ DLB "workaround to prevent reserved identifier %__deref clash"
				@ "platform %Win32" @ %YCLib.NativeAPI,
				// Without the workaround, %__deref in libstdc++ <functional> \
					of G++ 10.2 in debug mode (with %_GLIBCXX_DEBUG defined) \
					clashes with macro (defined empty) from MinGW-w64's \
					<sal.h>. See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=97362.
			* $comp $build "%_POSIX_C_SOURCE check failed" @ %Platform
				@ "platform %Android" $since b894
				$dep_from ("%Toolchain.Android.mk" @ %Tools.Scripts)
		),
		/ %NPL $=
		(
			* "assertion failure for terms of leaf nodes caused by missing \
				%IsBranchedList check" @ "functions %Forms::(FoldR1, Map1)"
				@ %NPL.NPLA1Forms $since b899,
			+ "applicative %SHBuild_DirectoryOf_"
				@ "function %LoadModule_SHBuild" @ %Dependency
		)
	),
	/ DLP "toolchain and library using" $=
	(
		/ $re_ex(b800) "platform %MinGW32 toolchain"
		(
			^ "MinGW[gcc version 10.2.0 (Rev3, Built by \
				MSYS2 project)] mingw32/mingw-w64-i686-gcc-10.2.0-3"
				~ "MinGW[gcc version 7.1.0 (Rev2, Built by MSYS2 project)] \
				mingw32/mingw-w64-i686-gcc-7.1.0-2" @ "platform %MinGW32"
				$dep_from %YFramework.YCLib.NativeAPI,
				// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
					Exceptions implementation: Dwarf2.
			^ $re_ex(b800) "mingw-w64-i686-binutils 2.35-1 from MSYS2"
				~ "mingw-w64-i686-binutils 2.28-2";
			/ $forced "rebuilt library %FreeImage";
				// If seems not working without rebuilding even with the old \
					library binary, as the linking would fail in %release \
					configurations.
			/ $forced "disabled LTO by adding '-flto'"
				@ "static release configuration" @ "platform %MinGW32"
				// To work around linking failure.
		),
		/ $re_ex(b826) DLP @ "platform %DS" $=
		(
			(
			^ "updated devkitARM release 55" ~ "devkitARM release 48"
				$dep_to "devkitARM r55" $dep_from "newlib compatibility"
				$dep_to "devkitARM update";
			/ $forced "rebuilt library %freetype"
				// If seems not working without rebuilding even with the old \
					library binary, as the font loading would always fail \
					(though the %FT_Library initialized without errors).
			),
			^ "updated libnds 1.8.1" ~ "libnds 1.7.2"
			// The final .nds file bloats from 979 KiB to 1003 KiB, and new \
				changes on %'YCLib(DS)_DSIO' makes more 1 KiB.
		),
		(
		/ DLP "updated platform %Linux toolchain",
		/ @ "%3rdparty/FreeImage" $=
		(
			* "missing local inclusion directory" @ "assembler command"
				@ "makefiles with %asm rules" @ $since b885,
				// This is at least necessary for %NASM, which is default in \
					%Makefile.gnu.
			(
			/ $doc "%Readme.en-US.txt" -> "%Readme.en-US.md";
			/ $doc "clarified the library file location" @ "platform %Linux"
				@ "%Readme.en-US.txt",
			)
			/ DLI "replaces space to tabs" @ "%Makefile.mingw"
				// In this context it does not have undesired effects.
			/ @ "makefile" @ "plaform %DS" $=
			(
				/ "renamed %MODULE";
				+ "rules for '%.c' and '%.cpp'";
				+ '.SUFFIXES:'
			),
			(
			+ "variables %(CC, CXX, LD) with default value" @ "%Makefile.gnu";
			+ $doc "'-R' in make commands" @ $dep_from "%Readme.en-US.md",
				// For some reasons, 'MAKEFLAGS += -R' in makefiles does work; \
					it just wipes out any default variables in spite of '?='.
			* "misspelled 'C_CXXFLAGS' as 'C_CXX_FLAGS'" $effective
				@ "%(Makefile.gnu, Makefile.mingw)" $since b562;
				// This does work only in %Makefile.gnu, because all instances \
					in %Makefile.mingw are wrong.
			(
			* "missing set %AR as 'gcc-ar' by default" @ "makefiles"
				$since b562,
			+ "%debug library builds with 'CONF=debug' and expected used the \
				output library file as %lib/libFreeImaged.a"
				$dep_to "libFreeImaged";
				// See $2020-10 @ %Documentation::Workflow.
			* "missing '-flto'" @ "default value of" @ "%C_CXXFLAGS"
				$since b562
				// See $2020-10 @ %Documentation::Workflow.
			)
			)
		);
		/ "rebuilt library %FreeImage" @ !"platform %Android"
		),
		/ "updated library %freetype" @ "library using" $=
		(
			+ "empty file %3rdparty/freetype/src/smooth/ftspic.h",
				// Used by the old %ftgrays.c.
			+ "%3rdparty/freetype/include/ftcolor.h from freetype 2.10.2",
				// Used by %FT_BITMAP_H.
			(
			/ $doc "%Readme.en-US.txt" -> "%Readme.en-US.md";
			/ $doc "updated build command for plaform %Win32"
				// See the %Readme.en-US.md document.
			),
			+ 'CPPFLAGS += -DFT_CONFIG_MODULES_H="<ftmodule.h>"'
				@ "%3rdparty/freetype/builds/ds/build.mk";
				// Ditto.
			^ $re_ex(b700) "updated freetype 2.10.2 with several files \
				remained from freetype 2.4.11" ~ "freetype 2.9.1";
			/ "rebuilt library %freetype" @ "platforms %(DS, MinGW32)"
			// See [Documentation::Dependencies @@2.2.6].
		)
	),
	/ %Tools.Scripts $=
	(
		+ '-D_POSIX_C_SOURCE=200809L' @ "%C_CXXFLAGS_COMMON"
			@ "%Toolchain.Android.mk",
		/ $forced "supported '-lFreeImaged'" @ "%SHBuild-BuildApp.sh"
			$dep_from "libFreeImaged"
			$= (+ $dev "overridable variable %SHBuild_YF_Libs_FreeImage"),
		* "wrong leading '/' on default value" @ "variable \
			%SHBuild_YF_CFlags_freetype when 'pkg-config' failed"
			@ !"platform %Win32" @ "%SHBuild-BuildApp.sh" $since b885,
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			* "missing import 'string->symbol' from 'std.strings'" $since b840,
				// %SHBuild-YSLib accidentally works because it imports \
					'string->symbol'.
			* "missing import %SHBuild_TrimOptions_ from %env_SHBuild_"
				$since b838,
				// Ditto.
			* DLDI "wrong handling of negation %SS_Debug" $since b840,
				// This did not expose wrong behavior because the consumption \
					of the value is also wrong.
			* @ "applicative 'ss-verbose-puts'" $since b840 $=
			(
				* "wrong handling of negation %SS_Verbose",
				* "missing copying the variable to the static environment"
			),
			(
			/ DLDI "simplfied 'chmod' invocation";
			/ "avoid 'chmod' command invocations" @ "platform %Win32";
			* "missing invoking 'chmod' on executables"
				@ "applicative %InstSHBuild" $since b838
			)
		),
		/ "%MSYSTEM wrongly applied to non-Windows host environments"
			@ "function %SHBuild_Platform_Detect" @ "%(SHBuild-common.sh, \
			SHBuild-YSLib-common.txt)" $mismath $since b885,
			// %MSYSTEM can be defined natually in other environments, e.g. WSL.
		(
		+ "NPLA1 script %SHBuild-BuildApp.txt"
			$dep_from ("%SHBuild-YSLib-common.txt", %YFramework.NPL.Dependency);
		+ "shell script %SHBuild-BuildPkg.sh"
		),
		/ @ "%SHBuild-YSLib-build.txt" $=
		(
			+ "libFreeImaged support" $dep_from $forced "libFreeImaged",
			/ "checked %(SHBuild_UseDebug, SHBuild_UseRelease)"
				@ "3rdparty library installation",
			+ $re_add(b885) $re_ex(b897) "'-gdwarf-3' as workaround after '-Og'"
				@ "platform %MinGW64" @ "YFramework DLL build",
				// See $2020-10 @ %Documentation::Workflow.
			* "missing restoring %LIBS before %YBase build" $since b796,
				// This makes the dynamic library of YBase in the %release \
					configuration having polluted %LIBS by the dynamic library \
					of YFramework in the %debug configuration (so YBase \
					release dynamic library would be then linked to YBase \
					debug dynamic library) when both %debug and %release \
					configurations are enabled in the same script run.
			+ $dev "restore of %LIBS before stage 2 %SHBuild build",
				// Ditto, although this is only bad after a debug-only build \
					of YBase + YFramework if the YBase dynamic library is \
					built correctly and 'env-get' is used instead of \
					'safeenv-get'.
			(
			+ $deploy "installing directory %var/NPLA1 under SysRoot";
			/ "NPLA1 module directory" -> "%var/NPLA1" ~ "%bin";
			+ $deploy "installing new files" @ !"%SHBuild_NoDev"
				$dep_from "%(SHBuild-BuildApp.txt, SHBuild-BuildPkg.sh)"
			),
			/ $build "worked around" @ "%YFramework library build"
				@ "platform %MinGW64" $=
			(
				// See $2020-10 @ %Documentation::Workflow.
				+ "options '-Og -g -fno-var-tracking-assignments' as \
					workaround" @ "dynamic library build",
				+ "options '-O1 -g -fno-var-tracking-assignments' as \
					workaround" @ "static library build"
			)
		)
	),
	/ $re_ex(b800) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts),
	/ $doc "%Doxyfile" $=
	(
		/ $deploy "updated %PROJECT_NUMBER";
		^ $re_ex(b627) "Doxygen 1.8.18" ~ "Doxygen 1.8.10"
	)
);

////

