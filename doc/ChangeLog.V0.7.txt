/*
	© 2016 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.7.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.7 。
\version r3098
\author FrankHB <frankhb1989@gmail.com>
\since build 700
\par 创建时间:
	2016-06-11 03:16:46 +0800
\par 修改时间:
	2016-09-14 09:54 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.6'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b700, $now];

$now
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "functions %(EvaluateGuard, EvaluateLeafPasses, \
					EvaluateListPasses)"
					=> "%(InvokeGuard, InvokeLeaf, InvokeList)",
				/ "function %RewriteLiteral" => "%EvaluateIdentifier",
				/ $forced "function %EvaluateIdentifier" $dep_from
					("%UndeclaredIdentifier" @ %NPLA)
					// This exception should not necessarily relate to \
						declarations. Unknown identifier is not always \
						undeclared. Duplicate identifier may be not allowed in \
						some contexts while duplicate declarations are allowed.
				/ DLDI "simplified function %ReplaceSeparatedChildren"
					^ "%ystdex::bind1" ~ "%std::(bind, placeholders::_1)",
				+ "function %RegisterSequenceContextTransformer",
				/ "threw %InvlidSyntax for term container without sufficient \
					children" @ "function %ReduceArguments"
					~ "threw %LoggedEvent",
				+ "function template %RegisterFormContextHandler",
				/ $forced DLDI "simlified function %Reduce" $dep_from
					("%DetectReducible" @ %NPLA,
					"%ystdex::bind1" ~ "%std::(bind, placeholders::_1)")
			),
			/ %NPLA $=
			(
				- $revert(b691) "function %ThrowArityMismatch",
					// Similar functions would be too many here, without \
						obvious benifits.
				+ "default argument 'YSLib::RecordLevel lv = YSLib::Err'"
					@ "constructor %ArityMismatch",
					// To be consistent to its base.
				/ "class %UndeclaredIdentifier" -> "class %BadIdentifier",
				/ @ "function %DetectReducible" $=
				(
					/ "swapped parameter order",
					+ 'ynothrow'
				)
			)
		),
		/ "default level of handling %std::exception" @ "function template \
			%Invoke" @ %YSLib.Core.YException -> "implicit %Err" ~ "%Emergent",
			// Not all exception is emergent by default. Also it is OK to have \
				more low level value for %TryExecute as default since an \
				exception object caught by %std::exception should always be \
				handled at first, and other exception is still %Emergent.
	)
),

b725
(
	+ $re_add(b711) $repo "bookmark 'engineering-fault-b710'" @ b717
		@ "engineering fault bookmarks",
		// Failed to build for platform %DS.
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ "class template %atomic" @ %Mutex,
			* "%errno always treated as %std::errc::bad_file_descriptor when \
				opening file failed" @ "constructor %MappedFile with path \
				paramater" @ %MemoryMapping $since b719
				$= (/ DLDI ^ "%YCL_Raise_SysE"),
			/ DLDI "simplified function %LockCommandCache" @ %Host
				!^ "%ystdex::parameterize_static_object"
				// Use of %ystdex::parameterize_static_object is not necessary \
					here. It is fit where block scope is inconvenient, \
					otherwise the template parameters usually are to be reused \
					or publicly known.
			* "referenced undeclared identifiers" @ "constant-expression"
				@ "enumerator %AccessMode" @ '!O_ACCMODE'
				@ "enum class %OpenMode" @ %NativeAPI $since b722
				$= (/ DLDI "changed enumerator declaration order")
		),
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ "trace strings" @ "function %LoadNPLA1File",
				/ DLDI "function %LoadComponents" ^ "%Application::AddExit"
					~ "%Application::AddExitGuard",
				* $comp "possible race existed in initializing exit guard"
					$since b425 $dep_from %YSLib.Core.YApplication,
					// It was also unsafe for CHRLib uninitialization since \
						earlier versions, but that would not occurred on wrong \
						use of gloable uninitialization (causing multiple \
						deletion), so the interface was OK.
				* "initialization of object after allocation might have race"
					@ ("function %FetchDefaultFontCache" $since b425,
					"function %FetchMIMEBiMapping" $since b450) $=
					(/ DLDI ^ $dep_from ("%LockAddExit" ~ "%AddExitGuard"
						@ "%Application" @ %YSLib.Core.YApplication)),
				(
				/ DLDI "simplified functions \
					%(FetchDefaultFontCache, FetchMIMEBiMapping)";
				/ $comp "set log disabled when calling %FetchMIMEBiMapping"
					@ "platform %DS"
					// Though this is actually not happened before \
						%FetchDefaultFontCache is called.
				),
				(
				+ "function %InitializeKeyModule";
				/ DLDI "simplified function %InitializeKeyModule"
					^ "%InitializeKeyModule" ~ "%ExtractInitException";
				- $revert(b690) "function %ExtractInitException" $dep_from
					("constructor %Environment" @ %Environment)
				)
			),
			/ %GUIApplication $=
			(
				/ "supported atomic data members"
					@ 'YF_Multithread != 1 && YF_Host' @ "class %GUIHost"
					^ $dep_from ("%atomic" @ %YCLib.Mutex) ~ "%std::atomic",
				* $doc "Doxygen comment" @ "constructor %GUIApplication" $since
					b398
			),
			/ "supported atomic data members"
				@ ("class %WindowThread" @ %HostRenderer) ^ $dep_from
				("%atomic" @ %YCLib.Mutex) ~ "%std::atomic",
			/ @ "constructor %Environment" @ %Environment $=
			(
				/ DLI ^ "%InitializeKeyModule" ~ "%ExtractInitException";
				+ $comp "recorded detailed message on exception"
					@ "file system initialization" @ "platform %DS",
				* $comp "outdated function name" @ "exception message"
					 $since b690
			)
		),
		/ @ "class %Application" @ %YSLib.Core.YApplication $=
		(
			+ "locked guarantee" @ "function templates %(AddExit, AddGuard)",
			+ "function template %LockAddExit"
		),
		+ "function %RewriteLiteral" @ %NPL.NPLA1
	),
	/ %YBase.YStandardEx $=
	(
		* "ill-formed 'yconstfn'" @ "function template %dismiss with %one_shot \
			parameter" @ %ScopeGuard $since b702,
		* "ill-formed move %operator=" @ "class tmeplate %lock_base"
			@ %PseudoMutex $since b722
	)
),

b724
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %Debug $=
			(
				/ "macro %YCL_TraceRaw" => "%YF_TraceRaw",
					// It should be useful in %YSLib.
				/ "macro %YCL_Trace" => "%YF_Trace",
					// Though it is not used in %YSLib, but may be useful in \
						future.
				/ "macro %YCL_Use_TraceSrc" => "%YF_Use_TraceSrc",
					// Ditto.
			),
			* "wrong branch hint" @ "destructor %platform_ex::FileSystem"
				@ "platform %DS" @ %NativeAPI $since b690
		),
		(
		/ $forced $dev $dep_from ("%YCL_TraceRaw" @ %YCLib.Debug)
			$effective @ (%YSLib.Core.YException, YCLib.(NativeAPI, Debug));
		* $comp $dev "'YCL_*' reserved macros used" @ %YSLib $effective
			@ %YSLib.Core.YException $mismatch(%Documentation.YSLib $since b481)
			$since b591
		),
		/ $forced $dev $dep_from ("%YCL_Trace" @ %YCLib.Debug)
			$effective @ (%Helper.(GUIApplication, Environment), YCLib.Debug),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/ @ "(function, function template) %CheckBOM" @ %TextFile $=
				(
					+ "assertion to ensure nonnull pointer" ^ "%Nonnull",
					+ "2 overloads for %std::istream&"
				),
				/ %File $=
				(
					+ "class %UniqueLockedOutputFileStream",
					+ "class %SharedInputMappedFileStream" ^ $dep_from
						("%MappedFile" @ %Adaptor.YAdaptor,
						%YBase.YStandardEx.PseudoMutex)
				)
			),
			+ 'using platform::MappedFile' @ %Adaptor.YAdaptor
		),
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %LoadNPLA1File" $=
				(
					/ "simplified BOM detection" ^ $dep_from
						("%CheckBOM#4" @ %YSLib.Service.TextFile);
					* $comp "possible unitialized memory access when length of \
						text in external file is less than BOM length" $since
						b619,
					* "missing indirect assertion to ensure nonnull pointer \
						parameter" $mismatch $since b516
						$= (+ "assertion" ^ "%Nonnull"),
					+ "separated message for memory stream fallback with level \
						'Notice'",
					/ "merged corrupted configuration message with level 'Err'",
					/ DLDI "optimized without BOM for memory stream fallback".
					/ DLDI "reading file content" ^ $dep_from
						("%SharedInputMappedFileStream" @ %YSLib.Service.File)
						~ "%(MappedFile, SharedIndirectLockGuard<const \
						UniqueFile>, ystdex::membuf, std::istream)",
					/ "protected file creation before reading to allow \
						trapping into fallback on failure" ^ "%TryInvoke",
					/ "handling missing expected BOM" ^ "tracing with level \
						'Warning'" ~ "threw %GeneralEvent"
				),
				* "mapping and assertion failed when writing configuration file"
					$since b723
					@ "functions %(LoadNPLA1File, SaveConfiguration)"
					$= (/ $revert_ex(b723) $impl ^ $dep_from
						("%UniqueLockedOutputFileStream" @ %YSLib.Service.File)
						~ "%(UniqueFile, IndirectLockGuard<const UniqueFile>)")
					// Crash on release configuration. This was caused by \
						unlocking out of life %UniqueFile.
			),
			* "ill-formed code" @ "class %Environment" @ "platform %DS"
				@ %Environment $since b717
				$= (/ $re_add(b717) DLDI ^ "%ystdex::in_place"
					~ "%ystdex::any_ops::in_place_t")
		),
		* DLDI "wrong branch hint" @ "platform %DS" @ %'YCLib(DS)'.DSIO $since
			b611
	),
	/ %YBase.YStandardEx.PseudoMutex $=
	(
		* "missing defaulted move %operator="
			@ "class template %lock_base without check enabled" $since b723,
		* $comp "defaulted deleted move %operator=" @ "class templates \
			%(unique_lock, shared_lock) without check enabled" $since b723
	)
),

b723
(
	/ %YFramework $=
	(
		/ %YCLib_('Win32').MinGW32 $=
		(
			/ @ "class %Win32Exception" $=
			(
				/ "printed with error number text" @ "error category".
				/ "trimmed right" @ "result" @ "static function %FormatMessage"
					^ "%ystdex::rtrim"
			),
			/ "printed with error message text" @ "macro %YCL_Trace_Win32E"
				^ "%platform_ex::Win32Exception::FormatMessage"
		),
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				/ "printed with error message text" @ "macro %YCL_Trace_SysE"
					^ "%std::strerror",
				/ "function %operator* returning %int"
					-> "2 functions returning self reference"
			),
			/ @ "namespace %Concurrency" @ %Mutex $=
			(
				(
				+ 'using ystdex::threading::lockable_adaptor;' $dep_from
					("%ystdex::threading::lockable_adaptor"
					@ %YBase.YStandardEx.PseudoMutex);
				+ "alias templates %(AdaptedLock, AdaptedLockGuard)";
				+ "alias templates %(IndirectLock, IndirectLockGuard)"
					^ $dep_from ("%AdaptedLock", "%AdaptedLockGuard",
					("%ystdex::indirect_ref_adaptor" @ %YBase.YStandardEx.Ref))
				),
				(
				+ 'using ystdex::threading::shared_lockable_adaptor;';
				(
				+ "alias templates %(SharedAdaptedLock, \
					SharedAdaptedLockGuard)";
				+ "alias templates %(SharedIndirectLock, \
					SharedAdaptedLockGuard)" ^ $dep_from ("%SharedAdaptedLock",
					"%SharedAdaptedLockGuard)", ("%ystdex::indirect_ref_adaptor"
					@ %YBase.YStandardEx.Ref))
				),
				/ DLDI "simplified %shared_lock_guard"
				)
			),
			+ "function %GetUniqueFile" @ "class %MappedFile" @ %MemoryMapping
		),
		/ DLDI %Helper.Initialization $=
		(
			/ "simplified functions %(LoadNPLA1File, SaveConfiguration)"
				^ $dep_from ("%IndirectLockGuard" @ %YCLib.Mutex)
				~ "%unique_lock",
			/ "simplified functions %LoadNPLA1File"
				^ $dep_from (("%SharedIndirectLockGuard" @ %YCLib.Mutex)
				~ "%shared_lock_guard", ("%MappedFile::GetUniqueFile"
				~ "%MappedFile::GetFile" @ %YCLib.FileMapping))
				$dep_from "shared locking cause %std::terminate called"
		),
		* "missing %what() message" @ "funcction template %TryInvoke"
			@ %YSLib.Core.YException $since b701
			$= (^ "%ExtractAndTrace" ~ "%TraceExceptionType")
			// This was caused by %TraceExceptionType implementation fix.
	),
	/ %YBase.YStandardEx $=
	(
		+ "noexcept-specification" @ "%operator()" @ "all functors with all \
			specializations %(first, get, indirect, second)" @ "namespace \
			%iterator_transformation" @ %Iterator,
			// To eliminate G++ warning: [-Wnoexcept].
		/ @ "namespace %threading" @ %PseudoMutex $=
		(
			+ "class template %shared_lockable_adaptor",
			/ "supported custom references"
				@ "class template %shared_lockable_adaptor" $=
			(
				+ "2nd parameter with default argument as stored reference",
				/ "%lockable_type" => "%holder_type"
					// Now the 1st template parameter does not need to be \
						lockable.
			),
			* "throwing conflict with wrong noexcept-specification even when \
				check is enabled" @ "members" @ "%(lock_base, lock_guard, \
				shared_lock)" $orig (@ "namespace %single_thread" $since b605)
				$dep_to "shared locking cause %std::terminate called"
				$= (- $revert_ex(b605) "'yimpl(ynothrow)' when check is \
					enabled")
		),
		+ "class template %indirect_ref_adaptor" @ %Ref,
		+ "alias templates %(conjunction, disjunction, negation)" @ %TypeTraits,
			// Which implements WG21 P0013R1.
		/ %TypeOperation $=
		(
			+ "metafunctions %(cond_or; cond_or_t)";
			/ DLDI "simplified %common_nonvoid_t" ^ "%cond_or_t"
		),
		/ DLDI "simplified %defer_element" @ %Memory ^ $dep_from
			("%cond_or" @ %TypeOperation),
		/ @ "class %task_pool" @ %Concurrency $=
		(
			+ "function %reset with task number";
			/ DLDI "simplified function %reset without parameter"
		)
	)
),

b722
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ ("enum class %OpenMode"; 'DefBitmaskEnum(OpenMode)')
				@ "namespace %platform" @ %NativeAPI,
			/ @ "class %FileDescriptor" $=
			(
				/ @ "member functions %(try_lock, try_lock_shared)" $=
				(
					* "always failed to lock" @ "platform %DS" $since b721
						$= (/ "returned always true" ~ "alywas false"),
					* "missing locking call" @ !"platforms %(DS, Win32)"
						$= (/ ^ 'YCL_TraceCallF_CAPI(::flock'
						~ 'YCL_TraceCallF_CAPI(, ::flock')
				),
				* "wrong length specified for locking which would cause \
					unlocking out of range" @ "platform %Win32"
					@ "functions %(lock_shared, try_lock, try_lock_shared)"
					$since b721
					// This would cause error 158 on calling %::UnlockFileEx: \
						"The segment is already unlocked." Then assertion \
						in %unlock or %unlock_shared fails.
					$= (/ DLDI ^ 'std::uint64_t(-1)' ~ 'size_t(-1)')
			),
			/ @ %Mutex $=
			(
				+ "yconstexpr object %UseLockDebug";
				+ "alias templates %(shared_lock, shared_lock_guard)"
					@ "namespace %Concurrency" ^ $dep_from
					("%ystdex::threading::(shared_lock, \
					shared_lockable_adaptor, lock_guard)"
					@ %YBase.YStandardEx.PseudoMutex)
			)
		),
		/ DLDI "simplified" ^ "%OpenMode" @ %(YCLib.(FileIO, Host,
			MemoryMapping), 'YCLib_(DS)'.DSIO) ^ $dep_from
			("%OpenMode" @ %YCLib.NativeAPI) ~ 'O_*',
		/ re_ex(b721) DLI "function %LoadNPLA1File" @ %Helper.Initialization
			^ $dep_from ("%shared_lock_guard" @ %YCLib.Mutex)
			~ "%lock_guard"
	),
	/ %YBase.YStandardEx.PseudoMutex $=
	(
		/ @ "namespace %single_thread" $=
		(
			/ "tag types %(defer_lock_t, try_to_lock_t, adopt_lock_t) and \
				objects %(defer_lock, try_to_lock, adopt_lock)" $=
			(
				>> "namespace %threading";
				+ $forced "aliases"
			),
			+ "class shared_timed_mutex",
			(
			/ "class templates %(lock_guard, unique_lock)"
				-> "alias templates based on class templates with same"
				^ $dep_from "%threading::(lock_guard, unique_lock)";
			+ $comp DLDI 'ynothrow' @ "constructor" @ 'defined(NDEBUG)'
				@ "%unique_lock",
			* $comp "wrongly called %lock rather than %try_lock"
				@ "function %try_lock" @ "%unique_lock" $since b550,
			/ $comp @ "constructors" @ "class %lock_guard" $=
			(
				* $doc "wrong '\pre' commands" $since b450,
				* "ill-formed overload with %adopt_lock_t parameter" $since b450
			),
			/ $comp "corrected behavior for %mutex_type with overloaded \
				%operator&" @ "class templates %(lock_guard, unique_lock)"
				// See LWG 2577.
				$= (/ DLDI ^ "%std::addressof" ~ '&')
			),
			+ "alias template %shared_lock" ^ $dep_from
				"%threading::shared_lock"
		),
		/ @ "namespace %threading" $=
		(
			+ "class template %shared_lockable_adaptor";
			+ "class templates %lock_guard; (lock_base, unique_lock, \
				shared_lock)" $dep_from
				"%(defer_lock_t, try_to_lock_t, adopt_lock_t)";
			/ $doc "update referenced base specification to ISO C++14 with \
				resolution of LWG 2577" ~ "ISO C++11";
				// It is confirmed that no change except LWG 2577 is needed to \
					be conforming. Only LWG 2104 is concerned here.
		)
	),
	/ "explicitly stated transformation between class scope using-declaration \
		from/to other member declarations without name and entity kind \
		differences as implementation details in general"
),

b721
(
		/ %YCLib $=
		(
			+ "function template %RetryOnInterrupted" @ %YCommon,
			/ %FileIO $=
			(
				/ DLDI "simplified" ^ $dep_from
					("%RetryOnInterrupted" @ %YCommon),
				/ "all functions %(upclose, 2 upopen)" @ "namespace %platform"
					-> ("functions" @ 'YF_Hosted' @ "namspace %platform_ex"
					@ %Host) $dep_from %YSLib.Adaptor.YAdaptor $=
				(
					- "platform %DS support" @ 'YCL_DS',
					/ DLDI ^ $dep_from ("%platform::CallNothrow" @ %YCommon)
				),
				/ @ "class %FileDescriptor" $=
				(
					/ @ "functions %(FullRead, FullWrite, Read, Write)" $=
					(
						+ "assertion to ensure file descriptor is not '-1'",
						+ "assertion to ensure nonnull pointer"
					),
					+ "functions %(lock, lock_shared, try_lock, \
						try_lock_shared, unlock, unlocked_shared)"
				),
				/ $re_add(b711) DLDI "function %omode_conv"
					^ "%YCL_ReservedGlobal",
				(
				+ "extended flags %(ios_nocreate, ios_noreplace)";
				/ "function %omode_conv supported extended flags";
				/ ("member function %open" @ "class template %basic_filebuf";
					$comp "file stream class templates")
					"supported extende flags",
				/ DLDI "simplified function %EnsureUniqueFile"
				),
				/ $re_add(b714) $dev ("function parameter name %sig" -> '%sig_')
					@ "macros %(YCL_WrapCall_CAPI, YCL_TraceWrapCall_CAPI)"
					// To eliminate G++ warning: [-Wshadow] when enclosing \
						scope is using 'sig'.
			),
			/ @ "class %Semaphore" @ %Host $=
			(
				/ "retried on %EINTR" @ !"platform %Win32"
					@ "functions %(lock, try_lock)",
				/ @ "function %try_lock" $=
				(
					* "throwing violates %Lockable requirement"
						@ !"platform %Win32" $since b720;
					+ 'ynothrow'
				)
			),
			/ @ "class %MappedFile" @ %MemoryMapping $=
			(
				* "missing specifying binary mode explicitly on opening"
					@ "platform %Win32" @ "constructors with path \
					parameter" $since b324,
				+ "function %GetFile"
			)
		),
		/ DLDI "simplified" @ %'YCLib_(Android)'.AndroidHost ^ $dep_from
			("%platform::RetryOnInterrupted" @ %YCommon),
		- $revert(b566) ('using platform::upclose;', 'using platform::upopen')
			@ %YSLib.Adaptor.YAdaptor,
		/ %Helper.Initialization $=
		(
			/ @ "function %SaveConfiguration" $=
			(
				/ DLDI "simplified stream writing",
				/ DD "Doxygen comments" $=
				(
					+ "'\throw' command",
					* "redundant '\return' command for function returning %void"
						$since b344
				)
			),
			* "race condition on creation of NPLA1 file" @ "function \
				%LoadNPLA1File" $orig (@ "function %CheckInstall" $since b300)
				// Not all reace conditions are eliminated. However, the states
				//	would be deterministic now.
				$= (/ DLDI ^ $dep_from ("%platform::ios_noreplace"
					@ %YCLib.FileIO)),
			* "race on multiple programs accessing files"
				@ "functions %(LoadNPLA1File, SaveConfiguration)" $orig
				(@ "function %CheckInstall" $since b300) $=
				(/ DLDI ^ ("%(lock_guard, unique_lock)" $dep_from
					("%FileDescriptor::lock" @ %YCLib.FileIO),
					$dep_from ("%MappedFile::GetFile" @ %YCLib.MemoryMapping)))
		),
		/ %YCLib_(Win32).MinGW32 $=
		(
			+ "functions %(LockFile, TryLockFile, UnlockFile)"
			/ $re_add(b714) $dev ("function parameter name %sig" -> '%sig_')
				@ "macros %(YCL_WrapCall_Win32, YCL_TraceWrapCall_Win32)"
				// To eliminate G++ warning: [-Wshadow] when enclosing scope \
					is using 'sig'.
		)
	),
	+ $doc "API behavior description about %EINTR" @ %Documentation.YCLib
),

b720
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				/ $re_add(b418) "threw %std::system_error on file opening \
					failure" @ "function %HaveSameContents",
				- "function template %ThrowFileOperationFailure; class \
					FileOperationFailure" $dep_from %YSLib.YAdaptor.Adaptor,
				/ DLDI "simplified" ("(constructor, function \
					%SetTranslationMode)" @ "class %FileDescriptor",
					!"platform %DS" @ "function %upclose") ^ "%YCL_CallGlobal"
					$dep_from %NativeAPI,
				(
				/ "default argument '0'" @ "all 2 functions %uopen"
					-> 'DefaultPMode()';
				/ DLDI "simplified function template %open with path"
					@ '__GLIBCXX__' @ "class template %basic_filebuf"
					$= (- "explicit %DefaultPMode call")
				),
				/ DLDI "simplified" ^ $dep_from ("%CallNothrow" @ %YCommon)
			),
			/ DLDI %MemoryMapping $=
			(
				/  "simplified" @ "platform %Win32" @ "constructor %MappedFile"
					$=
				(
					^ "%platform_ex::ToHandle",
					- "unnecessary %narrowing_error handling"
				),
				/ "simplified" $dep_from %NativeAPI
			),
			/ %Host $=
			(
				/ DLDI "simplified constructor %TerminalData"
					^ "%(platform_ex::ToHandle, YCL_CallGlobal)" $dep_from
					%NativeAPI,
				+ "class %Semaphore" $dep_from
					%(NativeAPI, 'YCLib_(Win32)'.MinGW32)
			),
			/ %NativeAPI $=
			(
				+ "including <semphore.h>" @ $dep_from
					("%YCL_API_Has_semaphore_h" @ %Platform),
				+ "including <sys/mman.h>" @ "platforms %(Linux, 'OS X')";
				+ $dev "161 '#undef' directives for identifier of POSIX \
					functions declared in <stdio.h>, <dirent.h>, <fcntl.h>, \
					<semaphore.h>, <unistd.h>, <sys/mman.h> and <sys/stat.h>",
			),
			/ %YCommon $=
			(
				+ "enumerators %(MaxSemaphoreNumber, MaxSemaphoreValue)"
					@ "enum %SystemOption",
				/ @ "function %FetchLimit" $=
				(
					* "missing check for %_POSIX_SYMLOOP_MAX representable in \
						%size_t" $since b704
						$= (+ $dev "static assertion"),
					+ "configuration for %SystemOption::(MaxSemaphoreNumber, \
						MaxSemaphoreValue)" $dep_from "%SystemOption"
				),
				+ "function template %CallNothrow"
			),
			/ @ %Platform $=
			(
				+ "macro %YCL_API_Has_semaphore_h for supported platforms",
				- $dev $impl "redundant macro definitions" @ "platform %Android"
					// Some are introduced by platform %Linux.
			)
		),
		/ %YSLib $=
		(
			/ %Service $=
			(
				/ @ "threw %std::system_error on file operation failure"
					@ "function templates %(Remove, Unlink), function %OpenFile"
					@ %File ^ "%ystdex::throw_error" ~ ("threw \
					%FileOperationFailure" ^ "%ThrowFileOperationFailure")
				/ %FileSystem $=
				(
					/ $forced $doc "threw %std::system_error on failure"
						~ "threw %FileOperationFailure" @ ("functions \
						%(ClearTree, DeleteTree)" $dep_from ("%Remove" @ %File),
						"functions %CopyFile" $dep_from ("%OpenFile" @ %File))
					+ $doc "'\exception' command" @ "Doxygen comments"
						@ "function tmeplates %Traverse",
					* $doc "'\exception' command" @ "Doxygen comments"
						@ "function %ListFiles" $since b719
						// This change was caused by %platform::HDirectory \
							constructors.
				)
			),
			/ @ "class %FileBox" %UI.ComboList $=
			(
				* $doc "'\exception' command" @ "Doxygen comments"
					@ "function %ListItems" $since b719,
					// See %IO::ListFiles.
				* "unhandled %std::system_error thrown on listing files failure"
					@ "function %SetPath" $since b719
					$= (/ "caught %std::syatem_error"
						~ "caught %IO::%FileOperationFailure")
			),
			/ @ "namespace %YSLib::IO" @ %Adaptor.YAdaptor $=
			(
				- $revert(b654) 'using platform::ThrowFileOperationFailure;'
					$dep_from %Service.(File, FileSystem),
				- $revert(b411) 'using platform::FileOperationFailure;'
					$dep_from %(UI.ComboList, NPL.Dependency,
					Helper.Initialization, Tools.SHBuild.Main)
			)
		),
		/ $forced "caught %std::system_error" @ "function %InstallFile"
			@ %NPL.Dependency  ~ "caught %FileOperationFailure" $dep_from
			("%HaveSameContents" @ %YCLib.FileIO,
			"%CopyFile" @ %YSLib.Service.FileSystem),
		* "%std::system_error caused wrong behavior on font file access failure"
			@ "function %InitializeSystemFontCache" @ %Helper.Initialization
			$since b719
			$= (/ "caught %std::syatem_error" ~ "caught %FileOperationFailure"),
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			+ "functions %(WaitUnique, TryWaitUnique)";
			/ DLDI @ "class %Mutex" $=
			(
				/ "simplified function %lock" ^ "%WaitUnique",
				/ "simplified function %try_lock" ^ "%TryWaitUnique"
			)
		)
	),
	/ "caught %std::syatem_error" @ "main function" @ %Tools.SHBuild.Main
		~ "caught %IO::%FileOperationFailure"
),

b719
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ $lib 'YB_NORETURN' @ "function %platform_ex::LogAssert"
				@ !"platform %Win32",
			/ %FileIO $=
			(
				- DLDI "redundant 'YB_ASSUME(false)'"
					@ "member function %FileDescriptor::GetSize",

				/ "replacement list"
					@ "macros %(YCL_Raise_Win32E, YCL_RaiseZ_Win32E)" $=
				(
					/ "wrapped with 'do while(false)'",
					/ "supported message" ~ "function name with '#'"
				),
				/ $forced DLDI @ "macro %YCL_WrapCall_CAPI" $dep_from
					"%YCL_Raise_SysE",
				/ @ "class %FileDescriptor" $=
				(
					/ @ "functions \
						%(SetAccessTime, SetModificationTime, \
						SetModificationAndAccessTime)" $=
					(
						/ "simplified throwing" $=
						(
							/ $revert(b718) @ "platform %Win32",
							/ $revert_ex(b715) @ !"platform %Win32"
						),
						+ "simplified intermediate signature"
							@ !"platform %Win32" !^ "%YB_NONNULL"
					),
					/ $revert_ex(b718) "simplified throwing"
						@ "function %GetSize"
						$= (/ "threw %std::system_error or \
							%std::invalid_argument without nested exception"),
					/ @ "functions %(GetMode, GetFlags, SetMode, SetFlags, \
						SetBlocking, SetNonblocking)" 
					(
						- 'ynothrow';
						/ DLDI @ "%GetMode" ^ ($dep_from "%platform::cstat"
							@ %NativeAPI) ~ "%platform::estat",
						/ DLDI @ "%(GetFlags, SetMode, SetFlags, SetBlocking, \
							SetNonblocking)" ^ "%YCL_CallF_CAPI",
						/ "threw %std::system_error on failure"
					),
					/ "threw %std::system_error on failure" @ "function \
						%WriteContent" ^ $dep_from "%YCL_Raise_SysE" ~ ("threw \
						%FileOperationFailure" ^ "%ThrowFileOperationFailure"),
				),
				(
				/ $revert_ex(b718) "simplified throwing" @ "platform %Win32"
					@ "member functions %FileDescriptor::(GetAccessTime, \
					GetModificationTime, GetModificationAndAccessTime), all 2 \
					functions %(GetFileAccessTimeOf, \
					GetFileModificationTimeOf, \
					GetFileModificationAndAccessTimeOf)"
					!^ "enclosing %FileOperationFailure nested exception" $=
				(
					/ "threw %std::system_error without nested exception",
					/ DLDI "simplified" @ "platform %Win32",
					/ $impl @ !"platform %Win32" ^ $dep_from
						("%platform_ex::cstat" @ %NativeAPI)
				);
				- $revert(b718) "function templates %(ThrowWithNested, \
					ThrowNested)" @ "class %FileOperationFailure" $dep_from
					(%FileSystem, "%FileDescriptor::(SetAccessTime, \
					SetModificationTime, SetModificationAndAccessTime, \
					GetSize)")
				),
				* "wrong nothrow exception-specification"
					@ "all 2 functions %FetchNumberOfLinks" $since b639 $=
				(
					- 'ynothrowv';
					/ $impl @ !"platform %Win32" ^ ($dep_from
						"%platform::cstat" @ %NativeAPI) ~ "%platform::estat"
				),
				/ "threw %std::system_error on failure" @ "function \
					%EnsureUniqueFile" ^ "%YCL_Raise_SysE" ~ ("threw \
					%FileOperationFailure" ^ "%ThrowFileOperationFailure")
			),
			+ "2 functions %platform_ex::cstat" @ %NativeAPI,
			/ $revert_ex(b718) "simplified throwing" @ "platform %Win32"
				@ "constructors %DirectorySession, member function \
				%HDirectory::operator++"
				!^ "enclosing %FileOperationFailure nested exception" $=
			(
				/ "threw %std::system_error without nested exception",
				/ DLDI "simplified" @ "platform %Win32",
				/ $impl @ !"platform %Win32" ^ $dep_from
					("%platform_ex::cstat" @ %NativeAPI)
			),
			/ %Host $=
			(
				/ @ !"platform %Win32" @ "function %MakePipe" $=
				(
					(
					/ $revert_ex(b718) "threw %std::system_error on pipe \
						creation failure" ^ "%YCL_CallF_CAPI"
						~ ("threw %FileOperationFailure"
						^ "%ThrowFileOperationFailure");
					* $comp "wrong exception message" @ "thrown exception"
						$since b553
					),
					/ "threw %std::system_error on failed setting pipe file \
						attributes" ~ ("threw %FileOperationFailure"
						^ "%ThrowFileOperationFailure")
				),
				(
				/ @ "function %FetchCommandOutput" $=
				(
					/ "threw %std::system_error on pipe opening failure"
						^ "%YCL_Raise_SysE" ~ ("threw %FileOperationFailure"
						^ "%ThrowFileOperationFailure");
					/ $doc "clearified exceptions"
				);
				/ DLDI "catch clause" @ "function %FetchCachedCommandResult"
					^ "%std::system_error"
					~ "%platform_ex::FileOperationFailure"
				)
			),
			/ $comp $doc "constructors %MappedFile could throw more exceptions"
				@ %MemoryMapping $dep_from
				("%FileDescriptor::GetSize" @ %FileIO),
			/ "threw %std::system_error for bad file descriptor"
				@ "constructors %MappedFile" @ %MemoryMapping
				^ "%ystdex::throw_error" ~ ("threw %FileOperationFailure"
				^ "%ThrowFileOperationFailure")
		),
		/ %'YCL_(Win32)'.MinGW32 $=
		(
			/ "wrapped replacement list with 'do while(false)'"
				@ "macros %(YCL_Raise_Win32E, YCL_RaiseZ_Win32E)",
			/ DLDI "simplified destructor" @ "classes %(GlobalDelete, \
				LocalDelete)" ^ "%YCL_Trace_Win32E" ~ "%YTraceDe"
		),
		/ $forced DLDI "caught 'std::system_error&'" ~ 'FileOperationFailure&'
			@ "functions %VerifyDirectory" @ %YSLib.Service.FileSystem $dep_from
			("constructors %platform::DirectorySession" @ %YCLib.FileSystem)
	),
	* "'$lib' did not covered possible public API break caused overload \
		ambiguity" @ %Documentation @ $since b320
		$= (+ "rules to explicitly state user code should not rely on free of \
			ambiguity of overloaded functions except for calls" @ %YBase),
	/ $forced DLDI "caught %std::system_error for nonexsited file modification \
		time comparing" ~ "caught %FileOperationFailure" @ %Tools.SHBuild.Main
		$dep_from ("%GetFileModificationTimeOf" @ %YFramework.YCLib.FileIO)
),

b718
(
	/ %YBase.YStandardEx $=
	(
		/ %Optional $=
		(
			* "missing changed interface disagreed with base specification"
				$since b717 $=
			(
				/ "made %nullopt default constructor not declared"
					$= (+ $impl "constructor with 1 parameter"),
				* "missing function %reset" @ "class template %optional"
			),
			/ @ "class template %optional" $=
			(
				/ $impl "simplified function %has_value"
					$= (/ "function" -> "using-declaration to base class \
						member"),
				* "copied instead of moved value" @ "movable base object \
					without 'const' qualified copy-initialization" $since b591
			),
			/ DLDI "simplified" ^ ("%tagged_value" @ %Placement)
		),
		/ @ "class template %state_guard" @ %ScopeGuard $=
		(
			/ @ "primary template" $=
			(
				/ "function %engaged" -> "%has_value";
				* $comp "returned function name as state" @ "function %engaged"
					$since b692
			),
			/ DLDI "simplified"
				^ ("instance of %tagged_value as base class" @ %Placement)
		),
		+ "class template %tagged_value" @ %Placement
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				+ "static member function templates \
					%FileOperationFailure::(ThrowWithNested, ThrowNested)",
				/ $re_ex(b715) "threw nested exception %FileOperationFailure \
					with %std::system_error on failure" @ "member functions \
					%FileDescriptor::(SetAccessTime, SetModificationTime, \
					SetModificationAndAccessTime)"
					@ ("platform %Win32", "platform %DS" ^ $dep_from
					"%FileOperationFailure::ThrowNested"),
				/ $re_add(b715) "threw nested exception %FileOperationFailure \
					with %std::system_error on failure" @ "member functions \
					%FileDescriptor::(GetAccessTime, GetModificationTime, \
					GetModificationAndAccessTime), all 2 functions \
					%(GetFileAccessTimeOf, GetFileModificationTimeOf, \
					GetFileModificationAndAccessTimeOf)"
					@ ("platform %Win32", "platform %DS" ^ $dep_from
					"%FileOperationFailure::ThrowNested"
					~ "%ThrowFileOperationFailure"),
				/ @ "member function %FileDescriptor::GetSize" $=
				(
					+ "check to ensure nonnegative size" $=
					/ $re_add(b715) "threw nested exception \
						%FileOperationFailure with %std::system_error"
				)
			),
			/ %FileSystem $=
			(
				/ $re_ex(b715) "threw nested exception %FileOperationFailure \
					with %std::system_error on failure" @ !"platform %Win32"
					@ ("constructors %DirectorySession",
					"member function %HDirectory::operator++")
					$= (/ DLDI ^ ("%FileOperationFailure::ThrowNested"
						@ %FileIO) ~ "%ThrowFileOperationFailure");
				* $comp $doc "nested exception not thrown" @ "platform %Win32"
					@ "Doxygen comments" @ "constructors %DirectorySession"
					$since b715
			)
		),
		/ DLDI "reduced redundant %errno access"
			@ "function templates %(Remove, Unlink)" @ %YSLib.Service.File,
		+ "2 functions %QueryFileSize" @ %'YCLib_(Win32)'.MinGW32
	)
),

b717
(
	/ %YBase.YStandardEx $=
	(
		/ %Placement $=
		(
			* "wrong member type %pointer" @ "class template %placement_delete"
				$since b716,
			(
			// See WG21 P0032R3 adopted 2016-06.
			+ "struct %in_place_tag";
			+ "alias templates %(in_place_type_t, in_place_index_t)",
			+ "(function, 2 function templates) %in_place"
			)
		),
		/ %TypePun $=
		(
			+ "function template %make_pun_default";
			+ "function template %pun_default" @ "class template \
				%standard_layout_storage" ^ "%ystdex::make_pun_default"
				$dep_from %Placement,
			- "constructor template %standard_layout_storage" $dep_from
				("friend function %operator=="
				@ "class template %any_input_iterator" @ %AnyIterator)
		),
		/ %Any $=
		(
			/ @ "namespace %any_ops" $=
			(
				/ $impl "adjusted alignment" @ "alias %any_storage",
					// As libstdc++.
				(
				/ DD "explicitly stated requirements on %(op_code, base_op) to \
					avoid strict aliasing broken";
				/ $forced DLDI "made %get_ptr handling" @ "all static member \
					functions %manager conforming to requirements" $effective
					@ "class templates %(value_handler, ref_handler, \
					holder_handler)" $dep_to "generic pointer getting";
				),
				- $revert(b677) "class template %in_place_t" $dep_from
					("simplified any type tag",
					("YSLib::InPlaceTag" @ %YFrameework.YSLib.Core.YObject))
			),
			/ @ "class %any" $=
			(
				+ "default initialization and value initialization support"
					@ "protected function templates %unchecked_access with \
					deduced argument",
				* "strict aliasing broken" @ "functions %(get, type, \
					get_holder)" $since b352 $dep_from "generic pointer getting"
					$= (/ DLDI "protected member access for %any_storage"
						^ $dep_from
						("%standard_layout_storage::pun_default" @ %TypePun))
				+ $revert(b677) 'yconstfn' @ "default constructor",
					// See WG21 P0032R3 adopted 2016-06. LWG 2013 is no longer \
						an issue here when the standard added 'constexpr'.
				(
				/ "function %clear" => "%reset";
					// See WG21 P0032R3 adopted 2016-06.
				/ DLDI "function templates %(emplace_with_handler, emplace)"
				),
				/ "function %empty" -> "%has_value",
					// Ditto.
				+ "function template %emplace overloaded with \
					%std::initializer_list instance",
					// Ditto.
				/ "constructor template with in place tag" ^ $dep_from
					("%in_place_type_t" @ %Placement) ~ "%any_ops::in_place_t"
					$dep_to "simplified any type tag"
				// GCC 4.9 is buggy in initialization with excessive warnings: \
					[-Wmissing-field-initializers]. See \
					https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61489. This \
					will trouble building for platform %Android, though new \
					toolchain from current version of official or CrystaX NDK \
					should not be affected. So these warnings are ignored.
			),
			+ "2 function templates %make_any" ^ $dep_from
				("%in_place_t" @ %Placement);
				// See WG21 P0032R3 adopted 2016-06.
			/ $re_ex(b687) $doc "updated base specification to current working \
				paper(WG21 N4606)" ~ "previous working paper(WG21 N4582)"
		),
		/ %AnyIterator $=
		(
			(
			/ DD "explicitly stated requirements on %(iterator_op, \
				input_iterator_op, bidirectional_iteartor_op, \
				random_access_iteartor_op) to avoid strict aliasing broken";
			/ $forced "made %dereference handling" @ "all static member \
				functions %manager conforming to requirements" $effective
				@ "class template %iterator_handler";
			/ $forced DLDI "function %operator*"
				@ "class templates %any_input_iterator"
			),
			/ "reinitailized result" @ "%equal handler" @ "static function \
				%manager" @ "class template %input_iterator_handler"
				$= (/ DLDI ^ '!=' ~ '==' $dep_from %Iterator),
			* "strict aliasing broken" @ ("%equal handling" @ "class template \
				%input_iterator_handler", "friend function %operator=="
				@ "class template %any_input_iterator") $since b355,
				// It is too error-prone.
			* $impl "wrong excluding type" @ "constructor template"
				@ ("class template %any_input_iterator" $since b675,
				"class template %any_forward_iterator" $since b686),
			* $re_add(b686) "missing excluding of self type"
				@ "class template %any_bidirectional_iterator" $since b400,
			/ $forced DLDI "friend functions %(operator==, \
				is_undereferenceable)" @ "class template %is_undereferenceable"
				$dep_from ("%any::empty" @ %Any)
		),
		/ "function template %abs for %fixed_point"
			>> "friend function templates" @ %Rational,
			// To make them work same to other friends, also to prevent too \
				many unrelated diagnostic messages shown when some of \
				fail to match. Note this is still not done for some overloaded \
				operators, see comments in the source.
		* "wrong base class template argument for reference type" @ "class \
			template %subscriptive_iterator" @ %Iterator $since b576,
		/ %Optional $=
		(
			/ 'yconstexpr const struct in_place_t{} in_place{};' -> (("alias \
				%in_place_t" $dep_from "%in_place_tag") @ %Placement),
				// See WG21 P0032R3 adopted 2016-06.
			/ @ "class template %optional" $=
			(
				+ "functions %(reset, has_value)",
					// Ditto.
				/ $dev "update static assertion concerned with %in_place_t"
			),
			+ "function template %make_optional" -> "2 function templates";
				// Ditto.
			/ $re_add(b687) $doc "updated base specification to current \
				working paper(WG21 N4606)"
				~ "library fundamental TS final draft(WG21 N4480)"
		)
	),
	/ %YFramework.YSLib.Core $=
	(
		/ %YObject $=
		(
			/ $forced DLDI "function %Clear" @ "class %ValueObject" $dep_from
				("%any::clear" @ %YBase.YStandardEx.Any),
			(
			/ "constructors" @ "class %ValueObject" ^ $dep_from
				("%ystdex::(in_place_type_t, in_place)"
				@ %YBase.YStandardEx.Placement) ~ "%InPlaceTag";
			- $revert(b678) "alias template %InPlaceTag" $dep_from %ValueNode
			)
		),
		/ $impl "function template %Place" @ "class %ValueObject" @ %ValueNode
			^ $dep_from ("%ystdex::in_place)" @ %YBase.YStandardEx.Placement)
			~ "%InPlaceTag"
	)
),

b716
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			(
			+ %Placement $= (
				+ "function templates %(construct_default_within; \
					construct_default_in; construct_default; \
					uninitialized_default_construct, \
					uninitialized_default_construct_n)",
				+ "function templates %(destroy_at, destroy, destroy_n, \
					uninitialized_move, uninitialized_move_n)",
				+ "function templates %uninitialized_value_construct"
					^ $dep_from "%ystdex::construct_range",
				// Some of these partially implement WG21 P0040R3, which was \
					adapoted 2016-06.
				+ "class templates %default_init_allocator",
				+ "class template %placement_deleter; alias template \
					%placement_ptr",
				+ "function template %construct_within"
			);
			(
			* "wrong '\tparam' commands contents" @ "Doxygen comments"
				@ "function template %destroy_in" @ %Memory
				$orig @ "function template %destroy_in" $since b692;
			/ %Memory $=
			(
				/ "simplified function template %construct_in" >> %Placement
					^ $dep_from ("%construct_within" @ %Placement),
				/ "function templates %construct" $=
				(
					/ "allowed storage type different to type of object being \
						constructed" ^ $dep_from
						("%ystdex::construct_within" @ %Placement)
						~ "%ystdex::construct_in",
					>> %Placement
				),
				/ "function templates %(construct_range, destruct_in, \
					destruct, destruct_range, uninitialized_construct, \
					uninitialized_construct_n)" >> %Placement
			)
			),
			/ DLPI "simplified header inclusion" @ %(Optionl, ScopeGuard)
				^ %Placement ~ %Memory
			),
			/ %Utilities $=
			(
				/ 'yconstexpr const struct default_init_t{} default_init{};'
					>> $dep_from %Placement,
				* "wrong nothrow specification"
					@ "constructor with %default_init_t parameter"
					@ "class template %boxed_value" $since b677
			),
			/ %TypePun $=
			(
				/ @ "class template %pun_ref" $=
				(
					/ "constructor template with single 'void*' parameter"
						-> "tagged constructor template with %default_init_t",
					- 'value_init_t' @ "parameters"
						@ "constructor template for value initialization"
						// To be consistent with %boxed_value. Though keeping \
							it will be good to avoid accidental unnecessary \
							initialization, it is responsibility of users to \
							keep it work efficiently as they want in general.
				),
				/ 'yconstexpr const struct value_init_t{} value_init{};'
					>> $dep_from %Placement,
					// Now it is not used. It may still be useful in future, \
						at least as meta tag of initialization kinds; so keep \
						it.
				(
				+ "alias template %pun_ptr" ^ $dep_from
					("%placement_ptr" @ %Placement);
				+ "function template %make_pun" ^ $dep_from
					("%ystdex::construct_within" @ %Placement)
				),
				/ @ "class template %standard_layout_storage" $=
				(
					+ DD "Doxygen comments to warning about object lifetime and \
						strict aliasing rules",
					+ "function template %pun" ^ $dep_from "%make_pun",
					+ "function templates %destroy",
					(
					+ "function templates %construct" ^ $dep_from
						("%ystdex::construct_within" @ %Placement);
					/ "constructor template" ^ "%construct";
					* $comp "placement 'new' used" ~ '::new' $orig (@ \
						"constructor template %pod_storage" @ %Any $since b352)
					)
				)
			),
			/ %Any $=
			(
				/ DLI @ "%any" $=
				(
					/ "protected any base class copy constructor and \
						destructor";
						// The semantics guarantees are different than %any. \
							The base copy constructor does not construct a \
							fully-initialized object for users of %any. So \
							does the destructor. Also to avoid wrong use \
							without protection from 'final'. If refactorized \
							with union as underlying storage, this may be even \
							forced by deleted copy constructor of the storage.
					/ $comp "avoided redundant copy of underlying data on copy \
						construction"
				),
				/ @ "classes %any_ops::(value_handler, holder_handler)" $=
				(
					(
					/ "initialization" ^ $dep_from
						("%standard_layout_storage::construct" @ %TypePun)
					* $comp "placement 'new' used" ~ '::new' $orig
						(@ "class template %(any_handler, any_holder_handler)"
						$since b352)
					* $comp "strict aliasing broken" @ "initialization" $orig
						(@ "class template %(any_handler, any_holder_handler)"
						$since b352)
					);
					/ "dispose" ^ $dep_from
						("%standard_layout_storage::destroy" @ %TypePun)
				)
			)
		)
	),
	/ DLI ("constructor %PaintStructData" @ "platform %Win32"
		@ %YCLib.HostedGUI, "constructor %ReparsePointData"
		@ %'YCLib_(Win32)'.MinGW32) @ %YFramework $dep_from ("%ystdex::pun_ref"
		@ %YBase.YStandardEx.TypePun) ^ "%ystdex::default_init"
		// To avoid performance regression.
),

b715
(
	/ %YFramework $=
	(
		/ "all %YCL_Raise_Win32E" ^ 'yfsig'
			$effective @ %'YCLib_(Win32)'.MinGW32, YCLib.(FileIO, HostedGUI),
		/ "exception %FileOperationFailure handling" ^ "%CatchExpr"
			~ "%CatchIgnore" @ "function %InitializeSystemFontCache"
			@ %Helper.Initialization
			$= (+ "trace with level 'Warning'" ^ "%ExtractAndTrace"),
		/ "exception %FileOperationFailure handling" ^ "%CatchExpr"
			~ "%CatchIgnore" @ "function %InstallFile" @ %NPL.Dependency
			$= (+ "trace with level 'Err'" ^ "%ExtractAndTrace"),
		/ %YCLib $=
		(
			/ "handled exception %FileOperationFailure with also nested \
				exceptions" @ "function %FetchCachedCommandResult" @ %Host
				^ "%ExtractAndTrace",
			/ %FileSystem $=
			(
				/ @ "constructors %DirectorySession" $=
				(
					/ $forced DLDI "handled different underlying exceptions"
						$dep_from ("constructors %DirectoryFindData"
						@ %'YCLib_(Win32)'.MinGW32);
					/ "threw nested exception %FileOperationFailure with \
						%std::system_error on failure" @ "platform %Win32"
				),
				/ DLDI "simplified calling %::lstat" @ !"platforms %(Win32, DS)"
					@ "function %ReadLink#1" ^ "%YCL_CallF_CAPI"
					~ "%YCL_Raise_SysE",
				/ @ "class %HDirectory" $=
				(
					/ "threw nested exception %FileOperationFailure with \
						%std::system_error on failure" @ "platform %Win32"
						@ "function %operator++",
					+ "trace for exception with level 'Warning'"
						@ !"platform %Win32" @ "function %GetNodeCategory"
						^ "%(YCL_TraceCallF_CAPI, CatchExpr)" ~ "%CatchIgnore"
				)
			),
			/ "threw nested exception %FileOperationFailure with \
				%std::system_error on failure" @ !"platforms %(DS, Win32)"
				@ "member functions %FileDescriptor::(SetAccessTime, \
				SetModificationTime, SetModificationAndAccessTime)" @ %FileIO
				^ "%YCL_CallF_CAPI" $dep_from %YBase.LibDefect.Exception
		),
		/ %YSLib $=
		(
			/ %Service.FileSystem $=
			(
				+ "exception %FileOperationFailure handling" !^ "%CatchIgnore"
					@ "functions %VerfiyDirectory"
					$= (+ "trace with level 'Debug'" ^ "%ExtractAndTrace"),
				/ "threw %std::system_error" @ "function %EnsureDirectory"
					^ 'yfsig'
			),
			+ "trace with level 'Warning'" @ "exception \
				%FileOperationFailure handling" @ "member function \
				%FileBox::SetPath" @ %UI.ComboList,
				// To avoid missing context.
			* $comp "function %ExtractException" @ %Core.YException
				@ "platforms %(DS, Android)" $since b591 $dep_from
				("%ystdex::handle_nested" @ %YBase.YStandardEx.Exception)
		),
		/ @ "constructors %DirectoryFindData" @ %'YCLib_(Win32)'.MinGW32 $=
		(
			/ "exception message" -> 'yfsig',
			/ "threw %std::system_error" ~ "%platform::FileOperationFailure \
				with %ENOTDIR",
			/ "threw %Win32Exception" ~ "%platform::FileOperationFailure for \
				::GetFileAttributesW call failure" ^ "%YCL_Raise_Win32E"
		)
	),
	/ %YBase $=
	(
		+ "macro %YPP_Stringify" @ YDefinition,
		* "possible undefined behavior due to out-of-life exception object"
			@ "working with pre-built library code working without \
			reference-counted exception object" $since b550 $=
		(
			* "cleanup of %std::exception_ptr or %std::rethrow_exception would \
				cause undefined behavior" @ %LibDefect.Exception;
			* $comp "possible undefined behavior" @ "%handle_nested"
				@ %YStandardEx.Exception
		)
	)
),

b714
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ "access-specifier" @ "base class" @ "platform %DS"
				@ "class %UnmapDelete" @ %MemoryMapping -> 'private' ~ 'public',
			+ "(2 functions; function template) %ComposeMessageWithSignature"
				@ "namespace %platform" @ %Debug,
			/ %FileIO $=
			(
				* "missing including <cerrno> for %errno" $since b701,
				+ "macros %(YCL_Raise_SysE, \
					YCL_RaiseZ_SysE, YCL_Trace_SysE)",
				(
				+ "macro %YCL_WrapCall_CAPI" ^ $dep_from
					("%platform::ComposeMessageWithSignature" @ %Debug,
					"%YCL_Raise_SysE");
				+ "macros %(YCL_Call_CAPI; YCL_CallF_CAPI)"
				),
				(
				+ "macro %YCL_TraceWrapCall_CAPI" ^ $dep_from
					"%YCL_Trace_SysE";
				+ "macros %(YCL_TraceCall_CAPI; YCL_TraceCallF_CAPI)"
				),
				/ "threw %std::system_error" @ ("function template \
					%FetchCurrentWorkingDirectory", "platform %DS" @ "member \
					functions %FileDescriptor::(SetAccessTime, \
					SetModificationTime, SetModificationAndAccessTime)")
					^ "%yfsig",
				/ "simplified and threw %std::system_error with \
					platform-dependent signature" @ "member function \
					%FileDescriptor::Flush" ^ $dep_from "%YCL_CallF_CAPI"
					~ "%ystdex::throw_error",
				/ @ "class %FileDescriptor" $=
				(
					* $dev "static assertion string" @ !"platform %Win32"
						@ "function %FileDescriptor::GetNumberOfLinks" $since
						b638,
					/ DLDI "simplified throwing %std::system_error"
						@ "platform %Win32" @ "function %GetSize"
						^ "%ThrowFileOperationFailure" ~ "%ystdex::throw_error"
				)
			),
			/ %FileSystem $=
			(
				/ "threw %std::system_error" @ "functions %IterateLink"
					^ "custom signature",
				/ "threw %std::system_error" ^ "%yfsig" @ ("platform %DS"
					@ "2 functions %(CreateHardLink, CreateSymbolicLink, \
					ReadLink)", ("member function %EntryData::FillNewName",
					"function %CheckColons") @ "namespace %FAT"),
				/ "simplified" @ !"platforms %(DS, Win32)"
					@ "functions %(CreateHardLink, CreateSymbolicLink)"
					^ $dep_from ("%YCL_CallF_CAPI" @ %FileIO)
					~ "%ystdex::throw_error",
				/ "threw %std::system_error" @ "functions %ReadLink" ^ $dep_from
					("%(YCL_Raise_SysE, \
					YCL_RaiseZ_SysE)" @ %FileIO)
			),
			/ "threw %std::system_error" @ "constructor %MappedFile"
				@ %MemoryMapping $=
			(
				/ @ !"platform %DS" ^ "%yfisg"
				/ "simplified" @ !"platform %Win32" ^ $dep_from
					("%YCL_CallF_CAPI" @ %FileIO) ~ "%ystdex::throw_error"
			)
		),
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			/ @ "member function %Mutex::unlock" $=
			(
				+ 'ynothrowv',
				(
				+ $doc "'\pre' command" @ "Doxygen comments"; 
				+ "assertion for narrow contract vaiolation"
				)
			),
			/ $impl "constructor#2 %Win32Exception" ^ $dep_from
				("%platform::ComposeMessageWithSignature" @ %YCLib.Debug),
			/ "threw %std::system_error"
				@ "functions %(ResolveReparsePoint, 2 ConvertTime)" ^ "%yfsig",
			/ "macros %(YCL_Raise_Win32Exception, \
				YCL_Raise_Win32Exception_On_Failure)"
				-> "macros %(YCL_Raise_Win32E, YCL_RaiseZ_Win32E)"
				// To eliminate G++ warning: [-Wshadow] when enclosing scope \
					is using 'err'.
				$= (/ "local variable name %err" -> "%err_")
			/ "macros %(YCL_WrapCallWin32, YCL_WrapCallWin32_Trace)"
				-> "%(YCL_WrapCall_Win32, YCL_TraceWrapCall_Win32)"
				// To eliminate G++ warning: [-Wshadow] when enclosing scope \
					is using 'res'.
				$= (/ "local variable name %res" -> "%res_"),
			/ "macro %(YCL_Trace_Win32Error, YCL_CallWin32, YCL_CallWin32F, \
				YCL_CallWin32_Trace, YCL_CallWin32F_Trace)"
				=> "%(YCL_Trace_Win32E, YCL_Call_Win32, YCL_CallF_Win32, \
				YCL_TraceCall_Win32, YCL_TraceCallF_Win32)"
		)
	),
	* "missing includeing %CAssert" @ %YBase.YStandardEx.Functional $since b612
	/ $forced DLDI $dep_from %YFramework.YCLib_(Win32).MinGW32 $effective
		@ %(YCLib_(Win32), YCLib.(Host, HostedGUI, FileIO, MemoryMapping,
		FileSystem), Helper.(GUIApplication, HostRenderer)) @ %YFramework
),

b713
(
	/ %YFramework $=
	(
		/ %'YCLib_(Win32)' $=
		(
			/ %MinGW32 $=
			(
				/ "all 2 functions %(MBCSToMBCS, MBCSToWCS, WCSToMBCS, \
					UTF8ToWCS, WCSToUTF8)" >> %Consoles,
				/ DLDI "simplified member function \
					%Win32Exception::FormatMessage" ^ "%WCSToUTF8"
					~ "%(WCSToMBCS, CP_UTF8)",
				+ "class %Mutex"
			),
			/ DLDI @ "NLS table entry" @ %NLS $=
			(
				+ 'final',
				^ $re_add(b) "%platform::MappedFile"
					~ "%unique_ptr<platform::MappedFile>",
				^ "%ystdex::aligned_store_cast" ~ 'reinterpret_cast'
			)
		),
		/ %YCLib $=
		(
			/ "simplified function %usystem" ^ "%platform_ex::UTF8ToWCS"
				@ %YCommon ~ "%(platform_ex::(MBCSToWCS), CP_UTF8)" $dep_to
				"simplified Win32 common UTF-8 conversion",
			/ $forced @ "platform %Win32" $dep_from %'YCLib_(Win32)'.MinGW32 $=
			(
				/ %Host $dep_from "%platform_ex::MBCSToMBCS",
				/ %YCommon $dep_from "simplified Win32 common UTF-8 conversion",
				/ %FileIO $dep_from "%platform_ex::(UTF8ToWCS, WCSToUTF8)",
				/ %HostedGUI $dep_from "%platform_ex::WCSToUTF8"
			),
			/ $forced %FileIO $dep_from %Documentation.CommonRules $=
			(
				/ DLDI "renamed internal file time routines"
					@ !"platform %Win32",
				/ "function template %TryGetCurrentWorkingDirectory"
					=> "%FetchGetCurrentWorkingDirectory"
			),
			/ %FileSystem $=
			(
				/ @ "class %HDirectory" $=
				(
					+ "alias %iterator";
					+ "functions %(begin, end)"
				),
				- $revert(b411) "alias %FileIterator" $dep_from
					("%YSLib::IO::FileIterator" @ %YSLib.Adaptor.YAdaptor)
			)
		),
		/ @ "platform %Win32" @ %Helper.Initialization $=
		(
			* $re_add(b695) "initialized system font directory wrongly used \
				current code page" ~ "UTF-8"  $since b695
				$= (/ DLDI ^ "%platform_ex::WCSToUTF8"
					~ "%platform_ex::WCSToMBCS")
			* @ "function %TraceForOutermost wrongly used current code page"
				$orig @ "function %HandleFatalError" $since b540
				$= (/ DLDI ^ "%platform_ex::UTF8ToMBCS"
					~ "%platform_ex::MBCSToWCS")
		),
		/ $forced %'YCLib_(DS)'.DSIO $dep_from %Documentation.CommonRules $=
		(
			/ "functions %(TryRead, TrySeek, TryWrite)" @ "class %FileInfo"
				=> "%(Read, Seek, Write)",
			/ "function %TryGetClusterFromEntry" @ "class %Partition"
				=> "%ReadClusterFromEntry",
			/ @ "class %AllocationTable" $=
			(
				/ "allwed %LinkFree to throw %std::system_error";
				/ "merged function %TryLinkFree" -> "%LinkFree",
				/ "function %TryLinkFreeCleared" -> "%LinkFreeCleared"
			),
			/ DLDI "renamed internal I/O helper routines"
		),
		/ %YSLib $=
		(
			/ %Adaptor $=
			(
				/ $forced $dep_from "%TryGetCurrentWorkingDirectory"
					@ %YCLib.FileIO $=
				(
					/ 'using platform::TryGetCurrentWorkingDirectory;'
						-> 'using platform::FetchCurrentWorkingDirectory;'
						@ %YAdaptor,
					/ "function template %TryGetValue" => "%GetValue"
						@ "class %ImageTag" @ %Image
				),
				/ $impl "renamed private deleter class" @ "class %ImageMemory"
					@ %Image,
					// This change does not binary compatiblility.
				- $revert(b411) 'using platform::FileIterator;' $dep_from
					%Service.FileSystem 
			),
			/ $forced DLDI "function %MakeNormalizedAbsolute" $dep_from
				("%FetchCurrentWorkingDirectory" @ %Adaptor.YAdaptor),
			/ %Service $=
			(
				/ $forced "function templates %(TryRemove, TryUnlink)"
					=> "%(Remove, Unlink)" @ %File $dep_from
					%Documentation.CommonRules
				/ DLI "simplified function template %Traverse"
					^ "range-based for" ~ "%std::for_each" $dep_from
					("%HDirectory::begin" @ %YCLib.FileSystem)
			)
		)
	),
	/ $doc %Documentation $=
	(
		/ "meaning of 'Try*' routines" @ %CommonRules $since b705,
			// For example, the convention contradicted to %YSLib::TryInvoke, \
				and the similar conterpart %try_lock in several mutual \
				exclusive types in the ISO C++.
		* "YCLib hosted module dependency rules" $since b585
			// %YCLib.Host was allowed to depend on %YSLib.Core in its \
				implemenation.
	),
	/ $forced DLDI "%FetchDefaultShellDirectory" @ %YReader.ShlExplorer
		$dep_from
		("%TryGetCurrentWorkingDirectory" @ %YFramework.YSLib.Adaptor.YAdaptor)
),

b712
(
	(
	+ $doc "limitation on moved-from state of user-defined class objects"
		@ %Documentation.LanguageConvention;
	/ $forced $doc "clearified moved-to state as '\note' command"
		@ "Doxygen comments" $effective @ "class %DirectorySession"
		@ %YFramework.YCLib.FileSystem
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				+ $doc "'\invariant' command" @ "Doxygen comments"
					@ "class %HDirectory",
				/ DLDI @ "platform %Win32" @ "class %DirectorySession" $=
				(
					+ 'final' @ "private class %DirectorySession::Data",
					/ "avoided construction of %default_delete<Data>"
						@ "member function %Deleter::operator()"
				)
			),
			/ %MemoryMapping $=
			(
				+ "default constructor" @ "class %UnmapDelete";
				/ @ "class %MappedFile" $=
				(
					/ "allowed empty state"
					(
						+ "default constructor",
						+ "explicitly default move (constructor, %operator=)",
						+ "functions operator(!, bool)" ^ "%DefBoolNeg",
						+ "assertion" @ "function %FlushView"
					),
					(
					+ DLDI "saved mapping option";
					(
					+ "functions %(FlushFile; Flush)";
					/ "destructor" ^ "%Flush" ~ "%FlushView"
					),
					+ "function %GetMappingOption"
					)
				)
			),
			/ %HostedGUI $=
			(
				/ @ "%WM_INPUT handling" @ "constructor %WindowInputHost"
					@ "platform %Win32" @ %HostedGUI $=
				(
					/ DLDI "simplified" ^ "%::RAWINPUT directly";
					* $comp "strict aliasing broken" $orig
						(@ %Helper.Host $since b423)
				),
				(
				+ "class %PaintStructData";
				/ @ "class %WindowRegionDeviceContext" $=
				(
					+ "protected base class %PaintStructData";
					/ "member access for %::PAINTSTRUCT" ^ "%punning"
						~ "%ystdex::(aligned_storage_t, aligned_store_cast)";
					* $comp $re_ex(b565) "strict aliasing broken" $since b564
				)
				)
			),
			/ 'ynothrow' @ "member function %HandleDelete::operator()"
				@ "platform %Win32" @ %Host -> 'ynothrowv',
			/ %YCommon $=
			(
				+ "enumerator %SystemOption::PageSize";
				+ "support for querying page size with parameter value \
					%SystemOption::PageSize" @ "function %FetchLimit"
			)
		),
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			- $re_add(b705) DLI "redundant private data member"
				@ "class %DirectoryFindData",
			/ @ "class %ReparsePointData" $=
			(
				/ DLDI "simplified"
					^ "%ystdex::aligned_storage_t" ~ "%ystdex::pun_storage_t",
				+ DLDI 'final' @ "struct %Data",
				- 'final'
					// To allow initialized before other bases.
			),
			/ "function %FixConsoleHandler" >> %Consoles
		),
		/ DLDI %Helper $=
		(
			/ "simplified CHRLib mapping initialization"
				@ "function %LoadComponents" @ %Initialization $dep_from
				("%MappedFile" @ %YCLib.MemoryMapping),
			/ $forced %Enviornment $dep_from
				("%FixConsoleHandler" @ %'YCLib_(Win32)'.MinGW32.Consoles)
		)
	)
),

b711
(
	+ $repo "bookmark 'engineering-fault-b710'" @ b706
		@ "engineering fault bookmarks",
		// Failed to build for platform %DS.
	/ %YFramework $=
	(
		/ @ %Helper.Initialization $=
		(
			/ @ "function %LoadNPLA1File" $=
			(
				(
				/ "missing hanling %errno before opening file"
					// It should be noted that file stream operations may or \
						may not set %errno.
					$= (/ $re_add(b710) "saved and restored %errno"
						^ "%ystdex::swap_guard");
				/ "traced with level 'Warning' on file stream failure"
					~ "threw %GeneralEvent";
				/ "used fallback stream in memory on file stream failure"
					$dep_to "fallback on loading NPLA1 file failure"
				),
				/ "loading configuration from file" ^ $dep_from
					("%ystdex::membuf" @ %YBase.YStandardEx.StreamBuffer,
					"%std::istream", "%MappedFile") ~ "%ifstream"
			),
			* $comp "unhandled exception" @ "failure of creation of default \
				MIME database file" @ "function %FetchMIMEBiMapping" $since b450
				$dep_from "fallback on loading NPLA1 file failure",
				// For example when permission denied, the program might \
					silently exit in %release configurations.
			- "all 6 instances of trailing '\n'"
				@ "non exceptional trace messages"
		),
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				+ 'YB_returns_nonnull' @ "all function %rdbuf" @ "class \
					templates %(basic_ifstream, basic_ofstream, basic_fstream)",
				/ @ "class %FileDescriptor" $=
				(
					+ "function %Flush",
					+ "tracing error" @ "member function %Deleter::operator()"
				)
			),
			/ %MemoryMapping $=
			(
				/ @ "class %MappedFile" $=
				(
					/ @ "constructors with pathname parameter" $=
					(
						* "missing hanlding %::MapViewOfFile failure"
							@ "platform %Win32" $since b549;
						/ "threw nested exception with underlying exception" $=
						(
							/ "threw %std::invalid_argument as nested \
								exception for empty size of file",
							/ "threw %std::system_error as nested exception \
								for invalid file",
							/ "threw system errors for underlying system API \
								call failure"
						),
						+ $lib 'YB_NONNULL(2)'
							@ "constructor with pointer parameter",
						/ $re_add(b709) DLI ^ 'YCL_ReservedGlobal',
						- DLDI
							"redandant default mode argument for opening file",
						/ "check by narrowing" @ "all platforms"
							~ "platform %Win32",
						(
						+ "3 overloaded constructors with %(UniqueFile, \
							FileMappingOption, FileMappingKey) parameters with \
							proper default arguments and optional offset and \
							size for mapping" $dep_from ("enum class \
							%FileMappingOption", "alias %FileMappingKey");
						+ "writable file support"
						+ "identification by key" @ "platform %Win32",
							// This will inject name to device namespace.
						(
						+ "copy-on-write support";
						/ $comp "shared on read only view"
							@ !"platform %(DS, Win32)"
							// Even if the underlying system allows private \
								copy of read only pages, there is no sense to \
								support it explicitly.
						)
						),
						(
						/ $impl "stored size uniformly in deleter"
							^ $dep_from "%UnmapDelete";
						/ "return type" @ "function %GetSize" -> "%size_t"
							~ "%std::uint64_t"
							// Only offset should be remained 64-bit on \
								platform %Win32.
						),
						/ "constructor template" ^ "variadic parameters",
						(
						+ "function %FlushView";
						/ "explicitly default descructor"
							-> "user-defined destructor" ^ "%FlushView"
						)
					)
				),
				+ "enum class %FileMappingOption",
				+ "alias %FileMappingKey",
				/ "alias %UnmapDelete" @ "platform %DS" -> "class",
				/ @ "class %UnmapDelete" $=
				(
					/ "stored size" @ "all platforms";
					+ "function %GetSize"
				)
			)
		)
	),
	+ "class template %basic_membuf; aliases %(membuf, wmembuf)"
		@ %YBase.YStandardEx.StreamBuffer
),

b710
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				* "missing returning value" @ "platform %DS"
					@ "all 2 functions %IterateLink" $since b708
					$= (/ $impl 'ImplExpr' -> 'ImplRet'),
				/ @ !"platforms %(DS, Win32)" @ "function %ReadLink" $=
				(
					* "missing check %::lstat result mode" $since b660,
					* "read empty string when size is zero" $since b660,
						// This would fail on directories, for example.
					/ $re_add(b703) "saved and restored %errno"
						^ "%ystdex::swap_guard"
				),
				- DLDI "unused parameter name 'tag'"
					@ "function template %TrimTrailingSeperator_P#2",
				/ @ "platform !(DS, Win32)" @ "function %ReadLink" $=
				(
					/ "retrying allocation" ^ "%ystdex::retry_for_vector";
					* "unsupported when ::lstat result size is 0 on file \
						systems non conforming to POSIX (e.g. procfs on Linux)"
						$since b560
				)
			),
			+ "native function name as argument with %errno in threw error"
				@ "POSIX platforms" $effective ("functions %(CreateHardLink, \
				CreateSymbolicLink, ReadLink)" @ %FileSystem),
			/ "move %operator=" -> "unifying %operator=" @ "class %ScreenBuffer"
				@ %HostedGUI
		),
		/ %YSLib $=
		(
			/ @ "class %FileBox" %UI.ComboList $=
			(
				* "missing reset list state" @ "function %" $since b298
					$= (/ $impl ^ "%ResetView" ~ "%UpdateView");
				/ DLDI "simplified" @ "event handler %Confirmend" ^ "%SetPath"
			),
			/ %Service.FileSystem $=
			(
				(
				+ "function template %VerifyDirectoryPathTail";
				/ DLDI "simplified member function %Path::Verify"
					^ "%VerifyDirectoryPathTail"
				),
				* "function templates %(ResolvePathWithBase; ResolvePath) \
					cannot work with path types not constructible from string \
					type" $since b708
					$= (/ DLDI "return conversion" ^ 'IO::ParsePath<_tPath>'
						~ '_tPath'),
				(
				* "missing adjusting root path"
					@ "function template %ResolvePathWithBase" $since b708;
					// Even if adjusting would be performed again in \
						%ParsePath later, it is necessary here before resolving.
				* $comp "empty default path root for absolute paths"
					@ "function template %ResolvePath" $since b708
				),
				(
				* "missing hanling link contents of relative path"
					@ "function template %ResolvePathWithBase" $since b708;
				* $comp "wrong resolved intermediate result with path \
					conponent of link with relative path"
					@ "function template %(ResolvePathWithBase; ResolvePath)"
					$since b708
				)
			)
		),
		/ @ "framework root directory initialization" @ %Helper.Initialization
			$=
		(
			/ @ "platforms %(Win32, Android)" $=
			(
				/ "trace on validateion" -> "trace at end of initialization";
				- "duplicate trace" @ "platform %Android",
				/ DLDI "simplified"
					// Also improved performance a little on platform %Win32.
			);
			+ "support for platform %Linux by resolving '/proc/self/exe'"
				(^ $dep_from ("%IO::(ResolvePath, VerifyDirectoryPathTail)"
				@ %YSLib.Service.FileSystem),
				$dep_from "%ReadLink" @ %YCLib.FileSystem)
		),
		(
		^ "member %swap and %swap non-member functions (if any)" -> "friend \
			%swap" !@ %YCLib.FileIO $effecitve @ (("classes %(HBitmap, \
			HMultiBitmap)" @ %Adaptor.Image, ("classes %ValueNode" @ %ValueNode,
			"class %ValueObject" @ %YObject, "class template %GEvent" @ %YEvent,
			"class %Message" @ %YMessage) @ %Core, ("class %Path" @ %FileSystem,
			"classes %(CompactPixmap, CompactPixmapEx)" @ %YGDI) @ %Service,
			"class %AView" @ %UI.YWidgetView) @ %YSLib,
			"class %ScreenBuffer" @ %YCLib.HostedGUI,
			"class template %COMPtr" @ %'YCLib_(Win32)'.COM);
			// To simplify declarations and avoid excessive namespace names. \
				Note for APIs compliant to the standard library (e.g. file \
				stream class templates in YCLib) this strategy is not enabled.
		/ $forced DLDI "function %Widget::SetView" @ %UI.YWidget
		),
		* $impl "missing cleanup ill-formed %YCL_PATH_DELIMITER"
			@ %'YCLib_(DS)'.DSIO $since b706
			$= (/ $re_add(b706) ^ 'FetchSeparator<char>()'
				~ 'YCL_PATH_DELIMITER')
	),
	* $re_add(b676) $build
		"missing updating %LIBS for %YFramework.YCLib.NativeAPI"
		@ "%SHBuild-bootstrap.sh" @ %Tools.Scripts $since b703
),

b709
(
	/ %YBase.YStandardEx $=
	(
		/ @ "class template %transformed_iterator" @ %Iterator $=
		(
			* "missing excluding nested %transformed_iterator instances"
				@ "constructor templates with single \
				parameter of %transformed_iterator instances of other template \
				parameters" @ !'YB_IMPL_GNUCPP && YB_IMPL_GNUCPP < 50000' $since
				b665;
			* $re_ex(b708) "recursive instantiation of enclosing template"
				@ "constructor template with single parameter for \
				arbitrary iterator" @ %Iterator $since b679
		),
		/ %Cast $=
		(
			+ "binary type traits %(is_narrowing_from_floating_to_integer, \
				is_narrowing_from_floating_to_floating, \
				is_narrowing_from_floating)";
			* $dev "wrong static assertion" @ "function template %narrow_cast"
				$since b703
		),
		* $impl "redundant 'sizeof(tp), '" @ "SFINAE condition"
			@ "4 constructor template %mixin" @ %Mixin $since b477
			// This caused Microsoft VC++ error C2065.
	),
	/ %YFramework $=
	(
		* $re_add(b520) DLD "missing UTF-8 BOM" @ "header file %Win32Control.h"
			@ %'Helper_(Win32)' $since b570,
		/ DLDI "uniformed class-key" @ "private member type"
			@ "class %ReparsePointData" @ %'YCLib_(Win32)'.MinGW32
			-> 'struct' ~ 'class',
			// To eliminate Microsoft VC++ warning: C4099.
		/ %YCLib $=
		(
			/ %FileIO $=
			(
				* $impl "undeclared '::mode_t' may be used" @ "platform %Win32"
					$since b627
					(/ '::mode_t' -> 'mode_t' @ "namespace %platform"),
				/ DLDI "simplified functions %(HaveSameContents, \
					EnsureUniqueFile)" ^ $dep_from
					("%YCL_ReservedGlobal" @ %NativeAPI)
				* $doc "wrong name 'std::close'" @ "Doxygen comments"
					@ "functions %upopen" $orig (@ %FileSystem $since b566)
					$= (/ 'std::close' -> '::close'),
				/ DLI "member function %FileDescriptor::Deleter::operator()"
					^ $dep_from ("%YCL_CallGlobal" @ %NativeAPI),
					// To eliminate Microsoft VC++ warning: C4996.
				/ DLI "member functions %FileDescriptor::(Read, Write)"
					^ $dep_from ("%YCL_ReservedGlobal" @ %NativeAPI)
					// To eliminate Microsoft VC++ warning: C4996.
			),
			+ "macros %(YCL_ReservedGlobal; YCL_CallGlobal)" @ %NativeAPI,
			+ "Microsoft VC++ 2015 support" @ "class templates \
				%(basic_filebuf, basic_ofstream, basic_ifstream, basic_fstream)"
				$=
			(
				+ "%(open, swap) support for VC++ standard library \
					implementation",
				/ $impl "ctor-initializer" @ "constructor templates"
					@ "class templates %(basic_ifstream, basic_ofstream, \
					basic_fstream)" ^ '(nullptr)' ~ '({})',
					// To avoid possible ambiguity when base type has multiple \
						constructor allowing initialization from '{}'. This is \
						at least the case of VC++ 2015.
			),
			/ @ "platform %Win32" @ "constructor %MappedFile" @ %MemoryMapping
				$=
			(
				+ "check for size by calling %ystdex::narrow";
				* $comp "size truncated silently for file size larger than 2GiB"
					@ !"platform %Win64"
					$since b324
			),
			/ DLDI "cast to %std::uint32_t" @ "platform %Win32"
				@ "function %ToggleLockState"
				// To eliminate Microsoft VC++ warning: C4267.
		),
		/ %CHRLib.StaticMapping $=
		(
			+ "function template %EncodeChar" @ "struct %UCSMapperBase"
				^ ("%ystdex::narrow_cast" @ %YBase.YStandardEx.Cast),
			/ @ "class template specialization %GUCSMapper<CharSet::UTF_8>" $=
			(
				(
				+ 'using UCSMapperBase::EncodeChar;';
				/ DLI "character assignment" @ "function templates %Encode"
					^ "EncodeChar"
				),
				/ DLI "character assignment" @ "function template %Decode#2"
					^ "Assign"
				// Also to eliminate Microsoft VC++ warning: C4244.
			)
		),
		/ %YSLib $=
		(
			* $doc "'\pre' command" @ "Doxygen comments" @ "function template \
				%ClearSequence" @ %Core.YCoreUtility $since b624,
			/ @ "class %FileBox" @ %UI.ComboList $=
			(
				/ "made %ListItems neutural to exceptions",
				/ @ "function %SetPath" $=
				(
					/ "caught and logged %IO::FileOperationFaiure exceptions",
					* $comp "missing strong exception safety" $since b298
						$= (/ "saved state and revoeved on failure"
							^ "%ystdex::swap_guard")
				),
				(
				/ "saved state and revoeved on failure"
					@ "%Confirmed event handler" @ "constructor"
					^ "%ystdex::swap_guard";
				* $comp "no recovery way from directory access failure" $orig
					@ ("member function %YFileBox::OnConfirmed"
					@ %Shell.YGUIComponent $since b193)
				)
			)
		)
	)
),

b708
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ DLDI "'::' before '_wrmdir'" @ "platform %Win32"
				@ "function %uremove" @ %FileIO,
			/ %FileSystem $=
			(
				/ @ "all 2 functions %IsDirectory" $=
				(
					/ DLDI
						^ "%platform_ex::Invalid" ~ "%INVALID_FILE_ATTRIBUTES",
					+ $lib 'YB_NONNULL(1)' @ "all 2 functions %IsDirectory"
				),
				/ "return type" @ "all 2 functions %IterateLink" -> 'bool'
					~ 'void'
			)
		),
		/ %YSLib $=
		(
			/ %Service.FileSystem $=
			(
				(
				+ "function template %ParsePath with functor",
				+ "static member function template %PathTraits::AdjustForRoot";
				/ "static member function %Path::Parse"
					-> "function template %ParsePath without functor"
					$=
				(
					/ $impl "root path check" ^ "%PathTraits::AdjustForRoot",
					/ "checked root path at first"
						// This should imporve performance a lot for long \
							paths when push in front of the path is inefficent \
							(e.g. for %ypath).
				);
				/ $forced DLDI "constructor with string parameter, constructor \
					template" @ "class %Path" ^ "%ParsePath<ypath>"
				),
				(
				+ 'using ypath::traits_type;' @ "class %Path";
				/ @ "function templates %(ResolvePath, ResolvePathWithBase)" $=
				(
					/ "pathname" ^ "path parameters and return type" ~ "string",
					/ $impl ^ "%ParsePath with functor"
						~ "%(IO::IsDictionary, ystdex::split)";
						// Trailing slashes are now handled by %Path.
					* $comp "missing handling self and parent components" $orig
						(@ "%platform::ResolvePath" @ %YCLib.FileSystem $since
						b699)
				)
				),
				(
				/ DLDI "simplified function template %ResolvePathWithBase"
					^ "%(IsAbsolute, TryGetCurrentWorkingDirectory)"
					~ "%PrepareBasePath";
					// Path tail is handled by %Path, no normalization needed.
				- $revert(b707) "function templates %(PrepareBasePath; \
					TryGetNormalizedCurrentWorkingDirectory)"
				)
			),
			* "redundant template parameter pack as groups of indices which \
				cannot be deduced" @ "constructor templates %ValueNode"
				@ %Core.ValueNode $since b681
		),
		/ @ "costructor templates %Configuration" @ %NPL.Configuration $=
		(
			* "ill-formed initializer" $since b674
				/ $impl ^ "%NoContainer" ~ '0',
			+ 'explicit',
			- "redundant 'yconstfn'"
		)
	),
	/ %YBase.YStandardEx $=
	(
		/ @ "class template %thread_pool" @ %Concurrency $=
		(
			/ DLDI ^ "brace-or-equal-initializer '{}'"
				@ "private vector member",
			* "redundant empty %std::thread caused by wrong vector \
				initialization" @ "constructor"
				// See downstream report: https://github.com/lucklove/ahttpd/issues/16.
		),
		* $impl "ill-formed program caused by missing template parameter names"
			@ '!YB_HAS_NOEXCEPT' @ %Utilities $since b704,
		/ %Container $=
		(
			* "same type of different specializations of function template \
				%emplace_hint_in_place" since $b681
				$= (/ "merged as 1 template"),
			/ DLDI "dispatch" @ "function template %extract_key"
		),
		/ $impl $doc "clearified issue related to CWG 1227"
			@ "constructor template %transformed_iterator" @ %Iterator
	),
	+ $repo "glob pattern 'packages/VisualCppTools.*'" @ "file %.hgignore"
),

b707
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "namespace %IO" @ %Service.FileSystem $=
			(
				* "ill-formed for %basic_string instance of string for \
					%is_root due to no parameter type supported by \
					%FetchRootNameLength" @ "class %PathTraits"
					$since b654 $=
				(
					/ "function template" ^ "%auto and trailing-return-type";
					/ $re_ex(b654) "static function with %String parameter"
						-> "function template with %basic_string instance as \
						parameter"
				),
				(
				+ "function template %TryGetNormalizedCurrentWorkingDirectory"
					^ $dep_from
					("%TryGetCurrentWorkingDirectory" @ %Adaptor.YAdaptor);
				+ "function template %PrepareBasePath"
				),
				+ "function template %ResolvePathWithBase" ^ $dep_from
					"%(IsDirectory, IterateLink)" @ %Adaptor.YAdaptor,
				(
				/ @ "function %MakeNormalizedAbsolute" $=
				(
					/ $impl ^ $dep_from ("%TryGetCurrentWorkingDirectory"
						@ %Adaptor.YAdaptor) ~ "%FetchCurrentWorkingDirectory";
					/ $comp "size indicated initial buffer size"
						~ "max buffer size"
				);
				- $revert(b475) "function %FetchCurrentWorkingDirectory"
					$dep_from %YReader.ShlExplorer
				),
				/ "function template %NormalizeDirectoryPathTail" $=
				(
					^ $dep_from ("%TrimTrailingSeperator" @ %Adaptor.YAdaptor)
						~ "%ystdex::rtrim",
					+ $lib "assertion for intermediate state"
				)
			),
			/ %Adaptor.YAdaptor $=
			(
				+ 'using platform::TrimTrailingSeperator;'
					$dep_from "%TrimTrailingSeperator" @ %YCLib.FileSystem,
				+ 'using platform::ReadLink;',
				+ ('using platform::IsDirectory', 'using platform::IterateLink')
					$dep_from "%(IsDirectory, IterateLink)" @ %YCLib.FileSystem,
				+ 'using platform::TryGetCurrentWorkingDirectory;',
				- $revert(b698) 'using platform::ugetcwd;'
			)
		),
		/ %YCLib $=
		(
			/ %FileSystem
			(
				+ "function templates %(2 TrimTrailingSeperator_P, \
					TrimTrailingSeperator)";
				/ DLDI "simplified functions %ResolvePath"
					^ "%TrimTrailingSeperator",
				+ "2 functions %IsDirectory",
				+ "2 functions %IterateSymbolicLink",
				(
				/ $re_ex(b704) "2 functions %ResolvePath"
					-> "function template %ResolvePath" @ "namespace %YSLib::IO"
					@ %YSLib.Service.FileSystem ^ $dep_from
					("%YSLib::IO::(PrepareBasePath, ResolvePathWithBase)"
					@ %YSLib.Service.FileSystem);
				/ $comp "platform %Win32" @ "functions %ResolvePath"
					$=
				(
					* "invalid file system entry treated as directory" $since
						b699,
					* $comp "redundant absolute path check and duplicated \
						seperator in resulted absolute path" $since b699
				)
				)
			),
			/ %FileIO $=
			(
				/ "functions %ugetcwd" @ "namespace %platform" $=
				(
					/ @ "platform %Win32" $=
					(
						+ $doc "clearified trailing slash guarantee" ,
						/ "avoided excessive race conditions" $since
							// Calls of %::GetCurrentDirectoryW and \
								%::GetFullPathNameW in %::_wgetcwd might have \
								risk with calls of %::(_chdrive, _chdir, \
								SetCurrentDirectory) of user code. This is at \
								least fit for the implementation of universal \
								CRT in Windows SDK 10.0.10240.0.
							$= (/ $impl ^ "%::(GetCurrentDirectoryW, \
								GetErrnoFromWin32)" ~ "::_wgetcwd")
					),
					/ $doc @ !"platform %Win32"
					(
					/ "explicitly stated the trailing slash is unspecified as \
						POSIX.1-2004";
					* "wrong standard 'POSIX.1 2013' to conform" $since b699
						// POSIX.1 2004 has no guarantee about slashes. \
							POSIX.1 2013 mandates there are no redundant \
							slashes.
					)
				),
				/ @ "function template %TryGetCurrentWorkingDirectory" $=
				(
					^ "%platform::ugetcwd" ~ "ADL %ugetcwd"
						@ "primary template",
					+ "specializations for %string and %u16string"
						@ "platform %Win32" ^ "::GetCurrentDirectoryW"
				)
			)
		)
	),
	/ $impl @ !"platform %Android" @ "function %FetchDefaultShellDirectory"
		@ %YReader.ShlExplorer ^ $dep_from ("%TryGetCurrentWorkingDirectory"
		@ %YFramework.YSLib.YAdaptor.Adaptor)
		~ "%FetchCurrentWorkingDirectory"
),

b706
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ @ "namespace %platform_ex" @ %FileIO $=
			(
				+ "4 functions %MakePathStringW" @ "platform %Win32",
				+ "4 functions %MakePathStringU" @ !"platform %Win32"
			),
			/ "path string conversion" @ "platform %Win32"
				^ ("%platform_ex::MakePathStringW" @ %FileIO)
				~ "%platform_ex::UTF8ToWCS" $effective @ %(FileIO, FileSystem),
				// Also decople string types if the implementation use other \
					string types not convertible from %CHRLib::MakeUCS2LE \
					result in future.
			/ "path string conversion" @ "platform %Win32"
				^ ("%platform_ex::MakePathStringU" @ %FileIO)
				~ "%CHRLib::MakeUCS2LE" $effective @ %(FileIO, FileSystem),
				// This does not FAT UCS name conversion in %FileIO which \
					explicitly using UCS-2LE conversion.
			/ %FileSystem $=
			(
				/ DLDI "simplified function 'operator u16string'"
					@ "class %HDirectory",
				(
				/ "function template %IsSlash" -> "function templates %(2 \
					FetchSeparator_P; FetchSeparator)";
				+ "function templates %(2 IsSeparator_P, IsSeparator)";
				(
					/ $forced "function templates %EndsWithNonSeperator_P"
						^ "%IsSeparator_P" ~ "ADL %IsSlash",
					* $comp "%EndsWithNonSeperator_P for platform %Win32"
						^ "native separator" ~ "target separator" $since b693
				),
				(
				/ $forced "function templates %IsAbsolute_P not for platform \
					%Win32" ^ "%FetchSeparator_P" ~ "ADL %IsSlash",
				/ "function templates %IsAbsolute_P for platform %Win32"
					^ "%IsSeparator_P"
					~ "comparison to %YCL_PATH_DELIMITER";
				* $comp "missing support of '/' as absolute path separator"
					@ "%IsAbsolute_P for platform %Win32" $orig
					@ ("platform %Win32" @ "function %IsAbsolute" @ %YCommon
					$since b299)
					// %::PathIsRelativeA only recognize backslash as separator.
				),
				- "function template %EndsWithNonSeperator_P for %Win32",
					// It is now merged by using %IsSeparator_P.
				/ "function templates %FetchRootNameLength_P (with pointer \
					parameter for platform %DS, with string parameter for \
					platform %Win32)" ^ "%IsSeparator_P"
					~ ("comparison to '/' or %YCL_FS_CharIsDelimiter"),
				/ "function templates %FetchRootNameLength_P for base platforms"
					^ "%IsSeparator_P" ~ "comparison to '/'"
				/ "functions %ResolvePath" ^ "%IsSeparator"
					~ "%YCL_FS_CharIsDelimiter",
				/ "all 'YCL_PATH_DELIMITER'" -> "call of %FetchSeparator \
					instances" $dep_to "removal use of YCL_PATH_DELIMITER"
				),
				/ DLDI "%basic_string_view instance" ^ 'path.front()'
					~ 'path[0]' $effective
					@ %(IsAbsolute_P, FetchRootNameLength_P),
				- $revert(b409) "macros %(YCL_FS_CharIsDelimiter, \
					YCL_FS_StringIsCurrent, YCL_FS_StringIsParent)" $dep_from
					("%PathTraits" @ %YSLib.Service.FileSystem),
				(
				- $revert(b297) "macro %YCL_PATH_ROOT",
				- $revert(b402) $dev
					"all 4 static assertions for %YCL_PATH_SEPARATOR";
				- $revert(b402) "macro %YCL_PATH_SEPARATOR"
				),
				(
				- $revert(b402) $dev "static assertion for %YCL_PATH_DELIMITER";
				- $revert(b296) "macro %YCL_PATH_DELIMITER" $dep_from
					(%(YSLib.Service.FileSystem, Tools.SHBuild.Main),
					"removal use of YCL_PATH_DELIMITER")
				),
				* "access for colon overrun" @ "function template \
					%IsAbsolute_P for platform %Win32 with %basic_string_view \
					instance parameter" $since b654,
					// This was not ever called since IO::IsAbsolute used \
						%string::c_str instead.
				/ @ "function %ResolvePath" $=
				(
					* "wrong assertion when path is root path"
						@ !"platform %Win32" $since b699
					* "wrong handling with assumption of trailing separator \
						when path is root path" @ "function %ResolvePath" $since
						b699
				)
			)
		),
		/ %YSLib $=
		(
			+ ('using platform::FetchSeparator;',
				'using platform::IsSeparator;') $dep_from
				"%platform::(FetchSeparator, IsSeparator)" @ %YCLib.FileSystem;
			/ @ %Service.FileSystem $=
			(
				/ @ "class template %PathTraits" @ "namespace %IO" $=
				(
					/ "function template %IsDelimiter" ^ "%IO::IsSeparator"
						~ "%YCL_FS_CharIsDelimiter",
					/ "function template %is_self" !^ "%YCL_FS_StringIsCurrent",
					/ "function template %is_parent" !^ "%YCL_FS_StringIsParent"
				)
				/ "all 'YCL_PATH_DELIMITER'"
					-> "call of %FetchSeparator instances',
			)
		)
	),
	/ $impl %Tools.SHBuild.Main ^ "%IO::FetchSeparator" ~ 'YCL_PATH_DELIMITER'
),

b705
(
	+ $re_add(b611) $dev $repo "tag 'V0.7' to revision 572",
	/ %YBase.YStandardEx.TypePun $=
	(
		+ 'yconstexpr const struct value_init_t{} value_init{};';
		+ "class template %pun_ref"
	),
	/ %YFramework $=
	(
		/ %'YCLib_(Win32)' $=
		(
			/ %MinGW32 $=
			(
				+ "class %ReparsePointData" ^ $dep_from ("%ystdex::pun_ref"
					@ %YBase.YStandardEx.TypePun);
				/ @ "function %ResolveReparsePoint" $=
				(
					/ "2nd parameter type" @ "function with buffer parameter"
						-> 'ReparsePointData::Data&' ~ 'void*';
					* $forced "strict alias broken during allocation of \
						reparse point buffer" $since b704,
					* $comp DLI "unaligned buffer" $since b660
				),
				/ @ "class %DirectoryFindData" $=
				(
					(
					+ "constructor with %wstring parameter";
					/ DLDI "simplified constructor with %wstring_view \
						parameter",
					+ "constructor with %u16string_view parameter"
					),
					+ "function %GetEntryName",
					(
					/ "function %Read returning %bool"
						~ "returning %observer_ptr<wstring>";
					- $impl "redundnt internal string state"
					)
				)
			),
			* "strict aliasing broken"
				@ "member function %WConsole::WriteString with \
				%u16string_view parameter" $since b645
				$= (/ $impl ^ "%wstring cast" ~ "%wcast")
		),
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				* "strict aliasing broken" @ "platform %Win32"
					@ "function %ReadLink" $since b660,
				/ @ "platform %Win32" @ "class %HDirectory" $=
				(
					/ $impl ^ "%u16string as private data type"
						~ "directory entry";
					/ $forced DLDI "%operator++" ^
						$dep_from ("%DirectoryFindData::(Read, GetEntryName)"
						@ %'YCLib_(Win32)');
					/ $forced DLDI "simplified function %GetNativeName";
					* $comp "strict aliasing broken"
						@ "functions %(GetNativeName; \
						operator u16string)" $since b648
				)
			),
			/ %FileIO $=
			(
				// Cast between %ucast and %wcast is not necessary safe, but \
					cast to and back is guaranteed to meet strict aliasing \
					rules.
				/ $doc "explicitly required dynamic type or parameter"
					@ "platform %Win32"
					@ "function %MakePathString for %char16_t character strings"
				/ DLDI "simplified" @ !"platform %Win32"
					@ "function %ugetcwd for 'char' string"
					// This was also misleading.
					$= (- "redundant %(wcast, ucast) calls"),
				* "strict aliasing broken" @ "platform %Win32"
					@ "constructor %DirectorySession" $since b699
					$= (/ $impl ^ $dep_from ("%constructor %DirectoryFindData"
						@ %'YCLib_(Win32)'.MinGW32) ~ "%wcast")
			)
		)
	)
),

b704
(
	/ %YBase.YStandardEx $=
	(
		(
		/ %Utilities $=
		(
			+ "3 function templates %swap_volatile";
			+ "2 function templates %vswap"
		);
		/ "class template %state_guard; alias %swap_guard" @ %ScopeGuard
			^ ($dep_from "%ystdex::vswap" @ %Utilities)
			~ "ADL swap with %std::swap"
		),
		+ %CTime
			$= (+ "functions %(is_date_range_valid, is_time_no_leap_valid)")
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				/ $re_ex(b703) DLDI "simplified member function \
					%HDirectory::operator++" @ "platform %Android" ^ $dep_from
					("%ystdex::swap_guard" @ %YBase.YStandardEx.ScopeGuard),
				/ DLDI "simplified function %FetchDateTime" ^ $dep_from
					%YBase.YStandardEx.CTime,
				/ "default argument" @ "all 2 functions %ResolvePath"
					-> ('FetchLimit(SystemOption::MaxSymlinkLoop)'
					$dep_from %YCommon) ~ '1',
				/ $impl "functions %ResolvePath" $=
				(
					/ "converted strings in single direction for Win32 and \
						non-Win32 platforms",
						// To be efficient and consistent with other routines. \
							The binary image size can also be smaller.
					/ DLD "simplified underlying directory check"
				),
				/ DLI "avoided redundant copy of string" @ "platform %Win32"
					@ "function %ReadLink" ^ $dep_from "function \
					%ResolveReparsePoint with buffer pointer returning \
					%wstring_view" @ %'YCLib_(Win32)'.MinGW32
			),
			+ "inline function %ToHandle" @ "namespace %platform_ex"
				@ "platform %Win32" @ %NativeAPI,
			/ %FileIO $=
			(
				/ DLDI "simplified" @ "platform %Win32" @ %FileIO ^ $dep_from
					("platform_ex::ToHandle" @ %NativeAPI),
				/ $doc "put types %*stream" @ "Doxygen group %workarounds",
				(
				/ DLDI "%EnsureUniqueFile"
					!^ ("default argument" @ "%FetchNumberOfLinks");
				/ "default argument" @ "all 2 functions %FetchNumberOfLinks" ->
					'{}' ~ 'true'
					// To be consistent with other functions.
				),
				+ $lib 'YB_NONNULL(1)'
					@ "2 functions %MakePathString with pointer parameter"
			),
			+ "enum class %SystemOption; function %FetchLimit" @ %YCommon,
			/ DLDI "path conversion from UCS-2LE string to UTF-8 string"
				@ !"platform %Win32" ^ "%MakePathString" ~ ("%CHRLib::MakeMBCS"
				@ !"platform %Win32", "%platform_ex::WCSToUTF8"
				@ "platform %Win32") $effecitive @ %(FileIO, FileSystem)
		),
		/ %YSLib.Adaptor.YAdaptor $dep_from %YCLib.YCommon $=
		(
			+ 'using platform::SystemOption;',
			+ 'using platform::FetchLimit;'
		),
		* DLB "missing renaming 'ycommon.cpp' to 'YCommon.cpp'"
			@ "Microsoft VC++ project" $since b633,
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			+ "function %ResolveReparsePoint with buffer pointer returning \
				%wstring_view";
			* "undefined behavior caused by buffer object accessed after \
				lifetime end" @ "function %ResolveReparsePoint with single \
				pathname parameter" $since b660
		)
	)
),

b703
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YCoreUtilities $=
				(
					+ "function template %CheckLowerBound",
					/ "function template %CheckScalar" -> "%CheckUpperBound";
					+ "function template %CheckArithmetic",
					/ $forced "function template %CheckNonnegativeScalar"
						-> "%CheckNonnegative"
					/ $forced "function template %CheckPositiveScalar"
						-> "%CheckPositive"
				),
				/ "wrapped operand of compare with cast to difference type"
					@ "assertion" @ "function template %Register#2"
					@ "class template %GHandlerRegisterBase" @ %YFunc
					// To make sure the type is expected. Also to eliminate \
						G++ warning: [-Wsign-conversion] on some situations.
			),
			/ %UI $=
			(
				(
				* "functions %(SwapLocationOf, SwapSizeOf)" @ %YWidgetView
					$since b702
					$= (/ DLDI ^ "ystdex::swap_guard");
				* "wrong rendering %CheckButton and %RadioButton" @ %Selector
					$since b702
				),
				/ DLDI "simplified member function %TextBox::Refresh"
			)
		),
		/ $forced $dep_from %YSLib.Core.YCoreUtilities $=
		(
			(
			/ "all 'CheckScalar'" -> 'CheckArithmetic' $effective
				@ %(YCLib.HostedGUI, YSLib.Adaptor.Image);
			* $comp "missing checking lower boundary '0' for %SDst when \
				converting %Rect value from %::RECT" @ "platform %Win32"
				@ %YCLib.HostedGUI $since b591 $dep_to "getting boundary \
				components check"
			),
			/ "all 'CheckNonnegativeScalar'" -> 'CheckNonnegative' $effective
				@ %(YSLib.(Adaptor.Image, Service.(TextFile, TextLayout)),
				YCLib.FileIO, 'YCLib_(Win32)'.MinGW32),
			/ "all 'CheckPositiveScalar'" -> 'CheckPositive' $effective
				@ %(YSLib.Adaptor.Image, YCLib.HostedGUI,
				'YCLib_(Win32)'.(Consoles, MinGW32), 'Helper_(Android)',
				'YCLib_(Android)'.Android)
		),
		/ %YCLib
		(
			/ %HostedGUI $=
			(
				/ @ "platform %Win32" $=
				(
					(
					/ $re_add(b591) "exception neutrality from %CheckArithmetic"
						~ "assertion" $dep_from "getting boundary components \
						check" $effective @ "member functions \
						%WindowReference::(SetBounds, SetSize)";
					* $comp "missing upper boundary check when getting window \
						boundary component values" $orig
						(@ %Win32GUI $since b445)
					),
					/ @ "member function %WindowMemorySurface::UpdateBounds" $=
					(
						* "missing check 1st %::SelectObject result" $orig
							@ ("%DSScreen::UpdateToHost" @ %DSMain $since b299),
						/ "logged for %::SelectObject calls failure"
							^ "%(YTraceDe, Err)"
					)
				),
				(
					/ DLDI "member function %ScreenBuffer::UpdateToBounds"
						^ "%WindowMemorySurface::UpdateBounds"
						~ "%WindowMemorySurface::Update";
					- "member function %WindowMemorySurface::Update"
				)
			),
			* DLDI "atom operations relied on non-explicit constructor of \
				%pair instance" %XCB $since b563,
				// This cannot compile by G++ 6.1.
			/ "wrapped %YCL_KEY values with 'size_t' cast" @ %Input,
				// To make sure the type is determined. Also to eliminate G++ \
					warning: [-Wsign-conversion] on some platforms.
			/ %FileSystem $=
			(
				* "end-of-directory state treated as corrupted state due to \
					wrong %errno handling" @ !"platform %Win32"
					@ "member function %HDirectory::operator++" $since b701
					$= (/ "saved and restored %error"
						^ ("%ystdex::swap_guard" @ !platform "%Android",
						"guard class" @ "platform %Android")),
						// On platform %Android, %error is volatile-qualified. \
							This is not supported by %ystdex::swap_guard \
							currently.
				* "wrong assertion for slash-pathname path parameter"
					@ !"platform %Win32" @ "constructor %DirectorySession"
					$since b693
			),
			/ %FileIO $=
			(
				/ $revert_ex(b658) ("enumerators" @ "enum class %NodeCategory",
					"%NodeCategory mask operations") >> %FileSystem,
				/ DLDI "simplified" ^ $dep_from
					("%platform_ex::estat" @ %NativeAPI)
			),
			+ "2 functions %estat" @ "namespace %platform_ex"
				@ 'YCL_Win32 || YCL_API_POSIXFileSystem' @ %NativeAPI
		),
		* $impl "stray 'using platform::NodeCategory;' not protected by \
			conditional inclusion" @ %'YCLib_(Win32)'.MinGW32 $since b658
			// This would break compiling on other platforms, e.g. platform \
				%Linux.
	),
	/ %YBase.YStandardEx $=
	(
		+ "exception class %narrowing_error" @ %Exception,
		/ %Cast $=
		(
			+ "function template %narrow_cast";
			+ "function template %narrow" ^ $dep_from
				("%narrowing_error" @ %Exception)
		)
	),
	+ DLDI 'ynothrow' @ "lambda-expression of movign command"
		@ %Tools.SHBuild.Main
),

b702
(
	/ %YFramework $=
	(
		+ $re_add(b642) DLDI ('ynothorw', 'ynothrowv') @ "%devoptab_t routines"
			@ %'YCLib(DS)'.DSIO,
		/ %YSLib $=
		(
			/ %UI $=
			(
				* "broken strong exception safety guarantee" @ "functions \
					%(SwapLocationOf, SwapSizeOf)" @ %YWidgetView $since b569,
				/ @ "member functions %(CheckButton, RadioButton)::Referesh"
					@ %Selector $=
				(
					/ "undefined behavior after swapping of size failed by \
						throwing an exception" $since b569
						// This may only occurred for a custom view.
					/ $doc "explicityly stated partial strong exception safety \
						guarantee" @ "Doxygen comments"
				)
			),
			+ "void return type support" @ "function template %TryInvoke"
				@ %Core.YException $=
			(
				/ "wrapped return type with %ystdex::nonvoid_result_t",
				/ $impl ^ "%ystdex::invoke_nonvoid" ~ "%ystdex::invoke"
			),
			/ $forced DLDI 'using platform::CheckIter;' @ %Adaptor.YAdaptor
				-> 'using platform::FwdIter;' $dep_from
				("%FwdIter" @ %YCLib.Debug)
		),
		/ @ "class %DirectoryFindData" %'YCLib_(Win32)'.MinGW32 $=
		(
			/ @ "function %GetNodeCategory" $=
			(
				(
				/ DLDI ^ "%(TryCategorizeNodeAttributes, \
					TryCategorizeNodeDevice)" ~ "%CategorizeNode",
				/ DLDI ^ ("%ystdex::unique_guard", $dep_from "%TryInvoke"
					@ %YSLib.Core.YException, $dep_from "%ystdex::dismiss"
					@ %YBase.YStandardEx.ScopeGuard) ~ "%FilterExceptions";
				+ $comp "traced when exception thrown for invalid handle",
					// This should not occur unless %MakeFile get wrong handle \
						due to bug of underlying system or drivers.
				* "missing set %NodeCategory::Invalid on failure" $since b660
				),
				(
				/ $re_add(b669) DLDI "simplified" ^ "%unique_ptr" $=
				(
					+ "private deleter class",
					^ "data member of %unique_ptr instance";
					/ "simplified function %Rewind",
					/ DLDI "explictly defaulted move constructor",
					/ "simplified by explictly defaulted destructor"
						@ "non-header file";
				);
				* "always caught exception for invalid handle after %Read \
					error occurred" @ "destructor" $since b701
					// Becuase the handle is not closed on error, it will be \
						closed again at destructor call.
				)
			)
		),
		/ %YCLib $=
		(
			/ @ "platform %Win32" @ %HostedGUI $=
			(
				/ @ "class %WindowRegionDeviceContext" $=
				(
					* $dev "missing noncopyable protect" $orig
						(@ %Win32GUI $since b428)
						$= (+ $impl "private base %ystdex::noncopyable"),
					+ "function %IsBackgroundValid"
				),
				+ "assertion to ensure nonnull native window handle parameter"
					@ ("constructor" @ "class template %GSurface") ^ "%Nonnull",
					// NOTE: For simplicity and consistency, now null handle \
						is not accepted in any base constructors even if for \
						%GetDC it has well-defined behavior.
				/ @ "constructors %(WindowDeviceContext, \
					WindowRegionDeviceContext)" $=
				(
					+ "assertion to ensure nonnull native window handle \
						parameter" ^ "%Nonnull",
					+ "throwing %YSLib::LoggedEvent for initialization failure"
				),
				+ $comp "assertion to ensure nonnull parameter"
					@ "member functions %ScreenBuffer::(UpdatePremultipliedTo, \
					UpdateTo)" @ "platform %Win32" $dep_from "%GSurface",
					// To be same as %UpdateTo for platforms other than %Win32.
				+ DLDI "assertion to recheck nonnull native bitmap handle"
					@ "function %WindowMemorySurface::UpdateBounds",
				/ @ "class %HostWindow" $=
				(
					+ "assertion to ensure nonnull native window handle"
						@ "constructor";
					+ $doc "'\invariant' command to ensure %GetNativeWindow \
						result nonnull"
				),
				(
				/ $forced "caught member function %HostRenderer::Update"
					@ %HostRenderer ~ "caught only platform specific exceptions"
					$dep_from %YCLib.HostedGUI;
					// Serface initialization now can throw.
				* "unhandled %LoggedEvent due to mismatched view size and \
					buffer size" $since b590
					$= (/ "caught %LoggedEvent"
						^ "%ExtractAndTrace with level 'Warning'")
					// This may actually occur if the user changes the size \
						too quickly. This is still to be resolved, see issue \
						#27.
				)
			),
			/ %Debug $=
			(
				/ 'ynothrow' @ "function template %Nonnull" -> 'ynothrowv',
				(
				/ "function template %CheckIter" -> "%FwdIter"
					// 'Check*' is now reserved for check which can throw.
					$= (/ 'ynothrow' -> 'ynothrow');
				/ $forced "function template %Deref" ^ "ADL %FwdIter"
					~ "ADL %CheckIter"
				)
			)
		)
		/ %Helper $=
		(
			* "UI drawing corruption when hosted window dragged to the edge of \
				the screen when %Host::Window::UseOpacity is not set"
				@ "platform %Win32" $since b591 $=
				// When %UseOpacity is set, %WM_PAINT is not relied so this \
					does not has effect. For full area it also behaves \
					correctly so restoring minimized window does not have \
					effect.
			(
				* "DS window screen update source coordinate calculation" $since
					b591,
				* "window renderer update source coordinate calculation"
					@ "constructor %RenderWindow" @ %HostRenderer $since b591
			),
			+ DLDI "assertion to recheck nonnull window handle"
				@ ("painting event handling", "member functions \
				%Window::(UpdateFrom, UpdateFromBounds)" @ %HostWindow)
		)
	),
	+ "3 function template %dismiss" @ %YBase.YStandardEx.ScopeGuard
),

b701
(
	/ %YFramework $=
	(
		/ $impl "%std::terminate called on allocation failure due to wrong \
			'ynothrow'" @ "DS screen initialization" @ %'Helper_(DS)' $since
			b380,
			// Also to eliminate G++ 6.1 warning: [-Wterminate].
		/ %YCLib $=
		(
			/ DLDI "constructor %HostWindow" @ %HostedGUI,
				// To eliminate G++ 6.1 warning: [-Wsign-conversion].
			/ %FileIO $=
			(
				/ @ "function template %ThrowFileOperationFailure" $=
				(
					+ "parameter 'int err = errno'";
					/ "allowed using parameter for the thrown exception"
						~ "%errno"
				),
				/ @ "platform %Win32" @ "member function \
					%FileDescriptor::GetCategory" $dep_from
					("function %CategorizeNode with native handle parameter"
					@ %'YCLib_(Win32)'.MinGW32) $=
				(
					* $comp "missing attributes detection"  $since b658,
					/ DLDI "simplified"
						$= (- "branch for null handle")
				),
				/ @ "functions %HaveSameContents" $=
				(
					+ "overload for 'const char16_t*' pathname parameters",
					* $re_add(b560) "directory with other file system category \
						not recognized as directory" $since b658
					(
					- 'YB_NONNULL(3, 4)' @ "overloading with handle parameters";
					* $doc "wrong '\pre' command" @ "Doxygen comments" $since
						b658
					),
					* $comp "directory attribute not used" @ "platform %Win32"
						$since b658 $dep_from "%FileDescriptor::GetCategory"
				)
			),
			/ @ "class %HDirectory" @ %YCLib.FileSystem $=
			(
				/ @ "function %operator++" $=
				(
					(
					* "missing throwing on error" $since b411 $=
						// This would cause some errors (e.g. dereferencing a \
							broken reparse point to a directory) treated as \
							normal end of directory iteration.
					(
						/ "checked to throw %FileOperationFailure with nested \
							underlying %std::system_error" @ "platform %Win32"
							^ "%std::throw_with_nested" $dep_from
							("%DirectoryFindData::Read"
							@ %'YCLib_(Win32)'.MinGW32),
						/ $impl "checked %errno and threw \
							%FileOperationFailure on demand"
							@ !"platform %Win32"
					),
					* $comp $doc "wrong '\throw' commands" @ "Doxygen comments"
						$since b411
					),
					/ $doc "merged '\throw' commands" @ "Doxygen comments"
				),
				* $comp "missing attributes detection" @ "platform %Win32"
					@ "member function %HDirectory::GetNodeCategory" $since b658
					$dep_from ("%DirectoryFindData::GetNodeCategory"
					@ %'YCLib_(Win32)'.MinGW32)
			)
		),
		/ %YSLib $=
		(
			/ $impl "%std::terminate called on failure due to wrong 'ynothrow'"
				@ "member function %HBitmap::SaveTo" @ %Adaptor.Image $since
				b556,
				// Also to eliminate G++ 6.1 warning: [-Wterminate].
			* "redundant tracing of exception message"
				@ "function %TraceExceptionType" @ %Core.YException $since b591,
				// To reduce duplicate message in calls of functions like \
					%ExtractAndTrace since %ExtractException has already \
					traced for 'what()' in each level of nested exception.
			/ %Service $=
			(
				/ DLI "reduced excessive %errno access"
					@ "function templates %(TryRemove, TryUnlink)" @ %File
					$dep_from ("%ThrowFileOperationFailure" @ %YCLib.FileIO)
				/ %FileSystem $=
				(
					* $re_add(b560) "directory with other file system category \
						not recognized as directory"
						@ "function template %TraverseTree" $orig
						(@ "function template %CopyTree" @ $since b648),
					* $comp "missing directory detection" @ "platform %Win32"
						@ "function templates %(Traverse; TraverseChildren); \
						function %ListFiles" $since b658 $dep_from
						("%HDirectory::GetNodeCategory" @ %YCLib.FileIO)
				)
			)
		),
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			* "ambiguity call between %MakeFile#(1, 6) for single path argument"
				$since b660
				$= (- "default argument" @ "2nd parameter"
					@ "function MakeFile#6")
			/ @ "function %FetchModuleFileName" $=
			(
				+ "parameter 'YSLib::RecordLevel = YSLib::Err';
				/ "%Win32Exception thrown with level specified by parameter"
					~ "%YSLib::Emergent";
				/ $comp "%Win32Exception thrown by call with 1 argument"
					^ "%YSLib::Err" ~ "%YSLib::Emergernt"
			),
			/ @ "class %DirectoryFindData" $=
			(
				* "missing throwing error" @ "member function %Read" $since b549
					$=
				(
					/ "threw %Win32Exception when error code is not \
						%ERROR_FILE_NOT_FOUND for %::FindFirstFileW call",
					/ "threw %Win32Exception when error code is not \
						%ERROR_NO_MORE_FILES for %::FindNextFileW call"
				),
				* $comp "missing attributes detection" @ "function \
					%GetNodeCategory" $since b658 $dep_from
					"function %CategorizeNode with native handle parameter"
			),
			(
			+ "function %IsDirectory with %FileAttributes parameter";
			/ DLDI "2 %IsDirectory for ('const ::WIN32_FIND_DATAA&', \
				'const ::WIN32_FIND_DATAW&')"
				^ "%IsDirectory for %FileAttributes"
			),
			(
			+ "function %CategorizeNode with %FileAttributes and reparse tag \
				(i.e. 'unsigned long') parameters";
			/ DLDI "simplified %CategorizeNode with \
				'const ::WIN32_FIND_DATAW&' paramater"
				^ "%CategorizeNode with 2 parameters",
			+ "function %CategorizeNode with 'const ::WIN32_FIND_DATAA&' \
				paramater",
			+ "function %TryCategorizeNodeAttributes"
			),
			+ "function %TryCategorizeNodeDevice",
			/ @ "function %CategorizeNode with native handle parameter" $=
			(
				- 'ynothrowv' -> 'ynothrow';
				/ "accepted for null handle"
					$= (- "assertion"),
				* "missing attributes detection" $since b658
					$= (/ DLDI ^ $dep_from ("%(TryCategorizeNodeAttributes, \
						TryCategorizeNodeDevice)")),
			)
		)
	)
),

b700
(
	/ @ "3rdparty libraries" $=
	(
		/ @ "freetype" $=
		(
			(
			+ "FreeType source replacement %(src/sfnt/ttmtx.c, \
				src/smooth/ftgrays.c)";
				// To make it work expectedly on platform %DS.
			+ '-DFT_CONFIG_OPTION_OLD_INTERNALS' @ "%CFLAGS"
				@ "freetype %config.mk" @ "platform %DS" $dep_to
				"FreeType old internals command line",
			),
			/ $revert_ex(b563) $build "merged freetype including directory \
				except for 'ft2build.h'" -> "%3rdparty/include"
				~ "%3rdparty/freetype/include" $dep_to
				"FreeType inclusion path",
				// As of FreeType 2.6.1, the including directory of header \
					files except for 'ft2build.h' had been changed back to \
					resolve http://savannah.nongnu.org/bugs/index.php?45097.
			/ DLP "updated library %freetype" @ "library using"
				$= (^ $re_ex(b493) "updated freetype 2.6.3 with several files \
					remained from freetype 2.4.11" ~ "freetype 2.5.3");
				// See [Documentation::Dependencies @@2.2.3].
			/ "rebuilt"
		),
		/ $re_ex(b600) "updated library %FreeImage" $=
		(
			^ "libjpeg-turbo 1.5.0" ~ "libjpeg-turbo 1.4.0" @ "%Source/LibJPEG"
				$=
			(
				(
				/ "updated %(config.h, jconfig.h, jconfigint.h) except for \
					macro %WITH_SIMD" ^ './configure --build=i686-pc-mingw32',
					// This is more accurate than old version though it \
						worked with some manually configured macro definition.
				/ $comp "value of macro %JPEG_LIB_VERSION" -> '62' ~ '80'
				),
				/ $forced "updated %Makefile.srcs"
			),
			^ "libpng 1.6.23" ~ "libpng 1.6.17" @ "%Source/LibPNG";
				// With official prebuilt %pnglibconf.h.
			/ "rebuilt"
		)
	),
	/ %YFramework $=
	(
		+ $forced DLDI '-DFT_CONFIG_OPTION_OLD_INTERNALS' @ "%CPPFLAGS"
			@ "makefile" @ "platform %DS" $dep_from
			"FreeType old internals command line",
		/ $forced DLDI "FreeType internal header path" @ %YSLib.Adaptor.Font
			$dep_from "FreeType inclusion path"
	),
	/ $re_ex(b585) "updated %SUBTITLE2 year" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	(
	/ %Tools.ProjectGenerator.Main $=
	(
		- $revert(b683) "option '-DYB_Use_LightweightTypeID=1' for generated \
			platform %DS .cbp files",
			// Since platform %DS uses custom makefile, this is useless.
		* "wrong inclusion directory" @ "platform %MinGW32" $since b633
	);
	/ $re_ex(b600) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts);
	)
),

);

////

