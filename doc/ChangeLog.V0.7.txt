/*
	© 2016 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.7.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.7 。
\version r624
\author FrankHB <frankhb1989@gmail.com>
\since build 700
\par 创建时间:
	2016-06-11 03:16:46 +0800
\par 修改时间:
	2016-06-25 01:15 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.6'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b700, $now];

$now
(
	/ %YBase.YStandardEx $=
	(
		(
		/ %Utilities $=
		(
			+ "3 function templates %swap_volatile";
			+ "2 function templates %vswap"
		);
		/ "class template %state_guard; alias %swap_guard" @ %ScopeGuard
			^ ($dep_from "%ystdex::vswap" @ %Utilities)
			~ "ADL swap with %std::swap"
		),
		+ %CTime
			$= (+ "functions %(is_date_range_valid, is_time_no_leap_valid)")
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ %FileSystem $=
			(
				/ DLDI "simplified member function %HDirectory::operator++"
					@ !"platform %Win32" $dep_from
					%YBase.YStandardEx.ScopeGuard,
				/ DLDI "simplified function %FetchDateTime" ^ $dep_from
					%YBase.YStandardEx.CTime,
				/ "default argument" @ "all 2 functions %ResolvePath"
					-> ('FetchLimit(SystemOption::MaxSymlinkLoop)'
					$dep_from %YCommon) ~ '1',
				/ $impl "functions %ResolvePath" $=
				(
					/ "converted strings in single direction for Win32 and \
						non-Win32 platforms",
						// To be efficient and consistent with other routines. \
							The binary image size can also be smaller.
					/ DLD "simplified underlying directory check"
				),
				/ DLI "avoided redundant copy of string" @ "platform %Win32"
					@ "function %ReadLink" ^ $dep_from "function \
					%ResolveReparsePoint with buffer pointer returning \
					%wstring_view" @ %'YCLib_(Win32)'.MinGW32
			),
			+ "inline function %ToHandle" @ "namespace %platform_ex"
				@ "platform %Win32" @ %NativeAPI,
			/ %FileIO $=
			(
				/ DLDI "simplified" @ "platform %Win32" @ %FileIO ^ $dep_from
					("platform_ex::ToHandle" @ %NativeAPI),
				/ $doc "put types %*stream" @ "Doxygen group %workarounds",
				(
				/ DLDI "%EnsureUniqueFile"
					!^ ("default argument" @ "%FetchNumberOfLinks");
				/ "default argument" @ "all 2 functions %FetchNumberOfLinks" ->
					'{}' ~ 'true'
					// To be consistent with other functions.
				),
				+ 'YB_NONNULL(1)'
					@ "2 functions %MakePathString with pointer parameter"
			),
			+ "enum class %SystemOption; function %FetchLimit" @ %YCommon,
			/ DLDI "path conversion from UCS-2LE string to UTF-8 string"
				@ !"platform %Win32" ^ "%MakePathString" ~ ("%CHRLib::MakeMBCS"
				@ !"platform %Win32", "%platform_ex::WCSToUTF8"
				@ "platform %Win32") $effecitive @ %(FileIO, FileSystem)
		),
		/ %YSLib.Adaptor.YAdaptor $dep_from %YCLib.YCommon $=
		(
			+ 'using platform::SystemOption;',
			+ 'using platform::FetchLimit;'
		),
		* DLB "missing renaming 'ycommon.cpp' to 'YCommon.cpp'"
			@ "Microsoft VC++ project" $since b633,
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			+ "function %ResolveReparsePoint with buffer pointer returning \
				%wstring_view";
			* "undefined behavior caused by buffer object accessed after \
				lifetime end" @ "function %ResolveReparsePoint with single \
				path parameter" $since b660
		)
	)
),

b703
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YCoreUtilities $=
				(
					+ "function template %CheckLowerBound",
					/ "function template %CheckScalar" -> "%CheckUpperBound";
					+ "function template %CheckArithmetic",
					/ $forced "function template %CheckNonnegativeScalar"
						-> "%CheckNonnegative"
					/ $forced "function template %CheckPositiveScalar"
						-> "%CheckPositive"
				),
				/ "wrapped operand of compare with cast to difference type"
					@ "assertion" @ "function template %Register#2"
					@ "class template %GHandlerRegisterBase" @ %YFunc
					// To make sure the type is expected. Also to eliminate \
						G++ warning: [-Wsign-conversion] on some situations.
			),
			/ %UI $=
			(
				(
				* "functions %(SwapLocationOf, SwapSizeOf)" @ %YWidgetView
					$since b702
					$= (/ DLDI ^ "ystdex::swap_guard");
				* "wrong rendering %CheckButton and %RadioButton" @ %Selector
					$since b702
				),
				/ DLDI "simplified member function %TextBox::Refresh"
			)
		),
		/ $forced $dep_from %YSLib.Core.YCoreUtilities $=
		(
			(
			/ "all 'CheckScalar'" -> 'CheckArithmetic' $effective
				@ %(YCLib.HostedGUI, YSLib.Adaptor.Image);
			* $comp "missing checking lower boundary '0' for %SDst when \
				converting %Rect value from %::RECT" @ "platform %Win32"
				@ %YCLib.HostedGUI $since b591 $dep_to "getting boundary \
				components check"
			),
			/ "all 'CheckNonnegativeScalar'" -> 'CheckNonnegative' $effective
				@ %(YSLib.(Adaptor.Image, Service.(TextFile, TextLayout)),
				YCLib.FileIO, 'YCLib_(Win32)'.MinGW32),
			/ "all 'CheckPositiveScalar'" -> 'CheckPositive' $effective
				@ %(YSLib.Adaptor.Image, YCLib.HostedGUI,
				'YCLib_(Win32)'.(Consoles, MinGW32), 'Helper_(Android)',
				'YCLib_(Android)'.Android)
		),
		/ %YCLib
		(
			/ %HostedGUI $=
			(
				/ @ "platform %Win32" $=
				(
					(
					/ $re_add(b591) "exception neutrality from %CheckArithmetic"
						~ "assertion" $dep_from "getting boundary components \
						check" $effective @ "member functions \
						%WindowReference::(SetBounds, SetSize)";
					* $comp "missing upper boundary check when getting window \
						boundary component values" $orig
						(@ %Win32GUI $since b445)
					),
					/ @ "member function %WindowMemorySurface::UpdateBounds" $=
					(
						* "missing check 1st %::SelectObject result" $orig
							@ ("%DSScreen::UpdateToHost" @ %DSMain $since b299),
						/ "logged for %::SelectObject calls failure"
							^ "%(YTraceDe, Err)"
					)
				),
				(
					/ DLDI "member function %ScreenBuffer::UpdateToBounds"
						^ "%WindowMemorySurface::UpdateBounds"
						~ "%WindowMemorySurface::Update";
					- "member function %WindowMemorySurface::Update"
				)
			),
			* DLDI "atom operations relied on non-explicit constructor of \
				%pair instance" %XCB $since b563,
				// This cannot compile by G++ 6.1.
			/ "wrapped %YCL_KEY values with 'size_t' cast" @ %Input,
				// To make sure the type is determined. Also to eliminate G++ \
					warning: [-Wsign-conversion] on some platforms.
			/ %FileSystem $=
			(
				* "end-of-directory state treated as corruptied state due to \
					wrong %errno handling" @ !"platform %Win32"
					@ "member function %HDirectory::operator++" $since b701
				* "wrong assertion for slash-only path parameter" @ !"platform \
					%Win32" @ "constructor %DirectorySession" $since b693
			),
			/ %FileIO $=
			(
				/ $revert_ex(b658) ("enumerators" @ "enum class %NodeCategory",
					"%NodeCategory mask operations") >> %FileSystem,
				/ DLDI "simplified" ^ $dep_from
					("%platform_ex::estat" @ %NativeAPI)
			),
			+ "2 functions %estat" @ "namespace %platform_ex"
				@ 'YCL_Win32 || YCL_API_POSIXFileSystem' @ %NativeAPI
		),
		* $impl "stray 'using platform::NodeCategory;' not protected by \
			conditional inclusion" @ %'YCLib_(Win32)'.MinGW32 $since b658
			// This would break compiling on other platforms, e.g. platform \
				%Linux.
	),
	/ %YBase.YStandardEx $=
	(
		+ "exception class %narrowing_error" @ %Exception,
		/ %Cast $=
		(
			+ "function template %narrow_cast";
			+ "function template %narrow" ^ $dep_from
				("%narrowing_error" @ %Exception)
		)
	),
	+ DLDI 'ynothrow' @ "lambda-expression of movign command"
		@ %Tools.SHBuild.Main
),

b702
(
	/ %YFramework $=
	(
		+ $re_add(b642) DLDI ('ynothorw', 'ynothrowv') @ "%devoptab_t routines"
			@ %'YCLib(DS)'.DSIO,
		/ %YSLib $=
		(
			/ %UI $=
			(
				* "broken strong exception safety guarantee" @ "functions \
					%(SwapLocationOf, SwapSizeOf)" @ %YWidgetView $since b569,
				/ @ "member functions %(CheckButton, RadioButton)::Referesh"
					@ %Selector $=
				(
					/ "undefined behavior after swapping of size failed by \
						throwing an exception" $since b569
						// This may only occurred for a custom view.
					/ $doc "explicityly stated partial strong exception safety \
						guarantee" @ "Doxygen comments"
				)
			),
			+ "void return type support" @ "function template %TryInvoke"
				@ %Core.YException $=
			(
				/ "wrapped return type with %ystdex::nonvoid_result_t",
				/ $impl ^ "%ystdex::invoke_nonvoid" ~ "%ystdex::invoke"
			),
			/ $forced DLDI 'using platform::CheckIter;' @ %Adaptor.YAdaptor
				-> 'using platform::FwdIter;' $dep_from
				("%FwdIter" @ %YCLib.Debug)
		),
		/ @ "class %DirectoryFindData" %'YCLib_(Win32)'.MinGW32 $=
		(
			/ @ "function %GetNodeCategory" $=
			(
				(
				/ DLDI ^ "%(TryCategorizeNodeAttributes, \
					TryCategorizeNodeDevice)" ~ "%CategorizeNode",
				/ DLDI ^ ("%ystdex::unique_guard", $dep_from "%TryInvoke"
					@ %YSLib.Core.YException, $dep_from "%ystdex::dismiss"
					@ %YBase.YStandardEx.ScopeGuard) ~ "%FilterExceptions";
				+ $comp "traced when exception thrown for invalid handle",
					// This should not occur unless %MakeFile get wrong handle \
						due to bug of underlying system or drivers.
				* "missing set %NodeCategory::Invalid on failure" $since b660
				),
				(
				/ $re_add(b669) DLDI "simplified" ^ "%unique_ptr" $=
				(
					+ "private deleter class",
					^ "data member of %unique_ptr instance";
					/ "simplified function %Rewind",
					/ DLDI "explictly defaulted move constructor",
					/ "simplified by explictly defaulted destructor"
						@ "non-header file";
				);
				* "always caught exception for invalid handle after %Read \
					error occurred" @ "destructor" $since b701
					// Becuase the handle is not closed on error, it will be \
						closed again at destructor call.
				)
			)
		),
		/ %YCLib $=
		(
			/ @ "platform %Win32" @ %HostedGUI $=
			(
				/ @ "class %WindowRegionDeviceContext" $=
				(
					* $dev "missing noncopyable protect" $orig
						(@ %Win32GUI $since b428)
						$= (+ $impl "private base %ystdex::noncopyable"),
					+ "function %IsBackgroundValid"
				),
				+ "assertion to ensure nonnull native window handle parameter"
					@ ("constructor" @ "class template %GSurface") ^ "%Nonnull",
					// NOTE: For simplicity and consistency, now null handle \
						is not accepted in any base constructors even if for \
						%GetDC it has well-defined behavior.
				/ @ "constructors %(WindowDeviceContext, \
					WindowRegionDeviceContext)" $=
				(
					+ "assertion to ensure nonnull native window handle \
						parameter" ^ "%Nonnull",
					+ "throwing %YSLib::LoggedEvent for initialization failure"
				),
				+ $comp "assertion to ensure nonnull parameter"
					@ "member functions %ScreenBuffer::(UpdatePremultipliedTo, \
					UpdateTo)" @ "platform %Win32" $dep_from "%GSurface",
					// To be same as %UpdateTo for platforms other than %Win32.
				+ DLDI "assertion to recheck nonnull native bitmap handle"
					@ "function %WindowMemorySurface::UpdateBounds",
				/ @ "class %HostWindow" $=
				(
					+ "assertion to ensure nonnull native window handle"
						@ "constructor";
					+ $doc "'\invariant' command to ensure %GetNativeWindow \
						result nonnull"
				),
				(
				/ $forced "caught member function %HostRenderer::Update"
					@ %HostRenderer ~ "caught only platform specific exceptions"
					$dep_from %YCLib.HostedGUI;
					// Serface initialization now can throw.
				* "unhandled %LoggedEvent due to mismatched view size and \
					buffer size" $since b590
					$= (/ "caught %LoggedEvent"
						^ "%ExtractAndTrace with level 'Warning'")
					// This may actually occur if the user changes the size \
						too quickly. This is still to be resolved, see issue \
						#27.
				)
			),
			/ %Debug $=
			(
				/ 'ynothrow' @ "function template %Nonnull" -> 'ynothrowv',
				(
				/ "function template %CheckIter" -> "%FwdIter"
					// 'Check*' is now reserved for check which can throw.
					$= (/ 'ynothrow' -> 'ynothrow');
				/ $forced "function template %Deref" ^ "ADL %FwdIter"
					~ "ADL %CheckIter"
				)
			)
		)
		/ %Helper $=
		(
			* "UI drawing corruption when hosted window dragged to the edge of \
				the screen when %Host::Window::UseOpacity is not set"
				@ "platform %Win32" $since b591 $=
				// When %UseOpacity is set, %WM_PAINT is not relied so this \
					does not has effect. For full area it also behaves \
					correctly so restoring minimized window does not have \
					effect.
			(
				* "DS window screen update source coordinate calculation" $since
					b591,
				* "window renderer update source coordinate calculation"
					@ "constructor %RenderWindow" @ %HostRenderer $since b591
			),
			+ DLDI "assertion to recheck nonnull window handle"
				@ ("painting event handling", "member functions \
				%Window::(UpdateFrom, UpdateFromBounds)" @ %HostWindow)
		)
	),
	+ "3 function template %dismiss" @ %YBase.YStandardEx.ScopeGuard
),

b701
(
	/ %YFramework $=
	(
		/ $impl "%std::terminate called on allocation failure due to wrong \
			'ynothrow'" @ "DS screen initialization" @ %'Helper_(DS)' $since
			b380,
			// Also to eliminate G++ 6.1 warning: [-Wterminate].
		/ %YCLib $=
		(
			/ DLDI "constructor %HostWindow" @ %HostedGUI,
				// To eliminate G++ 6.1 warning: [-Wsign-conversion].
			/ %FileIO $=
			(
				/ @ "function template %ThrowFileOperationFailure" $=
				(
					+ "parameter 'int err = errno'";
					/ "allowed using parameter for the thrown exception"
						~ "%errno"
				),
				/ @ "platform %Win32" @ "function %FileDescriptor::GetCategory"
					$dep_from ("function %CategorizeNode with native handle \
					parameter" @ %'YCLib_(Win32)'.MinGW32) $=
				(
					* $comp "missing attributes detection"  $since b658,
					/ DLDI "simplified"
						$= (- "branch for null handle")
				),
				/ @ "functions %HaveSameContents" $=
				(
					+ "overloading for 'const char16_T*' path parameters",
					* $re_add(b560) "directory with other file system category \
						not recognized as directory" $since b658
					(
					- 'YB_NONNULL(3, 4)' @ "overloading with handle parameters";
					* $doc "wrong '\pre' command" @ "Doxygen comments" $since
						b658
					),
					* $comp "directory attribute not used" @ "platform %Win32"
						$since b658 $dep_from "%FileDescriptor::GetCategory"
				)
			),
			/ @ "class %HDirectory" @ %YCLib.FileSystem $=
			(
				/ @ "function %operator++" $since b411 $=
				(
					(
					* "missing throwing on error" $=
						// This would cause some errors (e.g. dereferencing a \
							broken reparse point to a directory) treated as \
							normal end of directory iteration.
					(
						/ "checked to throw" @ "platform %Win32" $dep_from
							("%DirectoryFindData::Read"
							@ %'YCLib_(Win32)'.MinGW32),
						/ $impl "check %errno and threw %std::system_error on \
							demand" @ !"platform %Win32"
					),
					* $comp $doc "wrong '\throw' commands" @ "Doxygen comments"
						$since b411
					),
					/ $doc "merged '\throw' commands" @ "Doxygen comments"
				),
				* $comp "missing attributes detection" @ "platform %Win32"
					@ "member function %HDirectory::GetNodeCategory" $since b658
					$dep_from ("%DirectoryFindData::GetNodeCategory"
					@ %'YCLib_(Win32)'.MinGW32)
			)
		),
		/ %YSLib $=
		(
			/ $impl "%std::terminate called on failure due to wrong 'ynothrow'"
				@ "member function %HBitmap::SaveTo" @ %Adaptor.Image $since
				b556,
				// Also to eliminate G++ 6.1 warning: [-Wterminate].
			* "redundant tracing of exception message"
				@ "function %TraceExceptionType" @ %Core.YException $since b591,
				// To reduce duplicate message in calls of functions like \
					%ExtractAndTrace since %ExtractException has already \
					traced for 'what()' in each level of nested exception.
			/ %Service $=
			(
				/ DLI "reduced excessive %errno access"
					@ "function templates %(TryRemove, TryUnlink)" @ %File
					$dep_from ("%ThrowFileOperationFailure" @ %YCLib.FileIO)
				/ %FileSystem $=
				(
					* $re_add(b560) "directory with other file system category \
						not recognized as directory"
						@ "function template %TraverseTree" $orig
						(@ "function template %CopyTree" @ $since b648),
					* $comp "missing directory detection" @ "platform %Win32"
						@ "function templates %(Traverse; TraverseChildren); \
						function %ListFiles" $since b658 $dep_from
						("%HDirectory::GetNodeCategory" @ %YCLib.FileIO)
				)
			)
		),
		/ %'YCLib_(Win32)'.MinGW32 $=
		(
			* "ambiguity call between %MakeFile#(1, 6) for single path argument"
				$since b660
				$= (- "default argument" @ "2nd parameter"
					@ "function MakeFile#6")
			/ @ "function %FetchModuleFileName" $=
			(
				+ "parameter 'YSLib::RecordLevel = YSLib::Err';
				/ "%Win32Exception thrown with level specified by parameter"
					~ "%YSLib::Emergent";
				/ $comp "%Win32Exception thrown by call with 1 argument"
					^ "%YSLib::Err" ~ "%YSLib::Emergernt"
			),
			/ @ "class %DirectoryFindData" $=
			(
				* "missing throwing error" @ "member function %Read" $since b549
					$=
				(
					/ "threw %Win32Exception when error code is not \
						%ERROR_FILE_NOT_FOUND for %::FindFirstFileW call",
					/ "threw %Win32Exception when error code is not \
						%ERROR_NO_MORE_FILES for %::FindNextFileW call"
				),
				* $comp "missing attributes detection" @ "function \
					%GetNodeCategory" $since b658 $dep_from
					"function %CategorizeNode with native handle parameter"
			),
			(
			+ "function %IsDirectory with %FileAttributes parameter";
			/ DLDI "2 %IsDirectory for ('const ::WIN32_FIND_DATAA&', \
				'const ::WIN32_FIND_DATAW&')"
				^ "%IsDirectory for %FileAttributes"
			),
			(
			+ "function %CategorizeNode with %FileAttributes and reparse tag \
				(i.e. 'unsigned long') parameters";
			/ DLDI "simplified %CategorizeNode with \
				'const ::WIN32_FIND_DATAW&' paramater"
				^ "%CategorizeNode with 2 parameters",
			+ "function %CategorizeNode with 'const ::WIN32_FIND_DATAA&' \
				paramater",
			+ "function %TryCategorizeNodeAttributes"
			),
			+ "function %TryCategorizeNodeDevice",
			/ @ "function %CategorizeNode with native handle parameter" $=
			(
				- 'ynothrowv' -> 'ynothrow';
				/ "accepted for null handle"
					$= (- "assertion"),
				* "missing attributes detection" $since b658
					$= (/ DLDI ^ $dep_from ("%(TryCategorizeNodeAttributes, \
						TryCategorizeNodeDevice)")),
			)
		)
	)
),

b700
(
	/ @ "3rdparty libraries" $=
	(
		/ @ "freetype" $=
		(
			(
			+ "FreeType source replacement %(src/sfnt/ttmtx.c, \
				src/smooth/ftgrays.c)";
				// To make it work expectedly on platform %DS.
			+ '-DFT_CONFIG_OPTION_OLD_INTERNALS' @ "%CFLAGS"
				@ "freetype %config.mk" @ "platform %DS" $dep_to
				"FreeType old internals command line",
			),
			/ $revert_ex(b563) $build "merged freetype including directory \
				except for 'ft2build.h'" -> "%3rdparty/include"
				~ "%3rdparty/freetype/include" $dep_to
				"FreeType inclusion path",
				// As of FreeType 2.6.1, the including directory of header \
					files except for 'ft2build.h' had been changed back to \
					resolve http://savannah.nongnu.org/bugs/index.php?45097.
			/ DLP "updated library %freetype" @ "library using"
				$= (^ $re_ex(b493) "updated freetype 2.6.3 with several files \
					remained from freetype 2.4.11" ~ "freetype 2.5.3");
				// See [Documentation::Dependencies @@2.2.3].
			/ "rebuilt"
		),
		/ $re_ex(b600) "updated library %FreeImage" $=
		(
			^ "libjpeg-turbo 1.5.0" ~ "libjpeg-turbo 1.4.0" @ "%Source/LibJPEG"
				$=
			(
				(
				/ "updated %(config.h, jconfig.h, jconfigint.h) except for \
					macro %WITH_SIMD" ^ './configure --build=i686-pc-mingw32',
					// This is more accurate than old version though it \
						worked with some manually configured macro definition.
				/ $comp "value of macro %JPEG_LIB_VERSION" -> '62' ~ '80'
				),
				/ $forced "updated %Makefile.srcs"
			),
			^ "libpng 1.6.23" ~ "libpng 1.6.17" @ "%Source/LibPNG";
				// With official prebuilt %pnglibconf.h.
			/ "rebuilt"
		)
	),
	/ %YFramework $=
	(
		+ $forced DLDI '-DFT_CONFIG_OPTION_OLD_INTERNALS' @ "%CPPFLAGS"
			@ "makefile" @ "platform %DS" $dep_from
			"FreeType old internals command line",
		/ $forced DLDI "FreeType internal header path" @ %YSLib.Adaptor.Font
			$dep_from "FreeType inclusion path"
	),
	/ $re_ex(b585) "updated %SUBTITLE2 year" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	(
	/ %Tools.ProjectGenerator.Main $=
	(
		- $revert(b683) "option '-DYB_Use_LightweightTypeID=1' for generated \
			platform %DS .cbp files",
			// Since platform %DS uses custom makefile, this is useless.
		* "wrong inclusion directory" @ "platform %MinGW32" $since b633
	);
	/ $re_ex(b600) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts);
	)
),

);

////

