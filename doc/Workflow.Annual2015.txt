/*
	© 2015 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file Workflow.Annual2015.txt
\ingroup Documentation
\brief 工作流汇总报告 - 2015 年度。
\version r107
\author FrankHB <frankhb1989@gmail.com>
\since build 564
\par 创建时间:
	2014-01-02 09:40:31 +0800
\par 修改时间:
	2015-02-10 10:00 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::Workflow::Annual2015
*/

// See "Meta.cpp" for meta descriptions.

$import $WORKFLOW;
$LINE-WIDTH-RESTRICT 0;

$WORKFLOW:
// Following lines are only for logging informal project information.
// See Meta.txt for formal project information.
// See ChangeLog.*.txt for accepted contents.

$2014-01:

report.impl:
Note that 'va_args' and 'va_end' cannot be encapulased using RAII/RRID.
	ISO C explicitly specified they shall match in a function.
	Since constructor and destructor are functions, they can not be used.
UAC is annoying for program which aquireing no administrator privilege but containing some patterns in file name e.g. 'patch.exe' or 'install.exe'.
	See https://github.com/bmatzelle/gow/issues/156 .
The function 'std::quick_exit' is mostly a workaround of cleanup when the thread cancellation is not supported in C++.
	See http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2440.htm .
	Do not register callbacks through 'std::at_quick_exit' unless the states of threads are all known.
		Note these callbacks shall not raise signals according ISO C11, otherwise the behavior is undefined.
	The similar thing also fit for 'std::exit' and 'std::atexit'. However, it is generally more difficult to avoid. In fact, current libgcc exploied 'atexit' to make the destructors to be called.
Win32 console would call 'ExitProcess' by default during window close or handling 'Ctrl+C', etc.
	See http://msdn.microsoft.com/en-us/library/windows/desktop/ms682658(v=vs.85).aspx .
	This might probable not preferred because this call would mostly make the C/C++ runtime a mess.
	This call can inform the loaded DLLs to be terminated, but also might lead to deadlock when DLLs are not used properly.
	A clean call of 'TerminateThread' on current process would be better if not all states of each thread are known.
		However, it would not touch the C/C++ runtime states, either.
	So C/C++ standard library functions or other runtime functions are generally preferred for C/C++ applications.
		Use 'SetConsoleCtrlHandler' function to change default behavior for the attached console.
			See http://msdn.microsoft.com/en-us/library/windows/desktop/ms686016(v=vs.85).aspx .
		YSLib now use it to workaround the unexpected behavior.
			The exit code 'STATUS_CONTROL_C_EXIT' is used for 'CTRL_C_EVENT' and 'CTRL_CLOSE_EVENT' to retain old behavior.
			For 'CTRL_BREAK_EVENT', 'CTRL_LOGOFF_EVENT' and 'CTRL_SHUTDOWN_EVENT' the same code is used, but not tested to be the same as original one.
Since 'ystdex::nptr' is exactly a wrapper but not a smart pointer, it is intended in <ystdex/utility.hpp> but not in <ystdex/memory.hpp>.
The function 'isatty' on POSIX compliant environments and '_isatty' is not the same.
	For POSIX compliant environments, '::isatty' returns whether the file descriptor is associated with a terminal.
		See http://pubs.opengroup.org/onlinepubs/009695399/functions/isatty.html .
	For Win32, '::_isatty' returns whether the file descriptor is associated with a character device;  Both cases exclude some uses not fit.
		See http://msdn.microsoft.com/en-us/library/f4s0ddew.aspx.
	Use Win32 APIs to achieve the functionality of POSIX compliant 'isatty'.
		See http://stackoverflow.com/questions/3648711/detect-nul-file-descriptor-isatty-is-bogus .
	However, both function can exclude some cases not fit for terminal output.
Move-only parameter passing counts.
	See the discussion at http://scottmeyers.blogspot.com/2014/07/should-move-only-types-ever-be-passed.html .
	Both 'T&&' or 'T' have cases. The former is probable more efficient and debugger-friendly, while the latter is simpler (both on coding and behavior).
		For 'T&&', the extra move is delayed to the client code. And there is possible to not move (or even not use) the argument at all.
		For 'T', the move operation is mandated by copy-initialization of the parameter.
	The implicit coding rules used by YSLib are not documentated then, so here is the summary.
		To use mandated move on certain move-only types which has predictable and acception perfomance on the move operation (e.g. instances of 'std::unique_ptr' with default deleter), 'T' is preferred.
		Otherwise, 'T&&' should be used.
	These cases was attented at long before.
		At least in September 2014, these rules were adopted.
			This is reflected by the modification on Documentation::CommonRules (Mercurial changeset 406, build 534; now Documentation::LanguageConvention).
			However, no actual code modification was taken (e.g. on 'YSLib::UI::Widget::SetRenderer').
		These rules are now updated to be more explicit in Documentation::LanguageConvention.
		In fact, 'YSLib::UI::Widget::SetRenderer' was modified in May 2013 (Mercurial changeset 278, build 406) for probable the same rules.
		Now 'YSLib::UI::Widget::SetView' is synchronized to be consistent. Both these functions needed the object of 'unique_ptr' instance always being used.
	For non move-only type, see $2014-04.
The duration (and potentially other instances of 'std::chrono' time types e.g. time points) parameters are now passed by value rather than by reference.
	In general, The default argument binding to reference type of parameter causes odr-used of the argument.
		If the argument is a static data member of class, either declared with const, constexpr or not, an extra definition out of class definition is required to obey ODR, otherwise the program is ill-formed.
		This is necessary by intention. Only value is actually used so lvalue-to-rvalue is expected, and odr-use is not required.
	To elimination the requirement of extra definition, parameter of object type can be used directly instead of parameter reference type.
	However, the static data member of literal types designated with constexpr are used (rather than integral or enumeration types) it might not work.
		To be a constant-expression it should be a non-volatile glvalue performed lvalue-to-rvalue conversion.
			This is required "immediately" by ISO C++11.
			The requirement is relaxted by new working draft, but not all issues are resoved now.
			See http://stackoverflow.com/questions/23491781/when-is-a-variable-odr-used-in-c14 .
		Implementations like MinGW G++ 4.9.1 or Clang++ 3.5.1 with both '-std=c++11' and '-std=c++14' are actually not treated them as constant expressions for such use, so the definition are not removed tentatively now.
		See WG21/N4296 5.20/2.7.1 about use for integral or enumeration types.
	For instance of duration used directly in YFramework, the underlying arithmetic types are predicatable, so the costs are generally known and acceptable.
		This may differ in the standard library or other cases (e.g. YBase), which use const lvalue reference of templated object types.
	To be consistently, all parameters use the same form.
	This is not necessary the case of 'YSLib::Drawing::Point' and other types of geometry in YFramework (esp. the cost of copy an object of 'YSLib::Drawing::Rect', for consistency in style), so they are not touched.

$2014-02:

dep.merge:
df.operators(https://github.com/d-frey/operators): partially merged.

////

