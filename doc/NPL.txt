/*
	© 2012-2017 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file NPL.txt
\ingroup Documentation
\brief NPL 规格说明。
\version r1913
\author FrankHB <frankhb1989@gmail.com>
\since build 304
\par 创建时间:
	2012-04-25 10:34:20 +0800
\par 修改时间:
	2017-02-24 22:52 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::NPL
*/


/*

@0 体例和适用范围：
引用标记参见 [Documentation::CommonRules @@0.1] 。
项目范围参见 [Documentation::ProjectRules @@1] 。
本文档适用于 NPL 及实现(@2.1.2) 。
编码细节和其它规范参见 [Documentation::Designation] 。

@1 整体设计：

@1.1 设计的基本原理、表达形式和抽象：
设计的出发点：构建一个可用计算机实现的语言。
原始目的：在以标准 C++ 环境（宿主实现）的程序框架中嵌入配置和脚本操作。
扩展目的：渐进地向独立的计算机软件系统演进，探究能适用于各个领域并以计算机实现的通用语言。
本文描述基于此出发点的 NPL(Name Protocoling Language) 及其参考实现。

@1.2 理论背景、工具和依据：
基本内容参见 [Documentation::CommonRules @@2.1] 。

@1.2.1 组织概念模型：
略。

@1.2.3 设计意义：
参见 [Documentation::Designation @@2.2] 。

@1.3 构建原则：
基本内容参见 [Documentation::CommonRules @@2.2] 。
其它参见 [Documentation::Designation @@2.3] 。

@1.4 领域设计原则：

@1.4.1 原则性描述：
关于设计和实现的哲学。

@1.4.1.1 本体论：
语义的存在体现本质。

@1.4.1.2 价值观：

@1.4.1.2.1 变化的自由：
在明确需求的前提下，尽可能保证对现状按需进行改变的可行性和便利性。
适用于一般需求。
对计算机软件：尽可能避免不必要地损失可修改性，便于保障按需引入或除去接口(@2.1.2) 及其实现的自由。
在满足需求的前提下，修改应尽可能少地有碍于其它的接口。

@1.4.1.2.2 避免不必要付出代价：
尽可能减少影响需求实现的成本。
适用于一般需求。
对计算机软件：不为不需要的特性付出代价。
Efficiency has been a major design goal for C++ from the beginning, also the principle of “zero overhead” for any feature that is not used in a program. It has been a guiding principle from the earliest days of C++ that “you don’t pay for what you don’t use”.
	-- ISO/IEC TR 18015

@1.4.1.2.3 最小接口原则：
在确定的范围内尽可能少地提供必须的接口，避免不必要的假设影响接口适应需求的能力，同时减少复杂性。
适用于一般设计，特别地，强调“通用”目的时。
对需要在计算机上实现的人工语言设计：设计语言不应该进行功能的堆砌，而应该尽可能减少弱点和限制，使剩下的功能显得必要。
Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary.
	-- Revised Report on the Algorithmic Language Scheme & Revised Report on the Kernel Programming Language
其它保持设计的简单的实质等价表述包括：
用于安全系统设计的最小特权原则(principle of least privilege) ，避免不必要的访问路径引入额外的安全风险；
用于自然科学理论设计的奥卡姆剃刀(Occam’s Razor) 原理，避免不必要的假设引入诉诸无知(argument from ignorance) 谬误。
另见 [Documentation::CommonRules @@3.1.3] 。

@1.4.1.3 形而上学：

@1.4.1.3.1
语言设计独立于语言实现(@2.2) 。
适用于计算机语言设计。

@1.4.1.3.2
语言实现包括库设计。
适用于可复用实现的计算机语言设计。

@1.4.1.4 方法论：

@1.4.1.4.1 避免不成熟的优化：
Premature optimization is the root of all evil.
适用于一般需求。
适时收缩理论长度以照顾可操作性（注意断言一个优化过早自身可能就是一个过早的优化）；
主动适应需求变更（不同时明确全部的具体需求，只限定需求范围：能使用计算机实现部分语义的任务）。

@1.4.2 语义方法：
形式语义方法：公理语义(axiomatic semantics) 、指称语义(denotational semantic) 和操作语义(operational semantics) 。
操作语义可分为在抽象机(@2.6) 中指定具体规约(@4.1) 步骤状态的结构化操作语义(structural operational semantics) （小步(small-step) 语义），及仅指定规约的输入和输出的自然语义(natural semantics) （大步(big-step) 语义）。
非确定语义：经验语义，不需要使用自然语言解释的部分。
本文档不给出形式语义。语言规则确定的经验语义可在一定条件下转写为上述形式语义方法表达的形式。

@2 基本概念和约定：
描述中可能涉及上下文相关的略称参见 @2.3 。

@2.1 通用约定：
关于“语言”补充的基本概念和约定，使用元语言语法 <相关范畴/上下文> 。
除非有其它说明，适用于任意上下文。

@2.1.1 [<自指><名词>] ：
实体(entity) ：任意被自然语言表达的目标；不需要通过自然语言先验定义；参见经验语义。
语义(semantics) ：参见经验语义。
经验(experience) ：参见哲学或一般等价的经验语义。
范畴(category) ：参见范畴论。
态射(morphism) ：参见范畴论。
归纳(induction) ：一种态射，可操作性参见经验语义。
方法学(methodology) ：一个归纳经验得到的范畴；参见哲学或一般等价的经验语义。
方法(method) ：方法学的一个子范畴；可操作性参见经验语义。
概念(concept) ：参见形式逻辑学。
上下文(context) ：一种概念范畴适用的态射；参见经验语义。

@2.1.2 [<非自指>] ：
形式(form) ：参见经验语义和数学。
<概念> 内涵：参见形式逻辑学。
<概念> 外延：参见形式逻辑学。
<概念> 定义(definition) ：确定概念内涵和外延的方法；参见任意一种形式逻辑学。
集合(set) ：参见 NBG 集合论。
序列(sequence) ：有序集合。
类(class) ：参见 NBG 集合论和范畴论。
真类(proper class) ：参见 NBG 集合论和范畴论。
<动词> 抽象(abstracting) ：通过经验语义定义概念范畴或集合的方法。
<名词> 抽象(abstraction) ：<动词>抽象的结果。
<动词> 封装(encapsulating) ：从某一个范畴中抽象一个子范畴的方法。
<名词> 封装(encapsulation) ：<动词>封装的结果。
接口(interface) ：一种封装，参见软件工程学。
实现(implementation) ：一种封装，参见软件工程学。
重用(reusing) ：参见经验语义和软件工程学。
不变量(invariable) ：满足某种等价关系（自反、传递、对称的二元关系）的实体。参见数学和契约式程序设计。
状态(state) ：可以和其它实体关联的、可在某个上下文中保持变化或不变的实体。同一状态总是保持变化或保持不变。状态变化的含义参见经验语义、数学或另行约定。
可变状态(mutable state) ：在某个上下文中可能映射到若干其它状态的状态。
不可变状态(immutable state) ：不是可变状态的状态。
<动词> 派生(deriving) ：基于重用的操作。
<名词> 派生(derivation) ：<动词>派生的结果。
<语言> 接口(<language>interface) ：和表达语义有关的语言的可见的特征。
<语言> 实现(<language>implementation)：对语言表达语义的表达。
<语言> 人类接口(human interface) ：语义仅对人类有意义（内容改变时可以导致语义的差异性），不提供为涉及作为图灵机实现的语言接口。
<语言> 机器接口(machine interface) ：对机器（或特定语言实现的特定部分）有意义的语言接口。注意不同语言实现组成部分可以不同。例如，对 C 预处理器而言， C 源代码中的空白符是机器接口，而对翻译器来说则不是。就源代码而言，机器接口总是人类接口的子集。
语言特性(language feature) ：作为功能提供的人类接口。

@2.2 领域约定：
适用于上下文 <NPL> 。
广义实体： <通用约定> 实体。语言抽象的目标，不另行定义（意义最终取决于自然语言）。
名称(name) ：一种特殊的广义实体，专用于指称另一个广义实体。
实体(entity) ：非名称的广义实体。
规则(rule) ：用于确定行为或其它规则的描述。
约束(constraint) ：可被形式表达，用于限制和明确行为的规则。不一定使用形式表达。
违反(violation) ：对约束指定的条件的不满足。
表示(representation) ：以一个符合某种形式的约束的实体指称另一个实体。
语言实现(language implementation) ：语言提供的接口的实现，是语言的表现形式，可以是具体语言实现或抽象语言实现之一。
具体语言实现(concreate language implementation) ：能最终完全表达为可预测的物理现象一一对应的表达可计算性的实现（如机器指令），一般应为程序。
抽象语言实现(abstract language implementation) ：非具体语言实现的语言实现。形式意义的标准定义的语言属于此类。
派生语言实现(derived language implementation) ：派生已有实现的部分或全部得到的语言实现。以下简作“派生实现”。
实现环境(environment of implementation) ：对应特定语言实现的特定不变状态（对机器来说可以是配置项，对人来说不确定，所以一般忽略）的集合。
行为(behavior) ：语言实现的外部表现。基于可操作性考虑，一般仅约束机器实现。
翻译(traslation) ：不同语言之间的变换，可作为语言实现的形式。
解释(interpretation) ：通过直接执行表现行为的具体语言实现的形式。
文法(grammar) ：描述语言的可形式化的规则。
语法(syntax)：描述语言的字面(literal) 结构而不考虑解释(interpretation) 或含义(meaning) 的规则、原理和过程。
语义(semantics)：语法以外的文法，可以约束含义的表达。
实例(instance) ：具有代表性含义的集合的元素。
代码(code)：任意有限的语言的实例片段。
伪代码(pseudo code)：抽象语言实现的语言的代码。注意习惯上和具体语言实现代码完全一致的代码可以不作为伪代码考虑。
程序(program) ：具体语言实现接受的以代码表示的输入，或被变换后对应的输出。
元语言(metalanguage) ：描述其它语言的语言。
对象语言(object language)：被元语言操作或实现的语言。
元编程(metaprograming) ：使用元语言编程。
反射(reflection) ：元语言和对象语言相同的元编程。
具现(reification) ：在对象语言中以数据模型作为关联实体以表示程序的语义。
诊断消息(diagnostic message) ：用于和用户交互的提示性信息。
未定义的(undefined) ：可能导致违反约束但不保证具有诊断消息的。表示置于规则下的行为等不可预测。
未指定的(unspecified) ：在各个实现中可能存在的。不应假定不同实现具有完全一致的特性。
由实现定义的(implementation-defined) ：取决于各个具体语言实现的，要求有文档说明。
由派生实现定义的(derived-implementation-defined) ：取决于各个具体派生实现的，要求除存在默认定义或被派生实现的部分有明确的文档说明。
语言特性(language feature) ：语言提供的功能接口，可以是具体语言特性或抽象语言特性之一。
具体语言特性(concrete language feature) ：完全没有派生语言实现定义的语言特性。
抽象语言特性(abstract language feature) ：非具体语言特性的语言特性。
过时的(obsolesence) ：不应继续使用的（接口/特性）。
废弃的(deprecated) ：过时的但因为兼容性等原因，暂时保留的、一般可提供替代的接口或特性。

@2.3 略称：
仅在不致混淆时使用。
实现(implementation) ：语言实现。
环境(environment) ：实现环境。
派生实现(derived implementation) ：派生语言实现。

@2.4 NPL 实现模型：
NPL 是抽象的语言，没有具体语言实现(@2.2) ，但一些直接影响实现表现形式的规则被本节限定。
NPL 具体实现进行抽象解释(abstraction interpret) ，其目标不一定是程序(@2.2) 。

@2.4.1 实现的执行阶段(phase of execution) ：
一个 NPL 的完整实现应保证行为能符合以下的阶段（具体阶段不要求和实际实现中的一一对应，但应保证顺序一致）：
分析(analysis) 阶段：处理代码，取得适当的 IR（Intermediate Representation ，中间表示）；
代码生成(code generation) ：生成可被其它阶段执行的代码，称为目标代码；
运行：运行目标代码。
其中分析阶段是任意实现必要的，包含：
词法分析：必要时转换字符编码；转义并提取记号；
语法分析：语法检查（检验语法正确性(@2.5) ）并尝试匹配记号和语法规则中的语法元素(@3.4) ；
语义分析：语义检查（检验语义正确性(@2.5) ）并实现其它语义规则。
运行之前的阶段总称为翻译(translation) ，包含各个翻译阶段(phase of translation) 。
对有宿主语言支持的嵌入实现(embedded implementation) 或目标不是程序的情况，代码生成及之后的阶段不是必须的。
嵌入实现的宿主语言可直接运行语义分析的结果（中间表示）。
在语义不变的前提下，允许实现一次或多次翻译部分代码产生部分中间结果并复用。
其它可能的阶段由派生实现定义，但应满足所有阶段具有确定的全序关系，且不改变上述指定的阶段的顺序。符合这些条件的附加阶段称为扩展阶段。

@2.4.2 并发实现(concurrent implementation) ：
一个实现中顺序执行以上执行阶段的控制流称为一个执行线程(thread of execution) ，简称线程(thread) 。
一个实现在整个执行过程中可以有一个或多个线程被执行。是否支持多线程执行（多线程翻译和/或多线程运行）由派生实现定义。

@2.4.3 阶段不变量约束：
若某些状态在某个执行阶段 k 被唯一确定为不可变状态，且在之后的状态下是不变量，则此状态称为满足 k 阶段不变量约束的。

@2.5 正确性：
正确性规则包含语法正确性和语义正确性。
当正确性规则被发现违反时，实现进入异常执行状态。
异常执行的实现是否存在未定义行为由派生实现定义。

@2.6 实现行为：
实现的行为由具有非特定存储的抽象机描述。
若语义规则明确可以行为被忽略，则被忽略之后的实现行为与之前等价。
允许派生实现定义附加的等价性。
实现可能向用户以派生实现定义的方式输出诊断消息(diagnostic message) 。

@2.7 简单实现模型约定：

@2.7.1 嵌入宿主语言实现：
一个派生实现使用外部语言 L 简单实现模型 NPL-EMA ，若满足：
以 L 为宿主语言的嵌入实现，不包含扩展执行阶段(@2.4.1) ；
单一实现不支持多线程执行(@2.4.2) ，但允许多个实现同时在宿主中多线程执行。

@3 文法：
本章约定基本的 NPL 文法(@2.2) 规则中，包括语法及对应的基础词法。对应的语义单独列为一章(@4) 。
多态文法规则：派生实现可完全不提供本章明确定义的词法和语法构造的支持，仅当提供同构的替代文法且符合语义规则。

@3.1 基本概念：
字符(character) ：组成语言代码的最小实体。
基本翻译单元(basic transation unit) ：任意连续字符的有限序列（可以是空序列）。
翻译单元(translation unit) ：基本翻译单元的集合，之间满足由派生实现定义的规则。

@3.2 字符集和字符串：
字符集(character set) ：对一个实现而言不变的字符的有限集合。
基本字符集(basic character set) ：实现环境必须支持的字符集。具体由派生实现定义。
字符串(character string) ：字符集上的序列。
其它同 ISO/IEC 14882:2011 对 character 和 character set 的有关定义。

@3.3 词法规则(lexical rules) ：
约定元语言语法 <x> 表示词法元素 x ， ::= 表示定义， | 表示析取。
名称约定为在 NPL 中符合语法(@3.4) 约束的若干记号(@3.3.1) 的集合，一般可实现为可表达的字符串。

@3.3.1 基本词法构造：
<token> ::= <literal> | <$punctuator> | <$identifier>
词素(lexeme) ：代码中非空白符分隔的字符序列。
记号(token) ：词素的顶级分类。
属于记号的语法元素可以是以下的词法分类：
字面量(literal) ：一种记号，参见 @3.3.3 。
标点(punctuator) ：由派生实现定义的特定字符序列的集合，用于分隔其它记号，具有一定语义功能。
标识符(identifier) ：除字面量和标点以外的记号。
记号是可能附带附加词法分析信息的词素。词法分析(@2.4.1) 后得到的记号可以用词素映射到词法分类的有序对表示，但 NPL 不要求在此阶段保持分类也不限定表示的构造。
可以保证 ISO/IEC 14882:2011 的 identifier 的定义，或在上述标识符中插入字符 $ 构造得到的标识符属于 NPL 标识符。

@3.3.2 转义序列和字符序列：
<char-escape-content-seq> ::= <$single-escape-char> | <$escape-prefix-char><$escape-content-seq>
<char-seq> ::= <$literal-char> | \<char-escape-seq>

@3.3.3 字面量：
<literal-content> ::= <char-seq> | <literal-char-seq><literal-data>
<code-literal> ::= '<literal-content>'
<data-literal> ::= "<literal-content>"
<string-literal> ::= <code-literal> | <data-literal>
<literal> ::= <string-literal> | <$derived-impldef-literal>
代码字面量(code literal) ：以 ' 作为起始和结束字符的记号。
数据字面量(data literal) ：以 " 作为起始和结束字符的记号。
字符串字面量(string literal) ：代码字面量或数据字面量。
扩展字面量(extended literal) ：由派生实现定义的记号。
字面量：代码字面量、数据字面量、字符串字面量或扩展字面量。

@3.3.4 词法分析规则：
输入翻译单元，输出记号序列。
输出规则（按优先顺序）：
断行连接：反斜杠之后紧接换行符的双字符序列视为续行符，会被删除；
反斜杠转义：连续两个反斜杠被替换为一个反斜杠；
引号转义：反斜杠之后紧接单引号或双引号时，反斜杠会被删除；
字面量：未被转义的单引号或双引号后进入字面量解析状态，无视以下规则，直接逐字节输出原始输入，直至遇到对应的另一个引号。
窄字符空白符替换：单字节空格、水平/垂直制表符、换行符被替换为单一空格；回车符会被忽略；
原始输出：其它字符序列逐字节输出。

@3.4 语法 ：
本节指定 NPL 作为对象语言(@2.2) 的语法(@2.2) 。
约定元语言(@2.2) 的语法 x 表示语法元素 x ， ::= 表示定义， | 表示析取。
程序被作为语言实现(@2.2) 组成部分的语法分析(@2.4.1) 程序规约(@4.1) ，结果能确定其和一定的语法元素匹配。
规约时应进行语法规则的检查。

@3.4.1 基本语法构造：

@3.4.2 表达式(expression) ：
expression ::= atomic-expression | composite-expression | list-expression
表达式是受表达式语法约束的记号序列。
其中构成分别称为原子表达式(atomic expression) 、复合表达式(composite expression) 和列表表达式(list expression) 。
构成表达式的表达式是前者的子表达式(subexpression) 。

@3.4.2.1 原子表达式：
atomic-expression ::= token
原子表达式不能被表示为其它表达式的语法构成形式的复合。

@3.4.2.2 复合表达式：
composite-expression ::= token expression | expression token
符合表达式是原子表达式和表达式的复合。
同一个表达式可能被按原子表达式出现的位置以不同的方式规约为复合表达式。允许的规约复合表达式的方式由派生实现定义。

@3.4.2.3 列表表达式：
list-expression ::= <left-list-bound> expression <right-list-bound>
<left-list-bound> ::= ( | <extended-left-list-bound>
<right-list-bound> ::= ) | <extended-right-list-bound>
列表表达式是使用 <left-list-bound> 和 <right-list-bound> 作为边界的表达式。
<left-list-bound> 和 <right-list-bound> 是不同的标点。
边界为 ( 和 ) 的表达式是基本列表表达式。其它可能的边界由派生实现定义，构成扩展列表表达式。

@3.4.4 语法形式(syntactic form) ：
语法形式是词法上满足特定形式(@2.1.2) 的语法构造。
除非派生实现另行指定，语法形式总是表达式。

@3.4.5 语句(statement) ：
以派生实现定义的标点结尾的表达式称为语句。
语句语法的分组(grouping) 规则以及是否隐式地作为列表表达式求值(@4.1) 由派生实现定义。

@3.4.6 简单文法约定：
一个派生实现使用简单文法 NPL-GA ，若满足：
翻译单元同基本翻译单元(@3.1) ；
只支持左原子表达式构成复合表达式(@3.4.2.2) ；
只支持基本列表表达式(@3.4.2.3) ；
标点为单个字符(@3.1) ；
不支持语句(@3.4.3) 。

@4 语义：
NPL 的语义规则(@2.2) 构成演绎系统(deductive system) ，通过对翻译单元(@3.1) 中的表达式(@3.4.2) 的求值(@4.1) 表达。
除非派生实现另行约定，仅使用表达式指定语义，系统的规约(@4.1) 规则即表达式的求值规则(@4.4) 。

@4.1 基本概念：
范围(range) ：一个连续区间。此处“连续”的概念由派生实现定义，默认参照数学的形式定义。
声明(declaration) ：引入单一名称的表达式。
声明区域(declarative region) ：对某一个声明及其引入的名称，通过声明区域规则(@4.3.1) 决定，可由词法分析实现(@5.4) 确定的关于这个名称有效的代码片段的最大位置范围。
有效名称(valid name) ：可以唯一确定指称的实体的名称。
有效命名实体(valid named entity) ：有效名称指称的实体。
名称隐藏(name hiding) ：若同一个名称在同一个位置属于超过一个声明区域，则应能通过名称隐藏规则(@4.3.2) 确定唯一有效的声明以指定有效名称和对应的有效命名实体，此时有效名称隐藏其它声明区域声明的名称，有效命名实体隐藏可以使用被隐藏名称指称的实体。
作用域(scope) ：声明区域的子集，满足其中指定的名称是有效名称。
生存期(lifetime) ：逻辑上关于可用性的连续区间的抽象，是一个闭集。
对象(object) ：表示可被逻辑上表达为连续存储的状态的集合且能明确生存期开始和终止的实体。
变量(variable) ：通过声明显式引入或通过演绎系统规则隐式引入的以名称指称的实体。
绑定(binding) ：引入变量的过程或结果，其中后者是变量的名称和引入的被变量表示的实体构成的有序对。
约束(bound) ：被绑定的。
常量(constant) ：满足某种不变量的约束以和不可变状态关联的实体。具体由派生实现定义。注意不和变量对立（表示不可变状态的变量可能是常量）。
表示(representation) ：表现演绎实例、具体实现及其中一部分实体（如某个值）的状态。
值(value) ：表达式关联的不可变状态。
副作用(side effect) ：对表达式的值以外的表示的改变。
项(term) ：演绎系统(deductive system) 特别是项重写系统(term rewriting system) 中处理的对象，是带有基本递归构造的元素，可对应语法中的表达式。
子项(subterm) ：具有递归形式构造的文法描述的参与构成项的项。
约束变量(bound variable) ：子项中出现的被约束的变量。
自由变量(free variable) ：子项中出现的非约束变量。
组合子(combinator) ：不是变量也不含相对于任何项的自由变量的子项。
转换(conversion) ：根据基于特定等价性（假设）前提的两个项之间的自反的演绎。
规约(reduction) ：两个项之间的、实例(@2.2) 是某个转换的子集的满足反自反的演绎。
作用(effect) ：具体实现规约表达式的结果，包括值的计算和副作用的产生。
抽象求值(abstract evaluation) ：对表达式的不取得作用的规约。
具体求值(concrete evaluation) ：对表达式的取得作用的规约。
求值(evaluation) ：抽象求值或具体求值。

@4.1.1 附加约定：
注意变量不一定表示可变状态。
指定转换的演绎规则是转换规则。
指定规约的演绎规则是规约规则。
两两可转换的项的传递闭包构成等价类，称为可转换等价类。除非另行约定，只讨论具有单一可转换等价类的转换规则的重写系统。
即使不是转换，项之间的规约仍应是保持某种等价关系的等价变换等价变换(transformation) ，即以存在等价关系的一个项替代另一个项。
规约中可包括实现环境(@2.2) 的交互。
若规约用于求值，上述等价性限定为：满足任意以此规则变换前和变换后的项被分别规约时，两者的作用相等。
状态不变由实现定义的等价关系(@2.1.2) 决定。
除非派生实现另行指定，约定：
实现行为(@2.6) 总是可使用状态进行描述；
存在副作用为可观察(observable) 行为的必要条件。
若存在状态等价性以外描述的行为描述，由派生实现指定。
可观察行为如有其它外延，由派生实现指定；否则存在副作用是存在可观察行为的充分条件。
实现应满足实现行为(@2.6) 和语义蕴含的可观察行为等价；不严格要求按抽象机(@2.6) 实现操作语义。

@4.2 基本语义规则：
所有不需要诊断消息的规则由派生实现定义。
本节内的规则应不产生未定义行为。

@4.3 名称规则：
名称(@2.2) 和能标识特定含义、符合名称词法约束(@3.3) 的表达式(@3.4.2) 一一对应。
具体的外延由派生实现定义。
表示名称的表达式不同于名称，但在无歧义时，语言中可直接以名称代指表达式和对应的词法元素。

@4.3.1 声明区域规则：
对引入名称 n 的声明 D ，对应的声明区域始于紧接 n 的位置，终于满足以下条件的记号“)”（若存在）或翻译单元末尾（不存在满足条件的记号“)”）：
记号“)”和与之匹配的记号“(”构成的表达式包含 D ；
此记号之前不存在满足上一个条件的其它的记号“)”。

@4.3.2 可见(visible) 名称：
名称隐藏规则：若声明 D 是表达式 E 的子集，且不存在 D 的子集声明同一个名称，则 D 声明了有效名称，隐藏了 E 中其它同名的名称。
在声明区域中，没有被隐藏的名称是可见(visible) 的。有效名称实质蕴含可见名称。

@4.3.3 名称解析(name resoultion) ：
名称解析是通过名称确定名称指定的实体的过程。
名称解析包括名称验证(name verification) 和名称查找(name lookup) 。
不保证名称解析总是成功。
名称验证确定可见名称(@4.3.2) 的基础上确定名称是否有效。
名称查找是从已知有效名称确定唯一指称的实体的过程，仅在名称验证成功后进行。
不同名称经过名称查找的结果可能等效。等效的有效名称视为同一的，规则由派生实现定义。
以上约定以外的具体规则以及失败的行为由派生实现定义。

@4.3.4 命名空间(namespace) ：
命名空间是实体(@2.2) 。命名空间可以由名称指称。
是否实现命名空间为程序中可由用户指定可变的实体及求值环境(@4.6.1.1) ，由派生实现定义。

@4.3.4.1 指称(denotation) ：
总是没有名称指称的命名空间是匿名命名空间(anonymous namespace) 。
没有有效名称指称的命名空间是未命名命名空间(unnamed namespace) 。
注意匿名命名空间和未命名命名空间不同。前者可能是一个系统的默认约定，一般整体唯一存在（如全局(global) 命名空间）；后者只是对某些接口隐藏，可以有多个。
NPL 定义一个抽象的匿名命名空间，称为根命名空间。未命名命名空间的支持由派生实现定义。
NPL 约定一个在实现中的有效名称总是指称一个命名空间。有效名称指称的命名空间的同一性和有效名称的同一性(@4.3.3) 对应。

@4.3.4.2 成员(member) ：
除了用于指称的名称外，一个命名空间可以和若干其它名称关联。
通过派生实现定义的对命名空间的操作可以取得的名称是这个命名空间的成员。
若无歧义，命名空间的成员指称的实体也称为这个命名空间的成员。
命名空间直接包含成员，称为直接成员。
除了根命名空间和其它派生实现定义外，命名空间可以作为另一个命名空间的成员，此时命名空间内的成员（若存在）是包含其的命名空间的间接成员。
命名空间对成员的直接包含和间接包含总称为包含，是反自反的、反对称的、传递的二元关系。

@4.3.4.3 简单名称(simple name) 和限定名称(qualified name) ：
命名空间的直接成员(@4.3.4.2) 的标识符在这个命名空间中是有效名称，称为简单名称。
命名空间及其成员按包含关系依次枚举标识符组成的序列是一个名称，称为在这个命名空间中的限定名称。
根命名空间的限定名称称为全限定名称(fully qualified name) 。
限定名称的语法（如标识符之间的分隔符等）由派生实现定义。

@4.4 求值规则：
求值应满足以下基本规则：
值替换规则：表达式的值的计算通过已知的子表达式的值替换决定。
除非派生实现另行约定，子表达式的值仅由求值得到，此时递归蕴含规则(@4.4.4.1) 中的求值依赖规则是这个规则的推论。

@4.4.1 求值顺序(evaluation order) ：
先序(sequenced before) 关系是两个求值之间存在的一种偏序关系(partial order) ，对实现中求值之间的顺序提供约束。
后序(sequenced after) 是先序的逆关系。
非决定性有序(indeterminately sequenced) 是先序或后序的并集。
无序(unsequenced) 是非决定性有序在求值二元关系全集上的补集。
非决定性求值规则：除非派生实现另行约定，递归蕴含规则(@4.4.4.1) 约定外的任意表达式的求值之间无序。
非决定性求值规则允许在语言中表达并发实现(@2.4.2) 。

@4.4.2 求值性质：
两个具体求值等价，当且仅当两者的作用相等。
两个求值等价，当且仅当作为具体求值时等价，或其中每个求值的变换实质蕴含另一个。
没有副作用的求值是纯的(pure) （仅有值的计算或抽象求值）。
值为被求值的表达式自身的具体求值或不包含变换为存在不等价求值的表达式的抽象求值为恒等(identity) 求值。
恒等的纯求值是空求值(empty evaluation) 。
作用是空集的表达式求值是空作用求值(null effect evaluation) 。推论：空作用求值是空求值。
语法形式(@3.4.4) 固定且求值总是空求值的表达式是空表达式(empty expression) ，这仅由派生实现可选提供。

@4.4.3 范式(normal form) ：
规范化形式(normalized form)，或简称范式(normal form) ，是由派生实现定义的表示(@4.1) ，被一组规约(@4.1) 规则确定，满足：
通过有限的规约步骤后得到；
按规约规则，规范形式上不存在不和空求值等价(@4.4.2) 的进一步规约。
表达式在得到规范形式后规约终止，且蕴含求值终止。
得到范式的规约步骤称为规范化(normalization) 。
若表达式规约总是能得到规范形式（求值总是能在有限规约步骤后终止），则具有强规范化(strong normalization) 性质。
实现应避免引起无法保证强规范化性质的操作（如直接无条件的递归规约调用）。
除非派生实现另行约定，不保证强规范化性质。
保证得到范式的规约是规范化规约。

@4.4.3.1 其它规范化中间表示：
第一个子表达式（头表达式）是范式的表达式是 HNF（Head Normal Form ，头范式）。
头表达式是可直接求值为范式的表达式是 WHNF（Weak HNF，弱头范式）。
约定求值到 WHNF 提供保证强规范化性质的一般手段，可用于非严格求值(@4.4.4.5) 。
WHNF 的头表达式是操作符(operator) ，对应的 WHNF 的头表达式是合并子(combiner) 。

@4.4.4 组合求值：
表达式和子表达式之间的求值需满足一定约束。

@4.4.4.1 递归蕴含规则：
除非派生实现另行约定，表达式和子表达式之间的求值满足以下递归蕴含规则：
求值依赖规则：表达式被求值实质蕴含子表达式(@3.4.2) 被求值。
顺序依赖规则：子表达式求值先序(@4.4.1) 所在的表达式求值。
平凡求值规则：指定一个表达式是平凡求值(@4.4.2) 实质蕴含其子表达式的求值被指定为平凡求值。

@4.4.4.2 严格性(strictness) ：
若表达式的任意子表达式的求值总是非空求值(@4.4.2) 且先序表达式求值，则这个表达式的求值是严格的(strict) ；反之，求值是非严格的(non-strict) 。
推论：严格求值满足顺序依赖规则。
非严格求值在规约时可保留未产生作用（通常即未被求值）的部分子表达式，允许实现根据先序的求值作用确定的选择性求值，即包括未指定是否作为空求值(@4.4.2) 的子表达式求值，如分支判断或短路求值。
例如： C 语言的条件表达式存在可能未被求值的操作数，属于非严格求值； ++ 表达式不作为完全表达式(full expression) 时，副作用可超出此表达式的求值（不满足顺序依赖规则），也是非严格求值。
表达式经过严格性分析(strictness analysis) 确定是否严格求值，通过严格性分析器(strictness analyzer) 在语义分析(@2.4.1) 时实现。
通过保留未求值的部分子表达式为特定的数据结构（称为中间值(thunk) ）待延迟求值，可子表达式值的实现按需传递(@4.4.4.5) 。

@4.4.4.3 顺序求值：
明确的词法顺序可为同一个表达式的若干子表达式提供一致的有序求值策略：从左到右或从右到左。为一致性，不需要考虑其它特定顺序作为一般规则。
递归文法表示的表达式和子表达式之间存在相对内外顺序：子表达式在表达式的内部。此求值顺序可对应表达式树的遍历顺序。

@4.4.4.4 替换策略：
对应项的规约规则的表达式的重写规则由派生实现定义，基本的可选项包括：
名称替换：保证替换前后项对应的名称不变；
实体替换：保证替换前后项关联的实体不变；
值替换：保证替换前后项关联的表达式的值满足实现定义的相等关系。
引用替换：保证替换前后项关联的表达式的值以实现定义的方式引用同一实体。

@4.4.4.5 求值策略：
组合严格、顺序求值和替换策略可得到不同性质的求值策略。
除非派生实现约定，表达式求值策略可以随具体语法形式(@3.4.4) 不同而不同。
典型性质组合如下：
严格求值：
应用序(applicative order) ：以最左最内(leftmost innermost) 优先的顺序求值。
按值传递(pass by value) ：使用值替换的严格求值。
按引用传递(pass by reference) ：使用引用替换的严格求值。
共享对象传递(pass by shared object) ：使用的共享机制以及对象和值或引用的关系由派生实现定义。
部分求值(partial evaluation) ：允许求值分为多个阶段(phase) 。
非严格求值：
正规序(normal order) ：以最左最外(leftmost outmost) 优先的顺序求值。
按名传递(pass by name) ：使用名称替换且保持作为名称的表达式最后被替换的求值。
按需传递(pass by need) ：按名传递但允许合并作用相同的表达式。
非决定性求值(@4.4.1) ：
完全归约(full reduction) ：替换不受到作用之间的依赖的限制。
按预期传递(pass by future) ：并发的按名传递，在需要使用参数的值时同步。
最优求值(optimistic evaluation) ：部分子表达式在未指定时机部分求值的按需求值，若超出约定时限则放弃并回退到按需求值。

@4.4.6 可选求值规则：
应满足的本节上述约定的最小求值规则和语义外的具体求值规则和语义由派生实现定义。
派生实现的求值可满足以下节指定语义，此时应满足其中约定的规则。

@4.5 λ 完备语义和对应语法：
作为通用语言，求值规则表达的系统可具有和无类型 λ 演算(untyped lambda calculus) 对应的形式和计算能力。
基于此语义的派生实现应允许以下几种互不相交的表达式集合：
名称表达式(name expression) ；
匿名函数(anonymous function) ；
函数应用(function application) 。
具体含义见以下各节。
注意 λ 演算可保证以上除函数应用外求值的强规范化，但此处不要求，参见 @4.4.3 。

@4.5.1 名称表达式 ：
名称表达式是表示变量的 λ 项。
原子表达式(@3.4.2.1) 的由派生实现定义的非空子集是名称表达式。其它作为名称表达式的表达式语法形式(@3.4.4) 由派生实现定义。
名称表达式不被进一步规约；其求值是替换规则(@4.4) 的平凡形式。

@4.5.2 函数(function) ：
特定的由派生实现定义的表达式是操作符(@4.4.3.1) ，称为匿名函数表达式，简称匿名函数。
操作符可以捕获(capture) 若干有效名称及对应的实体，即这些名称可在函数中使用并唯一确定指称。
若匿名函数所在作用域(@4.1) 的存在同名的名称，则被捕获的名称隐藏(@4.1) 。
被绑定(bound) 在操作符上且被捕获的名称指称的实体是函数的形式参数(formal parameter, parameter) 。
派生实现应在仅有名称表达式不同的两个函数之间定义等价规则，以满足 α-转换(alpha-conversion) 规则。
除非派生实现另行约定，函数表达式不需要被进一步规约，此时其求值是替换规则(@4.4) 的平凡形式。
名称表达式可指称匿名函数的实体，替换函数同时保持等价的(@4.4.2) 求值，这样的名称表达式是具名函数表达式(named function) ，简称具名函数。
匿名函数表达式和具名函数表达式统称函数表达式，简称函数。

@4.5.2.1 过程(procedure) ：
过程是操作符具现(@2.2) 的实体。函数表达式的求值结果和过程实体以派生实现定义的方式关联。
具体实现中的过程可能为子例程(subroutine)、协程(subroutine) 、续延(continuation) 等形式的一种或多种，由派生实现指定。
注意过程不一定具有可被对象语言(@2.2) 直接表达的一等(first-class) 函数而在元语言(@2.2) 中可能是，如无限制续延(undelimited continuation) 。

@4.5.2.2 λ 抽象(lambda abstraction) ：
λ 抽象是典型的操作符，是 λ 演算中的基本构成之一。

@4.5.3 函数应用：
形如 E1 E2... 的复合表达式(@3.4.2.2) E ，当且仅当 E1 是函数时， E 是函数应用表达式，简称函数应用。
项列表 E2... 是一个或多个子项，用于替换函数的形式参数，对应的实体是实际参数(actual argument, argument) 。实际参数和形式参数一一对应。
函数应用的求值符合函数应用替换规则，是替换规则(@4.4) 的非平凡形式。
若操作符是 λ 抽象， E2... 视为一个整体，则函数应用替换规则对应 λ 演算的 β-规约(beta-reduction) 规则。
其它函数应用替换规则由派生实现指定。
派生实现应指定函数应用规约(@4.1) 的结果是规范形式(@4.5.2)，它对应的值称为函数值。
函数应用中，替换形式参数(@4.5.2) 为实际参数(@4.5.2) 的过程蕴含对实际参数的值的计算的依赖，即参数的值的计算先序函数应用的求值；但其它求值顺序没有保证。

@4.5.3.1 函数调用(call) ：
使用指定实际参数(@4.5.2) 作为形式参数(@4.5.2) 并求值的函数应用是函数调用。
函数调用确定副作用的边界：保证参数表达式在函数应用被求值之前被求值。
典型实现的函数指称过程，函数调用为过程调用。

@4.5.3.2 函数应用合并子：
除非另行约定， NPL 假定函数应用满足以下典型情形，即函数应用的操作符一般求值为以下合并子(@4.4.3.1) 之一：
对操作数直接操作（而不是对变量求值的）的合并子是操作合并子(operative combiner) ，简称操作子(operative) ；
依赖对实际参数(@4.5.2) 进行求值的合并子是应用合并子(applicative combiner) ，简称应用子(applicative) 。
同时，应用子对应蕴含一个一一对应的底层(underlying) 操作子。

@4.5.4 λ 求值策略：
在变量(@4.5.1) 绑定值后，兼容 λ 演算规约语义的表达式的具体求值(@4.1) 根据是否使用按需求值(@4.4.4.5) 策略分为三类：
惰性求值(lazy evaluation) 、部分惰性求值和热情求值(eager evaluation) 。
其中，惰性求值总是使用按需求值策略，热情求值总是使用按需求值策略，部分惰性不总是使用或不适用按需求值策略。
在保证不存在非纯求值(@4.4.2) 时这些求值的作用(@4.1) 没有实质差异。存在非纯求值时，使用的 λ 求值策略由派生实现定义。
非严格求值(@4.4.4.5) 严格蕴含惰性求值。两者经常但不总是一致，例如，实现可能并行地热情求值，并舍弃部分结果以实现非严格求值。
热情求值蕴含严格求值(@4.4.4.5) 。两者也经常但不总是一致，例如，实现可能使用应用序严格求值。但因为非严格的热情求值缺乏性能等可局部优化的实用动机，这种不一致的情况通常不作为附加的语言特性提供（而仅为简化实现默认作为全局策略使用）。
由于实现可能确定特定表达式的作用对约定必须保持的程序行为(@4.1.1) 没有影响而可能省略求值，按抽象机(@2.6) 语义的严格求值在实际实现中通常是不必要的。
惰性求值可通过中间值延迟求值(@4.4.4.2) 实现。

@4.6 表达式关联实体：

@4.6.1 上下文(context) ：
上下文是表达式关联的状态的特定集合（注意不是 @2.1.1 约定的自指概念）。
一个上下文是显式的(explicit) ，当且仅当它可以通过名称表达式(@4.1.5) 访问。
一个上下文是隐式的(implicit) ，当且仅当它不是显式的。
确定上下文的状态或对可变上下文的修改称为对上下文的访问(access) 。
过程实体(@4.5.2) 决定函数表达式(@4.5.2) 关联的上下文。
本节以外其它具体规则由派生实现定义。

@4.6.1.1 求值环境(evaluation environment) ：
求值环境是在求值(@4.1) 时可访问的隐式上下文，是由变量的绑定(@4.1) 构成的集合。
按绑定的定义，求值环境即变量的名称和通过声明引入的被变量表示的实体构成的映射。
不和实现环境(@2.2) 相混淆的情况下，简称（变量或绑定所在的）环境(environment) 。

@4.6.1.1.1 实现环境提供的求值环境：
实现环境可能在实现以外提供附加的求值环境(@4.6.1.1) 作为任务通信的机制，如环境变量。
除非派生实现另行约定，语言支持的求值环境和这些机制蕴含的求值环境的交集为空。语言可以库的形式提供 API 另行支持。

@4.6.1.2 互操作上下文(interoperation context) ：
用于互操作的和求值(@4.1) 关联的隐式上下文是互操作上下文。
典型的实例为由 ISA 约定的通用架构寄存器的状态，可能需要在函数调用(@4.5.3.1) 或任务切换过程中保存和重置。
除非派生实现另行约定，语言不提供访问互操作上下文的公开接口。

@4.6.2 类型(type) ：
上下文中和表达式直接关联或间接关联的元素，满足某个执行阶段的不变量约束(@2.4.3) 。
和表达式直接关联的类型满足起始阶段不变量约束，称为静态类型(static type) 。
和表达式的值(@4.1) 关联的类型满足运行阶段(@2.4.1) 的不变量约束，称为动态类型(dynamic type) 。
其它可能存在类型或实现执行阶段的扩展由派生实现定义。
称为类型的具体实体和之间的关联由派生实现的类型系统(type system) 规则指定。

@5 语言实现：
当前维护的派生语言为 NPLA ，是 NPL 的抽象语言实现，约定以下附加规则。
NPLA 的参考实现 NPLA1 是具体语言实现，约定特定于当前参考实现的附加规则和实现。
NPLA1 解释实现参见 @6 。
虽然 NPLA 没有给出形式语义(@1.4.2) ，但 NPLA 实现中包含的 API 部分地提供和形式语义方法对应的支持：
通过回调对应依赖宿主语言(@5.2) 实现作为描述的指称语义；
在回调内对上下文进行操作，对应小步语义；
在回调内复用其它接口，对应大步语义。
NPLA 可支持非固定的规约规则集合，以 API 的形式体现，详见 @5.4.2 ；另见 @5.3.3.4 。
具体实现的编码风格导引参见 [Documentation::CommonRules @@5] 。

@5.1 NPLA 领域语义支持：
位(bit) ：表示二进制存储的最小单位，具有 0 和 1 两种状态。
字节(byte) ：基本字符集中一个字符需要的最少的存储空间，是若干位的有序集合。
八元组(octet) ： 8 个位的有序集合。

@5.2 NPLA 约定：
使用宿主语言为 ISO C++11 的简单实现模型 NPL-EMA(@2.7.1) 。
使用语法 NPL-GA(@3.4.5) 。
宿主语言对象的值描述状态且宿主语言要求的对 volatile 左值的操作也属于可观察行为(@4.1.1) 。
名称仅被实现为字符串。
扩展字面量(@3.3.3) 包括以 '#' 、 '+' 、 '-' 起始的长度大于 1 的标识符或十进制数字字符起始的标识符构成的字面量。
动态类型同静态类型。
规范形式(@4.4.3) 是特定类型的 C++ 对象。
名称解析失败(@4.3.3) 可被忽略而不终止(@4.4.3) 实现演绎；
保证名称表达式求值的强规范化(@4.4.3)。
不要求提供命名空间(@4.3.4) 实现的可变实体。
一字节占用的位和宿主环境一致（至少占用 8 个二进制位）。
存在不保证先求值的子表达式(@3.4.2) 的形式是特殊形式(special form) 。
不保证求值都是纯求值；非特殊形式使用热情求值；其它情形使用热情求值或惰性求值(@4.5.4) 由具体特殊形式约定。
除非另行约定，实现 λ 抽象的宿主数据结构生存期要求默认同宿主语言，即循环引用可能行为未定义，不保证内存安全，不要求实现跟垃圾回收和区分强弱引用。
除非派生实现另行约定， NPLA 约定仅有具有以下情形的程序引起未定义行为：
互操作时在宿主语言中引起未定义行为；
违反资源所有权语义([Documentaion::CommonRules @@2.3.4]) 约束的操作，包括但不限于：
	违反内存安全(@5.2.2) 的操作；
	除非另行约定，构造任意的循环引用。

@5.2.1 类型映射(type mapping) ：
因需提供 C++ 互操作性支持，所以明确约定实现中部分实体类型一一对应的 C++ 类型：
名称以 string 类型(@5.3.1) 表示。
类型映射使用的类型所在的命名空间由实现(@5.3.3.1) 约定。
类型映射的目标可能是类型别名。

@5.2.2 存储和对象模型：
因需提供 C++ 互操作性支持， NPLA 的存储模型和对象模型和 ISO C++11 相同。
在此情况下对象都是固定(pinned) 的，即对象在生存期内具有确定不变的地址。派生实现可约定扩展作为例外。
用户代码应注意超出生存期的不满足（非并发）内存安全(memory safety) 访问造成宿主语言的未定义行为。
NPLA1 中，确定地引入这种非内存安全的操作应仅只包括：
调用 NPL::ReferenceValue(@5.4.1.5) ；
调用其它取 YSLib::ValueNode 存储值的间接值的 API 。

@5.3 NPLA 实现架构：
NPLA 实现为对数据结构的管道-过滤器(pipe-filter) 架构模式的处理框架。每个处理节点实现一个或若干个阶段(@2.4.1) 。
这里的数据结构是语言实现的 IR(@2.4.1) 或通过代码生成(@2.4.1) 得到的代码。在 NPLA 实现中后者是可选的。
本节中除之前在 @5.3.1 和 @5.3.2 中出现的名称及 @5.3.3 中引入的类型名称（都在命名空间 NPL 中）外，其余 C++ 名称使用限定名称以避免混淆。

@5.3.1 词法分析：
参见 @3.3.4 和参考实现模块 Lexical 。
Lexical 模块在 namespace NPL 通过别名声明引入 YSLib::string 类型和 YSLib::string_view 类型。

@5.3.2 语法分析：
参考实现模块 SContext ，以 AST（Abstract Syntax Tree ，抽象语法树）作为保存分析结果的 IR 。
派生实现可能检查更多语法规则。
SContet 模块在 namespace NPL 通过别名声明引入以下 YSLib 类型名称：
ValueObject 、 ValueNode 、 observer_ptr 和 LoggedEvent 。
关于这些类型，另见 [Documentation::YSLib @@3.16] 和 [Documentation::YSLib @@3.2] 。
语法分析也提供了 TermNode 类型及其操作。

@5.3.3 NPLA 公共实现：
本节以外其它实现使用的接口详见模块 NPLA 和以下章节(@5.4) 。

@5.3.3.1 类型映射(@5.2.1) 实现：
类型映射使用的 C++ 类型在 namespace NPL 中声明，从 namespace YSLib 引入。
一些类型如 string 、 ValueNode 和 ValueObject 在词法分析(@5.3.1) 和语法分析(@5.3.2) API 中引入，被以下章节的实现使用，成为实际的映射目标。
以下章节 @5.3.3.2 和 @5.3.3.5 提供的节点或中间值(@4.4.4.2) 类型(thunk type) 是类型映射的目标(@5.3.3.1) 。

@5.3.3.2 IR 节点数据结构：
NPLA 实现使用节点(node) 数据结构表示实现使用的 IR 中间表示递归的构造，如 SContext 产生的 AST 的节点和语义分析使用的项。
这样的节点类型为 TermNode ，也用于表示单一的树（如整个 AST(@5.B.1) ）。
NPLA 实现语义规则时对 TermNode 进行处理，包括节点上的规约(@4.1) ，即树规约(tree reduction) 。
当前 TermNode 是 ValueNode 的别名。其中可能有子节点且包含值对象 Value 数据成员，详见 @5.3.3.4 。
树规约可按需添加或删除 TermNode 的子项。具体添加或删除的时机未指定，取决于具体的规约算法。
除最后的代码生成（若需要），规约时每个子表达式的树的结构总是在此表达式的根节点保持不变（被删除前保证表达式总是对应一颗树），且源于语法分析的节点名称不会被修改。
TermNode 中存储的值可引用其它节点共享部分数据形成 DAG（Directed Acyclic Graph ，有向无环图），规约为图规约(tree reduction) ，但这不属于一般的规约规则。注意实现应避免形成非 DAG 的共享，以保证不出现资源的所有权([Documentation::CommonRules @@2.3.4]) 的冲突。

@5.3.3.3 上下文数据结构：
上下文(@4.6.1) 使用 ContextNode 类型表示。
相关 API 参见 @5.4.1.5 。

@5.3.3.4 表达式的表示(representation) 和求值：
TermNode 的子节点表示子项，通常作为子表达式(@3.4.2) 的实现。
TermNode 的 Value 数据成员是 ValueObject 类型的对象，用于表示对象语言（ NPLA 实现）中表达式或对象储存的值，或者包装的中间值(@4.4.4.2) 。
NPLA 表达式或其求值得到的值以若干个 TermNode 、 TermNode 子项或 Value 数据成员表示；其中被求值的表达式应总能使用一个 TermNode 表示。
NPLA 表达式求值取得的范式(@4.4.3) 总是其表示（是一个 TermNode ）中的子项或 Value 数据成员之一，详见 @5.4.2.3.2 。
TermNode 可能不直接表示表达式，如表示中间值(@5.3.3.5) 的情形。 NPLA 的范式不会使用这些形式表示。
作为 @4 的扩展，作用于非表达式表示的项上的规约规则不是求值规则。

@5.3.3.5 中间值类型：
中间值(@4.4.4.2) 可在 TermNode 的 Value 数据成员中存储。和其它情形存储的对象类型不同，中间值可能参与特定的规约。
为区分中间值和被映射其它值的类型，中间值类型不是其它 NPLA 外类型的别名，但考虑由其它类型转换或构造。
其中，记号值(@5.3.3.5.1) 和延迟求值项(@5.3.3.5.2) 都可表示未求值的表达式，但求值机制不同。

@5.3.3.5.1 记号值：
TokenValue 类型表示记号(@3.3.1) 的值，可使用 string 类型的值构造。
记号值对应的词素(@3.3.1) 的表示是字符串，即 string 类型。
和字符串值不同，记号值求值的结果不会继续是记号值，以避免不经意的递归求值或无法和宿主语言字符串值区分的情形出现。
但在 API 层次上，记号值的求值不排除无限循环或递归，不保证对应的项作为表达式时具有强规范化性质(@4.4.3)。实现需注意保证作为名称表达式时满足强规范化要求(@5.2) 。
表示一个未被求值的非字面量(@3.3.3) 记号的记号值称为符号(symbol) 。
记号值的相等性由等价于其对应的词素的相等性。
记号值可出现在词法分析(@5.3.1) 阶段，由单独的规约过程(@5.4.2.2) 通过调用 NPL::TokenizeTerm 转换词素得到。
记号值相关 API 参见 @5.4.1.4 。

@5.3.3.5.2 延迟求值项：
DelayedTerm 类型表示被延迟求值的项的值，可使用 TermNode 类型的值构造。
延迟求值项可表示一个一般的未求值的表达式，而不仅是符号(@5.3.3.5.1) ，但构造延迟求值项需要较大的开销。
延迟构造项不出现在词法分析(@5.3.1) 阶段。
延迟求值项可作为值对象和其它项区分，影响一个项是否为范式(@5.4.2.2) 。

@5.3.3.5.3 其它中间值：
直接储存于 Value 的处理器(@5.4.1.2) 是中间值。
扩展中间值是其它由派生实现定义的中间值。

@5.4 NPLA 公共接口：
部分实现的功能由公共 API 的形式提供，以便派生实现复用。

@5.4.1 节点(node) 操作：
NPLA1 基于 ValueNode 提供了 TermNode(@5.3.3.2) 和 ContextNode(@5.3.3.3) 的操作的公共实现。
ContextNode 作为上下文的实现，保存了名称和对应实体的映射。
尽管暂时未依赖节点性质，当前它和 TermNode 相同，也是 ValueNode 的别名。这里的类型等价性是实现细节，不应被用户代码依赖。

@5.4.1.1 项节点结构分类：
节点容器的内容被视为子节点按迭代顺序确定的有序列表。
按内容的结构，项节点具有如下互斥的基本分类（使用 TermNode 的 empty() 判断）：
枝节点(branch node) 或非叶节点，即具有子节点的非空列表节点；
叶节点(leaf node) ，即不具有子节点的空列表节点，或非列表节点。
若叶节点的 Value 数据成员为空（即 TermNode 显式转换为 bool 为 false 及 operator! 结果为 true ），则此节点是空节点。
可按照子节点数（使用 TermNode 的 size() 结果判断）进行扩展的扩展分类。
判断项节点基本分类的 API 在模块 NPL::SContext 提供：使用 IsBranch 、 IsEmpty 和 IsLeaf 判断是否为枝节点、空节点和叶节点。
考虑 TermNode 的 Value 数据成员是否为空及其实际持有对象的动态类型等，具体实现 API 可约定使用不同的具体结构分类。
因为次级分类不一定是互斥的，所以可能需要约定对节点的操作顺序以确保结果一致，典型地可能有以下几种情形：
先判断是否为枝节点，再判断是否为符合预期类型的非空叶节点，分派不同的操作；
忽略子项使用项的值，不考虑子节点而只考虑 Value 数据成员；
使用子项和项的值进行操作，同时考虑子节点和 Value 数据成员。

@5.4.1.2 处理器(handler) ：
基于使用 ContextNode 作为输入的事件处理器（ YSLib::GHEvent 的实例），可以组合不同的操作，用于实现规约(@5.4.2) 。
NPL::ContextHandler 以 TermNode 和 ContextNode 作为输入，实现一般的上下文处理。
NPL::LiteralHandler 以不可修改的 ContextNode 作为输入，用于和当前被规约的特定项无关的事件，典型地用于处理字面量引发特定的事件。
NPL::RegisterContextHandler 和 NPL::RegisterLiteralHandler 用于设置 ContextNode 子节点为对应的处理器。

@5.4.1.3 字面量支持：
NPL::LiteralCategory 表示 NPLA 支持的字面量类别。
NPL::CategorizeLiteral 对字面量分类。

@5.4.1.4 记号值：
基本概念参见 @5.3.3.5.1 。
调用 NPL::TermToName(@5.4.1.4) 访问具有记号值的名称节点对应的字符串。

@5.4.1.5 值操作：
对抽象的值表示进行操作实现基本的语义功能，可能进行附加的检查。
NPL::ReferenceValue 对 ValueObject 进行基于所有权的生存期检查并取表示其引用的间接值。运行时进行的检查类似于强制 C++ 的一元 & 对表达式值类别的要求但更严格（尽管仍然不能保证避免未定义行为），避免临时对象被保存为引用值。

@5.4.1.6 一般上下文操作：
使用 ContextNode(@5.3.3.3) 指定操作的上下文。
NPL::LookupName 用于在上下文中查找标识符指定的名称，实现名称查找(@4.3.3) 。输入字符串指定（假定名称验证已通过的）名称。
NPL::FetchValue 分别用于在上下文中查找标识符指定的名称及取上下文中名称指称的值，实现对名称表达式(@4.5.1) 的求值。
NPL::FetchValuePtr 同 NPL::FetchValue 但不复制值。
NPL::DefineValue 、NPL::RedefineValue 和 NPL::RemoveIdentifier 修改上下文中的值。

@5.4.2 规约 API ：
NPLA 规约 API 约定默认使用 TermNode 和 ContextNode 类型的引用作为参数类型，参数分别表示被规约的节点和使用的上下文(@4.6.1) 。
NPLA 约定列表表达式子项需进行递归的树规约(@5.3.3.2) 。
由树规约的性质(@5.3.3.2) ，可假定求值不改变参数外部的项的有效性，不需要额外的检查。
ContextNode 可被递归地作为子项规约的参数，因此可以不使用其它参数。
其它兼容实现可能使用其它参数。
NPLA 提供描述一次规约调用操作结束后的状态的枚举 ReductionStatus 作为规约的返回类型。

@5.4.2.1 规约结果：
ReductionStatus::Clean 指定纯值规约：规约成功终止(@4.4.3) ，且不需要保留子项。
ReductionStatus::Retained 指定纯列表规约：规约成功终止(@4.4.3) ，但需要保留子项。
ReductionStatus::Retrying 指定重规约，即所在的列表表达式需要以相同的参数重新调用进行进一步规约。
除非实现逻辑需要或另行约定，规约结果默认为 ReductionStatus::Clean 。
规约结果作为规约实现的状态，设计原理如下：
基于实现的可扩展性、可复用性、复杂性和性能，判断规约终止的谓词（范式判断谓词）不一定适合在单独的规约过程中指定。
引入可指定规约不终止的显式的重规约状态代替范式判断谓词应对这些问题，允许项在最终取得范式前附加可变状态，并优化范式判断(@5.4.2.2.1) 。
区分规约终止的不同情形能在一定程度上复用已有的列表节点(@5.4.1.1) ，避免规约时节点或其它数据结构的一些冗余创建。

@5.4.2.2 规约迭代：
对项的一次规约可分解为若干个对这个项的部分规约的有序的迭代过程，每个过程称为一个遍(pass) ；另见 @5.4.3 。
一次规约中有且仅有最后一遍规约迭代终止(@5.4.2.1) ；重规约(@5.4.2.1) 或通过抛出异常退出的迭代是一遍非终止的迭代。
一次不异常退出的规约按规约结果总是对应纯值规约、纯列表规约或重规约(@5.4.2.1) 之一。
NPL::CheckReducible 检查参数指定的规约结果是否可继续规约，详见 @5.4.2.2.1 。
NPL::CheckNorm 指定视为范式的项并提取规约状态，详见 @5.4.2.3.1 。
NPL::CheckedReduce 循环规约直至不满足 NPL::CheckReducible 判断。
TermNode 用于规约迭代的表示，可能通过规约得到范式(@4.4.3) 。

@5.4.2.2.1 范式判断：
基于范式的定义，一次终止的(@5.4.2.1) 规约迭代应对 TermNode 参数进行规范化(@4.4.3) 以得到范式。
NPLA 提供以下等价的方式判断规约迭代后是否在 TermNode 得到范式：
除非另行约定，可直接使用 NPL::CheckReducible 以规约结果(@5.4.2.1) 决定是否为可继续规约的非范式；
通过检查节点结构的谓词 IsBranch(@5.4.1.1) 等作为范式判断谓词进行判断；
其它派生实现指定的范式的判断方式。
以上等价性由特定的 NPLA 规则（如 @5.4.2.3.1 ）和规约实现机制保证。
因为只检查规约结果的值而不访问项，使用 NPL::CheckReducible 代替范式判断谓词(@5.4.2.1) 一般能优化性能。
基于上述等价性保证，上述等价方式中的范式判断谓词可蕴含 NPL::CheckReducible 的结果，必要时也可用范式判断谓词代替规约结果，详见 @5.4.2.3.2 。

@5.4.2.2.2 规范化规约(@4.4.3) 约定：
除非另行约定(@5.4.2.3.2) ，一次终止的规约迭代中若存在规范化规约，其发生的次数和时机未指定；一般在最后一遍或之前存在一次即可。
注意规范化规约可能有引起可观察行为(@4.1.1) 变化的副作用(@4.1) ，实现应保证规约行为可被预期。

@5.4.2.3 正规(regular) 表示：
结合 @5.3.3.4 ，被求值的项的正规表示和规约结果有如下关系：
纯值规约由被规约的项的数据成员 Value 直接保存规约得到的值；
纯列表规约由被规约的项的子项决定规约得到的值。
满足上述约定的表示(@5.3.3.4) 是正规表示。
项通过求值取得正规表示是得到范式的必要非充分条件；为取得范式，可能需要继续进行规范化规约(@4.4.3) 。

@5.4.2.3.1 规约表示基本性质：
除非另行约定， NPLA 实现应保证规约过程中出现的表示满足以下基本性质：
任一遍规约中，非正规表示应保证可被（此次规约中剩余的操作）安全忽略而不改变规约的语义。
规约表示基本性质允许在已知 TermNode 得到范式时通过直接判断项的节点结构(@5.4.1.1) 是否存在子项代替推断此次规约中之前的规约结果。
NPL::CheckNorm(@5.4.2.2) 通过范式节点结构提取规约结果，是这种方法的直接的实现。

@5.4.2.3.2 正规化(regularization) 操作：
一次规约后，被规约的项中的 Value 或子项仍然可保留其它状态而非范式；对表示求值的情况，也不是正规表示(@5.4.2.3) 。
因为规范化规约可能存在副作用(@5.4.2.2.2)， NPLA 约定求值得到正规表示的规范化规约在抽象机(@2.6) 的意义上总是被进行，称为正规化操作。
纯值规约的正规化操作对子项进行清理，即移除不需要保留(@5.4.2.1) 的子项。
若需避免子项的生存期扩展到所在的项，需确保存在可预期的清理操作。
因为子项的删除时机未指定(@5.3.3.2) ，不假定 NPLA 实现的规约清理求值后的节点，即清理由派生的具体规约实现指定。
一般在求值的最终返回规约结果(@5.4.2.1) 前，清理不需要保留的子项。
纯列表规约的规范化标记 Value 为特定的值，可以是默认构造的空值或派生实现定义的不表示表达式的值的记号值(@5.3.3.5.1) 。

@5.4.2.3.3 正规表示分类：
基于规约表示基本性质(@5.4.2.3.1) ，不需要单独判断正规表示。
基于正规化操作规则(@5.4.2.3.2) ，通过以下逻辑对作为表示(@5.3.3.4) 的 TermNode 分类：
空节点表示空列表；
具有非空子项的 TermNode 表示非空列表；
其它 TermNode 当 Value 数据成员不是特定的值时，表示非列表表达式的值。
注意 Value 数据成员为特定的值（如中间值(@5.3.3.5) ）的没有子项的 TermNode 不是任何表达式的表示。

@5.4.2.4 规约函数：
除了以上类型外的规约 API 主要以 C++ 函数的形式提供，称为规约函数。
规约函数以被规约的项作为起始形式参数，包括以下形式：
第一参数为被规约的项，类型为 TermNode& ；
起始参数表示和 TermNode& 等价的容器的非 const 引用或非只读的迭代器范围。
规约函数的返回类型是 ReductionStatus 或 void 。
返回 void 的规约函数在规约结果(@5.4.2.1) 的语义上同总是返回 ReductionStatus::Clean 。
规约函数可以调用其它规约函数实现。注意因为可直接忽略被调用的规约函数的返回值并指定其它值，规约函数的实现的分类不一定具有组合性。

@5.4.2.4.1 直接规约函数：
一些规约函数被设计可直接用于作为 EvaluationPass(@5.4.3.2) 遍(@5.4.3) 处理器，称为直接规约函数。其余规约函数是间接规约函数。
直接规约函数对形式参数的使用应符合 NPLA 实现的规约迭代默认的约定(@5.4.2)，即一个必要非充分条件是：
第一参数的类型是 TermNode& ，且当第二参数存在时，其类型可转换为 ContextNode& 。

@5.4.3 遍迭代 API ：
NPLA 实现提供基于 YSLib 事件（ YSLib::GEvent 的实例）的可调用的遍的集合作为一次规约迭代的基础可配置的边界。
每一遍规约迭代(@5.4.2.2) 实现为一个事件处理器。这允许运行时修改求值执行的不同逻辑以取得较大的灵活性和可扩展性。
NPL::ContextHandler(@5.4.1) 可作为 NPL::EvaluationPasses(@5.4.3.2) 的事件处理器。

@5.4.3.1 遍合并器：
多个遍的调用结果被遍合并器 NPL::PassesCombiner 定义的逻辑合并。
遍合并器依次调用事件处理器，合并调用的结果为表示是否需要重规约的值。
当发现调用的结果对应遍的规约结果需要重规约时，调用停止。
NPL::GPasses 是用于作为可合并结果的遍的泛型类型。从事件处理器合并的结果被作为调用结果。

@5.4.3.2 合并遍：
基于 NPL::GPasses ， NPLA 提供处理不同的种类的合并结果的遍：
NPL::TermPasses ：项合并遍，处理一般项的合并。项合并遍只使用项作为输入。
NPL::EvaluationPasses ：求值合并遍，处理一般求值的合并。求值使用项和上下文作为输入。
NPL::LiteralPasses ：字面量合并遍，处理已知为字面量的项的求值。

@5.4.3.3 非合并遍：
直接基于 YSLib::GEvent ， NPLA 还提供以下不合并结果的遍：
GuardPasses ：作用域守护遍，处理固定出口逻辑的遍，对应作用域守护类型 NPL::Guard 。最后一个作用域守护的值被作为调用的结果。

@5.4.3.4 上下文调用：
通过 NPL::InvokePasses ，在 ContextNode 上访问指定名称的子节点(@5.4.1) ，提取其中的值作为遍并调用。具体的名称和实现相关，非公开接口。

@5.4.3.5 变换操作：
NPLA 实现还提供不依赖一般项规约逻辑的公共 TermNode 操作 API 。

@5.4.4 项操作：
NPL::AdjustTermValuePtr 尝试把一个指向特定值对象的值作为 TermNode 并返回指向其中的值，若失败则返回原值对象指针。
NPL::LiftTerm 提升项：即设置项的内容为参数指定的项或值。
NPL::LiftTermRef 提升项的内容为参数指定的项或值的引用值。引用值通过参数指定的值对象(@5.3.3.2) 上创建得到。
NPL::LiftDelayed （以引用方式）提升延迟求值项。
NPL::LiftFirst 和 NPL::LiftLast 提升第一个和最后一个子项。

@5.5 NPLA1 约定：
NPLA1 仅使用宿主语言的类型和值作为状态。类型等价性基于类型映射(@5.2.1) 及其实现(@5.3.3.1) ，由 C++ 的语义规则定义。值等价性由宿主实现的 == 表达式的结果定义。
当前不特别约定类型系统，所有类型都是同宿主类型的空字符结尾的字符串（ C++ NTCTS ）。

@5.5.1 附加规则：
当前仅支持标识符(@3.3.1) 作为名称。
含有“$$”的名称保留给宿主交互使用；含有“__”的名称保留给 NPLA1 实现。
在 NPLA 规则(@5.2) 的基础上，具有以下情形的程序引起未定义行为：
显式使用保留给实现的标识符。

@5.6 NPLA1 应用实例：
NPLA1 当前加入特定的序列化和反序列化作为配置文件，参见 NPL::Configuration 。
NPLA1 的上述配置文件加入特定的匹配和初始化机制作为 YSLib::UI::Loader([Documenatation::YSLib @@5.7.8]) 在运行时读取用户界面布局和配置的脚本。
NPLA1 用于 MIME 类型和文件名映射([Documentation::YSLib @@4.5.3]) 的实现，上述配置文件对应的外部配置格式。
注意这些应用不直接使用 NPLA1 的语义，其中使用的 TermNode 类型中名称直接表示上下文(@4.6.1) 中的实体名称。
计划使用完整的实现(@6) 取代这些应用的底层，使用 NPLA1 作为对象语言或作为附加的代码生成遍重新实现这些应用，但具体路线图未定。

@5.7 NPLA 其它实现应用实例：
NPL::SXML 命名空间提供的 API 部分支持以 NPLA 分析 SXML 及构造 NPLA 表示的节点并转换为 XML 输出。
NPL 自定义分析器被用于 NPL::DecomposeMakefileDepList 实现解析 GCC 输出的兼容 GNU make 包含依赖字符串。

@5.8 兼容性：
除非在此另行约定， YSLib 中的 NPL 实现保持兼容。
影响向前兼容的变更：
b449 增加对多个未命名节点（叶节点或第一个子节点未能解析为名称的分支节点）作为非名称子节点时的反序列化支持。多个值会被以 $ 前缀接序号（从 0 起始）命名。之前的版本中读取的节点名称为空串，值被覆盖为第一个节点值。

@6 NPLA1 解释实现：
本章以 @5.3 约定的限定名称的方式使用 API 中出现的 C++ 名称。
NPL::TransformNPLA1 通过 ValueNode 变换实现解释，参数指定映射例程，结果为 NPL 序列语义结构。
复合表达式中的经过节点到字符串的映射例程被解释为序列语义结构的名称，余下的项一一映射为子节点。
变体 NPL::TransformNPLA1Sequence 使用 NodeSequence 代替 ValueNode::Container 作为结果中子节点的容器，其它行为和 NPL::TransformNPLA1 相同。
命名空间 NPL::A1 提供了特定于 NPLA1 的 API 。以下命名空间 A1 指 NPL::A1 。
命名空间 A1::Forms 提供了 NPLA1 的语法形式(@3.4.4) 对应的功能的实现(@6.6) 。
过程默认实现为子例程(@4.5.2.1) ，参见 @6.6.4 ；引入过程的具体形式可约定其它方式。

@6.1 规约实现：
NPLA1 在 NPL::A1 中提供不同粒度的规约和求值实现 API 。

@6.1.1 规约函数约定：
基本约定参见 @5.4.2.4 。
以下规约函数的名称以 Reduce 起始：
直接规约函数(@5.4.2.4.1) ；
起始两个形式参数符合直接规约函数要求，且可能直接或间接调用其它直接规约函数的间接规约函数。
不调用其它直接规约函数的间接规约函数的名称以 Evaluate 起始。
其余规约函数的名称不以 Reduce 或 Evaluate 起始。

@6.1.2 主规约函数：
NPLA1 实现了一般的规约(@4.1) ，包括对列表表达式子项的递归规约。
主规约函数是直接规约函数(@5.4.2.4.1) 。
NPLA1 规约以 A1::Reduce 作为参考实现，返回类型为描述一次规约调用操作结束后的状态的 ReductionStatus(@5.4.2.1) 。
A1::Reduce 对参数中 TermNode 表示的表达式语法意义(@3.4.2) 上非空，但没有实现限制（即不附加检查）。
A1::Reduce 循环调用遍(@6.1.4) 进行必要的重规约，即迭代规约；通过 NPL::CheckReducible(@5.4.2.2) 判断是否需要重规约。
A1::Reduce 的实现中不直接指定需要重规约；所有 ReductionStatus::Retrying 都来自遍(@6.1.4) 的调用。
名称表达式的求值不进行进一步规约(@4.5.1) ，这由具体遍(@6.1.4) 的实现保证。关于记号，另见 @5.3.3.5.1 。
使用设置遍的 API(@6.1.4) 修改 ContextNode 中的具体遍以使用不同的规约规则。
基于 A1::Reduce 包装的辅助规约例程参见 @6.1.5 。

@6.1.3 迭代顺序：
A1::Reduce 定义节点次级结构分类(@5.4.1.1) 指定的规约迭代顺序被作为默认规约迭代顺序。
具体的分类和适用范围详见源代码文档。

@6.1.4 遍：
基于 NPLA 公共实现， NPLA1 使用以下的供迭代的遍(@5.4.3) ：
守护遍(guard pass) ，类型是一个 GuardPasses(@5.4.3.3) ，用于提供调试回调等。
叶遍(leaf pass) ，类型是一个 EvaluationPass(@5.4.3.2) ，用于实现叶节点(@5.4.1.1) 对应表达式的求值。
列表遍(list pass) ，类型是一个 EvaluationPass ，用于实现列表节点对应表达式的求值。
NPLA1 可配置的遍保存在 ContextNode 中。
通过 A1::AccessGuardPassesRef 、 A1::AccessLeafPassesRef 和 A1::AccessListPassesRef 从 ContextNode 的指定子节点中取遍的引用。
通过基于 NPL::InvokePass 的 A1::InvokeGuard 、 A1::InvokeLeaf 和 A1::InvokeList 以 ContextNode 的指定子节点内容作为遍并调用。
A1::Reduce(@6.1.2) 满足迭代顺序(@6.1.3) 提供的保证优先检查子节点数，列表遍仅用于子节点数大于 1 的非叶节点(@5.4.1.1) 求值。
这个特性允许在确定被求值的子项添加匹配的括号而不改变语义，且在列表遍中可简化子项求值（如 @6.4.5 直接 ReduceContextFirst(@6.4.5.1) 而不需检查节点数量是否大于 1 ）。
一般列表遍不依赖以上假设，可能对叶节点或具有一个节点的平凡列表节点对应的表达式求值。因此列表遍不是枝节点(@5.4.1.1) 遍。
遍的调用不一定需要维护共享状态，也因此一般多个遍被调用时不保证求值的强异常安全。
除 A1::ReduceContextFirst(@6.4.5) ， NPLA1 规约实现不保证进行正规化操作(@5.4.2.3.2) ；实现列表遍的用户代码需注意清理不需要的子项。

@6.1.5 辅助规约函数：
A1::ReduceArguments 从第二个子项起逐项规约。
A1::ReduceArguments 允许单一子项表示没有参数的情形，即便这不会通过 A1::Reduce(@6.1.2) 得到（因为子节点数为 1 时不调用列表遍），也可简化某些实现如 @6.6.5 。
A1::ReduceChecked 循环规约直至 NPL::CheckReducible 判断不可继续规约；注意这可能引起迭代无法退出，不保证强规范化性质。
A1::ReduceChildren 规约子项。
A1::ReduceFirst 对可能存在的第一个子项进行规约。
若第一个子项规约结果可被作为列表求值遍的事件处理器，整个项可继续规约。能进行此规约的形式称为 fexpr ，其中 f 表示 first 。
在某些其它语言中，符合类似求值规则的构造也称为 fexpr ，但语源不尽相同。
可组合使用 fexpr 的求值以及其它显式对 fexpr 子表达式的求值实现非严格求值(@4.4.4.5) 。
因为避免判断未指定子表达式是否需要规约（实现即非确定性求值(@4.4.4.5) ）， A1::ReduceFirst 一般具有较小的解释开销。
A1::ReduceOrdered 移除第一个子项并顺序规约余下的子项，使用最后一个子项的值。
A1::ReduceTail 移除第一个子项并规约余下的项。

@6.2 节点记号：
NPLA1 实现使用 A1::ValueToken 枚举类型表示用于特殊标记的扩展中间值(@5.3.3.5.3) 。当前被保留未直接在规约例程(@6.1) 中使用。
A1::ValueToken::Null 用于作为规约(@6.1) 过程中 Value 数据成员的占位符，适合 Value 逻辑上为空但不符合其它要求（如需要保留节点但稍后规约中被移除）时的场合，当前实现对 NPLA1 实现都是透明的；
A1::ValueToken::Unspecified 用于表示未指定的值。语言规范可能使用未指定值，但实现的 API （如 A1::Forms(@6.6) ）会明确指定使用这个值（如设置这个值作为对象语言中函数的返回值），用户代码仍然不应依赖此处使用的具体值。
注意当前 A1::Reduce 规约时不对空节点（表示空列表）和 A1::ValueToken 类型的值进行操作。

@6.3 中缀变换：
NPLA1 提供把特定的中缀分隔符替换为特定名称表达式(@4.5.1) 指定的前缀操作形式的列表。
变换结果可被进一步规约。

@6.4 遍处理：
NPLA1 提供若干 API 作为遍(@6.1.4) 的事件处理器。
详细功能参见源代码文档。

@6.4.1 上下文处理器：
基于 NPL::ContextHandler(@5.4.1.2) ， NPLA1 提供了包含特定公共（检查或其它功能）逻辑的节点处理器包装其它事件处理器。
A1::WrappedContextHandler 模板是适配可选返回类型的包装模板。当处理器返回类型为 void 时，可默认指定返回值为 ReductionStatus::Clean(@5.4.2.1) 。
迭代时，求值遍(@5.4.2.1) 可选使用基于 NPL::ContextHandler 的处理器作为 NPL::EvaluationPasses 事件处理器：
A1::FormContextHandler ：形式上下文处理器，表示操作子(@4.5.3.2) 。
A1::StrictContextHandler ：严格形式上下文处理器，严格求值(@4.5.4) 的操作子(@4.5.3.2) 。
两者的数据成员 Handler 为被包装的处理器，类型分别为 NPL::ContextHandler 和 A1::FormContextHandler 。
A1::FormContextHandler::operator() 依次进行以下操作：
若 Check 数据成员非空则调用 Check 进行检查，失败时抛出异常。
检查子项数，当子项等于 2 且第二项为空节点（表示空参数列表）时移除空节点；
调用被包装的处理器 Handler 数据成员。
A1::StrictContextHandler::operator() 依次进行以下操作：
调用 A1::ReduceArguments 求值每一个子项（函数参数）；
调用被包装的处理器 Handler 数据成员。
除此之外，两者的 operator() 的附加操作参见 @6.4.1.1 。
注意上下文处理器不只适用于特定的规约实现如 A1::Reduce(@6.1.2) 。
注意直接在处理器中调用规约实现可导致无限递归；另见 @4.4.3 。

@6.4.1.1 前置条件检查和异常处理：
A1::FormContextHandler 的数据成员 Check 指定调用包装处理器之前的项检查。
检查不存在或通过检查后， A1::FormContextHandler::operator() 调用被包装的处理器 Handler 数据成员，并处理部分异常。
Check 默认指定 IsBranch 作为调用的前置条件；也可以指定其它谓词。
为易于复用处理器逻辑，利用合适的检查例程保证调用的处理器的前置条件，而不依赖特定规约实现调用时使用对项的结构（如项的分类(@5.4.1.1) 或子项数）等形式的假设。
一般仍然需要 IsBranch 作为 Check ，即使它们在 A1::Reduce(@6.1.2) 仅被作为枝节点处理器。这样，对其它规约实现也可以安全地复用。
被调用的处理器中内部也可以有检查，这和上下文处理器中的项检查互补。
若被调用的处理器自行检查前置条件，则项检查可以为空。项检查可不必在被包装的处理器中重复进行（可使用断言代替）。
NPLA1 实现中，作为被调用的处理器（如 @6.6 中的 API ）中可能存在对参数数量的检查。这类检查中已对枝节点类别进行检查，即不需要指定 NPL::IsBranch 作为前置条件。

@6.4.1.2 比较操作：
包装模板和上下文处理器提供重载操作符 == 以支持比较谓词(@6.6.7) 。
比较是必要的；否则，实例化 GHEvent 的操作可能导致无限递归调用。
当前没有直接提供 != 和其它比较操作。

@6.4.2 助手函数模板：
类似 NPLA1 ，此处也提供了注册处理器事件的助手函数模板 A1::RegisterForm 和 A1::RegisterFunction 。
此外，还有允许重载的 A1::ToContextHandler 函数模板以简化实现。
助手函数的模板传入被包装的处理器和检查例程。

@6.4.3 项变换 API ：
对中缀变换(@6.3) ，提供 A1::RegisterSequenceContextTransformer 简化向 EvaluationPasses 添加事件处理器。

@6.4.4 项检查和辅助 API ：
A1::AssertBranch 断言项是枝节点。
A1::FetchArgumentN 返回子项作为函数时的实际参数数，即子项数减 1 。

@6.4.5 项求值 API ：
NPLA1 提供规约处理器若干 API 实现基于节点的表达式求值。
A1::EvaluateIdentifier 对标识符项求值，通过调用 NPL::FetchValuePtr 实现名称解析(@4.3.3) ，然后检查字面量处理器，若存在则调用；最后调用 A1::EvaluateDelayed 。
A1::EvaluateLeafToken 对作为叶节点记号的项求值，其中会判断字面量并按需调用字面量合并遍(@5.4.3.2) 或 A1::EvaluateIdentifier 。
A1::EvaluateDelayed 对值对象为延迟求值项(@5.3.3.5.2) 的项继续规约，以配合先前求值表达式时不直接规约(@6.1) 而实现非严格求值(@4.4.4.5)。
A1::ReduceContextFirst 规约作为上下文列表的枝节点，详见 @6.4.5.1 。
A1::ReduceLeafToken 规约叶节点记号，提取名称并调用 A1::EvaluateLeafToken 求值对应项。

@6.4.5.1 A1::ReduceContextFirst：
A1::ReduceContextFirst 对枝节点以已规约的第一个子项为上下文处理器(@6.4.1) 并返回调用结果，以节约严格性分析(@4.4.4.2) 开销；并根据处理器返回的规约结果进行正规化操作。
当调用返回 ReductionStatus::Clean 时，在返回结果前清理(@5.4.2.3.2) 子项（另见 @6.1.4 ）。
当调用返回 ReductionStatus::Retained 时，在返回结果前设置值为 A1::ValueToken::Null(@6.2) 以标记空参数列表。
当枝节点的第一个子项不是上下文处理器时失败，抛出 ListReductionFailure 异常。
对叶节点直接返回 ReductionStatus::Clean ，无其它作用。
配合 A1::FormContextHandler 在第一个子项上提供中间值(@5.3.3.5) ，得到的项为 WHNF(@4.4.3.1) ， A1::ReduceContextFirst 实现 WHNF 的求值。

@6.5 REPL API ：
NPLA1 提供 REPL API 以便于组装 REPL 和解释器。
A1::SetupDefaultinterpretation 初始化默认解释，包括一般事件处理例程。
A1::REPLContext 类可直接作为 REPL 原型。

@6.6 语法形式对应功能的实现：
命名空间 A1::Forms 的 API 专用于实现语法形式对应的功能而不是 NPLA1 的一般机制。
这些功能对 NPLA1 实现并非严格地必要，但适合使用宿主语言实现，被 NPLA1 代码间接地调用。
因此，这些 API 不被 A1::Forms 以外的 API 及实现依赖。
这些 API 符合本节以下内容的约定。
除非另行约定，这些形式不是特殊形式(@5.2) ，一般作为按值传递(@4.4.4.5) 的函数(@4.5.2) ；其中的值对象(@5.3.3.1) 表示引用时，可传递引用。

@6.6.1 保留(retain) 操作：
保留形式是特殊形式，对项进行空求值(@4.4.2) 。
Forms::Retain 断言枝节点并返回返回 ReductionStatus::Retained(@5.4.2.1) 。
Forms::RetainN 断言枝节点并检查子项作为函数时的实际参数数(@6.4.4) 符合预期。
保留的项不一定被直接需要值的操作如 Forms::Lambda(@6.6.4) 支持，一般不在用户代码中直接使用。

@6.6.2 修饰符(modifier) ：
修饰符不作为单独的形式。语法形式可能具有可选的修饰符表示不同的功能。若存在修饰符，它在项的第二个子项。

@6.6.3 调用助手：
通过提供包装上下文处理器注册(@6.4.2) 的 API ，简化需要的回调形式。
基于 A1::RegisterStrict(@6.4.2) 注册严格上下文处理器。
Forms::CallUnary 和 Forms::CallUnaryAs 访问节点并调用一元函数。
Forms::CallBinary 和 Forms::CallBinaryAs 访问节点并调用二元函数。
以 As 为后缀的版本使用模板参数指定节点转换的目标类型作为提供回调的参数类型；否则参数类型为 TermNode& 。
Forms::UnaryExpansion 、 Forms::UnaryAsExpansion 、 Forms::BinaryExpansion 和 Forms::BinaryAsExpansion 提供对应的扩展调用，允许回调省略没有使用的 ContextNode& 类型的参数。
Forms::RegisterStrictUnary 注册一元严格求值上下文处理器。

@6.6.4 过程调用和 λ 抽象：
过程调用可使用 A1::FormContextHandler(@6.4) 实现。
提供 Forms::Lambda 支持 lambda 特殊形式创建以过程为基础的 λ 抽象(@4.5.2.1) 。
通过此形式引入的过程在求值时，以 TermNode 的项而不是 ValueObject 的值对象替换上下文中的形式参数(@4.5.2) 列表。
对形式参数项的求值可由 A1::EvaluateDelayed(@6.4.5) 进一步完成，其中对项的直接操作使用 NPL::LiftTermRef(@5.4.4) 。
若需要保持不对项进行修改，则使用 NPL::AdjustTermValuePtr(@5.4.4) 。

@6.6.5 列表应用：
Forms::Apply 实现以列表为参数列表的函数应用。

@6.6.6 外部调用：
Forms::CallSystem 实现到 YFramework 提供的 usystem 函数的调用转发，用于调用外部命令。

@6.6.7 内建谓词：
内建比较例程 Forms::EqualReference 和 Forms::EqualValue 分别支持通过引用和值分别比较。两者的语义接近 Scheme RnRS 的 eq? 和 eqv? 。
基于 YSLib::GHEvent ，上下文处理器(@6.4.1) 对未支持 == 比较的函数对象提供默认的相等实现，相同类型的函数对象的值视为恒等。
若需改变行为，需补充 operator== 。

@6.6.8 求值实例：
Forms::Eval 提供创建 REPL 新实例并求值的便利接口。

@7 一般实现导引：

@7.1 程序实现：
程序是语言的派生。实现程序即在语言的基础上指定派生规则。
使用 REPL API(@6.5) 创建 REPL 实例用于实现解释器。
使用 A1::Forms 的成员(@6.6) 指定需要内建支持的语法形式。

*/
////

