/*
	© 2015 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.6.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.6 。
\version r1960
\author FrankHB <frankhb1989@gmail.com>
\since build 600
\par 创建时间:
	2015-05-21 01:17:08 +0800
\par 修改时间:
	2015-07-25 14:53 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.6'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b600, $now];

$now
(
	* $forced $build "missing updating %LIBS" @ "%SHBuild-bootstrap.sh"
		@ %Tools.Scripts $since b615,
	/ %YFramework $=
	(
		/ %YSLib.Service $=
		(
			/ @ "class %File" @ %File $=
			(
				- $revert(b329) "functions %(Flush, Write)",
				- $revert(b290) "function %Read"
			),
			/ %TextFile $=
			(
				/ "yconstexpr objects %'BOM_*'" >> "namespace %Text",
				+ "function %WriteBOM, 2 functions %VerifyEncoding"
					@ "namespace %Text",
				/ @ "class %TextFile" $=
				(
					- $revert(b273) "function templates %(ReadChar, SkipChar)",
						// No sense to read for %std::fstream.
					(
					/ "simplified BOM writing" ^ $dep_from "WriteBOM";
					* $comp "BOM truncated at null character for UTF32-LE"
						$since b341
					)
				)
			)
		),
		/ @ "class template %fstream" @ '__GLIBCXX__' @ %YCLib.FileIO $=
		(
			* "invalid initialization of buffer" @ "constructor template"
				$since b616,
			/ "all 2 functions %open" -> "function template",
			(
			/ DLDI ^ "mutable buffer member"
				~ ('const_cast' @ "function %rdbuf");
			* "undefined behavior" @ "function %rdbuf" @ $since b616
				// It seems that all libstdc++, libc++ and implementation of \
					VC++ use cast. However this is not portable for client \
					code.
			)
		)
	),
	+ $build "VC++ 2015 support" @ "VC++ projects",
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ "enabled %(YB_HAS_CONSTEXPR, YB_HAS_NOEXCEPT)"
				@ 'YB_IMPL_MSCPP >= 1900',
				// For VC++ 2015.
			* "wrongly defined %YB_ATTR as empty sequence for non GNU \
				compatible implementations" ~ "%YB_ATTR_gnu_printf" $since b615
		),
		/ $dev "shrank '#pragma GCC' into conditional guard"
			@ %LibDefect.Exception,
			// To avoid unknown pragmas being used for non GNU compatible \
				implementations.
		/ %YStandardEx $=
		(
			/ DLDI @ "function %operator/=" @ "class template %path" @ %Path
				^ "%unsigned literal" ~ "%int literal";
				// To eliminate VC++2015 warning: C4018.
			/ %Memory $=
			(
				* "invalid overloaded signatures" @ "template %pack_object"
					$since b588,
				/ "function template %make_unique" $=
				(
					>> "inline namespace %cpp2014" \
						@ '__cpp_lib_make_unique >= 201304 \
						|| __cplusplus > 201103L || YB_IMPL_MSCPP >= 1800',
					-> 'using std::make_unique;' @ "inline namespace %cpp2014"
						@ !'__cpp_lib_make_unique >= 201304 \
							|| __cplusplus > 201103L || YB_IMPL_MSCPP >= 1800'
					// Also to prevent ambiguity when ADL %std::make_unique \
						provided besides %ystdex::make_unique.
				)
			),
			/ "function template %invoke" %Functional @ 'YB_IMPL_MSCPP >= 1900'
				-> 'using std::invoke;',
			+ "meta type %bool_constant" @ %TypeOperations $=
			(
				+ 'using std::bool_constant' @ 'YB_IMPL_MSCPP >=1900',
				+ "alias template %bool_constant" @ !'YB_IMPL_MSCPP >=1900'
			)
		),
	),
	/ DLDI "simplified %integral_constant with %bool argument" ^ $dep_from
		"%ystdex::bool_constant" @ %TypeOperation $effective
		@ %(YBase.YStandardEx.(TypeOperation, Any, Cast, Functional,
		CStandardInteger, Rational, String, Tuple, Utilities),
		YFramework.YSLib.(Service.YBrush, Core.YObject))
),

b616
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			+ "assertion for valid file before loading text block" @ "%TextFileBuffer::operator[]" @ %Service.TextManager,
			+ "aliases %platform::(basic_filebuf, filebuf, wfilebuf, basic_fstream, fstream, wfstream)" @ "namespace %YSLib" @ %Adaptor.YAdaptor $dep_from %YCLib.FileIO
		),
		/ DLDI "simplified 2 function templates %ConvertCharacter for %GuardPair" @ %CHRLib.Convert,
			// Since the first component is reference wrapper, no need to assign again.
		/ @ "namespace %platform" @ %YCLib.FileIO $=
		(
			+ "2 functions %ufopen for %std::ios_base::openmode mode parameter",
			+ "function %TryClose";
			+ "alternative %fstream interface" $=
			(
				/ @ '__GLIBCXX__' $=
				(
					+ "class template %basic_filebuf" $dep_from %YBase.YStandardEx.CStandardIO;
					+ "alias-declarations %(filebuf, wfilebuf)",
					+ "class template %basic_fstream",
					+ "aliases %(fstream, wfstream)"
				),
				+ "alias-declarations for %(basic_filebuf, filebuf, wfilebuf, basic_fstream, fstream, wfstream) redirected to namespace %std" @ '!__GLIBCXX__'
			)
		)
	),
	* "wrong pointer type deduced" @ "%unique_file_ptr" @ %YBase.YStandardEx.CStandardIO $since b566
),

b615
(
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			+ %FileIO;
			/ "classes %(FileDescriptor, FileDescriptorDeleter, \
				FileOperationFailure), functions %(SetBinaryIO, 2 \
				SetupBinaryStdIO, 2 uaccess, 4 uopen, 2 ufopen, 2 ufexists, \
				upclose, 2 upopen, u16getcwd_n, uchdir, umkdir, urmdir, \
				uunlink, uremove, truncate, 4 GetFileModificationTimeOf, 2 \
				GetFileSizeOf), function templates %(ufexists, \
				GetFileModificationTimeOf)" @ %FileSystem >> %FileIO
		),
		/ %YSLib.Service $=
		(
			/ @ "class %TextFileBuffer" @ %TextManager $=
			(
				/ @ "constructor" $=
				(
					* $doc "wrong precondition" $since b613,
					/ "threw %LoggedEvent when file is not opened"
				),
				/ DLDI ^ $dep_from ("%ConvertCharacter" @ %CHRLib.Convert)
			),
			+ "defined out-of-line virtual destructor" @ "class %TextFile"
				@ %TextFile
				// To eliminate Clang++ warning: [-Wweak-vtable].
		),
		/ %CHRLib $=
		(
			/ %StaticMapping $=
			(
				/ "alias template %GuardPair" >> %CharacterMapping,
				"missing 'get()' call for first component"
					@ "function templates %FillByte for %GuardPair" $since b614
			);
			+ "2 function template %ConvertCharacter for GuardPair" @ %Convert
		)
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "invalid access for null parameter and wrong result for nonnull \
				parameter" @ "function %openmode_conv with 'const char*' \
				parameter" @ %CStandardIO $since b326,
			/ @ "class template %any_input_iterator" @ %AnyIterator $=
			(
				/ "function %get with return type %any" -> "2 functions with \
					return types (('any&', 'const any&'), 'ynothrow')",
				+ 'using any::target'
			),
		),
		+ "macro %YB_ATTR_gnu_printf" @ %YDefinition;
	),
	/ $dev DLDI "attribute 'YB_ATTR(format (gnu_printf, ...))'" ^ $dep_from
		("%YB_ATTR_gnu_printf" @ %YBase.YDefinition)
		// Also to eliminate Clang++ warning: [-Wignored-attributes].
),

b614
(
	+ "type traits operation %enable_if_same_t"
		@ %YBase.YStandardEx.TypeOperation,
	/ %YFramework $=
	(
		/ %CHRLib $=
		(
			(
			/ %StaticMapping $=
			(
				+ "alias template %GuardPair";
				+ "2 function templates %FillByte for iterator pair with guard"
			);
			+ "functions %(3 MBCToUC, MBCSToUCS2, MBCSToUCS4) with iterator \
				guard" @ %CharacterProcessing,
			)
			/ %Convert $=
			(
				* DLDI "function %VerifyUC" $since b613,
				+ "function %VerifyUC with difference" $dep_from ("%MBCToUC"
					@ %CharacterProcessing)
			)
		),
		/ %YSLib.Service $=
		(
			/ @ "class %TextFile" @ %TextFile $=
			(
				/ "encoding detection" $=
				(
					/ DLDI !^ "redundant buffer" $dep_from %CHRLib.MappingEx;
					* $comp "missing handling invalid state and other \
						conversion error" $since b290
				),
				- $revert(b341) "function %Truncate" $dep_to
					"removal of text file truncation",
				/ DLDI "functions %(Locate, Rewind)" @ "class %TextFile"
					!^ "%Seek"
			),
			/ @ "class %TextManager::iterator" @ %TextManager $=
			(
				* $revert(b613) "wrong iterator positioning" $since b613;
				* "missing loading buffer" @ "assertion not used"
					@ "function %operator++" $since b613
			),
			/ @ "class %File" @ %File $=
			(
				/ "function %GetPtr" => "%GetStream" $dep_from %NPL.SContext;
				/ $forced DLDI "reading",
				- $revert(b341) "function %Truncate" $dep_from
					"removal of text file truncation",
				- $revert(b505) "trace"
					@ "functions %(Open, Close), destructor",
				(
				/ DLDI "functions %CheckSize" !^ "%Seek";
				- $revert_ex(b273) "function %Seek" $dep_from
					"%TextFile::(Locate, Rewind)"
				)
			)
		),
		/ "character mapping loading" @ %Helper.Initialization $=
		(
			/ "continued on failure" @ "all platforms",
				// Rather than only Win32.
			+ "trace with level 'Warning' on failure",
				// On Win32, only after fallback failed.
			+ "fallback handler which would throw after failure"
		),
		/ %'YCLib(MinGW32)'.NLS $=
		(
			/ DLDI "initialization" @ ^ 'new' ~ "%make_unique",
			/ @ "function %FetchDBCSOffset" $=
			(
				/ $impl ^ "%TryInvoke" ~ "%FilterExceptions";
				/ $comp "simplified printed exception message",
				* $comp "null pointer always returned" $since b593
			)
		),
		/ $impl "put back last character after reading" @ "constructor %Session"
			@ %NPL.SContext ^ "%File::GetSentry" ~ "%File::GetPtr"
	)
),

b613
(
	/ %YFramework $=
	(
		+ "2 member functions %Send for %CF_DIBV5 data" @ "class %Clipboard"
			@ "platform %Win32" @ %YCLib.HostedGUI,
		/ %YSLib $=
		(
			/ %Core.YException $=
			(
				+ "function template %TryInvoke";
				/ DLDI "simplified %FilterExceptions" ^ "%TryInvoke"
			),
			- $re_ex(b570) '&&' @ ("parameter constructor %AMUnitControlList"
				@ %ListControl, "2nd parameter"
				@ "protected constructor %ListBox" @ %ComboList) @ %UI,
			/ %Service $=
			(
				/ %TextFile $=
				(
					/ DLDI "simplified encoding detection" $=
					(
						^ $dep_from ("%CHRLib::VerifyUC" @ %CHRLib.Convert),
						- "redundant seeking before checking BOM"
					)
				),
				/ @ "class TextFileBuffer" @ %TextManager $=
				(
					(
					/ "static yconstfn object %BlockSize" -> "%BlockShift";
					/ $forced DLDI "position calculation",
					),
					/ @ "class iterator" $=
					(
						(
						/ DLDI "block, index members" -> "position";
						/ $forced DLDI "assertions"
						),
						- $dev 'friend class TextFileBuffer;'
					),
					/ DLDI "simplified file iteration" ^ $dep_from
						("%File::GetSentry" @ %File)
				),
				+ "class %Sentry; function %GetSentry" @ "class %File" @ %File
			)
		),
		* "assertion string" @ "macro %YCL_CallWin32_Trace"
			@ %'YCLib_(MinGW32)'.MinGW32 $since b592,
		+ "function template %VerifyUC" @ %CHRLib.Convert
	),
	/ @ "class %ImagePanel" @ %YDE.ImageBrowser.ImageControl $=
	(
		+ "function %CopyToClipboard to copy whole image" ^ $dep_from
			("%TryInvoke" @ %YFramework.YSLib.Core.YException);
		+ "copying to clipboard when Ctrl+C is pressed",
		+ "copying to clipboard menu item"
	),
	/ %Tools $=
	(
		+ $dev "2 cases concerned with %std::string allocation and deallocation"
			@ "%DrMemory-YSLib-suppress.txt",
		/ @ "member function %BuildContext::Build" @ %SHBuild.Main $=
		(
			+ "check for nonnull target name component",
			* "invalid target name formed for root volume path" $since b546
				// Output component would be ended with ':' and cause output \
					directory creation failure.
		)
	),
	/ @ "class template %nptr" @ %YBase.YStandardEx.Pointer $=
	(
		+ "2 functions %operator(*, ->)",
		+ $lib 'yconstfn_releaxed' @ "function %get_ref"
	)
),

b612
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Adaptor.Font $=
			(
				(
				/ @ "class %Typeface" $=
				(
					+ $dev 'friend class CharBitmap;',
					/ DLDI "simplified private data" !^ "::FTC_SBit"
				);
				/ @ "class %CharBitmap" $=
				(
					/ $dev "alias %NativeType" @ "class %SmallBitmapData" -> 'Typeface::SmallBitmapData*' ~ '::FTC_SBit' $dep_from "%Typeface",
					/ "parameter" @ "constructor %CharBitmap" -> 'NativeType' ~ 'const NativeType&',
					/ @ "all 10 data access member functions" $=
					(
						+ "indirect assertions" ^ "%Deref",
						/ "exception specification" -> 'ynothrowv' ~ 'ynothrow'
					),
					+ "empty braced-init-list" @ "native handle data member",
					+ "defaulted default constructor"
				),
				/ $forced "2nd parameter type" @ "member function %Font::GetAdvance" -> 'CharBitmap' ~ 'FTC_SBit';
				$dep_to "removal of FreeType cache types"
				);
				- $dev '#include FT_CACHE_H' @ "header",
				(
				/ $dev "all '::FT_UInt'" -> 'unsigned',
				- $dev "explicit FreeType2 constants" @ "default argument" @ "member function %Font::GetGlyph",
				+ $dev "class name declarations and aliases declarations %((FT_SizeRec_; FT_Size, FT_SizeRec), (FT_FaceRec_; FT_FaceRec), (FT_GlyphSlotRec_; FT_GlyphSlot), FT_FaceRec_, (FT_LibraryRec_; FT_LibraryRec_), (FT_Size_Metrics_; FT_Size_Metrics))" @ "global namespace";
				- $dev ('#include FT_FREETYPE_H'; '#include <ft2build.h>') $dep_from "removal of FreeType cache types"
				)
			),
			/ DLDI "simplified function %RestrictInClosedInterval" @ %Core.YCoreUtilities ^ $dep_from ("%ystdex::clamp" @ %YBase.YStandardEx.Algorithm) $dep_from "%ystdex::less" @ %YBase.YStandardEx.Functor
		),
		+ "additional sanity check throwing %std::runtime_error for pointer result" @ "platform %Win32" @ %YCLib.HostedGUI,
			// This should not occur unless there are bugs in implementation of %::CreateCompatibleDIBSection.
		/ @ "class %WConsole" @ %'YCLib.(MinGW32)'.Consoles $=
		(
			/ "static functions %(FetchBackColor, FetchForeColor)";
			/ "static function %DecomposeAttributes" -> "inline function" ^ "%(FetchBackColor, FetchForeColor)",
			/ DLDI "simplified function %SetBackColor" ^ "%FetchForeColor" ~ "%DecomposeAttributes",
			/ DLDI "simplified function %SetForeColor" ^ "%FetchBackColor" ~ "%DecomposeAttributes"
		)
	),
	(
	* $dev "wrong warning for ISO C99 compatible format"
		$= ("format attribute %printf" -> "%gnu_printf" $effective @ %(YBase.YStandardEx.(CAssert $since b432, String $since b322), YFramework.YCLib.Debug $since b299));
		// On Windows 'printf' defaulted to 'ms_printf', this is not intended since %__USE_MINGW_ANSI_STDIO has been enabled by libstdc++, thus it would wrongly warn about "%zu", etc.
	/ $dev "simplified format" ^ "%zu" ~ "%u" $effective @ %(YFramework.(Helper.(Environment, Initialization), YSLib.Service(Image, ImageProcessing)), YReader.Main)
	),
	/ %YBase.YStandardEx $=
	(
		* "wrong parameter types for '<void>' specializations" @ "functors %(plus, minus, multiplies, divides, modulus, equal_to, not_equal_to, greater, less, greater_equal, less_equal)" $since b578
			$= (/ DLDI ^ "forwarding reference" ~ "const qualified reference"),
		+ "function templates %(clamp, clamp_range)" @ %Algorithm,
		+ "metafunction %member_target_type_t" @ %TypeOperations,
		+ "function template %invoke" @ %Functional
	),
	/ %YSLib $=
	(
		/ "constructor with single pointer parameter" @ "class %String" @ %Core.String -> 'using ucs2string::ucs2string;',
		/ DLDI "simplified member function %TextBox::Refresh" @ %UI.TextBox ^ $dep_from ("inherited constructor" @ "class %String" @ %Core.String) ~ "%operator* for %String"
	)
),

b611
(
	/ %YFramework $=
	(
		+ "function %CheckColons" @ "namespace %platform::FAT"
			@ %YCLib.FileSystem,
		/ @ "namespace %platform_ex::FAT" @ "platform %DS" @ %'YCLib(DS)'.DSIO
			$=
		(
			+ $dev "static assertion 'LFN::MaxMBCSLength <= NAME_MAX'",
			+ 'using namespace platform::Threading;',
			+ "classes %(FilePosition, DEntryPosition, DEntry, Partition,
				DirState, FileInfo)",
			+ "functions %(CheckColons, FetchPartitionFromPath)";
			+ "functions %(Mount, Unmount)"
		),
		/ @ "platform %DS" %YCLib.NativeAPI $=
		(
			/ $impl "function %InitializeFileSystem" $=
			(
				/ $lib ^ $dep_from ("function %Mount" @ %'YCLib(DS)'.DSIO)
					~ "libfat" $=
				(
					/ "cache" ^ "%SectorCache",
						// Efficient lookup but larger binary size. However \
							overall size is still smaller than linking an \
							external library in release configuration.
					/ "filename" @ "entries"
						^ "%string without length limitation"
						// Limitation of 255 UCS-2 character of LFN is not \
							checked. The memory usage is more efficient.
					/ "deferred checking LFN length" @ "adding entry",
						// Only for filename which is not "." or "..".
					^ "%CHRLib for encoding conversion" ~ "ISO C routines",
						// These routines are locale-dependent, although for \
							DS the patched newlib always use UTF-8 as \
							multibyte encoding.
					/ "transparent propogated %ENOSPC as %std::system_error",
					/ "open file list" ^ "%list" ~ "intrusive linked list",
					- $design "unnecessary minor redundant integer range check",
						// See https://github.com/devkitPro/libfat/pull/1 .
					/ "merged getting date and time calls",
					/ "reduced unnecessary calls for looking up last cluster",
						// See https://github.com/devkitPro/libfat/issues/3 . \
							Even if there is the cache, it is still slower.
					- "redundant function call for directory entry opening by \
						path '/'",
						// See https://github.com/devkitPro/libfat/issues/5 .
					/ $comp $dev "device operation table allocation and \
						deallocation" ^ "::operator %(new, delete)"
						~ "%std::(malloc, free)"
				),
				/ DLD "reduced one redundant %REG_EXMEMCNT access",
				* "missing check to prevent repeated initialization" $since b601
			),
			+ "function %UninitializeFileSystem"
		),
		+ $design "call of %platform_ex::UninitializeFileSystem"
			@ "platform %DS" @ "function %Uninitialize"
			@ %Helper.Initialization $dep_from ("%UninitializeFileSystem"
			@ %YCLib.NativeAPI)
	),
	- $dev "-lfat" @ "%LIBS" @ "ARM9 makefile" $dep_from ("platform %DS"
		@ %YFramework.YCLib.NativeAPI) $dep_to "replaced libfat",
	/ $comp "platform %DS" $dep_from "replaced libfat" $=
	(
		/ "gave up order for flushing files on destruction of partition",
		/ "skipped redundant alias matching when a filename has been found"
			@ "opening entry from path",
		/ "partition object allocation and deallocation"
			^ "%(make_unique, ::delete)" ~ "%(unique_raw, std::(malloc, free))"
		/ "creation file system information" @ "constructing partition object"
			$=
		(
			/ "allocation failure would throw rather be suppressed and quietly \
				abort",
			+ "trace section writing error with level 'Err'"
		),
		+ "trace file synchronization failure on destructing partition object \
			with level 'Err'",
		/ "adding entry" $=
		(
			/ "threw %EINVAL as %std::system_error when adding entry failed"
				$dep_to "validating adding entry",
			/ "threw %ENAMETOOLONG as %std::system_error for too long required \
				name" $dep_to "path too long"
				// Actually hard-coded FAT long file name length limit \
					constant is used instead of %NAME_MAX. For DS, %NAME_MAX \
					is 768, as same as the UTF-8 sequence length limit of the \
					FAT long file name. This error would not occur before \
					because libfat uses fixed-length entries and the bad paths \
					would be truncated silently.
		),
		/ "checking reading or writing file setting %EBADF uniformly on failure"
			$dep_to "reused file check",
		- "checking and setting %errno to %EBADF for invalid %fd except for \
			null value",
			// This is OK because it is not real file descriptor. Checking \
				shall be done at caller site.
		/ "%devoptab_t routines" $=
		(
			- "set %errno to %EBADF for zero file descriptor"
				@ "%(write_r, read_r, seek_r)",
				// To be same as %close_r. Note it should be safe for external
					interface.
			/ "set %errno to %ENOENT for empty path parameter before checking \
				device" ~ "%ENODEV" @ "%(open_r, stat_r, unlink_r, chdir_r, \
				rename_r, mkdir_r, statvfs_r)" $dep_to "empty path errno",
			/ @ "routine %devoptab_t::read_r" $dep_to "read error handling" $=
			(
				/ "checked zero bytes to read after other file errors",
				/ "left %errno untouched rather than setting to %EOVERFLOW on \
					bytes reaching beyond end-of-file",
				/ "return '-1' after %EIO set",
				/ "left file offset untouched after error occurred" @ "%read_r"
					// POSIX.1-2013 explicitly states it is not specified in \
						RATIONALE. Since newlib would clear %__SOFF state in \
						higher-level stdio interface to require fresh seeking \
						after reading failure, so the modification after \
						failure is redundant. 
			),
			/ "lift path colon check before read-only file system check"
				@ "%(unlink_r, rename_r)",
				// Also to simplify the implementation. Note the POSIX error \
					for %::unlink only valid for flags.
			+ "colon check" @ "%statvfs_r",
				// To unify and simplify the implementation. Note it is not a \
					POSIX error.
			- "sanity check and setting %EBADF"
				@ "%dirreset_r, dirnext_r, dirclose_r" $dep_to
				"removal sanity check for directory operations"
			/ @ "%(fstat_r, stat_r)" $=
			(
				// See https://github.com/devkitPro/libfat/issues/4 .
				// In function %_FAT_directory_entryFromPosition of "fatfile.c".
				- "redundant name entry traverse" $dep_to
					"removal of stat name entry traverse",
				* "missing check error %EIO" $since b132 $dep_to
					"missing stat I/O error"
					// On calling %_FAT_cache_readPartialSector.
			),
			/ "checking %ENOENT before %ENOTDIR" @ "%(chdir_r, open_r, \
				rename_r)" $dep_to "checking changing directory",
			+ "set %ENOSPC on I/O error" @ "%mkdir_r" $dep_to "mkdir_r ENOSPC"
		),
		* "wrong root data sectors number calculated" @ "!FAT32" $since $before
			b132,
			// See https://github.com/devkitPro/libfat/issues/2 . Valid value \
				of %BPB_BytsPerSec is always greater than 1. By specification, \
				the result for FAT32 is always 0, otherwise this could be less \
				1 than expected.
		- "redundantly writing of blank sectors after end of directory mark \
			reached when finding gap",
		* "missing some %EIO error checking on cache I/O operations for \
			(linking cleared cluster, disc synchronization, extending file \
			blocks, reading file, entry removing, writing file)" $since $before
			b132,
		* "strict POSIX.1-2013 compatibility" $since $before b132 $=
		(
			// %EINVAL non-POSIX extension for invalid paths are kept, since \
				POSIX paths do not care about colons.
			* "%::(open, stat, unlink, chdir, rename, mkdir, statvfs) and \
				variants for empty string path parameter"
				$= (/ $comp "set %errno to %ENOENT" ~ "%ENODEV" $dep_from
					"empty path errno"),
			* "wrong result and wrong check for zero byte to read"
				@ "function ::read"
				$= (/ $comp "setting %errno and returning value properly"
					$dep_from "read error handling"),
			* "%ENOSPC wrongly set for invalid path" ~ "%EINVAL"
				@ "%::rename and variants" $dep_from "validating adding entry",
			* "missing set %ENAMETOOLONG" @ "%::(open, mkdir, chdir, rename, \
				opendir) and variants" $dep_from "path too long",
				// Note that POSIX requires %ENAMETOOLONG when the path \
					component is longer than %NAME_MAX, and this is optional \
					for whole path limit, which is stricter.
			* "redundant %EBADF set"
				@ "%::(rewinddir, seekdir) and related functions in <dirent.h>"
				$dep_to "removal sanity check for directory operations",
			* "missing setting %EIO for %::(stat, fstat)" $dep_from
				"missing stat I/O error",
			* "missing checking %ENOENT before %ENOTDIR" @ "%(chdir, open, \
				rename) and variants" $dep_from "checking changing directory",
			* "missing setting %ENOSPC on I/O error" @ "%mkdir and variants"
				$dep_from "mkdir_r ENOSPC"
				// POSIX requires no %EIO here.
		),
		/ $comp "setting %EBADF for files cannot be written" ~ "%EINVAL"
			@ "function %::ftruncate" $dep_from "reused file check",
		/ $comp "%EIO would not be set if name entries are corrupted on \
			calling %::(stat, fstat)" $dep_to
			"removal of stat name entry traverse"
	),
	+ $dev $repo "tag 'V0.6' to revision 472",
	// See $2015-06 @ %Documentation::Workflow::Annual2015.
	/ %YBase.YStandardEx $=
	(
		/ %Cache $=
		(
			(
			+ "function template %recent_used_list";
			+ "traits template %used_list_cache_traits";
			),
			/ @ "class template %used_list_cache" $=
			(
				/ "simplified template parameters and member types" ^ $dep_from
					"%used_list_cache_traits";
				/ $forced $impl "simplified member" ^ $dep_from
					"%recent_used_list",
				/ $comp $forced "element of used_list_type" ^ "%value_type"
					~ "%_tKey",
				(
				/ $comp "allowed specified %void hash-function for traits";
				/ $comp ^ "%std::map as default underlying map container \
					unless explicitly specified non-void hash function"
					~ "%std::unordered_map",
					// Multiple choices are necessary. See \
						http://blog.dubbelboer.com/2012/12/04/lru-cache.html .
				),
				(
				/ 'using typename map_type::const_iterator;' -> 'using \
					const_iterator = typename used_list_type::const_iterator;',
				/ 'using typename map_type::iterator;' -> 'using iterator \
					= typename used_list_type::iterator;',
				/ $forced "using-declarations %(key_type, value_type, \
					size_type)" -> "alias-declarations",
				/ $forced "using-declarations %(begin, end, size)"
					-> "functions",
				/ $forced "function template %emplace"
					-> "2 function templates";
				- $design "private base map",
				* $comp "strong exception guarantee when used list insertion \
					failed" @ "function template %emplace" $orig
					(@ "class template %GMRUCache"
					@ %YFramework.YSLib.Core.Cache $since b461)
					// Missing rollback for list on insertion failure, so the \
						base map is inconsistent.
				),
				+ $dev "static assertion for same %size_type of underlying \
					containers"
			)
		)
		+ "function template %bind1" @ %Functional
	),
	/ DLDI "simplified bound call" ^ $dep_from ("%bind1"
		@ %YBase.YStandardEx.Functional) ~ "%std::bind" $effective
		@ %(YFramework.(NPL.NPLA1, YSLib.(Adaptor.YNew, UI.(Scroll,
		YUIContainer))), YReader.(ShlReader, ShlExplorer)),
	/ $dev $repo "all edited file with module name not the same as base file \
		name" @ !%YBase ^ 'hg mv' $effective @ %YFramework.YSLib.Adaptor.(
		"ynew.cpp" => "YNew.cpp")
),

b610
(
	/ %YBase.YStandardEx $=
	(
		/ DLDI "alias-declaration" @ "function template %pack_uint"
			@ CStandardInteger,
			// To eliminate warning: [-Wshadow] to 'uint_t' on platform
				%Android. Note the global '::*_t' is reserved by POSIX.
		* "missing excluding non class string type for function template \
			%ntctsncpy" @ %String,
			// These function templates would be used instead of %ntctsncpy in
				%CString for non class type, which cause ill-formed programs.
		/ @ "%ntctsncpy" @ %CString $=
		(
			/ @ "function template for unbound character types" $=
			(
				* "wrong assignment of terminate null character",
					// It is ill-formed to modify element pointed by 'const'
						pointer.
				+ "overloading condition"
			)
			+ "function templates for character types compatible to %(char, \
				wchar_t)"
		),
		/ %TypeOperations $=
		(
			+ "binary type trait %is_aligned_compatible";
			(
			+ "binary type trait %is_aligned_placeable",
			/ DLDI "simplified %is_aligned_storable" ^ "%is_aligned_compatible"
			),
			+ "binary type trait %is_aligned_replaceable"
		),
		(
		+ "2 inline functions %throw_system_error" @ %Exception;
		/ DLDI "simplified" @ %PseudoMutex ^ "%throw_system_error"
			~ "throw-expression"
		)
	),
	/ %YFramework $=
	(
		/ @ "namespace %platform::FAT::Clusters" @ %YCLib.FileSystem $=
		(
			+ "function %IsFreeOrEOF" @ "namespace %Clusters",
			+ "function %ConvertToMBCS" @ "namespace %LFN",
			+ 'using VolumeLabel = array<byte, 11>;',
		),
		+ "namespace %platform::FAT" @ "platform %DS" @ %'YCLib_(DS)'.DSIO$=
		(
			+ $dev "static assertions for %(byte, size_t)",
				// Specific properties are required to support FAT
					implementation.
			+ 'using namespace platform::FAT',
			+ "class %AllocationTable"
		)
	)
),

b609
(
	/ %YFramework $=
	(
		/ @ "namespace %platform::FAT" @ %YCLib.FileSystem $=
		(
			+ "enumerators %(MaxValid12, MaxValid16, MaxValid32, Bad12, Bad16,
				Bad32, EndOfFile12, EndOfFile16, EndOfFile32)"
				@ "namespace %Clusters",
			+ "yconstexpr objects %(MinSectorSize, MaxSectorSize)",
			(
			+ "yconstexpr object %EntryDataSize";
			+ "class %EntryData"
			)
		),
		+ "member function %SectorCache::GetDisc" @ %'YCLib_(DS)'.DSIO
	),
	* "defaulted as deleted function called for non trivially destructible \
		types" @ "class template %optional" @ %YBase.YStandardEx.Optional $since
		b591
),

b608
(
	/ %YFramework $=
	(
		/ "ignored message with lower level than 'Alert'" @ "platform %DS"
			@ "member function Logger::DefaultSendLog" @ %YCLib.Debug,
		* "printed pixel noise due to 'std::printf' call" @ "platform %DS"
			@ %Helper.Initialization $since b450,
			// This occurred when %FetchMIMEBiMapping called.
		/ %YCLib $=
		(
			+ 'using u16string = basic_string<char16_t>;' @ %Container,
			/ @ "namespace %platform::FAT" @ %FileSystem $=
			(
				/ @ "namespace %LFN" $=
				(
					+ "function %ConvertToAlias" $dep_from %Container,
					+ "functions %(FetchLongNameOffset, WriteNumericTail)"
				),
				+ "enums %(BPB, FSI)",
				+ "inline namespace %FAT16"
					$= (+ "enum %BPB"),
				+ "inline namespace %FAT32"
					$= (+ "enum %BPB"),
				+ "yconstexpr objects %(FSI_LeadSig_Value, FSI_StrucSig_Value,
					FSI_TrailSig_Value)"
			)
		),
		/ @ "class %SectorCache" @ %'YCLib_(DS)'.DSIO $=
		(
			+ "function %FillPartialSector",
			(
			/ "reordered parameters" @ "functions %(EraseWritePartialSector,
				ReadSectors, WritePartialSector, WriteSectors)";
			+ "default argument '1'" @ "last size parameter" @ "functions \
				%(EraseWritePartialSector, ReadPartialSector, ReadSectors, \
				WritePartialSector, WriteSectors)"
			),
			/ DLDI "simplified I/O routines" ^ "private member templates"
		)
	),
	* $comp "printed pixel noise due to tracing" $since b434
		$dep_from %YFramework.YCLib.Debug;
		// For %debug configuration, this was changed since b432, but only \
			occurred by %YTraceDe calls in %YLoader since b434. For %release \
			configuration, this occurred from b498.
	/ %YBase.YStandardEx $=
	(
		+ "function templates %(read_uint_le, write_uint_le)"
			@ %CStandardInteger,
		+ "function template %restrict_length" @ %String
	)
),

b607
(
	/ $re_ex(b604) DLDI @ "main function" @ "platform %Android" @ %Main
		^ 'yunused',
		// To eliminated warning: [-Wunused-variable].

	/ %YBase.YStandardEx $=
	(
		+ "functor %lref_less" @ %Functional,
		/ "inline namespaces %(cpp2011_traits, cpp2014_traits)"
			=> "%(cpp2011, cpp2014)" @ %TypeTraits,
		/ "enclosed ISO C++ 14 interface" @ "inline namespace %cpp2014"
			@ %IntegerSequence,
		/ @ "class %ifile_iterator" @ %CStandardIO $=
		(
			/ DLDI "simplified data member initialization"
				^ "braced-init-list '{}'",
			(
			+ "alias %int_type";
			+ "functions 2 %(sputbackc; sungetc)"
			)
		)
	),
	/ DLDI "simplified container type" ^ $dep_rom
		("%lref_less" @ %YBase.YStandardEx.Functional),
	/ %YFramework $=
	(
		/ @ "namespace %platform" @ %YCLib.FileSystem $=
		(
			+ "enum class %FileSystemType"
			+ "namespace %FAT" $=
			(
				(
				+ "alias %ClusterIndex";
				+ "enum class %Attribute with bitmask operations"
				),
				+ "yconstexpr object %IllegalAliasCharacters",
				(
				+ "alias %FileSize";
				+ "yconstexpr object %MaxFileSize"
				),
				(
				+ "alias %EntryDataUnit";
				+ "namespace %Clusters" $=
				(
					+ "objects %(PerFAT12, PerFAT16)",
					+ "enum for %ClusterIndex constants"
				),
				+ "namespace %LFN" $=
				(
					+ "enum %Offsets",
					+ "yconstexpr object %OffsetTable",
					+ "enum for %size_t constants",
					+ "enum for %EntryDataUnit values",
					+ "yconstexpr objects %IllegalCharacters",
					+ "function %GenerateAliasChecksum"
				),
				)
				(
				+ "alias %Timestamp";
				+ "functions %(ConvertFileTime, FetchDateTime)"
				)
			)
		),
		/ %YSLib.Service $=
		(
			* "wrong %operator>> for %File and non-string argument deduced"
				@ %File $since b326 $=
			(
				// Only explicit call of 'operator>><char>' worked.
				/ "restricted overloading for non-string class type"
					^ "%ystdex::enable_if_t"
				/ "restricted overloading for string class type"
					^ "%ystdex::enable_for_string_class_t"
			),
			/ @ "class %TextFileBuffer" @ %TextManager $=
			(
				* $comp "possible dropped first byte for reading block"
					$dep_from %CHRLib.StaticMapping $since b495,
				/ DLDI "simplified put back" @ %CharacterProcessing ^ $dep_from
					("%ifile_iterator::sungetc" @ %CStandardIO) "%std::ungetc",
				* "missing putting back character after searching by iterator"
					@ "function %GetPosition" $since b400
			)
		),
		/ %CHRLib $=
		(
			* "undefined behavior for referential proxy of iterator \
				indirection result" @ "all 2 function templates %FillByte"
				@ %StaticMapping $since b495,
				// Deferred cast to 'byte' is indeterminately sequenced with \
					iterator incrementing.
			/ DLDI "simplified put back" @ %CharacterProcessing ^ $dep_from
				("%ifile_iterator::sungetc" @ %CStandardIO) "%std::ungetc"
		)
	)
	* "missing creation directories for build and release" @ "%YSTest makefile"
		@ "platform %DS" $since b603,
		// To prevent making failed caused by nonexistence of parent directory \
			in '.arm7' and '.arm9' file paths.
	* $comp "dropped first byte for buffered block text" @ %YReader.DSReader
		$dep_from %YFramework.Service.TextManager $since b495
		// For test build, only %MinGW32 seemed to be normal.
),

b606
(
	/ %YBase.YStandardEx $=
	(
		+ "member function %block_buffer::fill" @ %CStandardIO,
		/ %ScopeGuard $=
		(
			/ @ "class template %guard" $=
			(
				* "missing explicitly defaulted move %operator=" $since b605,
				* "wrong exception specifiction" @ "constructor template"
					$since b605
			),
			/ @ "all 2 function templates %make_guard" $=
			(
				(
				+ "1st templatee parameter 'bool _bNoThrow' with default \
					argument 'true'";
				/ "'noexcept' expression for function object"
					-> "template parameter _bNoThrow"
				),
				* "wrong template argument" @ "trailing-return-type" $since b605
			)
		),
		+ "function template %call_for_value" @ %Functional,
		+ "function template %normalize" @ %String
	),
	+ "member function %SectorCache::FillSectors"
		@ %YFramework.'YCLib(DS)'.DSIO,
	/ $impl "simplified %locked_ptr construction" $effective
		@ %(Helper.GUIApplication, YCLib.(Host, HostedGUI, XCB))
),

b605
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %CCharacterType $=
			(
				+ "function templates %(tolower, toupper)"
					^ "%std::(towlower, towupper)",
				+ "inline function overloadings %(tolower, toupper) for %char"
					^ "%std::(tolower, toupper)"
			),
			* "wrong standard library routines called for !%char type"
				@ "function templates" ("%ntctsicmp" $since b329 $orig
				(@ "%sntctsicmp" $since b329), "%ntctsnicmp" $since b604)
				@ %CString
				$= (/ $impl ^ $dep_from ("%ystdex::tolower" @ %CCharacterType)
					~ "%std::tolower"),
			/ @ "namespace %single_thread" @ %PseudoMutex $=
			(
				* "missing nothrow exception specification" @ "debug interface"
					@ "constructor with %defer_lock_t parameter"
					@ "class template %unique_lock" $since b551,
					// ISO C++11 requires 'noexcept' on this constructor.
				+ $impl 'yimpl(ynothrow)' @ "stubs without exception \
					specifications" $effective @ "classes %(mutex, \
					recursive_mutex, timed_mutex, recursived_timed_mutex),
					class templates %(lock_guard, unique_lock), function \
					templates %(lock, try_lock)"
			),
			+ "class template guard; 2 function templates %make_guard"
				@ %ScopeGuard
		),
		/ "split macro %YB_ATTR" -> "%(YB_ATTR, YB_ATTR_STD)" @ %YDefinition
			// http://stackoverflow.com/questions/26888805/how-to-declare-a-lambdas-operator-as-noreturn .
			// http://lists.cs.uiuc.edu/pipermail/cfe-commits/Week-of-Mon-20140310/101215.html .
	),
	/ %YFramework $=
	(
		+ "'YB_NONNULL' for nonnull function parameters"
			@ %'YCLib_(DS)'.DSIO $effective @ "class %SectorCache",
		+ $revert_ex(b600) $re_ex(b594) "'YB_ATTR(noreturn)' for lambda \
			expressions always not return" @ %YCLib.HostedGUI $dep_from
			%YBase.YDefinition,
		/ %YSLib.Core.CoreUtilities $=
		(
			/ "function templates %(FetchSign, IsInInterval, \
				IsInClosedInterval, IsInOpenInterval, RestrictUnsigned)"
				^ "_type(0)" ~ 'FetchZero<_type>()';
				// ADL is complicated and considered unnecessary here.
			- $revert(b201) "function template %FetchZero"
				// It is verbose and there exist some problems (e.g. exception \
					specification) underspecified. Exception specification \
					checks should be resolved for other functions in future.
		)
	)
),

b604
(
	/ %YBase.YStandardEx $=
	(
		/ %CStandardInteger $=
		(
			+ "function template %unpack_uint",
			+ $dev "static assertion for integer width"
				@ "function template %pack_uint"
		),
		/ @ "class template %used_list_cache" @ %Cache $=
		(
			+ 'using typename map_type::value_type;';
			+ "data member 'std::function<void(value_type&)> flush{};'";
			/ "supported call %flush when entry is replaced"
		),
		+ "class %block_buffer" @ %CStandardIO,
		/ %CString $=
		(
			/ "functions %(strlen_n, strcpy_n)" -> "inline functions",
			+ "function template %ntctscpy without length parameter",
			+ "2 inline functions %ntctscpy without length parameters for \
				%(char, wchar_t) pointers" ^ "%std::(strcpy, wcscpy)",
			+ "function template %ntctsncpy",
			+ "2 inline functions %ntctsncpy for %(char, wchar_t) pointers"
				^ "%std::(strncpy, wcsncpy)",
			* "missing including %CAssert" $since b432,
				// The program may be ill-formed due to undefined %yconstraint.
			/ @ "function template %ntctsicmp" $=
			(
				* "wrong comparison for difference" $since b329,
				* "missing check termination of string" $orig
					(@ "function template %sntctsicmp" $since b117)
			),
			+ "function templates %(ntctsnicmp, ntctsnlen)",
			+ "2 inline functions %ntctsnlen for %(char, wchar_t)"
				^ "%std::(memchr, wmemchr)"
		),
		/ %String $=
		(
			+ "2 function templates %ntctsncpy for string classes",
			+ "assertion for non null pointer parameter" ^ "%yconstraint"
				$effective @ "function templates %(erase_left, erase_right, \
				ltrim, rtrim, trim)"
		)
	),
	+ %DSIO @ %YFramework.'YCLib_(DS)' $=
	(
		+ "class %Disc",
		+ "class %SectionCache" ^ $dep_from
			("%block_buffer" @ %YBase.StandardEx.CStandardIO)
	),
	* $dev "wrongly placed %test.cpp in filter %ystdex" @ "VC++ project %YBase"
		$since b519,
	/ @ "main function" @ %Main $=
	(
		(
		/ "simplified exception handling" ^ "%FilterException";
		/ $comp "reserved original error level in %LoggedEvent objects instead \
			OF 0"
		),
		/ "return %(EXIT_FAILURE, EXIT_SUCCESS) for failure and success \
			execution",
		/ "call %terminate for failure execution" @ "platform %DS"
			// To avoid error message disappeared on power off.
	)
),

b603
(
	/ $build @ "makefiles" @ "platform %DS" $=
	(
		/ @ "%YSTest makefile" $=
		(
			- "all optional EFS support by %USE_EFS",
			- "variables %(PROGNAME, OFILES, ADD_LIBS)"
			/ @ "target '$(CONF)'" $=
			(
				* "missing dependency '$(OUTPUT).nds'" $since b478 $orig
					(@ "target '$(BUILD)'" $since $before b132),
				- "detection for variables %(TEXT_TO_SAY_1, TEXT_TO_SAY_2, \
					TEXT_TO_SAY_3, TEXT_TO_SAY_4, NL_AND_PAUSE, MSG_IS_ERROR)"
					@ "recipe"
			),
			/ "%(ARM7OBJ, ARM9OBJ)" => "%(ARM7BIN, ARM9BIN)",
				// To be consistent with children makefiles.
			+ "build message of configuration at beginning"
				@ "target '$(OUTPUT).nds'",
				// Also to behave similar as children makefiles.
		),
		* "redundant '/'" @ "inclusion path for %Toolchain.options.mk"
			@ "%Tools/Scripts/Toolchain.DS.mk" $since b558
			// It seemed to be OK, but is not intended.
	),
	/ $build @ "VC++ projects" $=
	(
		(
		* "missing wrapping output for Visual Studio"
			@ "project %YSTest_Android" $since b497;
			// Clicking on error output would not go to source lines as other \
				projects.
		/ "wrapped build and rebuild commands with pipes by 'bash -o pipefail'"
			@ "command calls" $effective @ "platforms %(DS, Android)",
			// To prompt error when fail to compile or link. Note 'bash' has \
				already been a necessary dependency for those targets.
		),
		- "all unused WinGDB user properties" $effective
			@ "projects %(YSTest_Android, YSTest_DS)"
	),
	/ %YBase.YStandardEx $=
	(
		/ %Algorithm $=
		(
			- $revert(b304) "function template %pod_fill",
				// The explicit loop unrolling would not be useful for mordern \
					implementation of C++. Use %std::fill with static \
					assertion instead. Actually this needed no POD.
			/ "POD operations" -> "trivially type operations" $=
			(
				/ $doc "Doxygen group %pod_operations"
					-> "%trivial_type_operations",
				+ "function templates %(trivailly_fill_n, trivailly_fill)",
				+ 'ynothrowv',
				(
				/ "function templates %(pod_copy, pod_copy_n, pod_move, \
					pod_move_n)" -> "%(trivailly_copy, trivially_copy_n, \
					trivially_move, trivially_move_n)";
				/ $comp DLD "type-parameter-key" -> 'typename' ~ 'class',
				/ $comp DLDI ^ 'sizeof(_type)' ~ 'sizeof(*first)',
				+ $comp "assertions for validation of input pointers"
					^ "%is_undereferenceable",
				/ $comp $dev "static assertion for types" ^ "%is_trivial"
					~ "%is_pod",
					// Note that %is_trivially_copyable is not supported by \
						libstdc++ 4.9 yet.
				+ $comp $dev "static assertion" ^ "%is_copy_assignable"
					// To be similar to %std::copy.
				)
			)
		),
		+ "function template %pack_uint" @ %CStandardInteger
	),
	/ DLDI ^ $dep_from ("%ystdex::trivially_copy_n"
		@ %YBase.YStandardEx.Algorithm) ~ "%std::memcpy" $effective
		@ %'YCLib_(MinGW32)'.NLS,
	/ %YFramework $=
	(
		/ $forced DLDI %YSLib.Service.TextRenderer $dep_from
			"ystdex::trivially_move_n" @ %YBase.YStandardEx.Algorithm,
		/ DLDI %YCLib.Native ^ ($dep_from "ystdex::trivially_copy_n"
			@ %YBase.YStandardEx.Algorithm) ~ "%std(uninitialized_copy, copy_n)"
	)
),

b602
(
	/ "makefiles" @ "platform %DS" $=
	(
		* $build "missing dependency of libraries" @ ".arm9.elf file"
			@ "ARM9 makefile" $since $before b132,
			// The project should be rebuilt after .a files rebuilt.
		* $build "missing dependency of ARM7 ojbect" @ "%YSTest_DS makefile"
			$since $before b132
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ @ "function %InitializeFileSystem" @ "platform %DS" @ %NativeAPI
				$=
			(
				// Slightly made the .nds file smaller.
				/ DLDI ^ "custom device operation tables and libfat internal \
					routines",
				+ "exception message tracing on failure"
			),
			+ 'using yimpl(ystdex)::make_unique_default_init;' @ %Reference
		),
		+ 'using platform::make_unique_default_init;' @ %YSLib.Adaptor.YAdaptor
			$dep_from %YCLib.Reference
	),
	/ DLDI "simplified array allocation" ^ "%make_unique_default_init"
		~ "%make_unique" $effective %('YCLib_(MinGW32)'.MinGW32, YCLib.Host,
		YSLib.Adaptor.Image),
	+ "function templates %(construct, construct_range, destroy, destroy_range,
		uninitialized_construct, uninitialized_construct_n)"
		@ %YBase.YStandardEx.Memory
),

b601
(
	+ $repo "glob pattern 'YFramework/*/lib*/lib*.a'" @ "%.hgignore",
	(
	/ "ignored errors" @ "target %clean" @ "library makefiles"
		@ "platforms %(DS, Android)";
	* $comp "failure on %clean executed in Visual Studio" $since b473
		// The *.log file in the build directory cannot be removed, since it \
			is opened by Visual Studio and 'rm' would complain: \
			"Device or resource busy"
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			- $revert(b286) 'using platform::NativePathCharType;'
				@ %Adaptor.YAdaptor,
			* "missing updating macro %YFM_YSLib_UI_YDesktop"
				@ %UI.YModules $since b586,
			/ %Service $=
			(
				/ %FileSystem $=
				(
					/ @ "function %MakeNormalizedAbsolute" $=
					(
						+ "tracing converted path with level 'Debug'",
						* "assertion failed" @ !"platform %Win32" $since b599
							$dep_from "%Path::Parse" $dep_to
							"absolute path checking failure"
					),
					/ @ "class %Path" $=
					(
						/ DLDI "simplified friend function %swap"
							^ "%GetBaseRef" ~ 'static_cast'
						/ DLDI "simplified function %GetString, friend \
							function %to_string" ^ "%GetBase" ~ 'static_cast',
						* "inserted nothing as prefix"
							@ "static function %Parse" $since b499 $=
							// Initializer '{}' would be treated as an empty \
								sequence of strings rather than an empty string.
							(/ $re_ex(b499) '{}' -> '{{}}')
					)
				),
				/ $revert_ex(b301) "return type" @ "function %GetAreaOf"
					-> 'size_t' ~ "deduced type",
					// To eliminate warning: [-Wsign-conversion].
				/ DLDI "cast to 'wchar_t'" @ %TextRenderer
					// To eliminate warning: [-Wsign-conversion] where \
						'wchar_t' is not the same sign as 'ucs4_t'.
			)
		),
		/ %YCLib $=
		(
			- $revert(b286) "alias %NativePathCharType" @ "namespace %platform"
				@ %FileSystem $dep_from %YSLib.Adaptor.YAdaptor
			* "missing update header for %YGraphics caused ill-formed use of \
				undeclared %YSLib::Drawing::ConstGraphics" @ %XCB
				$= (/ '#include YFM_YSLib_Core_YGDIBase'
					-> '#include YFM_YSLib_Core_YGraphics'),
			* $re_ex(b458) "wrong use of %yconstexpr for functions %MapKeyChar"
				@ %YCLib.Keys
				$since b487 $= (^ "%yconstfn" ~ "%yconstexpr"),
			/ "platform %DS" @ %NativeAPI $=
			(
				/ "cleanup unused %USE_EFS conditional inclusion",
				/ $dev "platform_ex::DMAFillWordsAsync" $=
				(
					^ "types from <cstdint>" ~ "types from libnds",
					/ $impl !^ "unneeded volatile type cast"
				),
				+ "function %InitializeFileSystem",
				- "inclusion of <nds.h>" @ "header" $dep_from
					"hiding libfat interface"
			)
		),
		* $comp $build "ill-formed use of %nptr since static assertion of \
			%nptr always triggered it" @ %YCLib.XCB $dep_from
			%YBase.YStandardEx.Pointer $orig $since b595 $dep_from
			%YBase.YStandardEx.Utility,
		/ %Helper $=
		(
			/ DLDI ^ 'yunused' @ "function body for 3rd parameter"
				@ "function %AttachToHost" @ !"platform %Win32" @ %HostedUI,
				// To eliminate warning: [-Wunused-parameter] hosted platforms \
					other than %Win32.
			* "ill-formed buffer access" @ 'YCL_HostedUI_XCB' $since b589
				$= (/ $forced ^ "%ScreenRegionBuffer::Lock"),
			/ DLDI ^ 'yunused' @ "member %HostRenderer::RefreshForWidget"
				@ !"platform %Win32" @ %HostedUI,
				// To eliminate warning: [-Wunused-variable] hosted platforms \
					other than %Win32.
			/ %ShellHelper $=
			(
				(
				- $revert(b195) "function template %SetShellToStored";
				- $revert($before b132) "function template %FetchStored"
				),
				- $revert(b195) "function template %ReleaseStored" $dep_from
					"%Cleanup" @ %YReader.Shells,
				- $revert($before b132) "function template %SetShellToNew"
			)
		),
		* $dev "missing macro guard" @ !"platform %Win32"
			@ %'Helper_(MinGW32)'.Win32Control $since b578,
		/ %'Helper_(DS)'.DSMain $=
		(
			- "function templates %(ScrDraw, CreateSharedScreenImage)",
			/ @ "variables %(MainScreenWidth, MainScreenHeight)" $=
			(
				/ $dev "hard-coded screen width and height" $dep_to
					"hard coded screen measurement",
				+ 'yconstexpr'
			),
			- $revert(b297) "macros %(SCREEN_WIDTH, SCREEN_HEIGHT)" $dep_from
				"hard coded screen measurement"
		),
		/ @ "platform %DS" @ %Helper.Initialization $=
		(
			/ $impl "InitializeEnvironment"
				^ "%InitializeFileSystem" $dep_to "hiding libfat interface",
			* "redundant '\n' printed at last after horizontal line"
				@ "function %HandleFatalError" $since b508
				// This cause LibFAT error titil disappeared.
		)
	),
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "ill-formed %nptr constructor for %nullptr_t" @ %Pointer $orig
				(@ %Utilities) $since b560,
			/ DLDI "cast to 'unsigned'" @ "function %iswprint"
				@ %CWideCharacterType,
				// To eliminate warning: [-Wsign-conversion] where 'wchar_t' \
					is signed integer type.
			/ "directly cast to common type" @ "inner arguments"
				@ "function template %cast_array" @ %Array,
				// Also to eliminate warning: [-Wsign-conversion], etc when \
					the arguments are of distinct integer types.
			/ @ "class template %string_traits" @ %String $=
			(
				/ $revert_ex(b483) "%string_type" ^ "%remove_rcv_t"
					~ "%decay_t",
				* "corrected pointer types" $since b592
					$= (/ $revert(b592) ^ "pointers based on %value_type"
						~ "%allocator_traits")
					// As an example, for array types of 'char', the \
						'const_pointer_type' should not be 'char* const*'.
			),
			/ %Optional $=
			(
				* $impl "ill-formed inheriting constructor declaration"
					@ "%optional base class template" $since b591,
					// Both G++ 4.9.2 and Clang++ 3.6 are happy but G++ 5.1 \
						complains.
				/ DLDI "merged declarations %((in_place_t, in_place), \
					%(nullopt_t, nullopt))"
			),
			/ DLDI "merged declarations %((defer_lock_t, defer_lock), \
				%(try_to_lock_t, try_to_lock), (adopt_lock_t, adopt_lock))"
					@ %PseudoMutex
		),
		/ "substitution macro %yconstexpr" @ !"'constexpr' supported"
			@ %YDefinition -> '' ~ 'const'
			// To avoid possible ill-formed program due to duplicate 'const'. \
				Note now it behaves differently with '_GLIBCXX_USE_CONSTEXPR' \
				of libstdc++.
	),
	/ %Tools $=
	(
		/ @ !"platform %Win32" @ %SHBuild.Main $=
		(
			(
			* "ill-formed string %empty call" @ $since b599,
			* $comp "ill-formed string decoding call" $since b592 $dep_from
				("%ystdex::string_traits::const_pointer"
				@ %YBase.YStandardEx.String);
			* "failed to build" $orig $since b586 $dep_from
				%YFramework.(YSLib.UI.YModules, YCLib.XCB)
			),
			* $comp "assertion failed for absolute path checking" $since b599
				$dep_from "absolute path checking failure"
		),
		/ %ProjectGenerator.Main $=
		(
			* "invalid %NormalizeDirectoryPathTail call" ^ "non-class type \
				result of %DecodeArg" @ !"platform %Win32" $since b599,
			- "'-Wpacked' option for projects generation"
		)
		/ %Scripts $=
		(
			(
			+ '$C_CXXFLAGS_PIC' @ ("begin" @ "default values") @ "variables \
				%(CFLAGS, CXXFLAGS, LDFLAGS)" @ "%SHBuild-common-options.sh";
			(
			- "independent %C_CXXFLAGS_PIC"
				@ "%(SHBuild-YSLib-debug.sh, SHBuild-YSLib-debug.sh)";
			* "missing '-fPIC' during dynamic library building with the \
				precompiled header" @ !"platform %Win32" $since b564
			),
			+ '$C_CXXFLAGS_PIC CXXFLAGS_IMPL_COMMON_THRD_' @ "value"
				@ "exported %LDFLAGS" @ "%SHBuild-YSLib-debug.sh",
			/ "set %$LDFLAGS_OPT_DBG as ' '" @ "debug configurations"
				@ "%SHBuild-BuildApp.sh" ~ "%LDFLAGS as ' '";
			/ $comp "enabled position independent code for all library and \
				user code" @ !"platform %Win32"
				// It is still reasonable for static libraries, e.g. to enable \
					being embedded in shared libraries.
			),
			+ '$CXXFLAGS_IMPL_COMMON_THRD_' @ "default value"
				@ "variable %LDFLAGS" @ "%SHBuild-common-options.sh";
			* "failed building dynamic libraries" $since b564,
				// It is strange that G++ 4.9.2 did not complain about missing \
					'-fPIC' and '-pthread' on linker command.
			- $build "warning option '-Wpacked'" @ "build scripts and common \
				makefiles" $dep_to "removal of -Wpacked"
		)
	),
	/ $re_ex(b598) DLDI "all string arguments 'u""' for non-dependent class \
		type parameters" -> '{}' $effective @ %YFramework.YSLib.UI.TextBox;
	/ $build "simplified makefiles by based on removal of '-Wpacked'"
		@ "platform %DS" $dep_from "removal of -Wpacked",
	/ %YReader $=
	(
		/ %Shells $=
		(
			/ $forced DLDI "image loading" $dep_from
				("%ScrDraw" @ %'Helper_(DS)'.DSMain),
			/ DLDI "simplified %Cleanup"
		),
		+ $dev $re_ex(b586) "out-of-line virtual destructors" @ ("class \
			%SwitchScreensButton" @ %ShlExplorer, "classes %(ShlHexBrowser, \
			ReaderBox, FileInfoPanel, ShlTextReader::BookmarkSession)"
			@ %ShlReader, "class %FrmAbout" @ %About, "class %BookmarkPanel"
			@ %BookmarkUI, "class %SettingPanel" @ %ReaderSettingUI,
			"class %ColorBox" @ %ColorPicker),
			// To eliminate Clang++ warning: [-Wweak-vtables].
		/ DLDI "member function %ShlExplorer::OnPaint",
			// To eliminate Clang++ warning: [-Wshorten-64-to-32].
		/ DLDI "cast to 'size_t'" @ "constructor %SettingPanel"
			@ %ReaderSettingUI,
			// To eliminate warning: [-Wsign-conversion].
		/ DLDI @ "class %HexViewArea" %HexBrowser $=
		(
			/ "cast to 'std::uint32_t'" @ "function %LocateViewPosition"
				// To eliminate Clang++ warning: [-Wshorten-64-to-32].
			/ "cast to prvalue for %ItemPerLine as argument of %min"
				@ "function %Refresh" @ %HexBrowser
				// To avoid odr-use cause linking failure because 'yconstexpr' \
					static member %ItemPerLine is never undefined.
		),
		/ @ "class %ShlTextReader" @ %ShlReader $=
		(
			/ DLDI "constructor %SettingSession::SettingSession",
				// To eliminate Clang++ warning: [-Wshadow], although it is \
					rarely possible to access a non-static member of the \
					enclosing class.
			/ "prevent propagate exception" @ "destructor %BaseSession"
				^ "%FilterExceptions"
		)
	),
	+ $forced $revert_ex(b590) $dev 'const' @ "variable defined using \
		'yconstexpr'" $dep_from "%yconstexpr" @ %YDefinition $effective
		@ "141 instances" @ %YBase.YStandardEx.(BitSegment, CStandardInteger,
		IntegerSequence, Iterator, Optional, PseudoMutex, String, Rational,
		Tuple, TypeOperation, Variadic, Utilities),
		YFramework.('Helper_(DS)'.DSMain, CHRLib.(Encoding, MappingEx,
		StaticMapping), Helper.(ShellHelper, Initialization, Environent),
		YCLib.(FileSystem, Host, HostedGUI, Keys, Video), YSLib.(Adaptor.Font,
		Core.(YClock, YConsole, YEvent, YMessage), Service.(FileSystem,
		TextBase, TextFile, TextManager), UI.(Animation, Hover, Menu, YGUI,
		YWidgetEvent, Scroll)), 'YCLib_(MinGW32)'.(MinGW32, NLS),
		YReader.(HexBrowser, Shells, ColorPicker, ShlExplorer))
),

b600
(
	/ %YBase.YStandardEx $=
	(
		/ %Path $=
		(
			/ @ "class template %path" $=
			(
				+ "base class 'totally_ordered<path<_tSeqCon, _tNorm>>'",
				/ "function %equals" -> "friend function %operaor==",
				/ "function %before" -> "friend function %operaor<",
				(
				+ "2 function %operator/=";
				+ "base classes ('dividable<path<_tSeqCon, _tNorm>, typename \
					_tSeqCon::value_type>',
					'dividable<path<_tSeqCon, _tNorm>>')"
				)
			),
			- "rational operation function templates for %path instances",
		),
		/ + '\f' @ "default arguments of array" @ "all 5 function templates \
			%(erase_left, erase_right, ltrim, rtrim, trim)" @ %String,
			// For locale "C" characters which make %std::isspace return \
				nonzero.
		+ %Pointer;
		/ "class templates %(pointer_iterator, pointer_classify)" @ %Iterator
			>> %Pointer,
		(
		/ "class template %nptr, function templates for %nptr instances"
			@ %Utility >> %Pointer;
		/ %Pointer $=
		(
		/ $dev "rational operators for class template %nptr except for \
			%operator(==, <)" -> "base class %totally_ordered<nptr<_type>>"
			@ "class template %nptr",
		/ "function templates %operator(<, ==) for %(nptr, pointer_iterator) \
			instances" -> "member functions with 'ynothrow'"
		)
		),
		/ $dev %BitSegment $=
		(
			/ "member functions (postfix %operator(++, --), %operator(+, -, \
				->, []))" -> "instance of %iterator_operators_t as base class"
				@ "class template %bitseg_iterator";
			- "rational operators for class template %bitseg_iterator except \
				for %operator(==, <)",
			/ "function templates %operator(==, <) for instances of \
				%bitseg_iterator" -> ("friend functions"
				@ "class template %bitseg_iterator with 'ynothrow'")
		),
		/ %Iterator $=
		(
			/ "all non-member (relational, compound assignment, arithmetic) \
				operator function templates" -> "friend functions" $effective
				@ "class templates %(pseudo_iterator, transformed_iterator, \
				subscriptive_iterator)",
			+ $dev 'yconstfn_relaxed' @ "conversion function to \
				'iterator_type&'" @ "class template %transformed_iterator"
		),
		/ %CStandardIO $=
		(
			+ $dev "explicitly defaulted copy %operator="
				@ "class %ifile_iterator",
				// To eliminate Clang++ warning: [-Wdeprecated].
			(
			/ "postfix %operator++, %operator->" -> "instance of \
				%iterator_operators_t as base class" @ "class %ifile_iterator";
			- "function operator!= for %ifie_iterator"
			)
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service $=
			(
				/ %FileSystem $=
				(
					/ @ "class %Path" $=
					(
						(
						+ "function %GetBaseRef";
						/ DLDI "simplified 2 functions %operator/=" ^ ($dep_from
							("%path::operator/=" @ %YBase.YStandardEx.Path),
							"macros %(PDefHOp, ImplRet)"),
						),
						+ $dev "base classes ('totally_ordered<Path>', \
							'dividable<Path, String>, 'dividable<Path>')",
						(
						+ "function %GetBase";
						/ $dev $impl "inlined and simplified friend functions \
							%operator(==, <)" ^ "%GetBase",
						),
						+ 'explicit' @ "constructors with string parameter"
							// To avoid ambiguity in %operator/, etc.
					),
					- "function %operator/ for %Path"
						// Also to avoid some subtle diagnostics.
					- "rational operation functions %operator(!=, <=, >, >=) \
						for %Path",
					/ $comp $impl "function %DeleteTree appended %string with \
						cast to %String" ~ "implicitly converted to %Path"
				),
				/ @ %File $=
				(
					/ "function template %operator<< for %File and string types"
						-> "inline function %operator for %File and %string",
					+ "function template %operator for %File and any other \
						types" ^ "%std::ostringstream"
				),
				+ DLDI 'ImplI(IImage)' @ "overrider %BasicImage::SetSize"
					@ %YGDI $dep_from %YBaseMacro,
					// To eliminate Clang++ 3.6 warning: \
						[-Winconsistent-missing-override].
				/ %TextRenderer $=
				(
					+ DLDI 'override' @ "overrider %TextRegion::GetContext"
						$dep_from %YBaseMacro,
						// To eliminate Clang++ 3.6 warning: \
							[-Winconsistent-missing-override].
					/ DLDI "explicit cast to 'SDst'" @ "member function \
						%TextRenderer::ClearLine"
						// To eliminate Clang++ warning: [-Wshorten-64-to-32].
				)
			),
			* "wrong node string compared" @ "function %IsPrefixedIndex"
				@ %Core.ValueNode
				$= (/ $re_ex(b599 )$impl "node string generation" ^ "%MakeIndex"
					~ "%to_string"),
			+ DLDI "'override' qualifiers" @ "setter overriders" @ "class %View"
				@ %UI.YWidgetView $dep_from %YBaseMacro
				// To eliminate Clang++ 3.6 warning: \
					[-Winconsistent-missing-override].
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				/ @ "function %Decompose" $=
				(
					/ DLDI "simplified" ^ "%string::front"
						~ "%string::substr",
					/ $comp "guaranteed '\f' trimmed" ^ $dep_from
						("%ystdex::ltrim" @ %YBase.YStandardEx.String)
				),
				(
				/ "ignored null character"
					@ "function %LexicalAnalyzer::ParseByte";
				* $comp "redundant string with single null character at end of \
					list of %Tokenize result for null-terminated character \
					array as source" $since b335 $dep_to "null character in \
					NPL units"
				),
				/ DLDI "simplified function %Literalize"
			),
			/ "function %operator for %File and %Configuration" @ %Configuration
				-> "function %operator<< for %std::ostream and %Configuration"
				$dep_from %YSLib.Service.File,
			/ %NPLA1 $=
			(
				/ DLDI "function template% InsertChildSyntaxNode#3"
					^ "%TransformToSyntaxNode" ~ "%NodeLiteral::GetSyntaxNode",
				(
				/ ("alias %NodeSequence" @ "namespace %NPL")
					>> ("namespace %YSLib" @ %ValueNode)
				+ 'using %YSLib::NodeSequence';
				)
				/ ("class %NodeLiteral" @ "namespace %NPL")
					>> ("namespace %YSLib" @ %ValueNode) $dep_from
					"removal of %NodeLiteral::GetSyntaxNode";
				+ 'using YSLib::NodeLiteral;'
			)
		),
		/ %Helper $=
		(
			/ %Initialization $=
			(
				/ @ "function %FetchMIMEBiMapping" $=
				(
					* $comp "corrupted MIME data generated" $since b597
						$dep_from "null character in NPL units"
						// After this fix the format is still wrong but it \
							would not crash. Note this also made '""' being \
							output at the 2nd line of output, it now \
							disappears intentionally.
					* $comp "wrong format of MIME data generated" $since b598
						$dep_from %YSLib.Core.ValueNode
				),
				/ DLDI "simplified function %LoadConfiguration" ^ $dep_from
					("%NodeLiteral" @ %YSLib.Core.ValueNode)
					~ "%(PackNodes, MakeNodes)",
				/ @ "function %FetchMIMEBiMapping" $=
				(
					+ $re(b594) DLDI 'ynothrow' @ "lambda expression pushed as \
						application exit callback",
					/ DLDI "push application exit callback only after resource \
						acquiring successfully"
						// Since otherwise the pointer is null, \
							delete-expression would do nothing, the observable \
							behavior would not change.
				),
				/ "functions %(ReadConfiguration, WriteConfiguration)"
					>> ("namespace %NPL" @ %NPL.Configuration)
			),
			/ %HostRenderer $=
			(
				/ DLDI "split evaluation of operand in 'typeid'"
					@ "member function %HostRenderer::InitWidgetView",
					// To eliminate Clang++ 3.6 warning: \
						[-Wpotentially-evaluated-expression].
				/ DLDI "renamed private member" @ "class %WindowThread"
					// To eliminate Clang++ warning: [-Wshadow].
			)
		),
		* $dev $build $impl "wrong returned value cast of %::ShllExecuteW"
			@ "function %ExecuteShellCommand" @ "platform %Win32"
			@ %YCLib.HostedGUI $since b592,
			// It would cause build failure on x86_64.
		+ "'_q' as first parameter for qualifier support"
			@ "all 8 macros 'DefSetter*'" @ %YBaseMacro,
		/ @ "function %ExpandEnvironmentStrings" @ %'YCLib_(MinGW32)'.MinGW32 $=
		(
			/ DLDI "explicitly cast to 'unsigned long' for \
				'::ExpandEnvironmentStringsW' argument"
				// To eliminate Clang++ warning: [-Wshorten-64-to-32].
			* $impl "strict ISO C++ compatibility" $since b594
				// See http://stackoverflow.com/questions/26888805/how-to-declare-a-lambdas-operator-as-noreturn .
				$= (- 'YB_NORETURN' @ "lambda expression")
		),

	),
	/ @ %Tool $=
	(
		/ %ProjectGenerator.Main $=
		(
			/ DLDI "simplified commands and library paths concatenation",
			/ $forced $dev $impl "path operations" $dep_from
				%YFramework.Service.FileSystem,
			/ DLDI "node syntax transformation" ^ "%TransformToSyntaxNode"
				~ "%NodeLiteral::GetSyntaxNode" $dep_to
				"removal of %NodeLiteral::GetSyntaxNode"
		),
		/ %SHBuild.Main $=
		(
			/ $forced $impl "path argument" $dep_from
				%YFramework.YSLib.Service.FileSystem,
			/ DLDI "makefile parsing"
				// To eliminate Clang++ warning: [-Wshadow].
		)
	),
	/ %YReader $=
	(
		/ $comp "bookmark names guaranteed trimmed '\f'" @ %ShlReader
			^ $dep_from ("%ystdex::ltrim" @ %YBase.YStandardEx.String);
		/ $forced "return type" @ "function %FetchDefaultShellDirectory"
			$dep_from %YFramework.YSLib.Service.FileSystem -> "%IO::Path"
			~ "%String",
		* $comp "crashed on read automatically generated MIME data" $since b597
			$dep_from %YFramework.Helper.Initialization
			// After this fix the file extension category based on MIME \
				mapping detected normally. 
	),
	/ "regenerated Code::Blocks projects" $effective @ %YBase,
	/ $forced "inserted qualifiers" @ "macro 'DefSetter' invocations" $dep_from
		%YFramework.YBaseMacro $effective @ %YFramework.(YSLib.(Core.(YDevice, \
		YGDIBase), Service.YGDI, UI.(Process, Scroll, Selector, YWidgetEvent, \
		YWidgetView, ComboList, YWiget)), YCLib.HostedGUI),
		YDE.ImageBrowser.ImageControl,
	/ $dev $build "toolchain and library using"
	(
		/ $re_ex(b520) "updated library %FreeImage" $=
		(
			(
			/ "updated base library 3.17.0" ~ "3.16.0";
			/ @ "file %Makefile.srcs" $=
			(
				/ 'VER_MINOR = 16.0' -> 'VER_MINOR = 17.0',
				/ $forced "updated %SRCS"
			)
			),
			/ "merged old modification",
			* "hard coded compiler for include file generation"
				@ "%Makefile.gnu" $since b562
				$= (/ "build %jsimdcfg.inc" ^ '$(CC)' ~ 'gcc'),
			/ $design "all '='" -> ':=' @ "makefiles",
			/ @ "%Makefile.mingw" $=
			(
				- $lib "some outdated comments",
				/ "allowed user-provided assembler by variable %NASM with 'yasm'
					as default value",
					// It seems that 'nasm' from MSYS2 does not work, 'yasm' \
						can be used instead.
				/ "allowed user-provided compiler and linker by variables \
					%(CC, CXX, LD)",
				/ "supported switching between i686 and x86_64 targets by \
					%MSYSTEM value 'MINGW32' and 'MINGW64'",
				/ "compiled '.o' with source extensions",
				* "empty %jsimdinc.h generated" $since b431,
					// This was not actually used since the file was \
						already copied to the source tree.
				(
				+ "flag %C_CXX_FLAGS with default value '-O3 -fdata-sections \
					-ffunction-sections -pipe -Wno-attributes -fexceptions \
					-DNDEBUG' and applied to %(CFLAGS, CXXFLAGS)";
				+ $comp "-fdata-sections -ffunction-sections"
					@ "%(CFLAGS, CXXFLAGS)"
				)
			),
			* "circular dependencies on assembly modules" $since b431
				$effective @ "%(Makefile.mingw, Makefile.gnu)"
				$= (+ '.SUFFIXES'),
			// There are nothing to update from new makefiles. \
				Particularity 'mkdir -p' does not work for 'cmd'.
			/ "removed external plugin initialization"
				@ "%Source/Plugin.cpp",
				// Also eliminated update for it.
			^ "libjpeg-turbo-1.4.0" @ "%Source/LibJPEG" $=
			(
				+ $forced '#define BITS_IN_JSAMPLE 8'
					@ "%(config.h, jconfig.h)",
					// Now libjepg-turbo supports 12-bit data, so it was \
						removed from "jmorecfg.h" to "jconfig.h". If not \
						defined, %::JSAMPER and other declarations are \
						missing, and the build would fail.
				/ "updated version numbers" @ "%jconfig.h",
				+ $forced "new file %jconfigint.h based on %jconfig.h",
				/ $forced "updated %Makefile.srcs"
			),
			^ "libpng-1.6.17 with old libpng-1.6.3 standard configuration \
				header file %Source/LibPNG/pnglibconf.h" ~ "libpng-1.6.12",
				$=
			(
				+ $forced '#define \
					PNG_WRITE_CUSTOMIZE_COMPRESSION_SUPPORTED'
					// Otherwise 'png_set_compression_level' would not be \
						declared.
				/ "updated value of macros %(PNG_USER_CHUNK_CACHE_MAX, \
					PNG_USER_CHUNK_MALLOC_MAX)"
			)
			// No other configuration update for libpng or libjpeg-turbo \
				needed currently. If Linux platforms are supported in future, \
				SIMD should be turned on by define 'WITH_SIMD'.
		),
		/ DLP "platform %MinGW32" $=
		(
			^ $re_ex(b520) "MinGW[gcc version 4.9.1 (Rev5, Built by MSYS2 \
				project)] mingw32/mingw-w64-i686-gcc-4.9.2-5" ~ "MinGW[gcc \
				version 4.8.2 (Rev1, Built by MSYS2 project)] \
				mingw32/mingw-w64-i686-gcc-4.9.1-1" @ "platform %MinGW32",
				// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
					Exceptions implementation: Dwarf2.
			^ "mingw-w64-i686-binutils 2.25-4 from MSYS2",
			/ $re_ex(b520) "recompiled library %FreeImage" $dep_from
				"updated library %FreeImage"
		),
		/ DLP "toolchain and library using" @ "platform %DS" $=
		(
			^ $re_ex(b558) "updated devkitARM release 44"
				~ "devkitARM release 43",
			^ $re_ex(b558) "updated libnds 1.5.8" ~ "libnds 1.5.7",
			^ $re_ex(b558) "updated default arm7 0.5.25"
				~ "default arm7 0.5.24",
			^ $re_ex(b558) "updated libfat 1.0.12" ~ "libfat 1.0.11";
			/ $re_ex(b520) "recompiled library %FreeImage" $dep_from
				"updated library %FreeImage"
		)
	),
	- $repo "all .a files"
		// To avoid enlarged the repository too much.
);

////

