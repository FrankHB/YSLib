/*
	© 2017 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.8.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.8 。
\version r1222
\author FrankHB <frankhb1989@gmail.com>
\since build 800
\par 创建时间:
	2017-08-10 01:58:36 +0800
\par 修改时间:
	2017-11-28 23:51 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.8'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b800, $now];

$now
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ "supported proper tail calls" @ (("function %ReduceOrdered"
					^ "%CheckNorm"; "function %ReduceChildrenOrdered")
					^ "%RelayNextActions", "function %Forms::Eval"
					^ "%ContextNode::SetupTail"),
				/ $forced DLDI "functions %(Forms::(If, And, Or), Reduce, \
					ReduceNested)" $dep_from ("%ContextNode::Reducer" @ %NPLA),
				/ $forced DLDI "functions %(ReduceOrdered, ReduceCombined, \
					Forms::(And, Or, If), /*StrictContextHandler::operator()*/)"
					$dep_from ("%RelayNextActions" @ %NPLA),
				/ @ "function %ReduceNested" $=
				(
					/ $forced DLDI $dep_from
						("%RelayNestedNextActions" @ %NPLA),
					/ DLDI ^ $dep_from "%ContextNode::(Push, Pop)";
					* "trailing actions wrongly dropped" $since b808
						^ $dep_from ("%ContextNode::Push" @ %NPLA),
				)
			),
			/ %NPLA $=
			(
				/ @ "class %ContextNode" $=
				(
					- "parameters" @ "type %Reducer, function %ApplyTail";
					(
					- $foced "1st parameter" @ "functions %(ApplyTail; \
						Rewrite)";
					/ $forced DLDI "function %RewriteGuarded"
					),
					/ $forced DLDI "function template %SetupBoundedTail",
					/ "%TailAction" => "%Current",
					+ "data member %Delimited; functions %(Push, Pop)"
				),
				/ "supported variadic arguments"
					@ "function template %ResumeCall",
				(
				/ $forced "function templates %(ReduceWithNextActions, \
					ReduceWithNestedNextActions)"
					-> "%RelayNextActions, RelayNestedNextActions" $dep_from
					"%(ContextNode::Reducer, ResumeCall)";
				/ $forced DLDI "function template %PushActionsRange" $dep_from
					"%ContextNode::Reducer"
				),
				/ "all forwarding function templates" ^ "%invoke" ~ "%call"
					$effective @ "%(ResumeCall, RelayNextActions, \
					PushActionsRange)" $dep_from %YBase.YStandardEx.Functional
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		- DLDI "unused parameter" @ "function templates %(owns_any, \
			owns_nonnull)#1" @ %Memory
			// To eliminate Clang++ warning: [-Wunused-parameter].
		/ %Functional $=
		(
			/ @ "class template %call_projection" $=
			(
				/ $dev "trailing-return-type"
					@ "all static member function templates" ^ 'yimpl',
				/ "static member function templates %(call, invoke) for tuple \
					instances" => "%(apply_call, apply_invoke)"
					// To reduce potential ambiguity.
			);
			/ "disambiguated %(invoke, apply_call, apply_invoke)"
				@ "class template %expand_proxy" $=
			(
				+ "using-declaration",
				+ "function template"
			)
		)
	)
),

b809
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			+ "function template %ResumeCall",
			+ DLDI 'const' @ "reducer parameter type" @ "setup tail action"
				@ "function template %ReduceWithNextActions",
			/ "return type 'ReductionStatus'" -> 'void' @ ("function templates \
				%(ReduceWithNestedNextActions; ReduceWithNextActions)"
				^ $dep_from "%ResumeCall"), "(function template %PushRange; \
				function %Push), function template %SetupBoundedTail; function \
				template %SetupTail",
				// Since this is not always returns across term boundries, \
					it should better not imply a default status.
			+ "function %SetupAction";
			/ "member function %ContextNode::Push, member function \
				template %PushRange)" -> "(function %PushActions, function \
				template %PushActionsRange) which saving current tail \
				action before next reduction"
				^ "%(ReduceWithNestedNextActions, SetupAction)")
			),
			* "wrong use of 'std::move' on next action" @ "function template \
				%ReduceWithNestedNextActions" $since b808,
			+ '&&' @ "parameter" @ "function template %(SetupTail, \
				SetupBoundedTail)" @ "class %ContextNode"
				// To avoid excessive memory allocation, also better \
					performance for debugging.
		),
		/ %NPLA1 $=
		(
			/ DLDI "avoided call of %ReduceChildrenOrdered for leaf node"
				@ "function %ReduceOrdered",
				// A minor optimization.
			* "stray retrying status possibly left not reduced"
				@ "functions %(ReduceChildrenOrdered; ReduceOrdered)" $since
				b807 ^ "%ReduceChecked" ~ "%Reduce",
				// Other functions are not effected since only these ones \
					are intended to be bound to forms like '$sequence' \
					directly.
			/ $forced DLDI "functions %(ReduceCombined, ReduceChecked, \
				Forms::(And, Or, If))" $dep_from
				("%ReduceWithNextActions" @ %NPLA),
			/ $forced DLDI "function %ReduceAgain" $dep_from
				("%ContextNode::SetupBoundedTail" @ %NPLA),
			/ @ "function %ReduceChildren#1" $=
			(
				* "missing keeping precondition for %Reduce" $since b807
					^ "%ystdex::swap_guard" $dep_to
					"saved tail action before children reduction",
				* "missing keeping full reduction on retrying status"
					$since b807 ^ "%ReduceChecked" ~ "%Reduce"
			),
			(
			/ "function %ReduceOnce" $=
			(
				/ $forced DLDI $dep_from ("%ContextNode::Push" @ %NPLA);
				/ $comp "saved current tail action before leaf and branch \
					reduction"
			);
			/ $forced DLDI $dep_from @ "function %ReduceNested"
				("%ReduceWithNestedNextActions" @ %NPLA),
				// Some tail actions are still lost. This is to be resolved \
					with more actions differentiated for different activation \
					records.
			/ "function %ReduceCombined" $=
			(
				/ $impl "simplified";
				/ $comp $forced DLDI $dep_from
					("%ReduceWithNextActions" @ %NPLA)
			)
			),
			/ DLDI "internal extractor" ^ "non-throwing exception \
				specifications" @ "function %ReduceCombined"
		)
	)
),

b808
(
	/ "function templates %(unique_guard, unique_state_guard)"
		%YBase.YStandard.ScopeGuard $=
	(
		* $revert_ex(b779) "empty state forwarded by default" $since b779
			$dep_to "invalid guard initialization",
			// This broke compatibility as well as consistency with \
				%ystdex::make_guard.
		* "missing arguments" @ "exception specification" $since b779
	),
	* $comp "guard disabled without non-empty state passed to \
		%ystdex::unique_ptr" $since b779 $dep_from
		"invalid guard initialization" $effective @ ("function template \
		%AddExitGuard" @ %YSLib.Core.YApplication, "static member function \
		%WindowThread::DefaultGenerateGuard" @ %Helper.HostRenderer,
		"member function %DirectoryFindData::GetNodeCategory"
		@ %YCLib_(Win32).MinGW32) @ %YFramework,
	/ %YFramework $=
	(
		/ @ "constructor templates with function object"
			@ "class template specialization %GHEvent" @ %YSLib.Core.YEvent $=
		(
			(
			/ $revert(b494) "direct '_fCallable'"
				-> "rvalue references for callable type '_fCallable&&'"
				@ "constructor %GHEvent with precisely matched callable object \
				parameter";
				// Move-only functions are now supported by a style of \
					forwarding call wrapper. See $2014-04 @ \
					%Documentation::Workflow::Annual2014. This is also \
					consistent to avoid the bug below.
			* $comp "ambiguity for imprecisely match function object as 1st \
				argument to construct" $since b494
				// For example, an instance of %std::bind result.
			),
			* "missing decaying target type" @ "%enable_if_t test" $since b494
		),
		/ %NPL $=
		(
			+ "function templates %(ReduceWithNextActions; \
				ReduceWithNestedNextActions)" @ %NPLA,
			/ %NPLA1 $=
			(
				/ "supported proper tail calls" $=
				(
					/ @ "functions %ReduceNested"
						^ $dep_from ("%ReduceWithNestedNextActions" @ %NPLA),
					/ @ "functions %((Forms::(If, And, Or)), ReduceCombined)"
						^ $dep_from ("%ReduceWithNextActions" @ %NPLA)
				),
				/ @ "function %ReduceFirst" $=
				(
					/ DLDI ^ $dep_from "%ReduceNested";
					* "invalid state set for branch node"
						@ "function %ReduceFirst" $since b807
						// The wrong behavior was caused by the bug of \
							%ystdex::unique_guard. However, the real bug here \
							is originally a typo to misuse 'unique_guard' \
							instead of 'make_guard', even if now it should \
							dismiss the guard to cleanup the tail action in \
							time when retrying is needed. This is also \
							corrected in an inactive referential implementaion \
							protected by 'false' conditional inclusion in \
							%ReduceNested.
				),
				/ DLDI "simplified function %ReduceAgain"
					^ "%ContextNode::SetupBoundedTail",
				/ "reduced directly on term parameter"
					~ "reduced in new term and copied back the result"
					@ "function %ReduceCheckedClosure"
					// This makes it easy to transform to CPS style, also \
						more efficient for direct-style calls.
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		* $re_ex(b750) "missing check for first element in non empty sequence"
			@ "function templates %for_each_if" @ %Algorithm
			$since b531,
			// The bug fix was still wrong since b750 because of typo.
		* "missing wrapping to move iterator" @ "function template %concat#2"
			@ %Container $since b546
	)
),

b807
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "functions %(CombineReductionResult; \
					CombineSequenceReductionResult)",
				/ DLDI "simplified member function %PassesCombiner::operator()"
					^ $dep_from "%CombineReductionResult",
				/ @ "class %ContextNode" $=
				(
					(
					+ "function %Switch";
					/ DLDI "simplified function %ApplyTail" ^ "%Switch",
					),
					(
						+ "function template %SetupBoundedTail",
						+ "function template %PushRange" ^ $dep_from
							"%(CombineSequenceReductionResult, Switch)";
						+ "function function %Push" ^ "%PushRange"
					),
					/ @ "function %Rewrite" $=
					(
						/ "lifted reduce parameter out of loop"
							^ "%SetupTail" $dep_from "decoupling reduction \
							status",
							// This depends on correct state management on \
								tail action.
						(
						/ "loop invariant" ^ "%TailAction" ~ "%CheckReducible";
							// See $2017-10 @ \
								%Documentation::Workflow::Annual2017.
						/ $forced "return value determination" ^ "%CheckNorm"
							~ "%TailAction call results"
							// This is consistent to new loop invariant.
						)
					)
				)
			),
			/ %NPLA1 $=
			(
				(
				+ "function %ReduceNested";
				/ @ "function %ReductionFirst" $=
				(
					/ DLDI "function %ReduceFirst" ^ "%ReduceNested" $dep_to
						"direct nested reduction";
					/ $impl "deferred reduction" ^ "%ContextNode::SetupTail"
						~ "%ReduceNested"
						// This does not require %ReduceNested but it is \
							preserved for reference.
				)
				),
				/ @ "function %ReduceOnce" $=
				(
					/ "expanded handlers as tail calls" ^ ($dep_from
						("%ContextNode::Push" ~ "%ContextNode::SetupTail")
						@ %NPLA) $dep_from "direct nested reduction";
					* $comp "local term and context parameter not bound in \
						continuations" @ "function %CallOnce" $since b806
						// Thus it could be wrong when not in the loop of \
							%Context::Rewrite directly.
				),
				(
				+ "function %ReduceAgain" ^ $dep_from
					("%ContextNode::PrependTail" @ %NPLA);
				/ "trivial retrying" ^ "%ReduceAgain" @ %NPLA1 $effective
					@ ("functions %(ReduceOnce, ReduceTail, ReduceLeafToken, \
					Forms::(And, Or, If))") $dep_to
					"decoupling reduction status"
					// This decouples reduction status as condition of loop in \
						rewriting and as jump action to specific target. Now \
						no %ReduceOnce is implicitly depended as the default \
						reduction action.
				),
				/ $comp "%Reduce allowed returning %ReductionStatus::Retrying"
					$dep_from ("%ContextNode::Rewrite" @ %NPLA)
			)
		)
	),
	* "wrong template argument" @ "return type" @ "function templates \
		%unique_guard" @ %YBase.YStandardEx.ScopeGuard $since b686
),

b806
(
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				* "wrong toolchain default value"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b791) $=
				(
					* "missing setting default value 'g++' for variable %CXX",
					* "missing setting variables %(AR, ARFLAGS, LD)",
						// This can occasionally work for %SHBuild except %LD \
							which has value in the script different than \
							default value in %SHBuild.
					* "missing export variables %(CXX, AR, ARFLAGS, LD)"
				),
				* "missing filtered out dynamic library build options for \
					application executable building" @ "%LDFLAGS" $since b805,
				+ "applicative %SHBuild_GetPlatformStrings"
			),
			/ DLDI "simplified %SHBuild-YSLib-build.txt" ^ $dep_from
				("%SHBuild_GetPlatformStrings" @ "%SHBuild-YSLib-common.txt")
		)
	),
	* $impl "ill-formed 'const auto' as function declarator"
		@ "function template %extract_mapped with traling-return-type"
		@ %YBase.YStandard.Container $since b792
		// This was a typo. As per N4687 [dcl.fct]/2, only a single 'auto' is \
			allowed here. Though G++ accepts it, Microsoft VC++ 2017 complains \
			it correctly with (one case which is not well-documented of) error \
			C3551.
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			+ "function %MoveContent" @ "class %ValueNode" @ %ValueNode,
			+ "friend function %swap" @ "class template %GHEvent" @ %YEvent
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ 'using YSLib::set',
				/ @ "class %LexicalAnalyzer" $=
				(
					/ DLDI "simplified" ^ "brace-initializer '{}', \
						defaulted constructor",
					+ "function %GetLeftQuotes",
					/ "stored left quote positions" @ "function %ParseByte"
				),
				/ DLDI "function %Tokenize" ^ "%string::front" ~ '[0]'
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ "applicative %SHBuild_TrimOptions_" @ "loading forms" $=
				(
					* "subsequent spaces in quoted string wrongly replaced \
						as single space" $since b796,
					* "redundant spaces wrongly added token containing \
						left quote" ^ $dep_from
						("%LexicalAnalyzer::GetLeftQuotes" @ %Lexical)
						// This has efffect on '-I"path"', which would be \
							wrongly converted to deprecated form \
							'-I "path"' (though it still worked).
				),
				/ DLDI "simplified recored getting by cacheing result of \
					%ContextNode::GetRecordRef"
			),
			/ %NPLA $=
			(
				(
				/ DLDI "simplified function %LiftTerm with 2 %TermNode \
					reference parameters" -> "inline function" ^ $dep_from
					("%ValueNode::MoveContent" @ %YSLib.Core.ValueNode);
				+ 'ynothrow' @ "all 3 functions %LiftTerm"
				),
				/ @ "class %ContextNode" $=
				(
					+ "alias %Reducer";
					+ "data member %TailAction";
					+ "function template %SetupTail",
					+ "functions %(ApplyTail; Rewrite, RewriteGuarded)"
						^ $dep_from "%TailAction"
				)
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified %ContextNode::GetBindingsRef call"
					@ "vau handler" @ "namespace %Forms",
				/ "direct reduction for proper tail call"
					@ "functions %ReduceTail" ^ "%ReductionStatus::Retrying"
					~ "recursive %Reduce call",
				(
				+ "function %ReduceOnce with perper tail calls" $=
				(
					// This is exact the %Reduce without outer loop, with some \
						tail call considerations. The calls of tail contexts \
						now use parent context directly, which should be \
						equivalent to previous implementation.
					/ $impl "direct proper tail call"
						^ "%ReductionStatus::Retrying",
					/ $impl "reduction of evaluation passes for perper tail \
						call" ^ $dep_from ("%ContextNode::SetupTail" @ %NPLA)
				);
				/ DLDI "simplified function %Reduce" ^ $dep_from
					("%ReduceOnce", "%ContextNodeRewrite" @ %NPLA),
					// Now the loop is implemented in %ContextNode::Rewrite. \
						It is easier to implement proper tail calls.
				/ $forced $impl "functions %(ReduceFirst, ReduceChecked, \
					ReduceChildren, ReduceChildrenOrdered, \
					 REPLContext::(LoadFrom#2, Process#3))"
					^ $dep_from "%ReduceContextGuarded"
				)
			)
		)
	)
),

b805
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service $=
			(
				+ "function templates %(SkipBOM; OpenSkippedBOMtream)"
					@ %TextFile,
				/ @ "class %SharedInputMappedFileStream" @ %File $=
				(
					/ $revert(b804) "reverted as nonmovable class" $=
					(
						- "move constructor";
						* $comp "invalid state of lock after move"
							@ "move constructor" $since b804,
							// This would cause invalid reference on \
								%UniqueFile.
						/ "base class %SharedIndirectLock<const UniqueFile>"
							-> "%SharedIndirectLockGuard<const UniqueFile>"
					),
					/ "%operator bool" -> ('using basic_ios::operator!;',
						'using basic_ios::operator bool;'),
					* $comp "seeking did not work" $since b724 $dep_from
						("%basic_membuf" @ %YBase.YStandardEx.StreamBuffer)
				)
			),
			/ $re_add(b774) @ "class %ValueNode" @ %Core.ValueNode $=
			(
				// Avoid redundant object creation like unifying assignment. \
					Note even with WG21 P0135R1, the construction of parameter \
					will still not be elided.
				/ "constructor with 1 container parameter"
					-> "2 constructors with container reference parameter"
				/ "constructor template with container parameter as 1st \
					parameter" -> "2 constructors template with container \
					reference parameter as 1st parameter"
			)
		),
		/ %NPL $=
		(
			+ "function template %TryLoadSouce" @ %NPLA1,
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					/ "applicative 'nullv?'" => 'nullrv?',
						// To be consistent with 'eqv?' and 'eqr?'.
					+ "applicative 'system-quote'",
					/ "applicatives %(SHBuild_EchoVar_N, SHBuild_BuildGCH)"
						>> ("%SHBuild-YSLib-common.txt" @ %Tools.Scripts)
				)
			)
		)
	),
	/ %Tools $=
	(
		/ %SHBuld.Main $=
		(
			/ $forced DLDI "simplified command 'RunNPLFile'" $dep_from
				("move constructor %SharedInputMappedFileStream"
				@ %YFramework.YSLib.Service.File)
				$= (/ DLDI ^ $dep_from ("%OpenSkippedBOMtream"
					@ %YFramework.YSLib.Service.TextFile)),
			/ DLDI "simplified command 'RunNPL', 'RunNPLFile'" ^ $dep_from
				("%TryLoadSouce" @ %YFramework.NPL.NPLA1)
		),
		/ %Scripts $=
		(
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				* DLDI "redundant %AR assignment"
					$orig (@ "SHBuild-YSLib-common.sh" $since b795),
				/ $forced DLDI $dep_from
					('build-with-conf-opt' @ "%SHBuild-YSLib-common.txt"),
				* "missing quotes for %SHBuild commond from environment \
					%SHBuild" $orig (@ "%SHBuild-YSLib-common.sh"$since b791)
					// This should not cause troble normally because it was \
						mostly only used internally, although it was a real bug.
					$= (/ $impl ^ $dep_from
						('system-quote' %YFramework.NPL.Dependency))
			),
			/ @ "applicative 'build-with-conf-opt'"
				@ "%SHBuild-YSLib-common.txt" $=
			(
				(
				+ "application mode support";
				+ "'-mwindows' and detection output" @ "%LDFLAGS"
					@ "application mode and %SHBuild_NoAdjustSubsystem is not \
					set" @ "platform %Win32"
				),
				/ DLDI "simplified applicative 'system-or-puts'"
			),
			- "exports %(SHBuild_YSLib_LibNames, SHBuild_YSLib_Flags, \
				SHBuild_Debug, SHBuild_Static)" @ "%SHBuild-YSLib-BuildApp.sh"
		)
	),
	* "missing protected overrider %(seekoff, seekpos)"
		@ "class template %basic_membuf" @ %YBase.YStandardEx.StreamBuffer
		$since b711
),

b804
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					+ "functions %(Equal, EqualLeaf)",
					/ "extended %EqualValue of list comparison for object \
						language"
				),
				/ DLDI "simplified" ^ '<const TermReference>'
					~ "%ystdex::as_const" $effective
					"functions %Forms::(Cons, Eval)"
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					* $comp "applicative 'eqv?' always resulted in #t for lists"
						$since b789 $dep_from ("%Forms::EqualValue" @ %NPLA1),
					(
					+ "applicative 'eql'?" $dep_from
						("%Forms::EqualLeaf" @ %NPLA1);
					/ DLDI "applicative 'not?'" ^ 'eql?' ~ 'eqv?'
						// This is efficient as before.
					),
					+ "applicative 'eq?'" $dep_from ("%Forms::Equal" @ %NPLA1),
					+ "applicative 'eqr?'"
				)
			),
			/ %NPLA $=
			(
				/ DLDI "explicitly qualified 'const'" ^ '<const TermReference>'
					$effective "functions %(ReferenceTerm#1, LiftTermOrRef, \
					LiftTermRefToSelf, LiftToReference)",
				(
				/ "avoided special handling for %TokenValue"
					@ "lifting routines" $=
				(
				/ "functions %LiftTermRef#(1, 2)" ^ "%ValueObject"
					~ "%LiftTermObject";
				/ $comp "all type of values are treated the same"
				);
				- "function %LiftTermObject"
				),
				/ @ "class %ContextNode" $=
				(
					+ DLDI "brace-initializer '{}'" @ "data member %Trace",
					+ "copying %Trace" @ "copy constructor" $dep_from
						%YFramework.YCLib.Debug,
					(
					* "missing swapping of %Trace" @ "function %swap" $since
						b803 ^ $dep_from ("%swap" @ %YCLib.Debug);
					* $comp "missing moving of %Trace" @ "move constructor"
						$since b803
					)
				)
			)
		),
		* "deleted move constructor" @ "class %SharedInputMappedFileStream"
			@ %YSLib.Service.File $since b724 $=
		(
			(
			/ $impl ^ "%SharedIndirectLock" ~ "%SharedIndirectLockGuard";
			/ $forced DLDI "constructor with 1 parameter",
			),
			+ "move constructor"
				// Implicit one would still does not work for %std::basic_ios. \
					It is still not necessary to initialize the base \
					%std::basic_ios instance explicitly for semantic reasons.
		),
		/ @ "class %Logger" $=
		(
			* "missing copying %FilterLevel" @ "(copy, move) constructors"
				@ %YCLib.Debug $since b803,
			(
			+ "friend function %swap";
			/ DLDI "simplified move constructor" ^ "%swap"
			)
		)
	),
	/ %Tools $=
	(
		/ "main function" @ %SHBuild.Main $=
		(
			/ @ "command 'RunNPLFile'" $=
			(
				+ "shared input stream support" ^ "%SharedInputMappedFileStream"
					~ "%ifstream",
				+ "support for ignoring UTF BOM" $dep_from
					%YFramework.YSLib.Service.File
			)
			* "unexpected NPLA1 tracing messages" @ "running command 'RunNPL' \
				or 'RunNPLFile'" @ "stage 1 execution" $since b803 $dep_from
				("copy constructor %ContextNode" @ %YFramework.NPL.NPLA)
				// See $2017-09 @ %Documentation::Workflow::Annual2017.
				$= (/ $impl "setting filter level to %Informative" ~ "%Debug")
		),
		/ %Scripts $=
		(
			/ @ "%(SHBuild-YSLib-common.txt, SHBuild-YSLib-build.txt)" $=
			(
				/ $lib $design "normalized *.txt with CR+LF EOL",
				/ "saved *.txt as UTF-8 + BOM" $dep_from %SHBuild.Main
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				* "operatives ('$assert-nonempty', '$set-system-var!')"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b795),
				* "operative '$env-de!'"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b791)
			)
		),
		* $comp "failed 1st stage boostraping caused by exception raised by \
			mismatched type of unevaluated symbols" $since b803 $dep_from
			(('$assert-nonempt', '$set-system-var!', '$env-de!')
			@ "%SHBuild-YSLib-common.txt" @ %Scripts)
			// Mangled type names \
				'N6ystdex14derived_entityINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJN3NPL7NPLATagEEEE' \
				and 'NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE' are \
				shown in exception message (of %ystdex::bad_any_cast) in case \
				using libstdc++.
	)
),

b803
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "function templates %(TraverseSubnodes, PrintContainedNodes; \
					TraverseNodeChildAndPrint)",
				/ DLDI "simplified function %PrintNode" ^ $dep_from
					"%TraverseSubnodes",
				(
				/ DLDI "simplified function %PrintNodeChild" ^ $dep_from
					"%TraverseNodeChildAndPrint" ~ "%PrintNodeChild";
				- "function %PrintNodeChild"
				),
				- "all 2 function templates %InvokePasses",
				+ "data member 'YSLib::Logger Trace;'" @ "class %ContextNode"
					$dep_from ("class %Logger" @ %YCLib.Debug),
				(
				+ "function %LiftTermOrRefToSelf";
				/ DLDI "function %(LiftTermToSelf, LiftToOther)"
					^ "%LiftTermRefToSelf" ~ "%LiftTermOrRef"
				)
			),
			/ %NPLA1 $=
			(
				(
				/ DLDI "function %Reduce" ^ "%ContextNode members"
					~ "functions %(InvokeGuard, InvokeList, InvokeLeaf)";
				- "functions %(InvokeGuard, InvokeList, InvokeLeaf)"
				),
				- "function %AccessLiteralPassesRef" $dep_from %Dependency,
				(
				/ DLDI "function %EvaluateLeafToken"
					^ "%ContextNode::EvaluateLiteral"
					~ "function %InvokeLiteral";
				- "function %InvokeLiteral"
				),
				(
				/ DLDI ^ "%ContextNode members"
					~ "functions %(AccessListPassesRef, AccessLeafPassesRef)"
					@ "function %SetupDefaultInterpretation";
				- "functions %(AccessListPassesRef, AccessLeafPassesRef)"
				),
				(
				/ DLDI ^ "%ContextNode::Guard" ~ "function \
					%AccessGuardPassesRef" @ "function %SetupTraceDepth";
				- "function %AccessGuardPassesRef"
				),
				/ @ "namespace %Forms" $=
				(
					/ "simplified trace" ^ $dep_from ("%ContextNode::Trace"
						@ %NPLA) ~ "%YTraceDe",
					/ "all non boolean condition treated as '#t'"
						@ "function %If",
					/ "%function %Eval" $=
					(
						/ $impl ^ "%AccessPtr" ~ "%LiftToOther";
						* "unexpected recursive evluations on symbol terms"
							$since b772;
							// The fix would break some code which wrongly \
								assumed it to work.
						* $comp "always convert lvalue operands to \
							rvalues recursively" $since b800,
						// The fix also reduces performance penalty on deep \
							tree transformation of the operand.
					),
					/ DLDI "simplified functions %(Vau, VauWithEnvironment)"
						^ "%ReferenceTerm" ~ "%LiftToSelf",
					/ "operands handling"
						@ "functions %(MatchParameter, BindParameter)" $=
					(
						/ $impl ^ $dep_from ("%LiftTermRefToSelf" @ %NPLA)
							~ "%LiftToSelf";
						* $comp "redundant lvalue-to-rvalue conversion on \
							unbound recursive terms" $since b800
					)
				)
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI ^ "%ContextNode::EvaluateLiteral"
					~ "function %AccessLiteralPassesRef",
				/ DLDI @ "loading forms" $=
				(
					+ $doc "guarantee of no evaluation of bodies"
						@ "operatives ('$vau', '$vaue', '$lambda', '$lambdae')";
					/ "simplified alternative derivation"
						@ "operative '$sequence'" ^ '$set!' ~ '$setrec!',
					/ "simplified operatives ('$defl!', '$defw!')" ^ '$defv!'
						~ ('$def!', '$vau'),
					/ "simplified applicatives %(first, rest, apply)" ^ '$defl!'
						~ ('$def!', '$lambda'),
					/ "simplified applicatives ('list*', %(accl, accr))"
						^ '$defl!' ~ ('$defrec!', '$lambda'),
					/ "simplified operatives ('$cond', '$let*')" ^ '$defv!'
						~ ('$defrec!', '$vau')
				)
			)
		),
		/ %YCLib.Debug $=
		(
			/ @ "class %Logger" $=
			(
				+ DLDI "brace-initializer '{}'" @ "mutex member";
				+ $lib 'DefDeCtor(Logger)';
				+ "constructors allowing specifying filter and sender",
				+ "(copy, move) (constructors; %operator=)"
			),
			/ DLDI "simplified destructor %AndroidLogSender"
				@ "platform %Android" ^ "%ImplDeDtor"
		)
	),
	* "'$if' applicative" @ %Documentation.NPL $since b792
		$dep_from ("%Forms::If" @ %YFramework.NPL.NPLA1)
		// The text contradicted with Scheme RnRS, but was consistent with \
			implementation. This is now corrected after %Forms::If modification.
),

b802
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				* "empty lists and symbols could not be referenced" $since b800
					// They are now true first-class objects.
					$= (/ $impl "simplified by referencing term directly"
						@ "function %EvaluateIdentifier"),
				/ @ "namespace %Forms" $=
				(
					* "missing lvalue support" @ "function %MakeEnvironment"
						$since b800 ^ "%ReferenceTerm",
					/ DLDI "protected term reference against unexpected \
						modification on %ReferenceTerm result" @ "functions \
						%(EqualReference, EqualValue, Cons)"
						^ "%ystdex::as_const",
					/ DLDI "simplified vau handlers" $dep_from
						^ "%ReduceCheckedClosure" ~ "%CheckNorm",
					* "unsafe evaluation" @ "function %Eval"
						$since b772 ^ "%ReduceCheckedClosure" ~ "%Reduce"
						// See $2017-09 @ %Documentation::Workflow::Annual2017.
				),
				/ $lib "supported external contexts" @ "class %REPLContext" $=
				(
					(
					+ "3 functions %Prepare";
					(
					+ "2 functions %ReadFrom";
					/ "all 2 functions %LoadFrom" -> "function templates"
						^ "%ReadFrom" ~ "%Process"
					),
					/ "all 2 function without term node" -> "function templates"
						^ "%ReadFrom" ~ "%Reduce"
					),
					(
					+ "function %Process with term node and context parameter";
					/ $dev $design $impl "simplified function %Process with \
						term node parameter" ^ "newly added overload"
					)
				),
				/ "function %ReduceCheckedClosure returned %ReductionStatus \
					value based on resulted term" ^ "%CheckNorm"
			),
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				+ "operative '$lambdae'",
				+ "applicatives 'lock-environment'; \
					'make-standard-environment'",
					// Alternative implementation of standard environment \
						construction without dependency on environment locking \
						is also provided. Nevertheless, with environment \
						locking, it is simpler a lot.
				/ $dev $impl "simplified alternative derivation"
					@ "operative '$sequence'" ^ $dep_from
					'make-standard-environment',
				/ $impl @ "applicative 'map-reverse'" $=
				(
					* "invalid exposure of %cxrs" $since b791 ^ ('$let',
						$dep_from 'make-standard-environment'),
					/ "simplified" ^ $dep_from '$lambdae'
				),
				+ $impl 'ynothrow' @ "handler"
					@ "applicative 'weaken-environment'"
			),
			/ @ "function template %ComposeReferencedTermOp" @ %NPLA $=
			(
				/ $dev "trailing-return-type" ^ 'yimpl';
				/ "accepted non-unary functions" ^ "%ystdex::compose_n"
					~ "%ystdex::compose"
			)
		)
	),
	* "strict ISO C++ conformance on declaration of primary template" $effective
		@ "using of %std::hash" @ %YBase.YStandardEx.(Memory, Optional, \
		Rational, StringView) $since b590
		// This behavior was undefined. For clarification, see https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/6VNskbSBRIs.
),

b801
(
	+ $re_add(b705) $dev $repo "tag 'V0.8' to revision 672",
	/ %YFramework $=
	(
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			/ DLDI "member function %FileInfo::Read" ^ 'ythrow' ~ 'throw',
				// Also to eliminate G++ warning: [-Wdeprecated].
			/ $re_add(b793) DLI "marked fallthrough" @ "constructor %FileInfo"
				^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ @ "class %Partition" $=
			(
				/ @ "private constructor" $=
				(
					+ DLDI "'YB_NONNULL' attribute for 1st parameter",
					/ "exception messages",
					^ "nested exceptions with %std::errc::io_error on reading \
						failure for verification and finding"
					* "partition initialzation faliure on verifying FAT \
						partition when the 0 sector is not ready and the \
						master partition is valid and readable" $since b611
						// See $2017-08 @ %Documentation::Workflow::Annual2017.
				),
				/ $lib $design "asserting string" @ "function %CreateFSInfo",
			)
		),
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				/ DLDI "simplified subterms cleanup"
					!^ "%TermNode::LiftTerm" @ "functions %(And, Or)",
				(
				/ @ "exception messages"
					@ "functions %(ReduceCombined, MatchParameter)" $=
				(
					/ $impl ^ $dep_from ("%TermToString" @ %NPLA);
					/ $comp "compressed external representation of term \
						with subnode number",
				);
				/ $comp "term represented as name if possible"
					@ "exception messages" @ "function %MatchParameter"
				)
			),
			+ "functor %ReferenceTermOp; function template \
				%ComposeReferencedTermOp" @ %NPLA,
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				+ "applicative 'null?'" => 'nullv?';
				+ "applicative 'null?'" ^ $dep_from
					("%ComposeReferencedTermOp" @ %NPLA)
			)
		),
		* "missing %release call on %UniqueFile after initialization success"
			@ '!__GLIBCXX__' @ "constructor %basic_filebuf with %UniqueFile \
			parameter" @  %YCLib.FileIO $since b709
			// This bug would leave a bad file descriptor in the stream buffer \
				after the constructor call.
	),
	/ %Tools $=
	(
		/ %ProjectGenerator.Main $=
		(
			+ $re_add(b794) '-Wno-noexcept-type' @ "options",
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			* "wrong prefixes for paths in link creation destinations for \
				generatoed .cbp file of YSTest %debug_DLL configurations" $since
				b739
				// This would cause correct .dll files not found on running \
					the built executable files.
		);
		/ $re_ex(b700) "regenerated Code::Blocks projects"
			^ ("%GenerateProjects.sh" @ %Scripts)
	),
	/ %YBase.YStandardEx $=
	(
		* "wrong allocator for internal map violated allocator-aware container \
			requirement on %value_type" @ "class template %mapped_set"
			@ %Set $since b665,
		/ "supported forwarding reference parameters"
			@ "all 3 function templates %quote" @ %String
	)
),

b800
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "class %TermReference, 2 functions %ReferenceTerm; 2 \
					function templates %(AccessTermPtr, AccessTerm), functions \
					%(LiftTermOrRef; LiftToSelf; LiftToOther)",
				/ "function %ReferenceValue" -> "%LiftToReference" $dep_from
					"%LiftTermOrRef",
				- "all 3 functions %LiftTermRef" $dep_from
					("%EvaluateIdentifier" @ %NPLA1),
			),
			/ %NPLA1 $=
			(
				- 'const' @ "return type" @ "function %ResolveName",
				/ @ "namespace %Forms" $=
				(
					+ "type" @ "exception message"
						@ "functions %(WrapOnce, Unwrap)",
					+ "function %ResolveEnvironment for %TermNode reference"
						^ $dep_from ("%ReferenceTerm" @ %NPLA),
					/ "handled %TermReference to allow reference value used as \
						first-class object" $=
					(
						/ "function %(ReduceCombined, Forms::(And, Or, If))"
							^ $dep_from ("%AccessTermPtr" @ %NPLA)
							~ "%AccessPtr",
						/ "functions %Forms::(VauWithEnvironment, Eval)"
							^ $dep_from "%ResolveEnvironment",
						/ "function templates %Forms::(CallUnaryAs, \
							CallBinaryAs, CallBinaryFold)" ^ $dep_from
							("%NPL::AccessTerm" @ %NPLA),
						/ "functions %Forms::(Eval, ValueOf)" ^ $dep_from
							("%LiftToOther" @ %NPLA) ~ "%LiftTerm"
							// See $2017-08 @ \
								%Documentation::Workflow::Annual2017.
						/ "function %Forms(DefineLazy, DefineWithNoRecursion, \
							DefineWithRecursion, Lambda, Vau, \
							VauWithEnvironment)" ^ $dep_from "%LiftToSelf",
						/ "functions %Forms::(EqualReference, \
							EqualValue, MatchParameter, BindParameter, \
							ReduceCheckedClosure)" ^ $dep_from
							("%ReferenceTerm" @ %NPLA),
						/ "handled reference term" @ "function %Forms::Cons"
					);
					* "list reference cannot be replaced as real lvalue"
						@ "function %EvaluateIdentifier" $since b768 $dep_from
						"%ResolveName"
						$= (/ $revert_ex(b799) $impl ^ ($dep_from
							"%(ReferenceTerm, TermReference)" @ %NPLA)
							~ "%LiftTermRef")
					),
					/ $comp ("allowed returning list as last element"
						~ "non-list value") @ "function %Or"
				)
			),
			/ $forced DLDI "handled %TermReference" @ "loading forms"
				@ "function %LoadNPLContextForSHBuild"
				@ %Dependency $dep_from ("%EvaluateIdentifier" @ %NPLA1) $=
			(
				/ "%ref" ^ (("%LiftToReference" ~ "%ReferenceValue") @ %NPLA),
				/ 'bound?' ^ $dep_from ("%AccessTermPtr" @ %NPLA)
					~ "%AccessPtr",
				/ ('string<-', 'regex-match?') ^ $dep_from
					("%AccessTerm" @ %NPLA) ~ "%Access"
			)
		),
		/ %YCLib $=
		(
			/ "limited %FAT::LFN::(MaxLength, MaxMBCSLength) value as '255'"
				 @ FileSystem,
				// See $2017-08 @ %Documentation::Workflow::Annual2017.
			/ @ "platform %DS" @ %NativeAPI $=
			(
				+ "worked arounded missing %__sync_synchronize stub for \
					devkitARM r46",
					// See https://devkitpro.org/viewtopic.php?f=13&t=8643&start=10.
				/ $impl ^ "%::isDSiMode" ~ "%::__dsimode" $dep_from
					"libnds update"
			),
			/ @ "function %omode_conv with %std::ios_base::openmode parameter"
				@ %FileIO $=
			(
				/ $impl "simplified" ^ "%OpenMode::CreateExclusive"
					~ "%OpenMode::(Create, Exclusive)";
				* "wrong result for %platform::ios_nocreate"  $since b722
			),
			/ $re_add(b793) "marked fallthrough" @ "function \
				%ExecuteShellCommand" @ "platform %Win32" @ %HostedGUI
				^ "%YB_ATTR_fallthrough"
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		),
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			* "wrong check for exclusively creation flags"
				@ "constructor %FileInfo" $since b722,
			(
			/ @ "class %DEntry" $=
			(
				/ DLDI "simplified function %QueryNextFrom"
					$= (- "redundant volume check"),
				/ @ "constructors" $=
				(
					* "name position not correctly initialized for all cases \
						require the value" $since b656,
					* "missing keeping last component name after check for path"
						@ $since b656;
					* $comp "%std::errc::not_a_directory thrown for leaf with \
						%OpenMode::CreateExclusive" $since b721
						// The value of %errno is overriden later.
				)
			);
			* $comp "%Partition::IncrementPosition assertion failure"
				@ "%debug configurations" $since b762
			)
		),
		/ $re_add(b793) "marked fallthrough" @ "function \
			%TryCategorizeNodeDevice" @ %'Helper_(Win32)'.MinGW32
			^ "%YB_ATTR_fallthrough",
			// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		/ DLDI "cast to %SDst" @ %YSLib.Service.TextRenderer
			// To eliminate warning: [-Wsign-conversion].
	),
	/ %Tools $=
	(
		/ @ "default value" @ "variable %CXXFLAGS_IMPL_WARNING"
			@ "%Toolchain.options.mk" @ %Scripts $=
		(
			+ $re_add(b794) '-Wno-noexcept-type',
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			+ '-Wno-ignored-attributes'
				// To eliminate G++ 7 warning: [-Wignored-attributes] which is \
					enabled by default. It is at least offending to \
					%PixelQuadruple in %YFramework.YCLib.Viedo and being hard \
					to turned off by pragma in single file since it may \
					propagate in template declarations.
		),
		/ %RevisionPatcher.Main $=
		(
			* "wrongly ignored newly added files"
				@ %RevisionPatcher.Main $since b791
				$= (/ $revert_ex(b791) $impl "detected prefix without 'a/'"),
			/ $re_add(b793) "marked fallthrough" ^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ DLDI "simplified patched lines filtering"
		)
	),
	/ %YBase.LibDefect $=
	(
		/ %String $=
		(
			+ "support of %_GLIBCXX_USE_CXX11_ABI detection",
			+ "support of %_GLIBCXX_USE_C99_STDLIB detection"
		),
		+ "support of GCC greater than 7.0 which has bug 58938 fixed"
			@ %Exception,
			// NOTE: Other headers like %YBase.YStandard.Future are still to \
				be updated. Currently these features are not required at lease \
				on platform %DS.
		+ "support of %__ISO_C_VISIBLE detection" @ 'defined(_NEWLIB_VERSION)'
			@ %CStandardIO
			// To eliminate GCC warning: [-Wredundant-decls].
	),
	* $comp "file creation failure with %errno value 138" @ "platform %DS"
		@ "function %LoadNPLA1File" @ %Helper.Initialization $since b721
		$dep_from ("constructors %DEntry" @ %'YCLib_(DS)'.DSIO)
		// See also %'YCLib_(DS)'.DSIO correction for %FileInfo constructor \
			which is hidden by this bug.
	/ $re_ex(b700) "updated %SUBTITLE2 year" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	/ $re_ex(b700) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts);
);

////

