/*
	© 2017-2018 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.8.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.8 。
\version r3633
\author FrankHB <frankhb1989@gmail.com>
\since build 800
\par 创建时间:
	2017-08-10 01:58:36 +0800
\par 修改时间:
	2018-06-29 23:37 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.8'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b800, $now];

$now
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ "all 2 function %Collapse" $=
			(
				/ "return type 'TermReference'" -> 'pair<TermReference, bool>';
				/ "exposed initial status of reference by 2nd compoment of \
					return type"
			);
			+ "function %ResolveIdentifier",
			+ 'explicit' @ "conversion operator" @ "class %TermReference",
			// To make ease of overloading resolution on constructors.
			- $lib "redundant assertion of %AssertBranch"
				@ "function %ReduceBranchToList",
				// This is preferre by indirection one in %RemoveHead, and \
					also makes it consistent with implementation of \
					%ReduceBranchToListValue.
		),
		/ %NPLA1 $=
		(
			/ @ "namespace %Forms" $=
			(
				/ @ "function %BindParameter" $=
				(
					* "inconsistent binding for sigil '%' versus '&'" $since
						b828,
					/ DLI "optimized copy bindings with sigil '&'"
						^ "reference move" ~ "reference copy",
					/ "moved value for sigil '&' on list rvalue operand"
						$dep_to "binding list reference by value moving"
						// In this case it always create dangling refrerence \
							after term cleanup. So copy is necessary. \
							Otherwise there have to be a lot cumbersome \
							instance of 'idv' for each rvalue list argument \
							bound to '&' parameter. This also is consistent to \
							behavior of retaining of 'list%'.
				),
				/ $forced DLDI "functions %(Cons, ConsRef)" $dep_from
					("%TermReference" @ %NPLA),
				* "missing indirected value test" @ "functions %(And, Or, If)"
					$since b800
			),
			/ @ "function %EvaluateIdentifier" $=
			(
				/ $forced "simplified" ^ ($dep_from
					"%ResolveIdentifier") $dep_from "%TermReference" @ %NPLA;
				* $comp "inconsistent promotion of prvalues" $since b828
					// This could cause the held values moved away from the \
						environment by bindings.
			),
			(
			/ "improved TCO"  $=
			(
				/ DLI "disabled weak roots by default",
					// They are not used currently.
				/ "supported saving of temporary operands" $=
				(
					(
					+ "saved active frame operand" @ "TCO action";
					+ "temporary operand trasferring"
					),
					/ @ "environment switching"
					(
						/ "frame record list element type";
						+ "temporary operand cleanup"
					);
				);
				+ "universe insertion of temporary operands for TCO action"
					@ "%operator()" @ "vau handler",
				+ "detection for saved operand of TCO action and used its \
					anchor for %TermReference constructed from rvalue operands"
					@ "function %Forms::BindParameter"
			);
			* "missing preserving operands before switching to new environment \
				and overrding term" @ "functions %Forms::(Eval, \
				EvalRef), %operator() of vau handlers" $orig
				(@ "%Forms::Lambda" $since b735)
			)
		),
		/ @ "derivated loading forms" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			(
			+ "applicative 'resolve-identifier'" ^ $dep_from
				("%ResolveIdentifier" @ %NPLA) $dep_from
				("%EvaluateIdentifier" @ %NPLA1);
			* $comp "wrong environment used to evaluate lvalues"
				@ "applicative %forward" $since b828 ^ 'resolve-identifier';
			(
			* "invalid access of prvalue members" @ "applicative 'first%'"
				$dep_from "%forward" $dep_to "forwarding member access";
				// This would usually crash.
			- $revert(b828) "applicative %forward",
			/ DLI "optimized applicative 'unfoldable?'" ^ 'rest%' ~ "%rest"
			),
			+ "applicative 'list*%'" $dep_all_from
				"binding list reference by value moving"
			),
			/ "supported passing reference result" @ "operatives ('$when', \
				'$unless')" $impl ^ ('$defv%!', 'eval%') ~ ('$defv!', "%eval"),
			/ "supported forwarding reference result" ^ $dep_from "%forward"
				$dep_all_from "binding list reference by value moving" $=
			(
				@ "applicatives %(accl, accr)" $impl ^ '$defl%!' ~ '$defl!',
				(
				@ "applicative %foldr1" $impl ^ ('$defl%!', 'first%', 'rest%')
					~ ('$defl!', "%(first, rest)") $dep_from
					("%accr", "forwarding member access");
				(
				@ "applicative 'list-concat'" $impl ^ 'cons%' ~ "%cons";
				@ "applicative %append"
				),
				@ "applicative %map1" $impl ^ ('$defw%!', 'cons%', 'eval%')
					~ ('$defw!', "%(cons, eval)");
				@ "applicative '$let'" $impl ^ ('eval%', '$defv%!', $dep_from
					'list*%', "%idv", '$lambda%', 'first%') ~ ("%eval",
					'$defv!', 'list*', '$lambda', "%first", 'list-rest');
				@ "applicative '$let*'" $impl ^ ('eval%', '$defv%!', 'list%',
					$dep_from 'list*%', "%idv", 'first%', 'rest%')
					~ ("%eval", '$defv!', "%list", 'list*', "%(first, rest)")
				)
			),
			/ DLDI "simplified applicative 'bound?'",
			/ DLDI "qualified with 'const'" @ "template parameter"
				@ "function template %RegisterStrictUnary to get immutable \
				values" $effective @ "applicative 'weaken-environment'",
			- "applicative 'list-rest'" $dep_from '$let',
			/ DLI "optimized applicative 'first-null?'" ^ 'first%' ~ "%first",
			+ "applicative %move",
			/ $forced DLDI "applicative 'unfoldable?'" $dep_from "%accr"
				^ $dep_from "%forward"
		)
	)
),

b828
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			* $impl "invalid 'yconstfn_relaxed' used" @ "static member \
				function %Environment::DefaultRedirect" $since b798,
			(
			+ "function %LiftTermOnRef";
			/ "function %LiftTermRefToSelf" $=
			(
				/ DLDI "simplified" ^ "%LiftTermOnRef";
				/ "return type" -> 'bool' ~ 'void'
			),
			/ DLDI "simplified function %LiftToReference" ^ "%LiftTermOnRef"
			),
			- $revert(b800) "function %LiftTermOrRef",
			* DD "'\throw' command" @ "Doxygen comment"
				@ "function %LiftToReference" $mismatch $since b822,
			+ "functions %((LiftToReturn, RegularizeTerm; \
				ReduceForClosureResult), IsReferenceTerm)",
			/ DLI "referent of parameter type" @ "all 2 function templates \
				%AccessTerm" -> "%TermNode" ~ "%ValueNode",
			(
			/ @ "class %TermReference" $=
			(
				+ $impl "data member to distinguish value initialized from a \
					reference term";
					// Now lvalue reference and rvalue reference can be \
						distinguished.
				+ "member function %IsTermReferenced",
				(
				+ "2 constructors with explicit mark of reference term";
				/ DLDI "simplified all 2 constructors without explicit mark of \
					reference term" ^ "%IsReferenceTerm"
				),
				+ "constructor with explicit mark of reference term and \
					%TermReference value"
			);
			+ "2 functions %Collapse respecting to mark of reference term"
			),
			+ "function %IsLValueTerm" ^ $dep_from
				"%TermReference::IsTermReferenced"
		),
		/ %NPLA1 $=
		(
			* "invlaid container access" @ "function prvalue handling" @ "TCO"
				@ "environment switching" since b825,
			/ @ "namespace %Forms"=
			(
				/ @ "function %BindParameter" $=
				(
					* "empty name bound for parameter '.&', or '&'" $since b822,
					/ "trailing sequence binding" $=
					(
						/ DLDI "avoided unnecessary container from creation",
						+ "parameter of copy",
							// This allows copy by reference.
						/ $revert_ex(b821) "symbol binding" !^ "%LiftToSelf",
							// See above. %LiftToSelf now only remains using \
								in parameter tree.
					),
					/ "object binding" $=
					(
						(
						+ $forced "copy parameter" $dep_from
							"object copy parameter";
						/ $impl "optimized passed by value"
							^ "%(YSLib::SetContentWith, ValueObject::MakeCopy, \
							ValueObject::MakeMove)"
							~ "%(LiftToSelf, LiftTermIndirection)";
						+ "copy for object passed by reference" $dep_from
							"object copy parameter",
						/ "supported one level indirection" ~ "recursive \
							lifting" $dep_to "object value lifting",
						* $comp "reference almost always passed by move \
							instead of copy" $since b803,
							// %ValueObject::MakeMoveCopy basically does not \
								work because the object can be in the \
								environment (as a lvalue or part of it to be \
								accessed by name), or there can be other \
								referece unknown by the object.
						),
						/ $forced DLDI "simplified handler parameter type"
							$dep_from "simplified object parameter handler type"
					),
					/ $forced DLDI "explicitly set '{}' for copy" $dep_from
						"top-level parameter copy control",
					/ DLDI "simplified with extracted templated code of both \
						handlers",
					/ "support of prefixed '&'" -> "sigils ('&', '%')" $dep_to
						"sigil bindings" $=
					(
						/ "supported bindings of nested lvalues by '&'",
							// This ensures accessors can handle \
								subobjects of lists properly (i.e. getting \
								reference values without undefined \
								behavior) without lifting the results.
						+ "prefix '%'"
							// The sigil '%' is different to '&' as it \
								remains the value category.
					)
				),
				/ @ "function %MatchParameter" $=
				(
					/ "list parameter matching" $=
					(
						/ "deferred indirection access after traling \
							parameter check",
						* "desructive binding" $since b800
							!^ "%LiftTermRefToSelf" $dep_to
							"fixed invalid reference binding in list",
						(
						/ "aforehand recursive binding of list element"
							-> "explicit resolution of one level \
								indirection of %TermReference copy"
								$dep_from "object value lifting",
							// This is more similar to both C++ and 'box' \
								in Scheme-like dialects, though it may be \
								unsafe to binding multiple level of \
								reference when the indirection is \
								performed only once.
						+ $forced "copy parameter" @ "sequence parameter \
							handler" $dep_from ("parameter of copy"
							@ "trailing sequence binding"
							@ "function %BindParameter");
						/ $comp "supported binding of referenced list \
							subnodes by copy"
						)
					),
					+ "copy parameter to protected operand being moved"
						$dep_to "top-level parameter copy control",
					/ @ "function type" @ "object parameter handler" $=
					(
						+ "copy parameter 'bool'" $dep_to
							"object copy parameter",
						/ "simplified 2nd parameter" ^ 'TermNode&'
							~ 'TermNode&&' $dep_to
							"simplified object parameter handler type"
					)
				)
			),
			/ "result lifting" @ "end of closure" $dep_to
				"result regulation" $=
			(
				(
				/ $impl "simplified" ^ "%ReduceForClosureResult"
					~ "%LiftToSelfSafe";
				/ $comp "resoved only outermost one level reference \
					instead of recursive resolution on reference"
					// Similar to parameter matching, result of a call now \
						also reserves indirect references.
				),
				/ DLDI "simplified" ^ ("%RegularizeTerm" @ %NPLA)
			),
			+ "5th parameter 'bool' specifying whether to lift the result"
				@ "function %ReduceCheckedClosure",
			/ @ "function %EvaluateIdentifier" $=
			(
				/ $impl "simplified %EvaluateIdentifier" ^ $dep_from
					("%Collapse#2" @ %NPLA);
				/ $comp "supported tracking of value category represented \
					by term"
			)
		),
		/ @ "derivated loading forms" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			(
			/ "combiners ('$vau&', '$vaue&', '$lambda&', '$lambdae&', \
				'$defv&!', '$defl&!', '$defw&!', 'eval&', 'cons&', 'list%')"
				=> ('$vau%', '$vaue%', '$lambda%', '$lambdae%', '$defv%!',
				'$defl%!', '$defw%!', 'eval%', 'cons%', 'list%');
			* "references not kept in result" @ "alternative derivation"
				@ "operative '$seqence'" $since b789 ^ $impl ('cons&',
				'eval%', 'vaue%', 'vau%'),
			/ DLI "operative '$quote'" ^ '$vau%' ~ '$vau',
			+ "alternative derivation" @ "applicative 'list%'" ^ '$vau%',
			+ "alternative derivations" @ "applicatives (%list, 'list%')"
				^ "('$lambda', '$lambda%')"
			),
			/ $forced DLDI "alternative derivation" @ "applicative %list"
				$dep_from ("result regulation", "%BindParameter" @ %NPLA1),
				// The single symbol for lifting does not work any longer \
					to behave as %NPL::ReduceBranchToListValue.
			+ "applicatives %(id, idv)"
				^ ($dep_from ("%LiftToReturn" @ %NPLA), "sigil bindings"),
			+ "applicative 'reference?'" ^ $dep_from
				("%IsReferenceTerm" @ %NPLA),
			+ "applicative 'lvalue?'" ^ $dep_from ("%IsLValueTerm" @ %NPLA),
			+ "applicatives ('rest%', 'rest&')" $dep_from ("fixed invalid \
				reference binding in list", "%BindParameter" @ %NPLA1),
			(
			+ "applicative 'first&'",
			+ "applicative (%forward; 'first%')" ^ $dep_from
				('lvalue?', "%idv"),
			/ "supported passing reference result" $dep_from ("fixed \
				invalid reference binding in list", "sigil bindings") $=
			(
				// Without the dependency, the behavior is undefined \
					because it would access the object was destructed by \
					binding.
				@ "applicative %apply" $impl ^ $dep_from ('$defl%!', 'eval%',
					'cons%', 'first&') ~ ('$defl!', "%(eval, cons, first)");
				@ "operative '$cond'" $impl ^ $dep_from ('$defv%!', '$lambda%',
					'eval%') ~ ('$defv!', '$lambda', "%eval")
			)
		)
	),
	/ %Tools $=
	(
		* $comp "stage 1 SHBuild would crash on build" $since b725
			$dep_from ("environment switching" @ %YFramework.NPL.NPLA1),
		* $re_ex(b739) "missing Win32 source file" @ "%SHBuild-bootstrap.sh"
			@ %Scripts $since b735
			// Though %Registry.cpp is not directly used by default (being \
				optimized), it would go wrong if called by custom script \
				with debug options.
	)
),

b827
(
	/ DLB "3rdparty files" @ "Microsoft VC++ project" $=
	(
		* "wrong directorie in paths" $since b700,
		* "missing removing unused files" $since b826
			// On the other hand, Code::Blocks project files would be regenerated \
				on release.
	),
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ DLI "avoided redundant anchor reference of weakly held parent \
				environment" @ "vau handlers",
			/ "improved TCO" @ "environment switching" $=
			(
				* "missing remove entry for newly added temporary object"
					$since b825,
				// See $2018-06 @ %Documentation::Workflow::Annual2018.
				/ $revert_ex(b886) "refactored entry of TCO frame checking";
				/ "suppored collection of indirect referenced environments by \
					separated record compressor"
					~ ("check loop" @ "basic frame record list traverse")
			),
			/ "all functions %(ResolveName, 2 ResolveEnvironment)" >> %NPLA
		),
		/ $comp "supported PTC" @ "alternative derivation"
			@ "operative '$sequence'" @ "derivated loading forms"
			@ "function %LoadNPLContextForSHBuild" @ %Dependency
	)
),

b826
(
	+ $dev $impl "workaround of GCC issue 85792" @ "class template %optional"
		@ %YBase.YStandardEx.Optional,
		// To eliminate G++ 8.1.0 warning: [-Wctor-dtor-privacy]. See \
			https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85792.
	/ DLB "file %3rdparty/freetype/build/config.mk" $=
	(
		+ "support of non-Windows toolchains"
			$= (- "removed '.exe' postfix on commands"),
		/ $impl ^ "prefix"
	),
	/ %YFramework $=
	(
		/ $dev $impl "local type name" @ "static member function %is_parent"
			@ "trait %PathTraits" @ %YSLib.Core.FileSystem,
			// To eliminate G++ 8.1.0 warning: [-Wshadow].
		/ $forced DLDI ^ ('void*' ~ 'int') @ "opaque file information \
			descriptor" @ "device operation table" @ "platform %DS"
			@ %'YCLib_(DS)'.DSIO $dep_from "devkitARM r48",
			// NOTE: The %DSIO implementation change is required since \
				devkitARM r46 (otherwise it would not compile).
		/ DLB $impl @ "platform %DS" @ %YCLib.NativeAPI $=
		(
			+ $forced "declaration %__io_dsisd",
			/ $forced ^ ("%::isDSiMode" ~ "%::__dsimode") $dep_from
				"devkitARM r48",
				// NOTE: %::get_io_dsisd is not used due to linking problem. \
					The %DSIO implementation change is required since \
					devkitARM r46 (otherwise it would not compile).
			+ 'const' @ "declaration %_io_dldi_stub",
			+ "weak definition %__secure_area__"
		)
	),
	(
	(
	/ DLB "removed targets generated from 'objcopy -O binary'"
		@ "all DS makefiles";
		// See $2018-02 @ %Documentation::Workflow::Annual2018.
	+ $forced $build '-h 0x200' @ "%ndstool command" @ "makefile"
		@ "platform %DS" @ %YSTest,
		// See $2018-02 @ %Documentation::Workflow::Annual2018.
	),
	+ "touch screen initialization" @ "main function" @ %YReader.Main_ARM7
		@ "project %YSTest_ARM7";
		// Otherwise the touch screen would not be responsible after devkitARM \
			and libnds update.
	/ DLP "toolchain and library using" $=
	(
		/ @ "platform %DS" $=
		(
			/ "installing source" ^ "devkitPro official pacman repositories";
				// See %Documentation::Dependencies. See \
					https://devkitpro.org/viewtopic.php?f=13&t=8711&sid=b0e9dc739b08dc00b42a5be10a7ef61e for annoucement.
			^ $re_ex(b662) "updated devkitARM release 48"
				~ "devkitARM release 45" $dep_to "devkitARM r48",
			^ $re_ex(b662) "updated libnds 1.7.2" ~ "libnds 1.5.12"
		),
		(
		(
		/ DLB "optimized %CFLAGS" @ "freetype";
		/ DLP "updated library %freetype" @ "library using"
			$= (^ $re_ex(b700) "updated freetype 2.9.1 with several files \
				remained from freetype 2.4.11" ~ "freetype 2.6.3")
			// See [Documentation::Dependencies @@2.2.3].
		),
		- "unused freetype headers";
		/ "updated library %freetype" @ "platforms %(DS, MinGW32)"
			$dep_from "3rdparty libraries"
			$= (^ $re_ex(b700) "updated freetype 2.9.1 with several files \
				remained from freetype 2.4.11" ~ "freetype 2.6.3")
			// See [Documentation::Dependencies @@2.2.4].
		)
	)
	),
	/ @ "%.clang-format" $=
	(
		+ $re_ex(b665) $fmt 'SpaceAfterTemplate: false',
			// This requires newer 'clang-foramt' since then. See wiki page \
				%Development.zh-CN.md for update.
		+ "copyright notice"
	),
	/ $dev $repo $re_add(b688) "all edited file with module name not the same \
		as base filename" ^ 'hg mv' $effective
		@ %YReader.Main_ARM7.("%main.cpp" => "%Main.cpp")
),

b825
(
	/ %YBase.YStandardEx $=
	(
		+ $revert_ex(b823)  "'CHAR_MIN < 0' detection"
			@ "functions %(tolower, toupper)" @ %CCharacterType,
			// To eliminate G++ warning: [-Wtype-limits], as in %iscntrl_C0.
		* "potential wrong comparison results" @ "function template %ntctsicmp"
			@ %CString $since b823 ^ "%ystdex::towlower" ~ "%ystdex::tolower",
		/ DLDI "simplified unary trait %is_decayed" @ %TypeTraits
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				- DLDI "redundant 'typename'" @ "class %ValueNode"
					@ %ValueNode,
				/ @ "class template %GHEvent" @ %YEvent $=
				(
					/ DLDI ^ "static assertion to ensure decayed functor type \
						for equality",
					/ "constructor with function type of \
						%ystdex::make_expanded handled equality" $dep_to
						"expanded equality of handlers"
				)
			),
			+ DLDI "workaround for nonconforming %ftell return type"
				@ %Adaptor.Image
				// Both ISO C and POSIX require the %ftell returning 'long'. \
					However, the newlib declaration from devkitARM r48 breaks \
					the conformance by using %off_t and it is equivalent to \
					'long long' rather than 'long' in devkitARM r48. See also \
					https://github.com/devkitPro/newlib/issues/5.
		),
		(
		* $comp "potential wrong case insensitive filename comparison results"
			@ %YCLib.FileSystem $since b823 $dep_from
			("%ntctsicmp" @ %YBase.YStandardEx.String);
		* $comp "failed to load typefaces" @ "platform %DS"
			@ %Helper.Initialization $since b823
		),
		/ DLDI "simplified alias declarations and inclusion directives"
			@ %CHRLib.CharacterProcessing,
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ $revert_ex(b823) "'CHAR_MIN < 0' detection"
					@ "function %IsDelimeter";
					// Also to eliminate G++ warning: [-Wtype-limits].
				/ "functions %(IsGraphicalDelimeter, IsDelimeter)"
					-> "%(IsGraphicalDelimiter, IsDelimiter)";
				/ $forced DLDI "function %Decompose"
			),
			/ @ "class %Environment" @ %NPLA $=
			(
				+ "member function %GetAnchorPtr",
					// Similar to %EnvironmentReference::GetAnchorPtr.
				+ "static member function %Deduplicate"
			),
			/ %NPLA1 $=
			(
				* "lifetime of dynamic environments unnecessarily kept" $since
					b823
					// For PTC of invocation of 'f' in \
						'$defl! f (n) $seq2 n (f n);', while '$seq2' is from \
						'$defv! $seq2 (x y) env eval (list $sequence x y) env'.
					$= (- "TCO dynamic anchors" @ "vau handlers"),
				* "wrong result of %Forms::EqualValue result for functors"
					$dep_from "expanded equality of handlers" $since b748,
				/ DLDI "simplified type of guards" @ "TCO action"
					^ "%ContextHandler" ~ "%ValueObject",
				/ "improved TCO" @ "environment switching" $=
				(
					* "prvalue function value compression dropped order \
						guarantee" $since b824 ^ "%ystdex::erase_all" $dep_from
						"TCO action",
						// The old handler was kept. This is corrected by \
							always emplacement at end, deduplication and then \
							adding the new value by swapping (with respect to \
							strong exception guarantee).
					/ DLDI "simplified" !^ "lambda-expression",
					* "unexpected copying of handlers" $since b824,
					(
					/ "allocated function prvalue of head term in frame of \
						activation records";
					/ $comp "allowed optimized lifetime adjust of function \
						prvalues"
					* $comp "lifetime of temporary object introduced by \
						function prvalues interleaved across call boundaries"
						$mismatch $since b821
					),
					* "impossible parent weak pointers compression" $since b823
						^ $dep_from ("%Environment::GetAnchorPtr" @ %NPLA),
						// The reference count would never meet the condition \
							of %Environment::IsNotReferenced.
					/ DLDI "simplified frame merging" ^ $dep_from
						("%Environment::Deduplicate" @ %NPLA),
					/ "supported collection of fram with more than one level \
						parent indirection"
						// It still allows one frame per collection turn only, \
							so cyclic references of environment are not \
							collected; however, this is alread undefined \
							behavior in object language.
				),
				/ "removed environment term to cleanup reference counter"
					@ "functions %Forms::(Eval, EvalRef)"
			),
			/ @ "function %LoadNPLContextForSHBuild" @ "derivated loading forms"
				@ %Dependency $=
			(
				/ $revert_ex(b823) DLB $impl "simplified for 'CHAR_MIN < 0' \
					detection" ^ "%ystdex::tolower" ~ "%std::to_lower"
					@ "applicative 'string-contains-ci?'",
					// To eliminate G++ warning: [-Wtype-limits].
				* $comp "wrong 'eqv?' result of comparison on functions"
					$since b759 $dep_from ("%Forms::EqualValue" @ %NPLA1)
					// For instance, the value of 'eqv? eq? eqv?' was \
						'#t'.
			)
		)
	),
	* $re_ex(b823) "contract violated by missing exclusion of invalid value \
		for %std::tolower" @ "extension comparison for files"
		@ "getting entry type" @ %YReader.ShlExplorer $since b390
		^ "%ystdex::tolower" ~ "%std::tolower",
		// See ISO C11 7.4/1.
	* $build "missing commented out redundant '-ldswifi7 -lmm7'"
		@ "variable %LIBS" @ "ARM7 makefile" @ "project %YSTest"
		@ "platform %DS" $orig (@ "project makefile") $mismatch $since b132
		// The libraries DS Wifi and MaxMod were never publicly used as \
			dependencies.
),

/ b824
(
	/ %YBase.YStandardEx $=
	(
		/ %Functor $=
		(
			* "wrong %second_argument_type as %result_type" @ "binary functors"
				@ %Functor $since b656,
			/ "functor %ref_eq" $=
			(
				(
				/ $impl ^ "macro";
				+ $comp "specialization for %void",
				+ $comp "types %(first_argument_type, second_type, result_type)"
					@ "primary template"
				),
				* "parameter type wrongly qualified by 'const'" $orig
					(@ %Utilities $since b193),
				* "possibly wrong result for types with overloaded %operator&"
					^ "ystdex::constfn_addressof" (@ %Utilities $since b193)
			)
		),
		/ %Functional $=
		(
			/ @ "functor %get_less" $=
			(
				/ $impl "alias template" -> "template"
				+ "default temlate argument 'void'",
				+ "specialization for %void"
			),
			+ "functor %get_equal_to"
		)
	),
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ DLDI "simplified friend function %operator==" @ "class %TermValue"
				^ $dep_from ("%ystdex::ref_eq" @ %YBase.YStandardEx.Functor),
			+ "equality comparison operations" @ "class %EnvironmentReference"
				$=
			(
				+ "friend function %operator==";
				+ "private base class \
					%ystdex::equality_comparable<EnvironmentReference>"
			),
			+ "function %GetAnchorPtr" @ "class %Environment"
		),
		/ %NPLA1 $=
		(
			/ DLDI "simplified functions %(ReduceOrdered, Forms::(And, Or, \
				If))",
			/ "TCO" @ "function %ReduceCombiner" $=
			(
				* "dead loop" @ "compressing frames" @ "TCO" $since b823,
				/ DLI "optimized" !^ "%unique_ptr",
				/ "avoided keep duplicate combiner prvalue in guard" $dep_from
					"vau equality"
			),
			* "clousre construction moved name of term" @ "vau handler" $since
				b769,
				// This would cause empty name violating the convention of term.
			* "missing leaf element transformation"
				@ "function %TransformForSeparatorRecursive" $since b736,
			/ @ "functions %(TransformForSeparator, \
				TransformForSeparatorRecursive)" $=
			(
				/ "transformed terms with single subterm directly as a single \
					subterm without enclosing list term"
					// This guarantees the transformed result is optimized, \
						consistent with the term after lifted like in \
						%ReduceOnce. For example, 'f; f n' is transformed as \
						'$sequence n (f n)', rather than '$sequence (n) (f n)'.
				+ "overloads with 'TermNode&&' parameter" $dep_to
					"destructive separator transformation",
				/ DLDI "simplified" ^ "%ValueNode::AddChild"
					~ "%ValueNode::emplace"
			),
			/ "optimized function %ReplaceSeparatedChildren to guanrantee no \
				redundant copy of values" $dep_from
				"destructive separator transformation",
			/ "vau handlers allows equality comparison" $dep_from
				("%EnvironmentReference" @ %NPLA) $dep_to "vau equality",
				// This provides more precise beta-eta equivalence of vau \
					abstraction.
		),
		/ @ "function %LoadNPLContextForSHBuild" @ %Dependency $=
		(
			/ "derivated loading forms" $=
			(
				(
				* $comp "operatives with prefixes ('$vau', '$lambda') \
					constructed invalid term with no name" $since b769 $dep_from
					("vau handler" @ %NPLA1);
					// It can fail to be evaluated later, see below.
				* $comp "failed evaluating nested function returning forms as \
					parameter of list constructor" $since b769
					// Like 'cons (apply ($lambda (i) $def! f $lambda (x) ()) \
						(list 7)) ()' would never be supported smoothly before \
						the fix, even many operations are not provided then.
				)
			),
			/ $comp "ensured PTC from result of ';' transformation" $dep_from
				("%ReduceCombiner" @ %NPLA1)
				// Only b823 would result in non-PTC compliant separator \
					combiner prvalues.
		)
	)
),

b823
(
	/ %YBase.YStandardEx.CCharacterType $=
	(
		+ "function %isspace",
		(
		* "contract violated by missing exclusion of invalid value for \
			%std::(tolower, toupper, towlower, towupper)"
			@ "(function, function templates) %(tolower, toupper)"
			$since b605;
			// See ISO C11 7.4/1 and ISO C11 7.30.1/5.
		/ "function templates %(tolower, toupper)"
			=> "%(towlower, towupper)";
		+ $doc "guaranteed no other overloads for each function name"
		)
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				+ $revert_ex(b772) "function %Forms::Sequence"
					^ "%RemoveHead",
				/ @ "function %ReduceOrdered" $=
				(
					* DD "wrong precondition" @ "wrong '\pre' Doxygen command"
						$since b772,
					/ "supported PTC of last reduced subterm",
					- "branch check and head form handling" $dep_from
						'$sequence' @ %Dependency
				),
				/ @ "function %RegisterSequenceContextTransformer" $=
				(
					/ "removed symbol dependency" $=
					(
						- "2nd and 3rd parameters";
						/ $comp "avoided redundant deferred name lookup",
						/ $comp "avoided %FormContextHandler construction"
					),
					(
					* "unordered infix transforamtion" $=
					(
						/ $impl ^ ("%StrictContextHandler",
							$dep_from ("%ReduceBranchToList" @ %NPLA))
							~ "%ReduceChildren";
						* $comp "empty evaluation result for any expressions"
							$since b817;
						* $comp "redundant head" $since b769
					);
					/ "avoided reduced head form twice unnecessarily"
						^ $dep_from "Forms::%Sequence"
						// It would be still unnecessary even if it is safe \
							because the prefix object is totally predictable \
							when the unnecessary symbol is ignored.
					)
				),
				* $dev $impl "ill-formed alternative implementation"
					@ "function %ReduceCheckedClosure" $since b822,
				/ DLDI "simplified TCO" ^ ($dep_from "%RelaySwitchedUnchecked"
					~ "%RelaySwitched") @ %NPLA,
				/ "function %AssertBranch" >> %SContext,
				/ DLDI "simplified %StrictContextHandler::operator()"
					^ "%AssertBranch",
				/ DLI "vau handler" $=
				(
					/ DLI "vau handlers stored anchor of nonowning static \
						environments" $dep_to "anchor of static environments",
					/ "referenced parent" ^ ($dep_from "%EnvironmentReference"
						@ %NPLA) ~ "%weak_ptr<Environment>" $dep_to
						"reversed reference for parent",
					/ "saved shared local environment pointer"
						$dep_to "saved local environment"
						// This should be in turn held by extension guard in \
							TCO frame.
				),
				/ $forced "function %ResolveEnvironment" ^ ($dep_from
					"%EnvironmentReference" @ %NPLA) ~ "%weak_ptr<Environment>" 
					$dep_from "%Environment::DefaultRedirect",
				/ @ "vau and evaluation TCO" $=
				(
					* $comp "parent static environment removed too aggressively"
						$since b821 $dep_from "anchor of static environments",
					/ DLDI "simplified" ^ "anchors" ~ "weak environment list",
					(
					* $comp "local environment wrongly compressed away" $since
						b821 $dep_from ("reversed reference for parent",
						"saved local environment");
						// Expression 'list ($lambda x () ($lambda x $if)) 1' \
							would not evaluated normally in result of \
							'() make-environment'. It is now conservative so \
							it can miss some chance of PTC.
					* "dynamic environment wrongly compacted as parant of \
						static environment" $since b821 $dep_from "vau handler";
					* "insufficient optimizable cases" $since b821 $=
					(
						/ DLDI "reversed insertion order of frames";
						+ "indirectly nested environment elimination"
					)
					)
				)
			),
			/ %Dependency $=
			(
				/ @ "function %LoadNPLContextForSHBuild" $=
				(
					/ "derivated loading forms" $=
					(
						/ "operative '$sequence'"
							^ ($dep_from "%Sequence" ~ "%ReduceOrdered" @ %NPLA)
							$=
						(
							* "operative '$sequence' reduced head form twice \
								unnecessarily" $since b772,
							/ $re_add(822)
								"supported PTC of last evaluated expression",
							/ $comp "allowed return of reference value"
						),
						+ $re_add(b822) "operative '$defw&!'",
						/ DLI "optimized away branch check" @ ("applicative \
							%list" ^ ("%ReduceBranchToListValue"
							~ "%ReduceToListValue") @ %NPLA,
							"applicative 'list&'" ^ ("%ReduceBranchToList"
							~ "%ReduceToList") @ %NPLA),
						/ $forced "applicatives ('lock-environment',
							'copy-environment', 'weaken-environment')"
							^ ($dep_from "%EnvironmentReference" @ %NPLA)
							~ "%weak_ptr<Environment>"
					),
					/ "registration of seperators" $=
					(
						/ $forced "omitted symbol for name lookup to be \
							replaced by prefix object" $dep_from
							("%RegisterSequenceContextTransformer" @ %NPLA1);
						* $comp $doc "name pollution '$;' and '$,' on root \
							environment" $since b758,
							// This is observable by symbol construction like \
								'string->name' though it would be parsed to \
								more than one token.
						* $comp "infix ',' transformation" $dep_from
							"unordered infix transforamtion"
						(
						* "operative '$sequence' reduced head form twice \
							unnecessarily" $since b772 ^ $dep_from
							"%Forms::Sequence",
						/ $comp "allowed return of reference value"
						)
					),
					/ $impl ^ "%ystdex::isdigit" ~ "%std::isdigit" $=
					(
						/ "avoided effect of nonconforming implemntation of \
							%std::isdigit",
						* "missing exclusion of invalid value for %std::isdigit"
							$since b758
							// See ISO C11 7.4/1.
					)
				),
				* "missing exclusion of invalid value for %std::isspace"
					@ "functions %(DecomposeMakefileDepList, \
					LoadNPLContextForSHBuild)" $since b623 $=
					(/ $impl "simplified" ^ ($dep_from "%ystdex::isspace"
						@ %YBase.YStandardEx.CCharacterType) ~ "%isspace")
			),
			/ %NPLA $=
			(
				(
				+ "function %RelaySwitchedUnchecked";
				/ DLDI "simplified function %RelaySwitched"
					^ "%RelaySwitchedUnchecked"
				),
				(
				+ "functions %(ReduceBranchToList, ReduceBranchToListValue)"
					$dep_from ("%AssertBranch" @ %SContext);
				/ DLDI "simplified function %ReduceToList"
					^ "%ReduceBranchToList",
				/ DLDI "simplified function %ReduceToListValue"
					^ "%ReduceBranchToListValue"
				),
				/ ("data member %AnchorPtr" -> "function %GetAnchorPtr")
					@ "class %TermReference",
				(
				+ "class %EnvironmentReference";
				/ "supported %EnvironmentReference" ~ "%weak_ptr<Environment>"
					@ "static member function %Environment::DefaultRedirect"
				),
				/ $impl "function %(IsNPLAExtendedLiteral, \
					IsNPLAExtendedLiteralPrefix)"
					^ "%ystdex::isdigit" ~ "%std::isdigit" $=
				(
					/ "avoided effect of nonconforming implemntation of \
						%std::isdigit",
					* "missing exclusion of invalid value for %std::isdigit"
						$since b771
						// See ISO C11 7.4/1.
				)
			),
			/ DLI "function %IsDelimeter" @ %Lexical !^ "magic number"
		),
		* $impl "missing exclusion of invalid value for %std::isalpha"
			@ "function %MapKeyChar#2" @ "platform %Win32" @ %YCLib.Keys $since
			b490
			// See ISO C11 7.4/1.
	)
)

b822
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ $revert(b771) "accepted empty symbol" @ ("functions \
				%(CategorizeBasicLexeme, IsNPLAExtendedLiteral)";
				$comp "functions %(CategorizeLexeme; IsNPLASymbol)") $=
			(
				- "precondition for empty lexeme";
				/ "categorized empty lexeme as symbol"
			),
			+ "class %InvalidReference",
			/ "base class %NPLException" @ "class %BadIdentifier"
				-> "class %InvalidSyntax",
			(
			+ "function %LiftSubtermsToSelfSafe";
			/ DLDI "simplified function %ReduceToListValue"
				^ "%LiftSubtermsToSelfSafe" ~ "%LiftToSelfSafe"
			),
			* "missing recursive call" @ "function %LiftToSelfSafe" $since b821,
			* "missing lifting reference value of top-level subterm"
				@ "function %LiftToSelf" $since b800
		),
		/ %NPLA1 $=
		(
			/ @ "vau abstraction" $=
			(
				/ "supported empty symbol" $=
				(
					* "assertion failure on empty symbol" $since b771 $=
					(
						/ $comp @ "vau abstraction" $dep_from
							("%IsNPLASymbol" @ %NPLA)
							// Empty symobl should be first-class object and \
								it can be constructed by 'string->symbol ""'.
						/ $revert(b790) "supported empty symbol"
							@ "function %Forms::MatchParameter" $=
						(
							- "precondition for empty lexeme";
							/ "treated empty string not as '.' prefixed symbol"
						)
					),
					/ "accepted empty symbol" @ "function template %CheckSymbol"
						$dep_from ("%IsNPLASymbol" @ %NPLA)
				),
				+ $impl "support of mark for avoiding lifting" $dep_to
					"no lifting mark"
			)
			/ @ "namespace %Forms" $=
			(
				/ "supported reference binding" $dep_to
					"'&' support for reference binding" $=
				(
					- "lifting for leaves" @ "function %MatchParameter",
					/ @ "function %BindParameter" $=
					(
						* $re_add(b821) "missing lifting of bound trailing \
							terms" $since b803 ^ "%LiftToSelf"
							~ "%LiftTermRefToSelf",
						/ "supported binding by reference for symbols with \
							'&' prefix" ^ $dep_from
							("%InvalidReference" @ %NPLA),
						/ "ignored empty leaf symbol"
							// To be consistent with trailing terms binding.
					)
				),
				/ $lib "exception type" @ "cyclic reference detection"
					@ "recursive vau abstraction introduced by \
					%DefineWithRecursion" -> ($dep_from "%InvalidReference"
					~ "%NPLException" @ %NPLA)
				+ "token name" @ "exception message"
					@ "function template %CheckSymbol",
				+ "term value" @ "exception message for invalid last term of \
					parameter" @ "function %MatchParameter",
				+ "functions %(ConsRef, LambdaRef, VauRef, \
					VauWithEnvironmentRef, EvalRef)" $dep_from "no lifting mark"
			),
			- DLI "term check" @ "TCO action construction" $effective
				@ "functions %(ReduceAgain, ReduceCombined, \
				ReduceCheckedClosure, Forms::Eval), %operator() of vau \
				handlers",
			/ $re_add(b821) "elimiated shared frame" @ "TCO action" $dep_to
				"shared frame TCO"
		),
		/ "derivated loading forms"
			@ "function %LoadNPLContextForSHBuild" @ %Dependency $=
		(
			* $re_add(b821) $comp "unsafe applicative %cons" $since b800,
				// This is now also consistent with 'list'.
			+ "applicative 'cons&'" ^ $dep_from ("%ConsRef" @ %NPLA1),
				// Similar to 'list&'.
			/ $dev $lib "rearranged alternative derivation of forms" $=
			(
				+ "macros to control forms with conditional inclusion",
				+ "derivation of operative '$lambda'" ^ $dep_from
					("%cons", "'&' support for reference binding")
			),
			* "wrong dynamic environment for arguments after 1st argument"
				@ "operative '$sequence'" $since b799,
				// This would cause '$let ((x 2)) $let () $sequence 1 x' to \
					fail as well as make Kernel-style of implementation of \
					'$letrec' wrong.
			/ DLDI "simplified operative '$lambdae'",
			/ DLI "all infix ';' inside combiner definitionss"
				-> "'$sequence' form" $effective
				@ "applicatives %(accl, accr, map-reverse)",
				// To be consistent in style. Note this would make it slightly \
					inefficent for interpretion overhead on symbol \
					'$sequence', and significant addtional cost when native \
					form '$sequence' not used.
			/ "all symbols being bound directly except '#ignore'"
				@ "all derived combiners" ^ $dep_from "'&' support for \
				reference binding" $dep_from ("%LiftToSelf" @ %NPLA) $effective
				@ "%list, '$quote', '$set!', '$defv!', '$setrec!', '$defl!', \
				%(first, rest, apply), 'list*', '$defw!', '$lambdae', \
				'$sequence', '$cond', 'not?', '$when', '$unless', \
				'first-null?', 'list-rest', %(accl, accr, foldr1, map1), \
				'list-concat', %append, '$let', '$let*', 'unfoldable?', \
				'map-reverse', 'for-each-ltr', '$binds1?', 'env-empty?'",
				// This allows modification exposed, so not merely an \
					optimiation. Indirect binidngs in 'eval' expressions \
					are not supported yet.
			/ DLI "simplified operative '$cond'" !^ '$sequence',
			+ "operative ('$vau&'; '$defv&!')" ^ $dep_from
				("%Forms::VauRef" @ %NPLA),
			+ "operative ('$vaue&'; '$lambdae&')" ^ $dep_from
				("%Forms::VauWithEnvironmentRef" @ %NPLA),
			+ "operatives ('$lambda&'; '$defl&!')" ^ $dep_from
				("%Forms::LambdaRef" @ %NPLA),
			+ "operative 'eval&'" ^ $dep_from ("%Forms::EvalRef" @ %NPLA),
			/ $comp "supported PTC of evaluated expression"
				@ "applicative %eval" $dep_from "shared frame TCO"
		)
	)
),

b821
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ DLI "function %ReduceCombined" $=
				(
					/ "avoided shared handler" ^ "%make_unique"
						~ "%shared_move",
						// The handler is still shared, but not stored in \
							multiple actions with shared semantics. As the \
							order of ending of lifetime is bounded \
							determinately, it should be safe.
					/ "kept combining reduction mark untouched when adding \
						guard failed" @ "TCO action",
						// This should have no much effect since the action \
							would normally just be destructor. However, it is \
							better to move torwards the strong exception \
							guarantee (even if this is not guaranteed yet).
					* $comp "rvalue combiner unexpectedly copied" $orig
						(@ "function %ReduceContextFirst" $since b772)
				),
				* "missing cleanup before TCO action"
					@ "function %ReduceCheckedClosure" $since b819,
					// This has significant memory overhead. Any way, it \
						should be.
				(
				/ $forced "return type" @ "function %ResolveName" -> $dep_from
					"%Environment::NameResolution" @ %NPLA
					~ 'observer_ptr<ValueNode>' $dep_from
					("%Environment::Resolve" @ %NPLA);
				/ "stored environment pointer" @ "term reference"
					@ "function %EvaluateIdentifier" $dep_from
					("%TermReference" @ %NPLA)
				),
				/ "vau and evaluation TCO" $=
				(
					/ "improved to support PTC for specific cases" $dep_from
						("ContextNode::IsNotReferenced" @ %NPLA),
						// If the frame is not be lexically hidden, the frame \
							is one of the known dynamic environment pointer \
							before leaving the tail context, or there is some \
							non trivially destructible object lied in the \
							frame, it would not be collected. However, this \
							already serves typical direct or mutual recursive \
							cases in other languages.
					/ DLDI "simplified" ^ $dep_from
						("%EnvironmentSwitcher" @ %NPLA)
				),
				/ @ "function %Forms::BindParameter" $=
				(
					* "missing lifting of bound leaf terms" $since b803
						^ "%LiftToSelf" ~ "%LiftTermRefToSelf",
						// This would cause list processed by '$lambda x x' \
							with reference elements for lvalues.
					/ DLDI "simplified" ^ $dep_from
						("%LiftTermIndirection" @ %NPLA)
				),
				/ DLDI "simplified function %ReduceCheckedClosure" ^ $dep_from
					("%LiftToSelfSafe" @ %NPLA)
			),
			/ %NPLA $=
			(
				/ @ "class %TermReference" $=
				(
					+ "data member %AnchorPtr";
					+ "constructor template",
					- $forced 'yconstfn' @ "constructor, conversion functions"
				),
				/ @ "class %Environment" $=
				(
					(
					+ "alias %NameResolution";
					/ "return type" @ ("function type"
						@ "data member %Resolve", "function %DefaultResolve")
						-> "%NameResolution" ~ 'observer_ptr<ValueNode>'
					),
					+ "functions %(Anchor, IsNotReferenced)"
				),
				+ "class %EnvironmentSwitcher",
				/ "alias %Reducer" @ "class %ContextNode" >> "namespace %NPL",
				/ DLDI "simplified function %ReduceToListValue",
				+ "functions %(LiftTermIndirection; LiftToSelfSafe; \
					ReduceToListValue)"
			),
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				* "unsafe applicative %list" $since b800 ^ ($dep_from
					"%ReduceToListValue" ~ "%ReduceToList") @ %NPLA,
					// This is now also consistent with lifting behavior in \
						implemention by vau.
				+ "applicative 'list&'" ^ ("%ReduceToList" @ %NPLA)
			)
		),
		* "unsequenced %errno access" @ "function %LoadNPLA1File"
			@ %Helper.Initialization $since b506,
			// It would lead to undefined behavior when %errno is implemented \
				as backed by a volatile lvalue (currently at least on platform \
				%Android).
		+ 'ynothrow' @ "constructor" @ "class template %RefHolder"
			@ %YSLib.YObject
	)
),

b820
(
	/ %YBase.YStandardEx $=
	(
		/ "constructor" @ "all specializations" @ "function template %one_shot"
			@ %Functional -> "constructor supporting forwarding",
		/ %ScopeGuard $=
		(
			/ "supported function and state arguments forwarding" @ "function \
				templates %(unique_guard, unique_state_guard)" $dep_from
				("%one_shot" @ %Functional),
			/ @ "constructor template class templatee %guard" $=
			(
				* "missing exclusion of 'guard&'" $since b605
				* "wrong exception-specification" $since b606
					^ "%is_nothrow_constructible" ~ "%is_contructible"
			)
		),
		* "deleted copy and move constructors for trivially destructible types \
			as parameter" @ "class template %optional" $since b591
	),
	/ %YFramework.NPL.NPLA1 $=
	(
		+ DLDI "internal static assertion to ensure thunked implementation as \
			the premise of TCO",
		* $re_add(b755) "missing subterm cleanup before moving result"
			@ "function %ReduceCheckedClosure" $since b735,
			// This would led to redundant term retained when the last \
				reduction status is %ReductionStatus::Clean.
		+ DLI "fused TCO action support" @ "functions %(ReduceCombiner, \
			ReduceAgain)" $dep_from %YBase.StandardEx,
			// Note this still does not guarantee proper tail call.
		/ DLDI "guard for switching environment"
			@ "function %Forms::Eval, %operator() of vau handlers"
			// To reduce redundancy.
		(
			^ "user-defined type of guard function"
				~ "lambda-expressions",
			^ "non-templated guard types"
		)
	)
),

b819
(
	/ $dev DD $term "all" ('守护' -> '守卫'),
		// To prevent from confusion of guards with demons.
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ "supported directly using of next action if current action \
				provided by the parameter is empty" @ "functions"
				("%CombineActions"; $comp "%RelayNext"),
			* $doc "wrong '\pre' command" @ "Doxygen comment"
				@ "function %RelayNext" $since b815
		),
		/ %NPLA1 $=
		(
			/ "supported proper tail call" @ "vau and evaluation calls" $=
			(
				/ $impl "entended capability of internal action type \
					specific to TCO with states for both guards and \
					lifting operations";
				/ "merged call of environment resetting guard for only \
					outermost tail context"
			),
			/ "subterm reduction" @ "functions %(ReduceAgain, ReduceChecked, \
				ReduceChildrenOrdered, ReduceCheckedClosure, \
				Forms::(And, Or, If))" $=
			(
				/ "separated %ContextNode::SkipToNextEvaluation update and \
					next action",
				* "missing guaranteed retrying as %RecuceChecked with \
					direct style implementation" @ "functions other than \
					%ReduceAgain" $since b817,
				/ DLI "simplified with tail recursion" ^ "%RelaySwitched"
					~ "%RelayNext"
			),
			(
			* "missing clearing %ContextNode::SkipToNextEvaluation before \
				entering evaluation passes" @ "function %ReduceOnce" $since
				b814;
				// For several cases like in %ReduceOnce, setting the flag \
					always to 'true' may skip a whole turn of evaluation of a \
					term. This is not significant when there is an enclosing \
					trampoline to reduce the term again because all the effect \
					remained is %ReductionStatus::Retrying.
			/ DLI "simplified function %ReduceAgain"
				// This would add some overhead when there is an empty current \
					action, which should be rare.
			)
		)
	)
),

b818
(
	/ %YBase.YStandardEx $=
	(
		+ "function template %move_and_swap" @ %Utilities,
		+ "move %operator=" @ "class template %one_shot specializations with \
			explicitly defined move constructor" @ %Functional ^ $dep_from
			("%move_and_swap" @ %Utilities),
			// To support functions without workable move %operator= but with \
				move constructor (e.g. some closure objects), and for better \
				diagnostics of %unique_guard result, etc.
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ DLI "function %CombineActions" @ %NPLA ^ "custom functor"
				~ "lambda expression"
				// For better performance. This can have effect scale of \
					about 8% in allocation counts.
			/ DLI %NPLA1 $=
			(
				/ "function %Forms::Eval, %operator() of vau handlers"
					^ "custom functor" ~ "lambda expression",
					// For better performance. This can have effect scale of \
						about 230% (i.e. only about 30% of old one) in \
						allocation counts, mostly contributed by elision of \
						%shared_ptr, and now it is almost equal to revisions \
						before b816 where also no %shared_ptr is introduced in \
						evaluation failure (but buggy).
				/ "merged call of term lifting for only outermost tail context \
					for vau and evaluation calls specifically as TCO action"
					@ "function %ReduceCheckedClosure",
					// See $2018-02 @ %Documentation::Workflow::Annual2018.
				/ "resolved term before guard construction"
					@ "function %Forms::Eval"
					// This makes it possible to receive term reference for \
						TCO action in future.
			)
		)
	),
	/ %Tools $=
	(
		/ @ "%install-sysroot.sh" $=
		(
			+ "deployment of NPLA1 library module %SHBuild-YSLib-common.txt in \
				'bin' directory",
			+ "exported variable %CFLAGS_freetype_other with default value \
				provided by attempt of call 'pkg-config --cflags-only-other'"
		);
		/ "building command for library %YFramework"
			@ "%SHBuild-YSLib-build.txt" @ %Scripts $=
		(
			+ "flags from variable %CFLAGS_freetype_other";
			* $comp "missing non-header flags in commands when 'pkg-config' \
				call of 'freetype2' provides other flags"
				$orig (@ "%install-sysroot.sh" @ %Tools $since b563)
				// This did not occur in tested platforms, though. Note \
					'-mms-bitfields' may be provided by MSYS2's \
					mingw-w64-{i686, x86_64}-freetype package, but it was not \
					used supported platforms in YSLib by default.
		)
	)
),

b817
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ DLDI "simplified function %ReduceCheckedClosure" ^ "%std::bind",
			(
			/ "supported thunked tail calls" @ "function %ReduceChildren";
				// This now reuse the implementation of \
					%ReduceChildrenOrdered, although it still does not expose \
					the guarantee of order in the API level.
			/ $comp "supported thunked tail calls" @ "function %ReduceArguments"
			),
			(
			/ DLDI "synchronized use of %ReduceChecked";
			/ @ "functions %ReduceChecked" $=
			(
				/ "supported thunked tail calls",
				+ "return value %ReductionStatus::Retrying"
			);
			/ DLI "simplified functions (%Forms::(And, Or, Eval, If), \
				%operator() of vau handlers)" ^ $dep_from
				("function %CombineActions" @ %NPLA)
			),
			* "exception thrown from function %Forms::Eval or %operator() \
				of vau handlers corrupted environment" $since b815 $dep_from
				("%RelayNext" @ %NPLA)
		),
		/ %NPLA $=
		(
			+ "function %CombineActions";
			/ "ensured order of destruction of captured actions in result as \
				parameter order" @ "function %RelayNext" ^ "%CombineActions"
		)
	)
),

b816
(
	/ %YFramework.NPL.NPLA1 $=
	(
		* "missing restoring environment at current context on exit by \
			exception" @ "%operator()" @ "vau handlers" $since b815,
		- DLI "redundant guard" @ "functions %(ReduceChecked, ReduceChildren)",
		* "missing saving %Context::SkipToNextEvaluation in guard"
			@ "function %ReduceChildren" $since b814,
		/ @ "function %ReduceOnce" $=
		(
			/ DLDI "simplified",
			* "forwarding nested evaluation of subexpressions"
				$dep_to "nested evaluation forwarding fix"
				// This would cause nested evaluation terminate unexpectedly \
					if %ReduceOnce (rather than %Reduce or with a loop) is \
					used in %RelayNext as the first action.
		),
		(
		/ "supported thunked tail calls" @ "function %ReduceCheckedClosure"
			$dep_from "nested evaluation forwarding fix";
		/ $comp "allocated activation records on free store" @ "vau handlers"
			// The memory would still grow due to recursive construction of \
				handlers in %RelayNext. Nevertheless, it would (hopefully) \
				incur no stack overflow in typical host implementations.
		),
		/ DLDI "simplified function %ReduceAgain" $dep_from
			"nested evaluation forwarding fix"
	)
),

b815
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			- "function templates %(RelayNextActions; RelaySetup)";
			- "class template %RelaySetupTest"
			),
			- "function %SetupAction",
			- "function template %ResumeCall",
			/ @ "class %ContextNode" $=
			(
				+ "functions %(SwitchEnvironmentUnchecked; \
					SwitcEnvironment)";
				/ DLDI "simplified constructor"
			)
		),
		/ %NPLA1 $=
		(
			/ DLI "simplified function %ReduceOnce",
			(
			/ "supported thunked tail calls" @ ("function %operator()"
				@ "vau handler", "function Forms::Eval"; "function \
				%ReduceCheckedClosure) ^ ($dep_from
				("%ContextNode::SwitchEnvironmentUnchecked" @ %NPLA),
				"%ystdex::unique_guard") ~ "creation of new local context";
			/ $comp "supported saving current action"
				@ "function %ReduceCheckedClosure"
			),
			/ DLI "evaluated subexpressions with deferred term"
				@ "function %(ReduceChildrenOrdered, Forms::(And, Or, If))"
				// Not all case allow combining next continuation even \
					if %ContextNode::LastStatus is maintained correctly.
		)
	)
),

b814
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			(
			/ DLI "supported saving current action" $=
			(
				/ "function %Forms::Eval and vau handlers"
					^ ("%RelayNext" ~ "%ContextNode::SetupTail") @ %NPLA,
				/ "function %Forms::(If, And, Or)" ^ ("%RelayNext"
					~ "%RelayNextActions") @ %NPLA $dep_from "%ReduceAgain"
			);
			/ DLI "simplified function %ReduceCombined"
				^ ("%RelayNext" ~ "%RelayNextActions") ~ @ %NPLA
			),
			(
			/ "supported thunked tail calls" @ "function %Reduce" $=
			(
				/ "saved and restored current action and skip state"
					$dep_from 
					("%ContextNode::SkipToNextEvaluation" @ %NPLA);
				- "precondition"
				// This is needed, otherwise %REPL::LoadFrom would fail for \
					assertion when worked with following implementation.
			);
			/ $impl "function %ReduceAgain" ^ $dep_from
				("%(ContextNode::SkipToNextEvaluation, RelayNext)"
				~ "%ContextNode::SetupBoundedTail" @ %NPLA);
			/ "function %ReduceOnce" !^ ("%PushActions" @ %NPLA),
			* $comp "state not restored" @ "exited by native exception" $since
				b813 $=
			(
				* "some resources hold by current action not cleared",
				* "assertion failure when entered a new round of reduction \
					immediately"
					// So reduction would fail immediately after a previous \
						failed REPL session.
			)
			)
		),
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				+ "data member %SkipToNextEvaluation",
				- "function template %SetupBoundedTail" $dep_from
					("%RecduceAgain" @ %NPLA1)
			),
			- $revert(b809) "function %PushActions" $dep_from
				("%ReduceOnce" @ %NPLA1)
		)
	)
),

b813
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "functions %(RelayNext, RelaySwitched)";
				/ $revert_ex(b812) $impl "function %PushActions"
					^ "%RelaySwitched",
					// To simplify frame escape. This only has a little \
						overhead shown by times of allocation compared to \
						%MoveAction calls, but far less than with \
						%RelayNextActions.
				/ @ "class %ContextNode" $=
				(
					+ "data member %LastStatus";
					/ "assigned status to %LastStatus in each call"
						@ "function %ApplyTail"
				)
			),
			/ %NPLA1 $=
			(
				* $comp "multiple frames not skipped on retrying" $since b812
					$dep_from ("function %PushAction" @ %NPLA),
					// This can also be achived with delimited marker frame, \
						but it is more complicated.
				(
				/ DLI "simplified functions \
					%(StrictContextHandler::operator(), \
					(ReduceChildrenOrdered; ReduceOrdered; ReduceCombined))"
					^ $dep_from ("%RelayNext" ~ "%RelayNextActions")
					@ %NPLA;
				/ $comp "supported saving current action"
					@ "functions %(StrictContextHandler::operator(), \
					(ReduceChildrenOrdered; ReduceOrdered))"
				)
			)
		)
	)
),

b812
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				+ "2 functions %Push with reducer parameter";
				/ DLDI "simplified function %Push without parameter"
			),
			* $doc "redundant precondition" @ "function template \
				%PushActionsRange"; "function %PushActions") $since b809,
				// The current action would be saved by %Switch before the \
					call to %ContextNode::SetupTail, so it is safe to \
					setup the action.
			/ DLDI "function %SetupAction" ^ "%ImplExpr" ~ "%ImplRet",
			+ "function %MoveAction",
			/ @ "function %PushActions" $=
			(
				(
				* "failed to relay original action" $since b809,
				- "function templates %(PushActionsRange; \
					RelayNestedNextActions)" !^ "%PushActionsRange";
				/ "exposed inner actions to %Delimited" ^ $dep_from
					"%MoveAction" 
					// See the comments on implementation for the purpose.
				),
				/ "avoided copy of handlers when captured to actions"
			)
		),
		/ %NPLA1 $=
		(
			* $revert(b811) "functions %(Forms::(If, And, Or), Reduce, \
				ReduceNested) set wrong trailing actions for subterm \
				evaluation" $since b811,
				// Trailing evaluation passes should be bypassed in the \
					case. The original case was proved correct, guaranteed \
					by the reset operation of each action setup by \
					%NPL::ReduceWithNextActions.
			/ DLDI "simplified function %ReduceOnce",
			* DLDI "ill-formed synchrnous referential code" @ "vau handler"
				$since b811,
				// Redundant 'const' would cause it ill-formed.
			* DLDI "unexpected modification on current action for \
				synchrnous referential code" @ ("function %ReduceAgain"
				$since b807, "function %ReduceChildren" $since 809)
		)
	)
),

b811
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				* "missing 'ynothrow'" @ "move constructor" $since b788,
					// This is also needed allow capture of local context \
						in vau handler in %NPLA1.
				(
				+ $doc "precondition to enure nonthrowing move construction on \
					assigned function object type except for %Reduce";
					// This is not a static assertion to allow functors with \
						%Reducer object captured.
				+ $doc "requirement of nonthrowing move \
					construction on %Reducer type";
				+ 'ynothrow' @ "function %Pop";
				+ "function %Transit";
				/ "changed termination condition" @ "function %Rewrite"
				)
			),
			/ "moved passed by value parameter" @ "function templates \
				%(RelayNextActions, RelayNestedNextActions)",
				// This ensures the parameter not to be copied unnecessarily, \
					while still capable to have stored value bound during the \
					whole call.
			(
			+ "class tmplate %RelaySetupTest; function templates \
				%RelaySetup";
			/ "supported overriding result by setup routines"
				@ "function template %RelayNextActions"
			)
		),
		/ %NPLA1 $=
		(
			* $doc "redundant precondition" @ "function %ReduceOnce" $since
				b809,
			(
			/ DLDI "function %ReduceFirst" ^ "%ReduceOnce" ~ "%ReduceNested";
			- $revert(b807) "function %ReduceNested"
			),
			/ $comp $revert(b810) "avoided trailing actions exposed as actions"
				// See $2017-12 @ %Documentation::Workflow::Annual2017.
			),
			(
			/ "kept handler in setup function to make it live long enough"
				@ "function %ReduceCombined with asynchrnous call";
			/ "supported thunked tail calls"
				@ "function %StrictContextHandler::operator()";
			/ "setup current action" @ "vau handler calls"
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		* $doc "spelling error" @ "comments" @ "function template %general_cast"
			@ %Cast $orig (@ %YCast $since b175),
		- DLDI "redundant inclusion %TypeTraits" @ %Exception
	)
),

b810
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ "supported thunked tail calls" @ (("function %ReduceOrdered"
				^ "%CheckNorm"; "function %ReduceChildrenOrdered")
				^ "%RelayNextActions", "function %Forms::Eval"
				^ "%ContextNode::SetupTail"),
			/ $forced DLDI "functions %(Forms::(If, And, Or), Reduce, \
				ReduceNested)" $dep_from ("%ContextNode::Reducer" @ %NPLA),
			/ $forced DLDI "functions %(ReduceOrdered, ReduceCombined, \
				Forms::(And, Or, If))" $dep_from
				("%RelayNextActions" @ %NPLA),
			/ @ "function %ReduceNested" $=
			(
				/ $forced DLDI $dep_from ("%RelayNestedNextActions" @ %NPLA),
				/ DLDI ^ $dep_from "%ContextNode::(Push, Pop)";
				* "trailing actions exposed as actions" $since b808
					^ $dep_from ("%ContextNode::Push" @ %NPLA)
			)
		),
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				- "parameters" @ "type %Reducer, function %ApplyTail";
				(
				- $foced "1st parameter" @ "functions %(ApplyTail; Rewrite)";
				/ $forced DLDI "function %RewriteGuarded"
				),
				/ $forced DLDI "function template %SetupBoundedTail",
				/ "%TailAction" => "%Current",
				+ "data member %Delimited; functions %(Push, Pop)"
			),
			/ $doc "tail actions" => "current actions",
			/ "supported variadic arguments" @ "function template %ResumeCall",
			(
			/ $forced "function templates %(ReduceWithNextActions, \
				ReduceWithNestedNextActions)"
				-> "%RelayNextActions, RelayNestedNextActions" $dep_from
				"%(ContextNode::Reducer, ResumeCall)";
			/ $forced DLDI "function template %PushActionsRange" $dep_from
				"%ContextNode::Reducer"
			),
			/ "all forwarding function templates" ^ "%invoke" ~ "%call"
				$effective @ "%(ResumeCall, RelayNextActions, \
				PushActionsRange)" $dep_from %YBase.YStandardEx.Functional
		)
	),
	/ %YBase.YStandardEx $=
	(
		- DLDI "unused parameter" @ "function templates %(owns_any, \
			owns_nonnull)#1" @ %Memory
			// To eliminate Clang++ warning: [-Wunused-parameter].
		/ %Functional $=
		(
			/ @ "class template %call_projection" $=
			(
				/ $dev "trailing-return-type"
					@ "all static member function templates" ^ 'yimpl',
				/ "static member function templates %(call, invoke) for tuple \
					instances" => "%(apply_call, apply_invoke)"
					// To reduce potential ambiguity.
			);
			/ "disambiguated %(invoke, apply_call, apply_invoke)"
				@ "class template %expand_proxy" $=
			(
				+ "using-declaration",
				+ "function template"
			)
		)
	)
),

b809
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			+ "function template %ResumeCall",
			+ DLDI 'const' @ "reducer parameter type" @ "setup tail action"
				@ "function template %ReduceWithNextActions",
			/ "return type 'ReductionStatus'" -> 'void' @ ("function templates \
				%(ReduceWithNestedNextActions; ReduceWithNextActions)"
				^ $dep_from "%ResumeCall"), "(function template %PushRange; \
				function %Push), function template %SetupBoundedTail; function \
				template %SetupTail",
				// Since this is not always returns across term boundries, \
					it should better not imply a default status.
			+ "function %SetupAction";
			/ "member function %ContextNode::Push, member function \
				template %PushRange)" -> "(function %PushActions, function \
				template %PushActionsRange) which saving current tail \
				action before next reduction"
				^ "%(ReduceWithNestedNextActions, SetupAction)")
			),
			* "wrong use of 'std::move' on next action" @ "function template \
				%ReduceWithNestedNextActions" $since b808,
			+ '&&' @ "parameter" @ "function template %(SetupTail, \
				SetupBoundedTail)" @ "class %ContextNode"
				// To avoid excessive memory allocation, also better \
					performance for debugging.
		),
		/ %NPLA1 $=
		(
			/ DLDI "avoided call of %ReduceChildrenOrdered for leaf node"
				@ "function %ReduceOrdered",
				// A minor optimization.
			* "stray retrying status possibly left not reduced"
				@ "functions %(ReduceChildrenOrdered; ReduceOrdered)" $since
				b807 ^ "%ReduceChecked" ~ "%Reduce",
				// Other functions are not effected since only these ones \
					are intended to be bound to forms like '$sequence' \
					directly.
			/ $forced DLDI "functions %(ReduceCombined, ReduceChecked, \
				Forms::(And, Or, If))" $dep_from
				("%ReduceWithNextActions" @ %NPLA),
			/ $forced DLDI "function %ReduceAgain" $dep_from
				("%ContextNode::SetupBoundedTail" @ %NPLA),
			/ @ "function %ReduceChildren#1" $=
			(
				* "missing keeping precondition for %Reduce" $since b807
					^ "%ystdex::swap_guard" $dep_to
					"saved tail action before children reduction",
				* "missing keeping full reduction on retrying status"
					$since b807 ^ "%ReduceChecked" ~ "%Reduce"
			),
			(
			/ "function %ReduceOnce" $=
			(
				/ $forced DLDI $dep_from ("%ContextNode::Push" @ %NPLA);
				/ $comp "saved current tail action before leaf and branch \
					reduction"
			);
			/ $forced DLDI $dep_from @ "function %ReduceNested"
				("%ReduceWithNestedNextActions" @ %NPLA),
				// Some tail actions are still lost. This is to be resolved \
					with more actions differentiated for different activation \
					records.
			/ "function %ReduceCombined" $=
			(
				/ $impl "simplified";
				/ $comp $forced DLDI $dep_from
					("%ReduceWithNextActions" @ %NPLA)
			)
			),
			/ DLDI "internal extractor" ^ "non-throwing exception \
				specifications" @ "function %ReduceCombined"
		)
	)
),

b808
(
	/ "function templates %(unique_guard, unique_state_guard)"
		%YBase.YStandard.ScopeGuard $=
	(
		* $revert_ex(b779) "empty state forwarded by default" $since b779
			$dep_to "invalid guard initialization",
			// This broke compatibility as well as consistency with \
				%ystdex::make_guard.
		* "missing arguments" @ "exception specification" $since b779
	),
	* $comp "guard disabled without non-empty state passed to \
		%ystdex::unique_ptr" $since b779 $dep_from
		"invalid guard initialization" $effective @ ("function template \
		%AddExitGuard" @ %YSLib.Core.YApplication, "static member function \
		%WindowThread::DefaultGenerateGuard" @ %Helper.HostRenderer,
		"member function %DirectoryFindData::GetNodeCategory"
		@ %YCLib_(Win32).MinGW32) @ %YFramework,
	/ %YFramework $=
	(
		/ @ "constructor templates with function object"
			@ "class template specialization %GHEvent" @ %YSLib.Core.YEvent $=
		(
			(
			/ $revert(b494) "direct '_fCallable'"
				-> "rvalue references for callable type '_fCallable&&'"
				@ "constructor %GHEvent with precisely matched callable object \
				parameter";
				// Move-only functions are now supported by a style of \
					forwarding call wrapper. See $2014-04 @ \
					%Documentation::Workflow::Annual2014. This is also \
					consistent to avoid the bug below.
			* $comp "ambiguity for imprecisely match function object as 1st \
				argument to construct" $since b494
				// For example, an instance of %std::bind result.
			),
			* "missing decaying target type" @ "%enable_if_t test" $since b494
		),
		/ %NPL $=
		(
			+ "function templates %(ReduceWithNextActions; \
				ReduceWithNestedNextActions)" @ %NPLA,
			/ %NPLA1 $=
			(
				/ "supported thunked tail calls" $=
				(
					/ @ "functions %ReduceNested"
						^ $dep_from ("%ReduceWithNestedNextActions" @ %NPLA),
					/ @ "functions %((Forms::(If, And, Or)), ReduceCombined)"
						^ $dep_from ("%ReduceWithNextActions" @ %NPLA)
				),
				/ @ "function %ReduceFirst" $=
				(
					/ DLDI ^ $dep_from "%ReduceNested";
					* "invalid state set for branch node"
						@ "function %ReduceFirst" $since b807
						// The wrong behavior was caused by the bug of \
							%ystdex::unique_guard. However, the real bug here \
							is originally a typo to misuse 'unique_guard' \
							instead of 'make_guard', even if now it should \
							dismiss the guard to cleanup the tail action in \
							time when retrying is needed. This is also \
							corrected in an inactive referential implementaion \
							protected by 'false' conditional inclusion in \
							%ReduceNested.
				),
				/ DLDI "simplified function %ReduceAgain"
					^ "%ContextNode::SetupBoundedTail",
				/ "reduced directly on term parameter"
					~ "reduced in new term and copied back the result"
					@ "function %ReduceCheckedClosure"
					// This makes it easy to transform to CPS style, also \
						more efficient for direct-style calls.
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		* $re_ex(b750) "missing check for first element in non empty sequence"
			@ "function templates %for_each_if" @ %Algorithm
			$since b531,
			// The bug fix was still wrong since b750 because of typo.
		* "missing wrapping to move iterator" @ "function template %concat#2"
			@ %Container $since b546
	)
),

b807
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			+ "functions %(CombineReductionResult; \
				CombineSequenceReductionResult)",
			/ DLDI "simplified member function %PassesCombiner::operator()"
				^ $dep_from "%CombineReductionResult",
			/ @ "class %ContextNode" $=
			(
				(
				+ "function %Switch";
				/ DLDI "simplified function %ApplyTail" ^ "%Switch",
				),
				(
					+ "function template %SetupBoundedTail",
					+ "function template %PushRange" ^ $dep_from
						"%(CombineSequenceReductionResult, Switch)";
					+ "function function %Push" ^ "%PushRange"
				),
				/ @ "function %Rewrite" $=
				(
					/ "lifted reduce parameter out of loop"
						^ "%SetupTail" $dep_from "decoupling reduction status",
						// This depends on correct state management on tail \
							action.
					(
					/ "loop invariant" ^ "%TailAction" ~ "%CheckReducible";
						// See $2017-10 @ \
							%Documentation::Workflow::Annual2017.
					/ $forced "return value determination" ^ "%CheckNorm"
						~ "%TailAction call results"
						// This is consistent to new loop invariant.
					)
				)
			)
		),
		/ %NPLA1 $=
		(
			(
			+ "function %ReduceNested";
			/ @ "function %ReductionFirst" $=
			(
				/ DLDI "function %ReduceFirst" ^ "%ReduceNested" $dep_to
					"direct nested reduction";
				/ $impl "deferred reduction" ^ "%ContextNode::SetupTail"
					~ "%ReduceNested"
					// This does not require %ReduceNested but it is \
						preserved for reference.
			)
			),
			/ @ "function %ReduceOnce" $=
			(
				/ "expanded handlers as tail calls" ^ ($dep_from
					("%ContextNode::Push" ~ "%ContextNode::SetupTail")
					@ %NPLA) $dep_from "direct nested reduction";
				* $comp "local term and context parameter not bound in \
					continuations" @ "function %CallOnce" $since b806
					// Thus it could be wrong when not in the loop of \
						%Context::Rewrite directly.
			),
			(
			+ "function %ReduceAgain" ^ $dep_from
				("%ContextNode::PrependTail" @ %NPLA);
			/ "trivial retrying" ^ "%ReduceAgain" @ %NPLA1 $effective
				@ ("functions %(ReduceOnce, ReduceTail, ReduceLeafToken, \
				Forms::(And, Or, If))") $dep_to "decoupling reduction status"
				// This decouples reduction status as condition of loop in \
					rewriting and as jump action to specific target. Now no \
					%ReduceOnce is implicitly depended as the default \
					reduction action.
			),
			/ $comp "%Reduce allowed returning %ReductionStatus::Retrying"
				$dep_from ("%ContextNode::Rewrite" @ %NPLA)
		)
	),
	* "wrong template argument" @ "return type" @ "function templates \
		%unique_guard" @ %YBase.YStandardEx.ScopeGuard $since b686
),

b806
(
	/ %Tools.Scripts $=
	(
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			* "wrong toolchain default value"
				$orig (@ "%SHBuild-common-toolchain.sh" $since b791) $=
			(
				* "missing setting default value 'g++' for variable %CXX",
				* "missing setting variables %(AR, ARFLAGS, LD)",
					// This can occasionally work for %SHBuild except %LD \
						which has value in the script different than default \
						value in %SHBuild.
				* "missing export variables %(CXX, AR, ARFLAGS, LD)"
			),
			* "missing filtered out dynamic library build options for \
				application executable building" @ "%LDFLAGS" $since b805,
			+ "applicative %SHBuild_GetPlatformStrings"
		),
		/ DLDI "simplified %SHBuild-YSLib-build.txt" ^ $dep_from
			("%SHBuild_GetPlatformStrings" @ "%SHBuild-YSLib-common.txt")
	),
	* $impl "ill-formed 'const auto' as function declarator"
		@ "function template %extract_mapped with traling-return-type"
		@ %YBase.YStandard.Container $since b792
		// This was a typo. As per N4687 [dcl.fct]/2, only a single 'auto' is \
			allowed here. Though G++ accepts it, Microsoft VC++ 2017 complains \
			it correctly with (one case which is not well-documented of) error \
			C3551.
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			+ "function %MoveContent" @ "class %ValueNode" @ %ValueNode,
			+ "friend function %swap" @ "class template %GHEvent" @ %YEvent
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ 'using YSLib::set',
				/ @ "class %LexicalAnalyzer" $=
				(
					/ DLDI "simplified" ^ "brace-initializer '{}', \
						defaulted constructor",
					+ "function %GetLeftQuotes",
					/ "stored left quote positions" @ "function %ParseByte"
				),
				/ DLDI "function %Tokenize" ^ "%string::front" ~ '[0]'
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ "applicative %SHBuild_TrimOptions_" @ "loading forms" $=
				(
					* "subsequent spaces in quoted string wrongly replaced \
						as single space" $since b796,
					* "redundant spaces wrongly added token containing \
						left quote" ^ $dep_from
						("%LexicalAnalyzer::GetLeftQuotes" @ %Lexical)
						// This has efffect on '-I"path"', which would be \
							wrongly converted to deprecated form \
							'-I "path"' (though it still worked).
				),
				/ DLDI "simplified recored getting by cacheing result of \
					%ContextNode::GetRecordRef"
			),
			/ %NPLA $=
			(
				(
				/ DLDI "simplified function %LiftTerm with 2 %TermNode \
					reference parameters" -> "inline function" ^ $dep_from
					("%ValueNode::MoveContent" @ %YSLib.Core.ValueNode);
				+ 'ynothrow' @ "all 3 functions %LiftTerm"
				),
				/ @ "class %ContextNode" $=
				(
					+ "alias %Reducer";
					+ "data member %TailAction";
					+ "function template %SetupTail",
					+ "functions %(ApplyTail; Rewrite, RewriteGuarded)"
						^ $dep_from "%TailAction"
				)
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified %ContextNode::GetBindingsRef call"
					@ "vau handler" @ "namespace %Forms",
				/ "direct reduction for proper tail call"
					@ "functions %ReduceTail" ^ "%ReductionStatus::Retrying"
					~ "recursive %Reduce call",
				(
				+ "function %ReduceOnce with perper tail calls" $=
				(
					// This is exact the %Reduce without outer loop, with some \
						tail call considerations. The calls of tail contexts \
						now use parent context directly, which should be \
						equivalent to previous implementation.
					/ $impl "direct proper tail call"
						^ "%ReductionStatus::Retrying",
					/ $impl "reduction of evaluation passes for perper tail \
						call" ^ $dep_from ("%ContextNode::SetupTail" @ %NPLA)
				);
				/ DLDI "simplified function %Reduce" ^ $dep_from
					("%ReduceOnce", "%ContextNodeRewrite" @ %NPLA),
					// Now the loop is implemented in %ContextNode::Rewrite. \
						It is easier to implement proper tail calls.
				/ $forced $impl "functions %(ReduceFirst, ReduceChecked, \
					ReduceChildren, ReduceChildrenOrdered, \
					 REPLContext::(LoadFrom#2, Process#3))"
					^ $dep_from "%ReduceContextGuarded"
				)
			)
		)
	)
),

b805
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service $=
			(
				+ "function templates %(SkipBOM; OpenSkippedBOMtream)"
					@ %TextFile,
				/ @ "class %SharedInputMappedFileStream" @ %File $=
				(
					/ $revert(b804) "reverted as nonmovable class" $=
					(
						- "move constructor";
						* $comp "invalid state of lock after move"
							@ "move constructor" $since b804,
							// This would cause invalid reference on \
								%UniqueFile.
						/ "base class %SharedIndirectLock<const UniqueFile>"
							-> "%SharedIndirectLockGuard<const UniqueFile>"
					),
					/ "%operator bool" -> ('using basic_ios::operator!;',
						'using basic_ios::operator bool;'),
					* $comp "seeking did not work" $since b724 $dep_from
						("%basic_membuf" @ %YBase.YStandardEx.StreamBuffer)
				)
			),
			/ $re_add(b774) @ "class %ValueNode" @ %Core.ValueNode $=
			(
				// Avoid redundant object creation like unifying assignment. \
					Note even with WG21 P0135R1, the construction of parameter \
					will still not be elided.
				/ "constructor with 1 container parameter"
					-> "2 constructors with container reference parameter"
				/ "constructor template with container parameter as 1st \
					parameter" -> "2 constructors template with container \
					reference parameter as 1st parameter"
			)
		),
		/ %NPL $=
		(
			+ "function template %TryLoadSouce" @ %NPLA1,
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					/ "applicative 'nullv?'" => 'nullrv?',
						// To be consistent with 'eqv?' and 'eqr?'.
					+ "applicative 'system-quote'",
					/ "applicatives %(SHBuild_EchoVar_N, SHBuild_BuildGCH)"
						>> ("%SHBuild-YSLib-common.txt" @ %Tools.Scripts)
				)
			)
		)
	),
	/ %Tools $=
	(
		/ %SHBuld.Main $=
		(
			/ $forced DLDI "simplified command 'RunNPLFile'" $dep_from
				("move constructor %SharedInputMappedFileStream"
				@ %YFramework.YSLib.Service.File)
				$= (/ DLDI ^ $dep_from ("%OpenSkippedBOMtream"
					@ %YFramework.YSLib.Service.TextFile)),
			/ DLDI "simplified command 'RunNPL', 'RunNPLFile'" ^ $dep_from
				("%TryLoadSouce" @ %YFramework.NPL.NPLA1)
		),
		/ %Scripts $=
		(
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				* DLDI "redundant %AR assignment"
					$orig (@ "SHBuild-YSLib-common.sh" $since b795),
				/ $forced DLDI $dep_from
					('build-with-conf-opt' @ "%SHBuild-YSLib-common.txt"),
				* "missing quotes for %SHBuild commond from environment \
					%SHBuild" $orig (@ "%SHBuild-YSLib-common.sh"$since b791)
					// This should not cause troble normally because it was \
						mostly only used internally, although it was a real bug.
					$= (/ $impl ^ $dep_from
						('system-quote' %YFramework.NPL.Dependency))
			),
			/ @ "applicative 'build-with-conf-opt'"
				@ "%SHBuild-YSLib-common.txt" $=
			(
				(
				+ "application mode support";
				+ "'-mwindows' and detection output" @ "%LDFLAGS"
					@ "application mode and %SHBuild_NoAdjustSubsystem is not \
					set" @ "platform %Win32"
				),
				/ DLDI "simplified applicative 'system-or-puts'"
			),
			- "exports %(SHBuild_YSLib_LibNames, SHBuild_YSLib_Flags, \
				SHBuild_Debug, SHBuild_Static)" @ "%SHBuild-YSLib-BuildApp.sh"
		)
	),
	* "missing protected overrider %(seekoff, seekpos)"
		@ "class template %basic_membuf" @ %YBase.YStandardEx.StreamBuffer
		$since b711
),

b804
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					+ "functions %(Equal, EqualLeaf)",
					/ "extended %EqualValue of list comparison for object \
						language"
				),
				/ DLDI "simplified" ^ '<const TermReference>'
					~ "%ystdex::as_const" $effective
					"functions %Forms::(Cons, Eval)"
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					* $comp "applicative 'eqv?' always resulted in #t for lists"
						$since b789 $dep_from ("%Forms::EqualValue" @ %NPLA1),
					(
					+ "applicative 'eql'?" $dep_from
						("%Forms::EqualLeaf" @ %NPLA1);
					/ DLDI "applicative 'not?'" ^ 'eql?' ~ 'eqv?'
						// This is efficient as before.
					),
					+ "applicative 'eq?'" $dep_from ("%Forms::Equal" @ %NPLA1),
					+ "applicative 'eqr?'"
				)
			),
			/ %NPLA $=
			(
				/ DLDI "explicitly qualified 'const'" ^ '<const TermReference>'
					$effective "functions %(ReferenceTerm#1, LiftTermOrRef, \
					LiftTermRefToSelf, LiftToReference)",
				(
				/ "avoided special handling for %TokenValue"
					@ "lifting routines" $=
				(
				/ "functions %LiftTermRef#(1, 2)" ^ "%ValueObject"
					~ "%LiftTermObject";
				/ $comp "all type of values are treated the same"
				);
				- "function %LiftTermObject"
				),
				/ @ "class %ContextNode" $=
				(
					+ DLDI "brace-initializer '{}'" @ "data member %Trace",
					+ "copying %Trace" @ "copy constructor" $dep_from
						%YFramework.YCLib.Debug,
					(
					* "missing swapping of %Trace" @ "function %swap" $since
						b803 ^ $dep_from ("%swap" @ %YCLib.Debug);
					* $comp "missing moving of %Trace" @ "move constructor"
						$since b803
					)
				)
			)
		),
		* "deleted move constructor" @ "class %SharedInputMappedFileStream"
			@ %YSLib.Service.File $since b724 $=
		(
			(
			/ $impl ^ "%SharedIndirectLock" ~ "%SharedIndirectLockGuard";
			/ $forced DLDI "constructor with 1 parameter",
			),
			+ "move constructor"
				// Implicit one would still does not work for %std::basic_ios. \
					It is still not necessary to initialize the base \
					%std::basic_ios instance explicitly for semantic reasons.
		),
		/ @ "class %Logger" @ %YCLib.Debug $=
		(
			* "missing copying %FilterLevel" @ "(copy, move) constructors"
				$since b803,
			(
			+ "friend function %swap";
			/ DLDI "simplified move constructor" ^ "%swap"
			)
		)
	),
	/ %Tools $=
	(
		/ "main function" @ %SHBuild.Main $=
		(
			/ @ "command 'RunNPLFile'" $=
			(
				+ "shared input stream support" ^ "%SharedInputMappedFileStream"
					~ "%ifstream",
				+ "support for ignoring UTF BOM" $dep_from
					%YFramework.YSLib.Service.File
			)
			* "unexpected NPLA1 tracing messages" @ "running command 'RunNPL' \
				or 'RunNPLFile'" @ "stage 1 execution" $since b803 $dep_from
				("copy constructor %ContextNode" @ %YFramework.NPL.NPLA)
				// See $2017-09 @ %Documentation::Workflow::Annual2017.
				$= (/ $impl "setting filter level to %Informative" ~ "%Debug")
		),
		/ %Scripts $=
		(
			/ @ "%(SHBuild-YSLib-common.txt, SHBuild-YSLib-build.txt)" $=
			(
				/ $lib $design "normalized *.txt with CR+LF EOL",
				/ "saved *.txt as UTF-8 + BOM" $dep_from %SHBuild.Main
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				* "operatives ('$assert-nonempty', '$set-system-var!')"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b795),
				* "operative '$env-de!'"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b791)
			)
		),
		* $comp "failed 1st stage boostraping caused by exception raised by \
			mismatched type of unevaluated symbols" $since b803 $dep_from
			(('$assert-nonempt', '$set-system-var!', '$env-de!')
			@ "%SHBuild-YSLib-common.txt" @ %Scripts)
			// Mangled type names \
				'N6ystdex14derived_entityINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJN3NPL7NPLATagEEEE' \
				and 'NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE' are \
				shown in exception message (of %ystdex::bad_any_cast) in case \
				using libstdc++.
	)
),

b803
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "function templates %(TraverseSubnodes, PrintContainedNodes; \
					TraverseNodeChildAndPrint)",
				/ DLDI "simplified function %PrintNode" ^ $dep_from
					"%TraverseSubnodes",
				(
				/ DLDI "simplified function %PrintNodeChild" ^ $dep_from
					"%TraverseNodeChildAndPrint" ~ "%PrintNodeChild";
				- "function %PrintNodeChild"
				),
				- "all 2 function templates %InvokePasses",
				+ "data member 'YSLib::Logger Trace;'" @ "class %ContextNode"
					$dep_from ("class %Logger" @ %YCLib.Debug),
				(
				+ "function %LiftTermOrRefToSelf";
				/ DLDI "function %(LiftTermToSelf, LiftToOther)"
					^ "%LiftTermRefToSelf" ~ "%LiftTermOrRef"
				)
			),
			/ %NPLA1 $=
			(
				(
				/ DLDI "function %Reduce" ^ "%ContextNode members"
					~ "functions %(InvokeGuard, InvokeList, InvokeLeaf)";
				- "functions %(InvokeGuard, InvokeList, InvokeLeaf)"
				),
				- "function %AccessLiteralPassesRef" $dep_from %Dependency,
				(
				/ DLDI "function %EvaluateLeafToken"
					^ "%ContextNode::EvaluateLiteral"
					~ "function %InvokeLiteral";
				- "function %InvokeLiteral"
				),
				(
				/ DLDI ^ "%ContextNode members"
					~ "functions %(AccessListPassesRef, AccessLeafPassesRef)"
					@ "function %SetupDefaultInterpretation";
				- "functions %(AccessListPassesRef, AccessLeafPassesRef)"
				),
				(
				/ DLDI ^ "%ContextNode::Guard" ~ "function \
					%AccessGuardPassesRef" @ "function %SetupTraceDepth";
				- "function %AccessGuardPassesRef"
				),
				/ @ "namespace %Forms" $=
				(
					/ "simplified trace" ^ $dep_from ("%ContextNode::Trace"
						@ %NPLA) ~ "%YTraceDe",
					/ "all non boolean condition treated as '#t'"
						@ "function %If",
					/ "%function %Eval" $=
					(
						/ $impl ^ "%AccessPtr" ~ "%LiftToOther";
						* "unexpected recursive evluations on symbol terms"
							$since b772;
							// The fix would break some code which wrongly \
								assumed it to work.
						* $comp "always convert lvalue operands to \
							rvalues recursively" $since b800,
						// The fix also reduces performance penalty on deep \
							tree transformation of the operand.
					),
					/ DLDI "simplified functions %(Vau, VauWithEnvironment)"
						^ "%ReferenceTerm" ~ "%LiftToSelf",
					/ "operands handling"
						@ "functions %(MatchParameter, BindParameter)" $=
					(
						/ $impl ^ $dep_from ("%LiftTermRefToSelf" @ %NPLA)
							~ "%LiftToSelf";
						* $comp "redundant lvalue-to-rvalue conversion on \
							unbound recursive terms" $since b800
					)
				)
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI ^ "%ContextNode::EvaluateLiteral"
					~ "function %AccessLiteralPassesRef",
				/ DLDI @ "loading forms" $=
				(
					+ $doc "guarantee of no evaluation of bodies"
						@ "operatives ('$vau', '$vaue', '$lambda', '$lambdae')";
					/ "simplified alternative derivation"
						@ "operative '$sequence'" ^ '$set!' ~ '$setrec!',
					/ "simplified operatives ('$defl!', '$defw!')" ^ '$defv!'
						~ ('$def!', '$vau'),
					/ "simplified applicatives %(first, rest, apply)" ^ '$defl!'
						~ ('$def!', '$lambda'),
					/ "simplified applicatives ('list*', %(accl, accr))"
						^ '$defl!' ~ ('$defrec!', '$lambda'),
					/ "simplified operatives ('$cond', '$let*')" ^ '$defv!'
						~ ('$defrec!', '$vau')
				)
			)
		),
		/ %YCLib.Debug $=
		(
			/ @ "class %Logger" $=
			(
				+ DLDI "brace-initializer '{}'" @ "mutex member";
				+ $lib 'DefDeCtor(Logger)';
				+ "constructors allowing specifying filter and sender",
				+ "(copy, move) (constructors; %operator=)"
			),
			/ DLDI "simplified destructor %AndroidLogSender"
				@ "platform %Android" ^ "%ImplDeDtor"
		)
	),
	* "'$if' applicative" @ %Documentation.NPL $since b792
		$dep_from ("%Forms::If" @ %YFramework.NPL.NPLA1)
		// The text contradicted with Scheme RnRS, but was consistent with \
			implementation. This is now corrected after %Forms::If modification.
),

b802
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			* "empty lists and symbols could not be referenced" $since b800
				// They are now true first-class objects.
				$= (/ $impl "simplified by referencing term directly"
					@ "function %EvaluateIdentifier"),
			/ @ "namespace %Forms" $=
			(
				* "missing lvalue support" @ "function %MakeEnvironment"
					$since b800 ^ "%ReferenceTerm",
				/ DLDI "protected term reference against unexpected \
					modification on %ReferenceTerm result" @ "functions \
					%(EqualReference, EqualValue, Cons)"
					^ "%ystdex::as_const",
				/ DLDI "simplified vau handlers" $dep_from
					^ "%ReduceCheckedClosure" ~ "%CheckNorm",
				* "unsafe evaluation" @ "function %Eval"
					$since b772 ^ "%ReduceCheckedClosure" ~ "%Reduce"
					// See $2017-09 @ %Documentation::Workflow::Annual2017.
			),
			/ $lib "supported external contexts" @ "class %REPLContext" $=
			(
				(
				+ "3 functions %Prepare";
				(
				+ "2 functions %ReadFrom";
				/ "all 2 functions %LoadFrom" -> "function templates"
					^ "%ReadFrom" ~ "%Process"
				),
				/ "all 2 function without term node" -> "function templates"
					^ "%ReadFrom" ~ "%Reduce"
				),
				(
				+ "function %Process with term node and context parameter";
				/ $dev $design $impl "simplified function %Process with \
					term node parameter" ^ "newly added overload"
				)
			),
			/ "function %ReduceCheckedClosure returned %ReductionStatus \
				value based on resulted term" ^ "%CheckNorm"
		),
		/ "loading forms" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			+ "operative '$lambdae'",
			+ "applicatives 'lock-environment'; 'make-standard-environment'",
				// Alternative implementation of standard environment \
					construction without dependency on environment locking is \
					also provided. Nevertheless, with environment locking, it \
					is simpler a lot.
			/ $dev $impl "simplified alternative derivation" @ "operative \
				'$sequence'" ^ $dep_from 'make-standard-environment',
			/ $impl @ "applicative 'map-reverse'" $=
			(
				* "invalid exposure of %cxrs" $since b791 ^ ('$let',
					$dep_from 'make-standard-environment'),
				/ "simplified" ^ $dep_from '$lambdae'
			),
			+ $impl 'ynothrow' @ "handler"
				@ "applicative 'weaken-environment'"
		),
		/ @ "function template %ComposeReferencedTermOp" @ %NPLA $=
		(
			/ $dev "trailing-return-type" ^ 'yimpl';
			/ "accepted non-unary functions" ^ "%ystdex::compose_n"
				~ "%ystdex::compose"
		)
	),
	* "strict ISO C++ conformance on declaration of primary template" $effective
		@ "using of %std::hash" @ %YBase.YStandardEx.(Memory, Optional, \
		Rational, StringView) $since b590
		// This behavior was undefined. For clarification, see https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/6VNskbSBRIs.
),

b801
(
	+ $re_add(b705) $dev $repo "tag 'V0.8' to revision 672",
	/ %YFramework $=
	(
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			/ DLDI "member function %FileInfo::Read" ^ 'ythrow' ~ 'throw',
				// Also to eliminate G++ warning: [-Wdeprecated].
			/ $re_add(b793) DLI "marked fallthrough" @ "constructor %FileInfo"
				^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ @ "class %Partition" $=
			(
				/ @ "private constructor" $=
				(
					+ DLDI "'YB_NONNULL' attribute for 1st parameter",
					/ "exception messages",
					^ "nested exceptions with %std::errc::io_error on reading \
						failure for verification and finding"
					* "partition initialzation faliure on verifying FAT \
						partition when the 0 sector is not ready and the \
						master partition is valid and readable" $since b611
						// See $2017-08 @ %Documentation::Workflow::Annual2017.
				),
				/ $lib $design "asserting string" @ "function %CreateFSInfo",
			)
		),
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				/ DLDI "simplified subterms cleanup"
					!^ "%TermNode::LiftTerm" @ "functions %(And, Or)",
				(
				/ @ "exception messages"
					@ "functions %(ReduceCombined, MatchParameter)" $=
				(
					/ $impl ^ $dep_from ("%TermToString" @ %NPLA);
					/ $comp "compressed external representation of term \
						with subnode number",
				);
				/ $comp "term represented as name if possible"
					@ "exception messages" @ "function %MatchParameter"
				)
			),
			+ "functor %ReferenceTermOp; function template \
				%ComposeReferencedTermOp" @ %NPLA,
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				+ "applicative 'null?'" => 'nullv?';
				+ "applicative 'null?'" ^ $dep_from
					("%ComposeReferencedTermOp" @ %NPLA)
			)
		),
		* "missing %release call on %UniqueFile after initialization success"
			@ '!__GLIBCXX__' @ "constructor %basic_filebuf with %UniqueFile \
			parameter" @  %YCLib.FileIO $since b709
			// This bug would leave a bad file descriptor in the stream buffer \
				after the constructor call.
	),
	/ %Tools $=
	(
		/ %ProjectGenerator.Main $=
		(
			+ $re_add(b794) '-Wno-noexcept-type' @ "options",
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			* "wrong prefixes for paths in link creation destinations for \
				generatoed .cbp file of YSTest %debug_DLL configurations" $since
				b739
				// This would cause correct .dll files not found on running \
					the built executable files.
		);
		/ $re_ex(b700) "regenerated Code::Blocks projects"
			^ ("%GenerateProjects.sh" @ %Scripts)
	),
	/ %YBase.YStandardEx $=
	(
		* "wrong allocator for internal map violated allocator-aware container \
			requirement on %value_type" @ "class template %mapped_set"
			@ %Set $since b665,
		/ "supported forwarding reference parameters"
			@ "all 3 function templates %quote" @ %String
	)
),

b800
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "class %TermReference, 2 functions %ReferenceTerm; 2 \
					function templates %(AccessTermPtr, AccessTerm), functions \
					%(LiftTermOrRef; LiftToSelf; LiftToOther)",
				/ "function %ReferenceValue" -> "%LiftToReference" $dep_from
					"%LiftTermOrRef",
				- "all 3 functions %LiftTermRef" $dep_from
					("%EvaluateIdentifier" @ %NPLA1),
			),
			/ %NPLA1 $=
			(
				- 'const' @ "return type" @ "function %ResolveName",
				/ @ "namespace %Forms" $=
				(
					+ "type" @ "exception message"
						@ "functions %(WrapOnce, Unwrap)",
					+ "function %ResolveEnvironment for %TermNode reference"
						^ $dep_from ("%ReferenceTerm" @ %NPLA),
					/ "handled %TermReference to allow reference value used as \
						first-class object" $=
					(
						/ "function %(ReduceCombined, Forms::(And, Or, If))"
							^ $dep_from ("%AccessTermPtr" @ %NPLA)
							~ "%AccessPtr",
						/ "functions %Forms::(VauWithEnvironment, Eval)"
							^ $dep_from "%ResolveEnvironment",
						/ "function templates %Forms::(CallUnaryAs, \
							CallBinaryAs, CallBinaryFold)" ^ $dep_from
							("%NPL::AccessTerm" @ %NPLA),
						/ "functions %Forms::(Eval, ValueOf)" ^ $dep_from
							("%LiftToOther" @ %NPLA) ~ "%LiftTerm"
							// See $2017-08 @ \
								%Documentation::Workflow::Annual2017.
						/ "function %Forms(DefineLazy, DefineWithNoRecursion, \
							DefineWithRecursion, Lambda, Vau, \
							VauWithEnvironment)" ^ $dep_from "%LiftToSelf",
						/ "functions %Forms::(EqualReference, \
							EqualValue, MatchParameter, BindParameter, \
							ReduceCheckedClosure)" ^ $dep_from
							("%ReferenceTerm" @ %NPLA),
						/ "handled reference term" @ "function %Forms::Cons"
					);
					* "list reference cannot be replaced as real lvalue"
						@ "function %EvaluateIdentifier" $since b768 $dep_from
						"%ResolveName"
						$= (/ $revert_ex(b799) $impl ^ ($dep_from
							"%(ReferenceTerm, TermReference)" @ %NPLA)
							~ "%LiftTermRef")
					),
					/ $comp ("allowed returning list as last element"
						~ "non-list value") @ "function %Or"
				)
			),
			/ $forced DLDI "handled %TermReference" @ "loading forms"
				@ "function %LoadNPLContextForSHBuild"
				@ %Dependency $dep_from ("%EvaluateIdentifier" @ %NPLA1) $=
			(
				/ "%ref" ^ (("%LiftToReference" ~ "%ReferenceValue") @ %NPLA),
				/ 'bound?' ^ $dep_from ("%AccessTermPtr" @ %NPLA)
					~ "%AccessPtr",
				/ ('string<-', 'regex-match?') ^ $dep_from
					("%AccessTerm" @ %NPLA) ~ "%Access"
			)
		),
		/ %YCLib $=
		(
			/ "limited %FAT::LFN::(MaxLength, MaxMBCSLength) value as '255'"
				 @ FileSystem,
				// See $2017-08 @ %Documentation::Workflow::Annual2017.
			/ @ "platform %DS" @ %NativeAPI $=
			(
				+ "worked arounded missing %__sync_synchronize stub for \
					devkitARM r46",
					// See https://devkitpro.org/viewtopic.php?f=13&t=8643&start=10.
				/ $impl ^ "%::isDSiMode" ~ "%::__dsimode" $dep_from
					"libnds update"
			),
			/ @ "function %omode_conv with %std::ios_base::openmode parameter"
				@ %FileIO $=
			(
				/ $impl "simplified" ^ "%OpenMode::CreateExclusive"
					~ "%OpenMode::(Create, Exclusive)";
				* "wrong result for %platform::ios_nocreate"  $since b722
			),
			/ $re_add(b793) "marked fallthrough" @ "function \
				%ExecuteShellCommand" @ "platform %Win32" @ %HostedGUI
				^ "%YB_ATTR_fallthrough"
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		),
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			* "wrong check for exclusively creation flags"
				@ "constructor %FileInfo" $since b722,
			(
			/ @ "class %DEntry" $=
			(
				/ DLDI "simplified function %QueryNextFrom"
					$= (- "redundant volume check"),
				/ @ "constructors" $=
				(
					* "name position not correctly initialized for all cases \
						require the value" $since b656,
					* "missing keeping last component name after check for path"
						@ $since b656;
					* $comp "%std::errc::not_a_directory thrown for leaf with \
						%OpenMode::CreateExclusive" $since b721
						// The value of %errno is overriden later.
				)
			);
			* $comp "%Partition::IncrementPosition assertion failure"
				@ "%debug configurations" $since b762
			)
		),
		/ $re_add(b793) "marked fallthrough" @ "function \
			%TryCategorizeNodeDevice" @ %'Helper_(Win32)'.MinGW32
			^ "%YB_ATTR_fallthrough",
			// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		/ DLDI "cast to %SDst" @ %YSLib.Service.TextRenderer
			// To eliminate warning: [-Wsign-conversion].
	),
	/ %Tools $=
	(
		/ @ "default value" @ "variable %CXXFLAGS_IMPL_WARNING"
			@ "%Toolchain.options.mk" @ %Scripts $=
		(
			+ $re_add(b794) '-Wno-noexcept-type',
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			+ '-Wno-ignored-attributes'
				// To eliminate G++ 7 warning: [-Wignored-attributes] which is \
					enabled by default. It is at least offending to \
					%PixelQuadruple in %YFramework.YCLib.Viedo and being hard \
					to turned off by pragma in single file since it may \
					propagate in template declarations.
		),
		/ %RevisionPatcher.Main $=
		(
			* "wrongly ignored newly added files"
				@ %RevisionPatcher.Main $since b791
				$= (/ $revert_ex(b791) $impl "detected prefix without 'a/'"),
			/ $re_add(b793) "marked fallthrough" ^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ DLDI "simplified patched lines filtering"
		)
	),
	/ %YBase.LibDefect $=
	(
		/ %String $=
		(
			+ "support of %_GLIBCXX_USE_CXX11_ABI detection",
			+ "support of %_GLIBCXX_USE_C99_STDLIB detection"
		),
		+ "support of GCC greater than 7.0 which has bug 58938 fixed"
			@ %Exception,
			// NOTE: Other headers like %YBase.YStandard.Future are still to \
				be updated. Currently these features are not required at lease \
				on platform %DS.
		+ "support of %__ISO_C_VISIBLE detection" @ 'defined(_NEWLIB_VERSION)'
			@ %CStandardIO
			// To eliminate GCC warning: [-Wredundant-decls].
	),
	* $comp "file creation failure with %errno value 138" @ "platform %DS"
		@ "function %LoadNPLA1File" @ %Helper.Initialization $since b721
		$dep_from ("constructors %DEntry" @ %'YCLib_(DS)'.DSIO)
		// See also %'YCLib_(DS)'.DSIO correction for %FileInfo constructor \
			which is hidden by this bug.
	/ $re_ex(b700) "updated %SUBTITLE2 year" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	/ $re_ex(b700) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts);
);

////

