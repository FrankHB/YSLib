/*
	© 2017-2020 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file ChangeLog.V0.8.txt
\ingroup Documentation
\brief 版本更新历史记录 - V0.8 。
\version r19544
\author FrankHB <frankhb1989@gmail.com>
\since build 800
\par 创建时间:
	2017-08-10 01:58:36 +0800
\par 修改时间:
	2020-06-12 21:33 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::ChangeLog::'V0.8'
*/

// See %Documentation::Meta for meta descriptions.

$import $HISTORY;

// Scope: [b800, $now];

$now
(
	+ %TypeIndex @ %YBase.YStandardEx,
	/ %YFramework $=
	(
		+ 'using ystdex::type_index;' @ %YSLib.Core.YObject
			$dep_from %YBase.YStandardEx.TypeIndex,
		/ %NPL $=
		(
			/ DLDI "avoided access of %Context::Current directly"
				@ %NPLA1Internal
				^ $dep_from ("%ContextNode::(AccessCurrentAs, IsAlive)" @ %NPLA)
				$dep_to "avoiding direct access of the current action",
			/ "merged all call sites of %(RelayNext, ComposeSwitched)"
				$effecitve @ %(NPLA1Internal, NPLA1, NPLA1Forms)
				$dep_from "sequenced current action"
				$dep_to "avoiding directly composed actions",
			/ %NPLA $=
			(
				/ "enabled ADL %RelaySwitched" @ "%operator()"
					@ "class template %GCompasedAction",
				- "function %MoveAction"
					$dep_to "avoiding direct access of the current action",
				/ @ "class %ContextNode" $=
				(
					// See $2020-06 @ %Documentation::Workflow.
					+ "function %UnwindCurrent",
					+ "function template %AccessCurrentAs",
					+ "functions %(IsAlive, GetCurrentActionType)",
					/ "hid public data member %Current" 
						$dep_all_from "avoiding direct access of the current \
						action",
					(
					- "all 3 functions %Push" $dep_from "%MoveAction",
					(
					/ "simplified function %Rewrite"
						^ $dep_from "%IsAlive" ~ "%Transit";
					- "function %Transit";
					- "function %Pop",
					),
					- "avoided swapping %Delimited" @ "friend function %swap";
					- "data member %Delimited"
					);
					/ "sequenced current action" $=
					(
						+ "class %ReducerSequence"
							^ "%YSLib::forward_list<Reducer>",
						/ DLDI "explicitly removed all actions" @ "destructor"
							^ $dep_from "%UnwindCurrent";
						/ "current action with type %Reducer"
							-> "action sequence of %ReduceSequence";
						/ $forced "function template %SetupCurrent",
						+ "function template %SetupFront",
						/ "function %Switch accepted and returned \
							%ReducerSequence" $dep_from
							"avoiding direct access of the current action",
						/ $forced DLDI "functions %(IsAlive, \
							GetCurrentActionType)";
						/ $forced "function %ApplyTail"
					);
					+ "class %ReductionGuard",
					+ $doc "guarantee of the postfix in the current action \
						sequence not invalidated in the tail action application"
						@ "function %ApplyTail",
						// This allows action inspection and continuation marks.
					(
					+ DLI "stashed empty action sequence"
						^ 'YSLib::forward_list';
						// This improves perforamnce significantly.
					+ $foced DLDI "swapped stashed empty action sequence"
						@ "friend function %swap",
					+ "function %shrink_to_fit"
					),
					+ "function %GetCurrent",
					/ DLI "copy constructor" ^ "%DefDeCopyCtor",
						// Stashed actions need not be copied.
					/ "handled exception %bad_any_cast and converted to \
						%TypeError" @ "function %Rewrite"
				),
				/ "avoided access of %Context::Current directly"
					$effective @ ("function templates \
					%(ComposeSwitchedUnchecked, ComposeSwitched, \
					RelaySwitchedUnchecked, RelaySwitched)")
					^ $dep_from "%ContextNode::SetupFront"
					~ "%ContextNode::(Current, Switch)"
					$dep_to "avoiding direct access of the current action",
				- "function template %RelaySwitchedUnchecked"
					$dep_from "avoiding RelaySwitchedUnchecked",
				- "function templates %(RelayNext, ComposeSwitched)"
					$dep_from "avoiding directly composed actions";
				- "function template %ComposeSwitchedUnchecked";
				- "function template %ComposeActions";
				* $re_add(b865) $comp "missing qualified 'NPL::'" @ ("call of \
					%ComposeSwitchedUnchecked" @ "function template \
					%ComposeSwitched" @ $since b856, ("call of %ComposeActions"
					@ "function template %RelayNext", "call of %RelayNext"
					@ "function template %RelaySwitchedUnchecked",
					"call of %RelaySwitchedUnchecked"
					@ "function template %RelaySwitched") @ $since b841),
					// ADL is not intended here.
				- "class template %GComposedAction"
			),
			/ %NPLA1 $=
			(
				/ "function %Reduce" $=
				(
					/ $impl
						^ $dep_from ("%ContextNode::AccessWithGuard" @ %NPLA);
					/ $comp DLDI "avoided access of %Context::Current directly"
						$dep_to "avoiding direct access of the current action",
					/ $comp "perserved the current action on exit by exceptions"
						@ 'NPL_Impl_NPLA1_Enable_Thunked'
						// This allows the further inspection of the current \
							action on exit by exceptions.
				),
				/ "setup pass using appending instead of overwritng"
					@ "function %SetupTraceDepth",
				/ @ "class %ContextState" $=
				(
					+ "function %RewriteTerm",
					+ "function %RewriteTermGuarded",
					* "missing copying of %ReduceOnce"
						@ "(copy, move) constructors" $since b877,
					(
					/ "intialized guard" @ "constructor#1"
						^ "%ContextNode::ReductionGuard";
					/ DLDI "function %RewriteGuarded"
						^ $dep_from ("%ContextNode::UnwindCurrent" @ %NPLA)
						// See $2020-06 @ %Documentation::Workflow.
					)
				),
				/ DLDI "simplified function %Reduce"
					^ $dep_from "%ContextState::RewriteTermGuarded"
					~ "%ContextState::RewriteGuarded",
				/ @ "class %REPLContext" $=
				(
					/ @ "static function %ReduceAndFilter" $=
					(
						/ "threw type error" ^ "%(std::throw_with_nested, \
							TypeError)" ~ "%LoggedEvent",
						- "handling of other exceptions"
					),
					(
					/ "function templates %(LoadFrom, Perform)" ^ "%Reduce"
						~ "%ReduceAndFilter";
						// The error of %bad_any_cast is now filtered at \
							%ContextNode::Rewrite.
					- "static function %ReduceAndFilter"
					)
				),
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "function %QuerySourceInformation",
				(
				+ DLI "internal continuation names" ^ $dep_from \
					%(YSLib.Core.YObject, YBase.YStandardEx.TypeIndex);
				+ "function %QueryContinuationName"
				)
			),
			/ "all call sites of %RelaySwitchedUnchecked" ^ "%RelaySwitched"
				$effective @ %(NPLA1Internal, NPLA)
				$dep_to "avoiding RelaySwitchedUnchecked"
		)
	)
),

b891
(
	/ %YFramework $=
	(
		/ $dev $lib %YCLib.YCommon $=
		(
			/ $re_ex(b880) "ignored G++ warnings \
				('-Wsuggest-attribute=const', '-Wsuggest-attribute=pure')"
				@ "macro %YCL_DefPlatformFwdTmpl"
				@ 'YB_IMPL_GNUCPP >= 60000'
				^ "%(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore)",
			/ $design $impl "alias template %MetaID"
				^ "%std::integral_constant" ~ "%ystdex::integral_constant"
				// This should be same.
		),
		/ %YSLib.Core.YObject $=
		(
			/ @ "interface %IValueObject" $=
			(
				/ $dev $lib "reordered abstract method %Create",
				+ "abstract method %Query"
			),
			+ $forced "overrider %Query"
				@ "class templates %(ValueHolder, PointerHolder, RefHolder)",
			/ @ "class %ValueObject" $=
			(
				- 'explicit' @ "constructor with allocator parameter and \
					in-place value tag",
					// To be consistent to %any.
				+ $dev "static assert to ensure reference to the holder type \
					convertible to 'IValueHolder&'"
					@ "constructor template with holder tag",
				+ "constuctor template with allocator parameter and in-place \
					holder tag",
				+ "function %Query" $dep_from "%IValueHolder::Query",
				+ 'YB_PURE' @ "functions %(Create, MakeCopy, MakeMove, \
					MakeMoveCopy, MakeIndirect)"
			),
			+ "class template %AllocatedHolderOperations",
			/ @ "class template %AlloatorHolder" $=
			(
				(
				/ "access specifier 'private'" @ ('using base::value;',
					"function %get_allocator") -> 'public';
				* $comp "inaccessible %get_allocator" $since b887
				),
				/ DLDI "overrider %Create"
					^ $dep_from "%AllocatedHoderOperations"
			)
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				* "wrong handling of '\b' unescaping" @ "function %NPLUnescape"
					$orig (@ "member function %LexicalAnalyzer::HandleEscape"
					$since b335),
				(
				+ DD "Doxygen group %LexicalParsers";
				+ DD "Doxygen command '\ingroup LexicalParsers'"
					@ $dep_from "classes %(ByteParser, DelimitedByteParser)"
				),
				+ "metafunctions %(MemberParseResult, ParserClassOf; \
					ParseResultOf; GParserResult)",
				/ $forced ("function %GetTokenList" => "%GetResult")
					@ $dep_from ("classes %(ByteParser, DelimitedByteParser)",
					"%Session::GetResult" @ %SContext)
					$dep_to "renaming parse result getter",
				(
				+ "final struct %SourceLocation";
				+ "class %SourcedByteParser"
				),
				(
				+ "alias %SourceName" $dep_from "%shared_ptr";
				+ "alias %SourceInformation" $dep_from "%SourceLocation"
				)
			),
			/ %SContext $=
			(
				/ ('using YSLib::pair;', 'using YSLib::shared_ptr;')
					>> %Lexical,
				(
				/ $revert_ex(b889) 'using YSLib::lref;' >> %Lexical;
				/ "class %BufferedByteParserBase" >> %Lexical;
				/ "class %ByteParser" >> %Lexical $=
				(
					/ "character update" @ "function template %operator()" $=
					(
						/ DLI "simplified buffer length check",
							// Now support of shrinked string buffer is \
								dropped. This is never supported formally, as \
								'\b' handling is never correctly implemented \
								by buffer 'pop_back'.
						+ $lib $impl "assertion for invariant",
						* "strong exception safety" $since b890
					),
					/ DLI "simplified buffer management by dropping the \
						previously handled sequence",
						// The old position is also removed. Note %reserve is \
							preserved even though the full sequence is not \
							saved now because it is still useful for other \
							filters and actually a slightly more efficient for \
							the default case.
					(
					+ "alias %ParseResult";
					/ "%GetResult" ^ "%ParseResult" $dep_from
						("renaming parse result getter", "%SContext::Analyze")
						// This does not relies on %Decompose, so it is \
							suboptimal to use %list instead of %vector.
					),
				)
				),
				+ "alias %TermByteAllocator",
				/ @ "class %Session" $=
				(
					/ "function %GetTokenList" @ "class %Session"
						-> "%GetResult"
						^ $dep_from ("%GParserResult" @ %Lexical),
					- 'DefDeCopyMoveCtorAssignment(Session)',
						// Also to eliminate Clang++ 10.0 warning: \
							[-Wdefaulted-function-deleted].
					/ DLDI ("internal types", "constructor",
						"function %get_allocator")
						^ $dep_from "%TermByteAllocator"
						~ 'pmr::polymorphic_allocator<yimpl(byte)>'
						// The type is actually not changed.
				),
				/ @ "namespace %SContext" $=
				(
					(
					+ "function template %ToLexeme",
					/ DLDI "qualified %Reduce calls with prefix 'SContext::'"
						@ "all overloads %Analyze";
						// To avoid unexpected ADL.
					/ "functions %SContext::(Validate, all 2 %Reduce)"
						-> "function template with 2 input iterator parameters"
						^ "%ToLexeme"
						$dep_to "avoided concrete token list iterators";
					+ "struct %LexemeTokenizer";
					/ "simplified overload %Reduce without explicit tokenizer \
						parameter" ^ "%LexeTokenizer"
					),
					/ "parameterized %Tokenizer parameter as function template \
						parameter" @ "overloads %(Reduce, Analyze)",
					(
					/ "all 2 functions %Analyze"
						-> "2 function templates with parse result parameter";
					/ "alias %Tokenizer" >> ("namespace %NPL" @ %NPLA1),
					+ DLDI 'inline' @ "all overloaded function templates \
						%Analyze implemented with single call of %Analyze"
					)
				),
				- "alias %LLCIter"
					$dep_from "avoided concrete token list iterators",
				(
				+ "function %SContext::ToLexeme with \
					%SourcedByteParser::ParseResult::value_type parameter"
					$dep_from ("%SourcedByteParser" @ %Lexical)
				),
				/ DLD ("parameter type 'const TermNode::allocator&'"
					-> 'TermNode::allocator') @ "function templates \
					%(AsTermNode, SContext::Analyze) with allocator parameter"
					// This is more consistent with other uses of \
						%TermNode::allocator_type.
			),
			/ %NPLA1 $=
			(
				(
				+ "alias template %GTokenizer"
					^ $dep_from ("%GParserResult" @ %SContext);
				/ $dev $lib $dep_from "%Tokenizer" ^ "%GTokenizer",
				+ "alias %SourcedTokenizer"
				),
				+ "function %ParseLeafWithSourceInformation"
					$= (/ $impl ^ $dep_from
						("%AllocatedHoderOperations" @ %YSLib.YObject)),
				/ "function template %ProcessWith"
					-> "2 overloads with parameterized tokenizer support",
				/ @ "class %REPLContext" $=
				(
					/ "parameterized %Tokenizer parameter as function template \
						parameter" @ "%Prepare#2"
						$dep_from ("%SContext::Analyze" @ %SContext),
					(
					+ "support of tokenizer type other than %Tokenizer"
						@ "function template %Prepare" $dep_from
						("%SContext::(Analyze, ToLexeme)" @ %SContext),
					(
					+ "enum %LoadOption";
					+ "alias template %LoadOptionTag";
					),
					+ "3 functions and 1 function template %Perform with \
						parameter of %LoadOptionTag instance type",
					/ "old 2 functions %Perform depended on %Use"
					),
					/ $forced $dev $lib ("data member %ConvertLeaf",
						"constructor#2")
						^ $dep_from ("%Tokenizer" ~ "%SContext::Tokenizer"),
					(
					+ "data member %ConvertLeafSourced"
						^ $dep_from "%SourcedTokenizer";
					/ "added 2nd parameter" @ "constructor#2"
						^ $dep_from "%ParseLeafWithSourceInformation"
					),
					(
					+ "data member %UseSourceLocation";
					/ "functions %Perform#(1, 2) conditionally used source \
						location"
						// Use %LoadOptionTag to change the behavior, include \
							the old one.
					),
					/ @ "all overloads %Perform" $=
					(
						- "check for empty string literals",
							// This check is at least still not enough for \
								strings with only delimiters. Better check it \
								elsewhere in the client code.
						/ $impl ^ "%ReduceAndFilter" ~ "%ProcessWith"
							$dep_to "removal of ProcessWith"
					),
					(
					- "function template %ProcessWith"
						$dep_from "removal of ProcessWith";
					- "function template %Process"
					),
					(
					+ "%ReadFrom overloads with %string_view parameter",
					+ "%ReadFrom overloads with context parameter",
					+ "%ReadFrom overloads with load option tag parameter"
						$dep_from "%LoadOptionTag",
					+ "%LoadFrom overloads" @ "%LoadFrom",
					(
					/ "simplified overloads with function templates";
					/ DLDI "simplified %Perform" ^ "%LoadFrom",
					/ "supported forwarding input type other than %string_view"
						@ "%Perform overloads"
						// The only differences of %Perform to %LoadFrom now \
							is the result is not discarded immediately. There \
							may be more different loading options for \
							%LoadFrom in future.
					)
					)
				),
				+ "function %QuerySourceInformation"
					$dep_from ("%SourceInformation" @ %Lexical)
			)
		)
	)
),

b890
(
	/ %YBase.YStandardEx $=
	(
		+ $dev $lib 'YB_PURE' @ "all function templates %(polymorphic_cast, \
			polymorphic_downcast, polymorphic_crosscast, narrow_cast, narrow, \
			not_widen_cast, not_widen)" @ %Cast,
			// Also to eliminate G++ 9.2.1 warning: [-Wsuggest-attribute=pure].
		+ $dev $lib 'YB_ATTR_nodiscard' @ ("all function templates" @ %Cast,
			("all non-special member functions"
			@ "class templates %(boxed_value, nifty_counter, call_once_init)",
			"all non-deleted function templates") @ %Utilities),
		+ $dev $lib 'YB_STATELESS' @ "function templates %(as_const, \
			underlying)" @ %Utilities
	),
	/ %YFramework.NPL $=
	(
		/ @ "class %LexicalAnalyzer" @ %Lexical $=
		(
			(
			- $revert(b763) "function %ParseRaw";
			/ "inserted 2nd parameter as buffer"
				@ "function template %FilterChar",
				// %ParseQuoted needs no modification occasionally.
			- "function %(Reserve, GetBuffer, GetLastDelimited)";
			/ $dev $impl "internal buffer"
				$dep_to "removal of lexical internal buffer";
			/ "merged 2 constructors" ^ "%DefDeCtor"
			),
			/ @ "function %UpdateBack" $=
			(
				- "assertion";
				/ "inserted 1st parameter as output"
			),
			+ "function %GetUnescapeContext",
			/ DLI "type %LexemeList" ^ "%string" ~ "%std::string"
		),
		/ %SContext $=
		(
			/ "function overloads %Analyze with 'const ByteParser&' parameter"
				-> "function templates with parameterized parser parameter",
			+ "class %BufferedByteParserBase",
			/ @ "class %ByteParser" $=
			(
				(
				+ "function %GetTokenList";
				- "function %GetQuotes"
				),
				(
				(
				+ $forced "buffer for character sequence in parsing"
					$dep_from ("removal of lexical internal buffer",
					"%Session::GetBuffer") $=
				(
					(
					+ "internal buffer"
						$= (+ $impl "private base"
							^ $dep_from "%%BufferedByteParserBase"),
					+ "function %GetBuffer"
					),
					+ "allocator parameter" @ "constructor#1";
					(
					+ "friend function %swap";
					/ "copy constructor copied buffers using allocators"
					),
					/ $forced DLDI "function %GetLeerRef"
						^ "%DefGetterBase" ~ "%DefGetter",
					/ $forced DLDI "function template %operator()" $dep_from
						("%LexicalAnalyzer::(FilterChar, GetLastDelimited)"
						@ %Lexical),
					(
					/ $impl "saved allocator"
						@ "private data member %Allocator";
						// For %ByteParser construction
					+ "fucntion %get_allocator"
					)
				);
				/ "function %GetLexerRef"
					-> 'using BufferedByteParserBase::GetLexerRef'
				);
				+ 'using BufferedByteParserBase::reserve;',
				+ 'using BufferedByteParserBase::GetBuffer;',
				+ 'using BufferedByteParserBase::GetBufferRef;'
				),
				/ "constructor#1 supported default argument for the \
					allocator"
			),
			/ @ "class %Session" $=
			(
				/ "function %GetTokenList" -> "function \
					template" $dep_from "%ByteParser::GetTokenList",
				/ @ "function templates %Process" $=
				(
					- DLI 'YB_FLATTEN',
						// This is a slightly better at least with GCC 10 \
							which has imporved inlining heuristics.
					/ DLI "simplified overloads",
					/ $forced "reservation for random iterators"
						$dep_from ("%ByteParser" @ %Lexical)
						$= (/ $impl ^ ("member %reserve on the parser"
							~ "%ByteParser::Reserve"
							$dep_from "%ByteParser::reserve") @ %Lexical)
				),
				- "function %GetBuffer",
				(
				+ 'using DefaultParser = ByteParser;';
				/ "function templates %Process without explicit parser \
					parameter" ^ "%DefaultParser" ~ "%ByteParser"
					// This makes chaning the implicit parser far easier.
				)
			),
			+ "class %DelimitedByteParser"
				// This now preserves the old %ByteParser interface with \
					an internal buffer inside.
		),
		/ @ "class %REPLContext" @ %NPLA1 $=
		(
			/ @ "overloads %Prepare" $=
			(
				+ "return type %TermNode",
				(
				/ "support parameter forwarding to %SContext::Analyze by \
					merged overloads except for case with single term node \
					parameter as a function template";
				/ $comp "case of lexeme list" ^ "allocator"
				)
			);
			/ $dev "simplified function template %ProcessWith with full \
				forwarding support"
		),
		/ $forced DLDI %Dependency $=
		(
			/ "applicative %SHBuild_TrimOptions_"
				@ "function %LoadModule_SHBuild" $dep_from
				("%LexicalAnalyzer::(FilterChar, UpdateBack)" @ %Lexical),
			/ "funtion %DecomposeMakefileDepList"
				$dep_from ("%Session::GetBuffer" @ %SContext,
				"LexicalAnalyzer::FilterChar" @ %Lexical
		),
		/ DLI "ignored 'suggest-attribute=pure'"
			@ 'defined(NDEBUG) && YB_IMPL_GNUCPP >= 100000'
			@ "function %Retain" @ %NPLA1Forms
			^ "%(YB_Diag_Push, YB_Diag_Ignore, YB_Diag_Pop)"
	)
),

b889
(
	/ %YBase.YStandardEx $=
	(
		+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
			@ "function templates %(lower_bound_n, upper_bound_n)"
			@ %Algorithm,
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		+ $dev $lib 'YB_PURE' @ ("all 10 string search function templates with \
			name prefix 'str_'" @ %CString, "all function %operator*"
			@ "class templates %(indirect_input_iterator, pseudo_iterator, \
			subscriptive_iterator)" @ %Iterator),
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		+ $dev $lib 'YB_ATTR_nodiscard' @ ("all 35 pure function or function \
			templates with name prefix 'const_' or 'ntcts'" @ %CString,
			"all 8 member function %operator*" @ %Iterator,
			"all 2 function templates %(min, max, clamp)" @ %Algorithm,
			"all 14 function and function templates" @ %CCharacterType),
		+ $dev $lib 'YB_PURE' @ "all 2 function templates clamp" @ %Algorithm,
			// To eliminate G++ 10.1 warning: [-Wsuggest-attribute=pure].
		+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
			@ (("all friend functions", "all const functions")
			@ "class templates %(transposed_iterator, subscriptive_iterator)",
			"all 2 function templates %make_transposed") @ %Iterator,
			// Also to eliminate G++ 10.1 warning: [-Wsuggest-attribute=pure].
	),
	/ %YFramework $=
	(
		/ %YSLib.UI $=
		(
			+ 'const' @ ("member function %BorderResizer::CheckArea" @ %Border,
				"member function %TextBox::GetCaretPosition" @ %TextBox),
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ "function %CheckArea"
				@ ("member function %BorderResizer::CheckArea" @ %Border,
				"member functions %TextBox::(GetCaretLocation, \
				GetCaretPosition, GetPenOffset)" @ %TextBox,
				("member functions %((HSL, HSV)::operator Color, \
				Palette::GetPair)", "function %FetchDefault") @ %YStyle),
				// Also to eliminate G++ 10.1 warning: \
					[-Wsuggest-attribute=pure].
			+ DD "Doxygen comments" @ "data members" @ "class %Palette"
				@ %YStyle
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				/ @ "class %LexicalAnalyzer" $=
				(
					+ "function %GetLastDelimited",
					(
					+ "function %UpdateBack",
						// No null character is handled like %ReplaceBack.
					- "function %GetQuotes";
					- ("quotes handling", "function template %ParseByte")
						$dep_from "removal of lexer quote list";
					- "function %ReplaceBack"
					),
					- "function %Literalize" $dep_from
						"removal of lexer literalization"
				),
				/ DLDI "simplified function %NPLUnescape",
				(
				- "function %Tokenize"
					$dep_from ("%Session::GetTokenList" @ %SContext);
				- "type %TokenViewList"
					$dep_from "removal of value view list type"
				),
				/ "alias %TokenList" => "%LexemeList"
			),
			/ 'using YSLib::lref;' @ %NPLA >> %SContext,
			/ %SContext $=
			(
				+ "class %ByteParser" ^ $dep_from ("%lref" @ %NPLA,
					"%LexicalAnalyzer::GetLastDelimited"),
				/ @ "class %Session" $=
				(
					/ "function templates %Parse with character parser \
						parameter" ^ "parser call" ~ "binding with lexer"
						$dep_to "parser parameter type",
					(
					/ $forced DLDI "function templates %Parse without \
						additional function parameter" ^ $dep_from
						"%ByteParser" $dep_from "%LexicalAnalyzer::ParseByte"
						$dep_from "removal of lexer quote list";
					/ "function %GetTokenList" ^ "%ByteParser parameter"
						~ "%LexicalAnalyzer::Literalize"
						$dep_to "removal of lexer literalization"
					),
					- "alias %CharParser",
					/ "overloads %Parse" => "%Process"
				),
				- "alias %TLIter",
				/ "alias %TLCIter" => "%LLCIter",
				/ @ "%Analyze overloads" $=
				(
					+ "%ByteParser parameter"
						^ $dep_from "%Session::GetTokenList",
					/ "2 function templates"
						-> "overload with or without allocator parameter"
						^ "%std::allocator_arg_t"
				)
			),
			/ %Dependency $=
			(
				+ "function template %InvokeIn",
				/ @ "applicative %SHBuild_TrimOptions_"
					@ "function %LoadModule_SHBuild" $=
				(
					* "missing handling of characters not as left quotes for \
						parsing" $since b886,
					/ "removed special handling for null character"
						^ $dep_from ("%LexicalAnalyzer::UpdateBack" @ %Lexical)
						~ "%LexicalAnalyzer::ReplaceBack",
					/ DLI "simplified" !^ "%LexicalAnalyzer::Literalize"
						$dep_to "removal of lexer literalization",
					/ DLDI ^ $dep_from "%LexicalAnalyzer::GetLastDelimited"
						!^ "%LexicalAnalyzer::TokenViewList"
						$dep_to "removal of value view list type",
					/ $forced DLDI "simplified lexer binding"
						$dep_from "parser parameter type",
					/ $forced DLDI $dep_from ("%Session::Parse" @ %SContext)
				)
			),
			/ %NPLA1 $=
			(
				/ "function template %LoadNode" >> %Configuration,
				/ @ "class %REPLContext" $=
				(
					+ "constructor with token converter parameter";
					/ DLDI "simplified constructor#1"
				),
				/ @ "class %REPLContext" $=
				(
					/ $forced "added parameter for byte parser"
						@ "function %Prepare#3" ^ $dep_from
						("%(ByteParser, Session::Parse)" @ %SContext),
					(
					/ "function %Process#2" -> "function %ProcessWith",
					+ "function template %ProcessWith";
						// Like parameter pack support of %NPL::Analyaze, but \
							a bit different.
					/ "merged all overloads of %Process"
						-> "function template Process";					/ 
					/ $forced DLDI "function %Perform#2"
					)
				)
			)
		)
	),
	/ $forced DLDI $dep_from ("%Session::Parse" @ %YFramework.NPL.SContext)
		$effective @ ((("member functions %REPLContext::(Perform, ReadFrom)#2"
		@ %NPLA1, "function %operator>>" @ %Configuration,
		"functions %(EvalString, EvalStringRef)" @ %NPLA1Forms) @ %NPL,
		"function %FetchMIMEBiMapping" @ %Helper.Initialization) @ %YFramework,
		"function %::main" @ %Tools.SXML2XML.Main)
),

b888
(
	/ %YBase.YStandardEx.Container $=
	(
		+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
			@ "all 4 function templates %search_map",
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		+ 'ynothrow' @ "function templates %(pop_back_val, pop_front_val)",
		/ @ "function template %exists" $=
		(
			/ "preferred member %find over member %count",
			+ "fallback using %std::find",
			/ "iterator access" ^ "%ystdex::cend" ~ "%ystdex::end"
		),
		+ "function template %exists_if"
	),
	/ %YFramework $=
	(
		/ DLDI "unused %Nonnull result" ^ "%yunused" @ ((("constructor \
			%AndroidLogSender" @ %Debug, "constructor %WindowClass#4"
			@ "platform %Win32" @ %HostedGUI) @ %YCLib),
			("constructor %FatalError" @ %Core.YException,
			"constructors WidgetNotFound#(1, 2)" @ %UI.Loader) @ %YSLib),
			// To eliminate Clang++ warning: [-Wunused-value].
		/ %YCLib $=
		(
			/ %Debug $=
			(
				+ $dev $lib "'YB_PURE' despite 'YB_Use_StrictNoThrow'"
					@ "function templates %(Nonnull, FwdIter, Deref)",
				+ $dev $lib 'YB_PURE' @ "all %ComposeMessageWithSignature",
				+ $lib 'ynothrow' @ "lambda-expression" @ "%YCL_Log operand"
					@ "macro %YF_TraceRaw",
					// This does not change the exception specifier as \
						%YCL_Log cannot be non-throwing due to the recursive \
						mutex in the %Logger object initialized in the call of \
						%FetchCommonLogger.
				/ @ "class %Logger" $=
				(
					- "3rd parameter" @ "static functions \
						%(SendLog, SendLogToFile)";
					/ $forced DLDI "simplified functions %(DefaultSendLog, \
						DefaultSendLogToFile)",
					+ "static function %LogFailure"
				),
				/ "macros %(YF_TraceRaw; YF_Trace)" $=
				(
					* "exception from %YCL_Log not caught" $since b724,
					+ "fallback" ^ $dep_from "%Logger::LogFailure"
				),
				* "wrong non-throwing exception specification"
					@ "function %LogWithSource" $since b593
					$= (- $revert(b566) 'ynothrow')
			)
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ @ "function %Invoke" @ "class template %GHandlerRegisterBase"
					@ %YFunc $=
				(
					/ "avoided modification of internal map";
					+ 'const'
				),
				/ %YException $=
				(
					(
					- "2nd parameter" @ "function type"
						@ "type %ExtractedLevelPrinter";
					/ $forced DLDI "function %ExtractAndTrace",
					- $forced "3rd parameter" @ "function %ExtractException"
						$dep_to "removal of record level for extraction"
						// If needed, just do capture in the printer.
					),
					+ "function %PrintCriticalFor"
						$dep_from ("%YTraceRaw" @ %YCLib.Debug),
					* "possible termination caused by thrown exception"
						@ "functions %(TraceException, ExtractAndTrace)"
						$since b591
						/ $= ($impl ^ $dep_from ("%YTraceRaw" @ %YCLib.Debug)),
					* "possible termination caused by thrown exception"
						@ "function %ExtractException" $since b591
						/ $= ($impl ^ $dep_from "%PrintCriticalFor")
				),
				/ @ "class %MessageQueue" @ %YMessage $=
				(
					+ "function template %Emplace",
					/ "removed message check" @ "all 2 functions %Push"
						// To be conssitent to %Emplace. It is now the \
							responsibility of client code to handle empty \
							messages which are no longer considered invalid.
				),
				/ %YApplication $=
				(
					/ "assertion" @ "destructor %Application" -> "trace \
						message with record level %Warning and a successive \
						%hShell cleanup" @ %YApplication,
						// See $2020-04 @ %Documentation::Workflow.
					/ @ "function %PostQuitMessage" $=
					(
						/ DLDI "simplified"
							^ $dep_from ("%MessageQueue::Emplace" @ %YMessage),
						* "possibly interleaved messages caused by missing \
							locking" $since b481
							// The message should be handled together once the \
								%SM_Set reset the shell, otherwise it can \
								cause assertion failure for \
								%GUIApplication::OnGotMessage.
					)
				)
			),
			+ 'const' @ "functions %(DetectWidgetNode; TransformUILayout; \
				LoadUILayout)" @ "class %WigetLoader" @ %UI.Loader
				$dep_from %Core.YFunc
		),
		/ %Helper $=
		(
			/ $forced DLDI "simplified exception handling"
				@ "function %InitializeKeyModule" @ %Initialization
				$dep_from "removal of record level for extraction",
			/ %HostedGUI $=
			(
				/ DLDI "redundant 'YF_API'"
					@ "function %CreateCompatibleDIBSection" @ 'YCL_Win32',
				/ @ "class %ScreenBuffer" $=
				(
					+ DLDI "member brace-or-equal-initializers",
					- $impl "invariant for internal handle";
					+ "default constructor"
				)
			),
			/ "ignored empty buffer"
				@ "functions %(UpdateBounds, UpdatePremultiplied)"
				@ "class %WindowMemorySurface"
		),
		/ %NPL $=
		(
			/ @ "class %Session" @ %SContext $=
			(
				(
				/ "2 function template %Parse" -> "4 function templates"
					!^ "%DefaultParseByte";
				- "static function %DefaultParseByte" 
				),
				- "static function %DefaultParseQuoted" 
			),
			/ @ "class %REPLContext" @ %NPLA1 $=
			(
				/ "type" @ "data member %Preprocess"
					-> "%TermPasses::HandlerType" ~ "%TermPasses";
				/ DLDI "constructor"
			),
			/ %NPLA1Forms $=
			(
				/ "message string" @ "thrown exception"
					@ "function %ThrowInsufficientTermsError"
					^ 'terms' ~ 'term',
				/ "thrown exception of %InvalidSyntax derived with nested \
					%ParameterMismatch for cases of insufficient arguments"
					@ "functions ('Define*', 'Lambda*', 'Vau*')",
				/ "thrown exception of %InvalidSyntax derived with nested \
					%InvalidSyntax for cases of <eformal> error"
					@ "functions 'Vau*'",
				/ "thrown exception of %InvalidSyntax derived with nested \
					%InvalidSyntax for cases of \<environment> error"
					@ "functions %(VauWithEnvironment, LambdaWithEnvironment)"
					$dep_from %NPL.Documentation
			)
		)
	),
	/ %Tools.SHBuild.Main $=
	(
		+ DLI 'YB_ATTR_nodiscard YB_PURE' @ "internal functions for rules",
			// Also to eliminate G++ 9.2.1 warning: [-Wsuggest-attribute=pure].
		+ DLDI 'YB_NONNULL(1)' @ "internal log printing functions",
		/ $forced DLDI "simplified exception handling" @ "function %::main"
			$dep_from ("%ExtractException" @ %YFramework.YSLib.Core.YException)
	),
	/ $doc "relaxed requirement of error object type"
		@ "applicative 'check-environment'" @ %Documentation.NPL
),

b887
(
	/ %YBase.YStandardEx $=
	(
		* "wrong string template argument deduced for the 2nd template \
			argument not equivalent to %std::ostringstream"
			@ "function template %to_string for streams" @ %String $since b833,
		/ %Allocator $=
		(
			+ DLDI 'YB_FLATTEN inline' @ "all function templates implementing \
				%uses_allocator_construction_args" @ %Allocator,
			* "missing 'ynothrow'" @ "function %get_allocator" 
				@ "class templates %(allocator_delete, allocator_guard_delete)"
				$since b846 $dep_to "allocator getter fix",
			* "missing 'ynothrow'" @ "function %get_count"
				@ "class template %allocator_guard_delete" $since b846,
			+ "unary type trait %has_get_allocator"
		),
		/ %Any $=
		(
			/ @ "namespace %any_ops" $=
			(
				/ "allowed nonmovable object stored locally in %any_storage"
					$= (- "movable requirement"
						@ "unary type trait %is_in_place_storable");
				/ DLI "internal value type" @ "class template \
					%any_ops::allocator_value_handler" !^ "%std::unique_ptr"
					// See $2020-04 @ %Documentation::Workflow.
			),
			- DLI "all 'YB_ATTR(always_inline)'"
				// This actually improves performance a bit.
		),
		- DLI "all 6 'YB_ATTR(always_inline)'" @ %Function
			// Similar to %Any.
		/ @ "class %resource_pool" @ %MemoryResource $=
		(
			(
			+ "static data member %default_capacity";
			+ $dev
				"static assertion to ensure %default_capacity greater than 1",
			+ "parameter with default argument %default_capacity allowing \
				specifiying the initial capacity" @ "constructor#1"
			),
			+ $dev $lib 'YB_PURE'
				@ "functions %(get_block_size, get_extra_data)",
			+ "functions %(get_capacity, set_capacity)",
			/ DLI "function %deallocate" ^ "%yverify" ~ "%yassume"
		)
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ @ "class %LexicalAnalyzer" @ %Lexical $=
			(
				/ "constructor with memory resource parameter"
					-> "constructor with allocator parameter",
				+ "function %Reserve"
			),
			/ DLI "supported buffer reservation for random access iterators"
				@ "function template %Parse" @ %SContext
				^ $dep_from ("%LexicalAnalyazer::Reserve" @ %Lexical),
			(
			/ $forced "constructor %Session with memory resource parameter"
				@ %SContext -> "constructor with allocator parameter"
				$dep_from ("constructor %LexicalAnalyzer" @ %Lexical);
			/ $forced DLDI "member functions \
				%REPLContext::(Perform, ReadFrom)" @ %NPLA1,
			/ @ "functions 'EvalString*'" @ "namespace %Forms" @ %NPLA1Forms
			(
				/ $forced DLI;
				* $comp "wrong allocator sources" @ "functions 'EvalString*'"
					@ "namespace %Forms" @ %NPLA1Forms $since b886
			),
			/ DLI "applicative 'SHBuild_TrimOptions_'"
				@ "function %LoadModule_SHBuild" @ %Dependency ^ "allocators"
			),
			/ %NPLA1Internal $=
			(
				+ "function %EnsureTCOActionUnchecked",
				+ "default fallback action if current action is empty"
					@ "function %EnsureTCOAction",
				+ "function %EnsureLValueReference"
			),
			/ %NPLA $=
			(
				(
				+ "2 function templates %ToReducer";
				/ DLI "enabled allocators for %Reducer arguments"
					@ "function template %ComposeSwitched" ^ "%ToReducer",
				/ DLDI "function templates %(ComposeSwitchedUnchecked, \
					RelayNext)" ^ "%ToReducer"
				),
				/ @ "class %ContextNode" $=
				(
					+ $dev $lib 'YB_ATTR_nodiscard'
						@ "functions %(ShareRecord, WeakenRecord)",
					+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
						@ "function %get_allocator",
					/ $revert_ex(b886) "2 function templates %SetupTail"
						-> "function template %SetupCurrent with parameter \
						packs"
						$= (/ $impl ^ $dep_from "%ToReducer")
				),
				/ $revert_ex(b886) "2 function templates %SetupCurrent"
					-> "function template %SetupCurrent with parameter packs",
				(
				/ "eliminated empty action handling of %Reducer"
					@ "function template %ComposeActions#1"
					$dep_from ("%ReduceAgain" @ %NPLA1);
					// This should be safe after the fix of %ReduceAgain.
				/ "merged 2 function templates %ComposeActions",
				/ "returned type" @ "function template %ComposeActions"
					-> "%GComposedAction instance" ~ "%Reducer"
					$dep_from ("%ComposeSwitchedUnchecked", "%RelayNext")
				),
				/ DLDI @ 'NPL_NPLA_CheckParentEnvironment'
					@ "function %RedirectToShared",
					// To eliminate G++ 9.2.1 warning: \
						[-Wsuggest-attribute=pure].
				- DLI "all 3 'YB_ATTR(always_inline)'" @ "headers"
					// Similar to %YBase.YStandardEx.Any.
			),
			/ %NPLA1 $=
			(
				* $comp "empty action relayed for TCO action"
					@ ("function %ReduceAgain"; $comp
					"functions %(ReduceTail, ReduceAgainLifted; ReduceOrdered)")
					$orig (@ "function %ReduceAgain" @ %NPLA1 $since b820)
					$= (/ $impl
						^ $dep_from ("%EnsureTCOAction" @ %NPLA1Internal)),
				/ DLI "initializations on non-collapsed %TermReference"
					@ "function %BindParameter" ^ "allocators"
			),
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLDI "simplified function %ForwardListFirst"
					^ $dep_from ("%EnsureTCOActionUnchecked" @ %NPLA1Internal),
				/ $revert_ex(b886) DLDI "%TokenValue::Unspecified assignment"
					@ "functions %Forms::(Cond, Define*, SetWith*)"
					^ "%in_place_type"
			)
		),
		/ %YSLib.Core.YObject $=
		(
			/ DLDI "decaed %in_place_type tag type" @ "constructor template \
				%ValueObject with allocator and value but no explicit tag",
				// To reduce some potential instantiation overhead on type \
					qualifiers as the type in the tag is deduced from the type \
					of the argument value instead of explicitly specified \
					types in some tags.
			+ DLDI 'inline'
				@ "constructor templates %(ValueHolder, AllocatorHolder)",
			- DLI "all 'YB_ATTR(always_inline)'" $effective @ "all 3 function \
				template %emplace" @ "class %ValueObject",
				// Similar to %YBase.YStandardEx.Any.
			+ "function template %get_allocator" @ "class template \
				%AllocatorHolder" ^ ($dep_from "%ystdex::has_get_allocator"
				@ %YBase.YStandardEx.Allocator $dep_from "allocator getter fix"
		)
	),
	+ $dev $lib "ensured all 'YB_ALLOCATOR' for allocator function returning \
		nonnull value on success with 'YB_ATTR_returns_nonnull'"
		$effective @ %(YBase.YStandardEx.(Allocator, MemoryResource),
		YFramework.YSLib.YAdaptor)
),

b886
(
	/ %YBase.YStandardEx.Any $=
	(
		/ @ "namespace %any_ops" $=
		(
			+ DLI 'YB_ATTR_nodiscard YB_PURE' @ "internal funtions"
				@ "class template %value_handler",
				// Also to eliminate G++ 9.2.1 warning: \
					[-Wsuggest-attribute=pure].
			/ "constructor %pointer_holder#1 required %NullablePointer and \
				explicit bool casting instead of member %get on %_tPointer",
			/ @ "%class template %allocator_value_handler" $=
			(
				+ "type %local_storage",
				* "wrong copy of moving owner pointers" @ "case \
					%transfer_with_allocator" @ "function %manage" $since b848,
					// This makes move-only values transferred in the \
						allocator ill-formed and pessimizes allocator-aware \
						move construction to copy for other values.
				/ $re_add(b851) "%call of %init failed in SFINAE context"
					// The return type of %ystdex::allocate_unique is not \
						SFINAE-friendly by default.
			),
			+ "metafunction %is_handler_constructible_t"
		),
		/ DLDI "simplified class %any"
			^ $dep_from "%any_ops::is_handler_constructible_t"
	),
	/ %YFramework $=
	(
		/ %YSLib.Core.YObject $=
		(
			* "invalid use of 'base::base' for cases not allocated by \
				allocator handlers" @ ("constructor#5", "function template \
				%emplace#2") @ "class %ValueObject" $since b863 $dep_from
				("%ystdex::any_ops::allocator_value_handler::local_storage"
				@ %YBase.YStandardEx.Any)
				// This was buggy for cases of %any::opt_in_place_t<_type> \
					is true.
			(
			/ $re_add(b851) "improved SFINAE-friendly %AllocatorHolder \
				constructor template",
			* $comp "broken SFINAE" @ "function template %CreateInPlace with \
				allocator parameter" @ "class template %HolderOperations" $since
				b850 @ $dep_from ("function template %init" @ "class template \
				%ystdex::any_ops::allocator_value_handler"
				@ %YBase.YStandardEx.Any);
			* $comp "broken %ValueObject holder creation with allocators for \
				user code" $since b850
				$dep_to "SFIANE-friendly allocation of ValueObject"
			),
			/ $dev $lib "strenthened static assertion"
				@ "class template %HolderOperations"
				^ "%any_ops::check_holder_t" ~ "%ystdex::is_decayed"
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				/ @ "function %Decompose" $=
				(
					/ $revert(b862) "1st parameter type" -> "%string_view"
						~ 'const SmallString&',
					+ "2nd parameter of %TokenList::allocator_type with \
						default argument to initialize the result"
						$dep_to "decomposed with allocator"
				),
				/ DLI "initialized the result"
					@ "all 2 functions %Tokenize" ^ "%TokenList::get_allocator"
					$dep_from "decomposed with allocator",
				+ "type %TokenViewList",
				/ @ "class %UnescapeContext" $=
				(
					+ DLDI "brace-init-list '{}'" @ "private data member",
					- "function %Done" $dep_from "inlined escaping cleanup",
					(
					/ $forced "type" @ "data member %Prefix"
						-> "data members %(Start, Length)"
						$dep_from "%HandleBackslashPrefix"
						$dep_to "avoiding SmallString";
					/ $forced DLDI "function %(IsHandling, Clear)",
					+ "function %VerifyBufferLength"
					),
					- "all 2 functions %(PopIf, Push)" $dep_from
						"avoiding in-context sequence modification",
					- "function %GetSequence" $dep_all_from
						"avoiding in-context sequence reference"
				),
				/ @ "class %LexicalAnalyzer" $=
				(
					(
					/ "%Unescaper and internal buffer" ^ "%string"
						~ "%SmallString" $dep_to "avoiding SmallString";
					/ DLI "initialized the result" @ "functon %Literalize"
						^ "internal list allocator",
					/ $forced "return type" @ "member function %GetBuffer",
					/ $forced DLDI "escaping check"
						$dep_to "inlined escaping cleanup" $=
						(/ DLI !^ "%UnescapeContext::Done")
					),
					/ "made %Unescaper context parameter modifiable"
						$dep_to "modifiable context in unescaping"
						// This also enables the support of incomplete \
							sequence more than 1 byte which is previously \
							unavailable.
						$= (- 'const'
							@ "parameter type 'const UnescapeContext&'"),
					(
					+ "function %ReplaceBack",
					+ "function template %FilterChar" $dep_from
						("inlined escaping cleanup", "in-buffer prefix") $=
						// The function used in the default cases is optimized \
							and now calls to filter routines can be inlined.
					(
						/ $impl "copied and simplified common logic of \
							%(ParseByte, ParseQuoted)";
						/ @ "escaping check" $=
						(
							/ $forced "assumed the escaping sequence in the \
								buffer with prefix of single character"
								$dep_from "%UnescapeContext::(Start, Length)"
								$dep_to "in-buffer prefix",
							- "short circuit check for extended characters \
								(octet value not less than '0x80')",
							- "all context handling" $dep_from
								"simplified escaping context reset"
						),
						/ "prefix handler" ^ "%(string_view, UnescapeContext)"
							~ "%(char, SmallString)"
							$dep_to "avoiding SmallString",
						+ "%char as 2nd parameter to split the buffer and \
							the current character" @ "unescaper"
							@ "%Unescaper" $dep_to
							"unescaping current character",
						- "separated handling of concatenation sequence"
							$dep_from "unescaping concatenation support",
						/ "simplified unescaping when accepted" $=
						(
							/ $forced "removal of trailing character" $dep_from
								"%UnescapeContext::Prefix",
								$= (/ ^ $dep_from
									"%UnescapeContext::VerifyBufferLength")
							/ $impl !^ "%UnescapeContext::(PopIf, Push)"
								$dep_from "in-buffer prefix"
								$dep_to "avoiding in-context sequence \
								modification"
						)
					);
					- "types %(PrefixHandler, Unescaper)",
					/ "functions %(ParseByte, ParseQuoted)"
						-> "function templates"
						// They are also allowed inlined for better performance.
					),
					/ "function %Literalize returned view list" ^ $dep_from
						"%TokenViewList" ~ "%TokenList",
					* $doc "logical line joining" @ "Doxygen comment"
						@ $mismatch $since b335,
						// This is not available like ISO C++ without looking \
							ahead of the new-line character after double \
							backslashes and it is never implemented here.
					+ "function %GetDelimiter",
					/ "removed left quotes parsing support"
						$dep_from "lift out of left quotes parsing" $=
					(
						- "function %GetLeftQuotes",
						/ "simplified" $dep_from "%ReplaceBack";
						- $impl "internal left quotes state"
					)
				),
				/ $forced "functions %(HandleBackslashPrefix, IgnorePrefix)"
					$dep_from "%LexicalAnalyzer::FilterChar",
				/ "function %NPLUnescape" $=
				(
					(
					/ $forced ^ "%string" ~ "%SmallString"
						$dep_from "%LexicalAnalyzer::Unescaper"
						$dep_to "avoiding SmallString";
					+ "assertion";
					/ $forced "optimized buffer overwriting and avoided \
						insertion" $dep_from "in-buffer prefix"
						/ $= ($impl !^ "%UnescapeContext::GetSequence"
							$dep_to "avoiding in-context sequence reference")
					),
					+ $forced "%char as 2nd parameter to split the buffer and \
						the current character" $dep_from
						"unescaping current character",
					+ "line concatenation"
						$dep_to "unescaping concatenation support",
					/ $forced ("modifiable context in unescaping",
						"simplified escaping context reset")
				),
				(
				/ $forced "all 2 functions %Tokenize" -> "funtion with \
					'const TokenViewList&' parameter"
					$dep_from "%LexicalAnalyzer::Literalize";
				* $comp DLI "missing string moving optimization"
					@ "function %Tokenize#2" $since b862
				),
				(
				/ DLDI "%TokenList" !^ "%SmallString";
				- $revert(b862) "type %SmallString"
					$dep_all_from "avoiding SmallString"
				),
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions \
					%(HandleBackslashPrefix, NPLUnescape, CheckLiteral, \
					Deliteralize, DeliteralizeUnchecked, Escape, \
					EscapeLiteral, EscapeXML, Literalize, \
					IsGraphicalDelimiter, IsDelimiter, Decompose, Tokenize)",
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "function %IgnorePrefix"
			),
			/ %SContext $=
			(
				/ @ "class %Session" $=
				(
					/ $forced "return type" @ "function %GetBuffer"
						$dep_from ("%LexicalAnalyzer::GetBuffer" @ %Lexical),
					/ "constructors cleanup" $=
					(
						* "missing definition" @ "constructor with single \
							memory resource parameter" $since b861,
						/ "constructor templates with range"
							-> "function templates %Parse"
					)
				),
				/ DLDI "alias %Tokenizer"
					^ "%TokenList::value_type" ~ "%SmallString"
					$dep_to "avoiding SmallString",
				/ $comp "removed support of implicit parse of single argument \
					by converting to session" @ "%SContext::Analyze"
					$dep_from ("constructors cleanup" @ "class %Session")
			),
			/ DLDI ("constructor %REPLContext" @ %NPLA1,
				"function %Reduce#1" @ %SContext)
				^ "%TokenList::value_type" ~ "%SmallString"
				$dep_to "avoiding SmallString",
			/ $forced DLDI ("member functions %REPLContext::(Perform#3, \
				ReadFrom#2)" @ %NPLA1, "function %operator>>" @ %Configuration,
				("function %DecomposeMakefileDepList", "applicative \
				'SHBuild_TrimOptions_'" @ "function %LoadModule_SHBuild")
				@ %Dependency, "functions %Forms::(EvalString, EvalStringRef)"
				@ %NPLA1Forms) $dep_from
				("constructor cleanup" @ "class %Session" @ %SContext),
			/ %Dependency $=
			(
				/ "function %DecomposeMakefileDepList" @ %Dependency
					$=
				(
					/ $forced DLD $dep_from
						("%LexicalAnalyzer::(PrefixHandler, Unescaper)"
						@ %Lexical, "in-buffer prefix") $=
					(
						/ $impl ^ $dep_from "%UnescapeContext::VerifyBufferLength",
						/ $impl !^ "%UnescapeContext::GetSequence"
							$dep_to "avoiding in-context sequence reference",
						+ $forced "%char as 2nd parameter to split the buffer and \
							the current character",
					),
					+ DLI "line concatenation" @ "unescaping"
						$dep_to "unescaping concatenation support",
					/ $forced ("modifiable context in unescaping",
						"simplified escaping context reset")
					* "wrong handling of unespaced '$'" $since b623
						// For '\$' it should not be a prefix of subsequent \
							escape sequence.
				),
				/ @ "applicative 'SHBuild_TrimOptions_'"
					@ "function %LoadModule_SHBuild" $=
				(
					/ $forced DLDI $dep_from
						("%LexicalAnalyzer::Literalize" @ %Lexical),
					/ DLDI ^ $dep_from ("%LexicalAnalyzer::(GetBuffer, \
						FilterChar, ReplaceBack)"
						~ "%LexicalAnalyzer::(ParseByte, GetLeftQuotes)"
						@ %Lexical) $dep_to "lift out of left quotes parsing"
				)
			),
			/ %NPLA $=
			(
				/ DLI ("all 2 function templates %ComposeActions", "destructor \
					%Environment" @ 'NPL_NPLA_CheckEnvironmentReferenceCount')
					^ "allocators",
				- DLDI 'ystdex::' @ 'ystdex::in_place_type'
					@ "function template %EmplaceLeaf",
				/ "function template %SetupTail" @ "class %ContextNode"
					-> "2 overloads to support allocators of %Reducer \
					initialization",
				/ DLDI "simplified function templates %ComposeActions"
					^ "%ystdex::(enable_if_same_param_t, exclude_self_t)"
					~ "%ystdex::(enable_if_t, is_decayed)"
					// Also to be consistent to %ContextNode::SetupTail.
			),
			/ %NPLA1Internal $=
			(
				(
				+ "function template %SetupTailTCOAction";
					// This is optimal after the change on \
						%ContextNode::SetupTail.
				/ DLI "enabled allocator" @ "%EnsureTCOAction"
					^ "%SetupTailTCOAction" ~ "%SetupTailAction"
				),
				+ 'ynothrow' @ "function %AccessTCOAction"
				/ DLI "function %ReduceForCombinerRef" ^ "allocators"
			),
			/ %NPLA1 $=
			(
				/ DLI ^ "allocators"
					@ ("member functions %REPLContext::ReadFrom#2",
					"function %Reduce"),
				/ DLI "member function %ContextState::RewriteGuarded"
					^ "%std::move",
				/ DLI "%ValueObject of %TokenValue construction"
					@ "function %ParseLeaf" ^ "allocators",
				(
				+ "function template overloads %WrapContextHandler to support \
					allocators";
				+ "constructor template to support allocators"
					@ "class template %FormContextHandler"
				)
			),
			/ DLI %NPLA1Forms $=
			(
				/ "enabled allocator" @ "function %ForwardListFirst"
					^ $dep_from "%SetupTailTCOAction" @ %NPLA1Internal
					~ "%SetupTailAction",
				/ "%TokenValue::Unspecified assignment" @ "functions \
					%Forms::(Cond, Define*, SetWith*)" ^ "allocators" 
					$dep_from
					("constructor#5 %ValueObject" @ %YSLib.Core.YObject),
				/ "function templates %(CallUnary, $comp CallUnaryAs, \
					CallBinary, CallBinaryAs)" ^ "allocators" $dep_from
					(("%ystdex::any_ops::allocator_value_handler::manage"
					@ %YBase.YStandardEx.Any),
					"SFIANE-friendly allocation of ValueObject")
					// Although this will not cause ill-formed library \
						directly, instantiation of user code with values of \
						move-only types will be ill-formed with allocators if \
						the bug of %ystdex::any_ops::allocator_value_handler \
						is not fixed.
			)
		)
	),
	/ $forced DLDI (("member function %WidgetLoader::LoadUILayout"
		@ %YSLib.UI.Loader, "function %FetchMIMEBiMapping"
		@ %Helper.Initialization) @ %YFramework,
		"main function" @ %Tools.SXML2XML.Main)
		$dep_from ("%SContext::Analyze" @ %YFramework.NPL.SContext)
),

b885
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "wrongly depending on underlying operation" @ "%operator+= for \
				string view type" @ "class template %basic_string"
				@ 'YB_Impl_String_has_P0254R2' @ %String $since b833,
			(
			/ "function %is_positive_power_of_2" @ %CStandardInteger
				=> "%is_power_of_2_positive";
				// To avoid misleading meaning.
			/ $forced DLDI %(Placement, MemoryResource)
			),
			/ %MemoryResource $=
			(
				* "redundant friend class declaration" @ "class %oversized_map"
					$= (- "friend class %shared_pool_resource"),
				/ @ "class %resource_pool" $=
				(
					/ @ "member function %resource_pool::deallocate" $=
					(
						/ DLI "optimized deallocation",
						+ $lib "assertions for internal iterators"
					),
					* "missing checking and recovering invalidated end \
						iterators" @ "move constructor %resource_pool"
						$since b867
						// This makes moved iterator invalidated and it would \
							crash on allocation and deallocation using these \
							iterator for cached resources once the referenced \
							pool is moved.
				),
				* $comp "internal states corrupted on pool vector invalidation"
					@ "member function %pool_resource::do_allocate" $since b867
					$dep_from "move constructor %resource_pool"
					// This would probably cause pool moving on vector element \
						insertions.
			),
		),
		/ %YDefinition $=
		(
			/ @ "macro %YB_HAS_THREAD_LOCAL" $=
			(
				+ 'YB_IMPL_MSCPP >= 1900' @ "conditions"
				* "G++ detection did not respect to the '-std=' option"
					$since b425
			),
			/ @ "pseudo keyword %ythread" $=
			(
				* "bogus %_MT" @ "condition for 'thread_local'"
					@ !"platform %Win32",
				+ "fallback '__declspec(thread)'"
				+ "fallback '__thread'",
				- 'static' @ "last fallback"
					// This now allows 'extern ythread'.
			),
			/ $dev "condition for MinGW Clang++" @ "macro %YB_API"
				^ 'YB_IMPL_GNUCPP' ~ 'YB_IMPL_GNUC'
				// To avoid implicit effect of '--export-or-symbols'.
		)
	),
	/ $re_ex(b700) "updated library %FreeImage" $=
	(
		/ $re_ex(b600) "updated base library 3.18.0" ~ "3.17.0";
		(
		^ "libjpeg-turbo 2.0.4" @ "%Source/LibJPEG"
			$dep_to "libjpeg-turbo update";
		/ $forced "updated %(jconfig.h, jconfigint.h) except for \
			macro %WITH_SIMD" ^ 'cmake -G"MSYS makefiles"'
			// By default, these files are only for %MinGW32 platform.
		/ $forced "updated %(Makefile.srcs; Makefile.gnu, Makefile.mingw)"
			// This including assembly source file lists refatctoring \
				(notably, adapting to the 'simd' directory layout changes and \
				adding support of AVX2), and adding %jdicc.c to the C source \
				list to avoid redundant definition of the function \
				%jpeg_read_icc_profile (available since libjpeg-turbo 1.5.90).
		),
		^ "libpng 1.6.7" @ "%Source/LibPNG";
			// With prebuilt %pnglibconf.h unchanged.
	),
	- "%3rdparty/FreeImage/Source/LibJPEG/(simd/jsimdcfg.inc, config.h)"
		$dep_from "libjpeg-turbo update",
		// The file "jsimdcfg.inc" is already included in the libjpeg-turbo \
			now, deployed at %Source/LibJPEG/simd/nasm in the FreeImaage \
			source tree. The file "config.h" should now only used internally \
			in the build process.
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ $doc "clarified references to user documentation",
				// This makes it easy to migrate with differenct source, since \
					the documentation may be removed from the BitButcket \
					project wiki in future (as BitBucket has decided to stop \
					Mercurial support not late than 2020-06).
			(
			+ "functions %(SHBuild_Host_Platform_Detect, \
				SHBuild_GetSystemPrefix)"
				@ "%(SHBuild-common.sh, SHBuild-YSLib-common.txt)" $=
			(
				+ "detected environment variable %MSYSTEM with values \
					%(MINGW64, MINGW32) mapped to ('MinGW64', 'MinGW32')";
				/ "detected %SHBuild_Env_Arch value 'x86_64' and 'env-os' value \
					'Win32' as 'MinGW64'";
				/ "detected 'env-os' "
			);
			/ "supported MinGW64 detection for default value of \
				%SHBuild_Host_Platform"
				@ ("function %SHBuild_CheckHostPlatform" @ "%SHBuild-common.sh"
				^ ("%SHBuild_Host_Platform_Detect" @ "%SHBuild-common.sh"),
				"%SHBuild-YSLib-build.txt" ^ ("%SHBuild_Host_Platform_Detect"
				@ "%SHBuild-YSLib-common.txt")),
			/ "supported system prefix directory name instead of '/usr' \
				with overridable variable %SHBuild_SystemPrefix"
				@ ("%SHBuild-BuildApp.sh"
				^ "functions %(SHBuild_Platform_Detect, \
				SHBuild_CheckHostPlatform)" @ "%SHBuild-common.sh",
				"%SHBuild-YSLib-build.txt" ^ ("%SHBuild_GetSystemPrefix"
				@ "%SHBuild-YSLib-common.txt"))
			),
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				/ "changed YFramework host library directory without postfix of \
					'-' and the name of host architecture"
					$dep_to "host library directory",
					// This changes effectively for %MinGW32 (from 'lib-i686' \
						to 'lib') since previously this is the only formally \
						supported platform here. For %MinGW64 now it works \
						differently, as the parent path is also changed by \
						%SHBuild_Host_Platform_Detect.
				* "wrongly used '-DYB_BUILD_DLL' instead of 'YB_DLL'"
					@ "%YFramework building" @ "%release configurations"
					$orig (@ "%SHBuild-YSLib.sh" $since b546)
			),
			/ DLDI "renamed string argument name" @ "function 'system-or-puts'"
				@ "%SHBuild-YSLib-common.txt",
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				/ @ !"platform %Win32" $=
				(
					* "missing quotes around '$SHBuild_SystemPrefix/include'"
						"default value" @ "%SHBuild_YF_CFlags_freetype"
						 @ "%SHBuild_YF_CFlags_freetype"
						$since b885,
					* "overriding of %SHBuild_YF_Libs_freetype value disabled \
						by unexpected unconditional value assignment"
						$since b563
				),
				* "missing quotes around '$SHBuild_SystemPrefix/lib'"
					@ "linker search path"
					@ "%SHBuild_Static" $since b885,
				/ "updated host platform support" $=
				(
					/ "detected platform" -> $dep_from
						("%SHBuild_CheckHostPlatform" @ "%SHBuild-common.sh")
						~ "%SHBuild_CheckUName";
					/ "default value" @ "variable %SHBuild_YSLib_Platform"
						-> '$SHBuild_Host_Platform'
				),
				/ "uniformed libfreetype library detection for \
					%SHBuild_YF_Libs_freetype" $=
				(
					+ "detected %libfreetype.a with prefix \
						'$SHBuild_Bin/../lib/'"
						$dep_from "%SHBuild_SystemPrefix";
					* "missing library prefix '-L' option for static library \
						building" $since b,
					+ "support of dynamic libfreetype detection with \
						'pkg-config' if %libfreetype.a is missing in the \
						sysroot 'lib' directory" @ !"platform %Win32"
					+ "support of static %libfreetype.a in the sysroot 'lib' \
						directory"
				)
			),
				+ $build "workaround for building %YFramework DLL"
					@ "%debug configurations" @ "platform %MinGW64"
					$dep_to "MinGW64 debug DLL workaround" $=
				(
					// Otherwise the linker will hang for 3 hours and fail for \
						unresolved symbols of typeinfo name of base classes \
						(e.g. classes in %YBase.YStandardEx.Operators).
					/ "avoided using precompiled header",
					+ "'-Og' to override '-O0'"
				)
		),
		/ $forced "host library directory 'lib-i686'" -> 'lib'
			$dep_from "host library directory";
			// To take the actual change, run \
				%Tools/Scripts/GenerateProjects.sh after the build of this tool.
		+ $comp "class 3 support of platform %MinGW64"
	),
	/ $dev "condition for MinGW Clang++" @ "macro %YF_API"
		@ %YFramework.Platform ^ 'YB_IMPL_GNUCPP' ~ 'YB_IMPL_GNUC',
		// Similar to 'YB_API'.
	+ "formal support" @ "platform %MinGW64"
		$dep_from (("%SHBuild-YSLib-build.txt", "updated host platform support"
		@ "%SHBuild-BuildApp.sh") @ %Tools.Scripts,
		"updated library %FreeImage", "MinGW64 debug DLL workaround")
),

b884
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ "fallback condition 'YB_IMPL_MSCPP >= 1700'"
				^ "%_Check_return_" @ "macro %YB_ATTR_nodiscard",
			* "invalid %YB_ATTR used instead of '__declspec'"
				@ ('YB_IMPL_MSCPP >= 1400' @ "macro %YB_ALLOCATOR",
				"macro %YB_ATTR_novtable") $since b842,
			+ 'using nullptr_t = decltype(__nullptr);'
				@ 'YB_IMPL_MSCPP && defined(__cplusplus_cli)',
			/ "%nullptr_t" @ '!YB_HAS_BUILTIN_NULLPTR' $=
			(
				- "member function %equals",
				- $lib "all non-member %operator(==, !=)"
					-> "friend function templates",
				+ 'YB_ATTR_nodiscard ynothrow' @ "all member functions except \
					%operator&"
			)
		),
		/ %YStandardEx $=
		(
			/ %CStandardInteger $=
			(
				/ "function %is_power_of_2" $=
				(
					/ "accept 0 value as power value of 2",
					+ $dev $lib 'YB_STATELESS',
				),
				+ "function %is_positive_power_of_2"
			),
			/ $forced "added 0 value check to all checks for alignment"
				$dep_from ("%is_power_of_2" @ %CStandardInteger)
				$effective @ %(Placement, MemoryResource)
				$dep_to "alignment check zero",
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
				@ "function template %is_aligned_ptr" @ %Placement,
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
			+ DLDI 'YB_ATTR(always_inline)' @ "function templates \
				%(construct_within, destruct_in)" @ %Placement
				// This is usually better for %any, but inlining other \
					function templates in %Placement or members of \
					%standard_layout_storage is not helpful, if not even worse.
		)
	),
	/ %YFramework $=
	(
		* "exception always thrown even on success"
			@ "member function %HBitmap::SaveTo" @ %YSLib.Adaptor.Image
			$since b556,
			// Also to eliminate G++ 7.1 warning: \
				[-Wsuggest-attribute=noreturn].
		/ @ %YSLib.Core $=
		(
			/ @ "class %ValueObject" @ %YObject $=
			(
				+ "alias template %InPlaceStorable";
				/ DLDI "simplified static assertion"
					@ "constructor with parameter of %OwnershipTag<>"
			),
			+ DLI 'YB_ATTR_nodiscard YB_PURE' @ "internal comoparison funtions"
				@ "class template specialization %GHEvent" @ %YEvent,
				// Also to eliminate G++ 9.2.1 warning: \
					[-Wsuggest-attribute=pure].
			/ "friend function %operator==" @ "class %Message" @ %YMessage $=
			(
				/ DLI "out of line definition" -> "inline function";
				* $comp "possible ill-formed attribute caused by \
					%YB_ATTR_nodiscard" $since b881
					// The standard attribute is not applicable on friend \
						function declaration that is not a definition. This \
						breaks building on Clang++ but not on G++. See \
						https://stackoverflow.com/questions/52332203.
			)
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				// See $2020-02 @ %Documentation::Workflow.
				/ @ "class %Environment" $=
				(
					/ "function %DefaultResolve" >> "class %ContextNode"
						$= (/ DLI "simplified");
					/ "funciton %Resolve"
						-> ("function" @ "class %ContextNode"),
					/ $forced $impl
						("copy constructor", "friend function %swap")
				),
				/ $forced $impl ("constructor#2", "friend function %swap")
					@ "class %ContextNode" $dep_from
						"%Environment::DefaultResolve"
			),
			+ "function %ReduceNextCombinedBranch" @ %NPLA1,
			+ "function template %ReduceSubsequentCombinedBranch"
				@ %NPLA1Internals,
			/ @ "namespace %Forms" @ %NPLA1Forms $=
			(
				/ DLI "optimized retrying reduction" @ "functions %(And, Or)",
					// This only has effect as optimization with the following \
						bug fixed.
				* "operand in the middle might be wrongly evaluated once"
					@ "functions %Or" $orig (@ %NPLA1) $since b860
			)
		)
	),
	/ $dev "GCC version detection except for cases intended for Clang++"
		^ 'YB_IMPL_GNUCPP' ~ 'YB_IMPL_GNUC' $=
	(
		// Since only C++ (rather than C) is supported, the use of GNU C \
			detection is to including Clang++ specifically. The only valid \
			case for %YB_IMPL_GUNCremained is the definition of %YB_ATTR.
		/ "simplified" @ "macro %YB_ATTR_gnu_printf" @ %YBase.YDefinition
		* "missing excluding Clang++" $effective
			@ %(YBase.YStandardEx.CAssert $since b739,
			YFramework.YSLib.Core.YEvent $since b792),
	),
	* $re_add(b866) $comp "build failure" @ "platform %Android" $since b850
		$dep_from %YFramework.YSLib.Core.YMessage
		// This causes armv7a-linux-androideabi21-clang++ fails to compile.
),

b883
(
	/ %YFramework.NPL $=
	(
		+ DLDI 'YB_FLATTEN' @ "some functions" @ %NPLA1Internals,
		/ DLI ("optimized function %EvaluateIdentifier" @ %NPLA1,
			("static member function %LexicalAnalyzer::ParseByte",
			"function %NPLUnescape") @ %Lexical) ^ 'YB_FLATTEN'
			// The tuned implementations of %EvaluateIdentifier and \
				%LexicalAnalyzer::ParseByte are already slightly better than \
				overall %NPLA1 before split (at b882) with x86_64-pc-linux-g++ \
				9.2.1.
		* "thunked implementation without TCO crash with LTO"
			@ '!YB_IMPL_GNUCPP || !NPL_Impl_NPLA1_Enable_Thunked \
			|| NPL_Impl_NPLA1_Enable_TCO' @ "%release configurations"
			@ "function template %ReduceCurrentNext" @ %NPLA1Internals
			$since b882,
			// This has effects on at least i686-w64-mingw-g++ 7.2 and \
				x86_64-pc-linux-g++-9.2.
		/ DLI %NPLA $=
		(
			+ $design 'inline' @ "all 2 constructors %TermReference",
			/ ("all functions %(ReferenceTerm, TermToNamePtr, ResolveName)")
				-> "inline functions"
		),
		/ %NPLA1 $=
		(
			/ DLI @ "function %ReduceCombinedBranch" $=
			(
				(
				/ $design "lifted and merged reference tests for irregular \
					representations and glvalues";
				/ "set %TermTags::Temporary based on reference test result",
				/ "accessed glvalues" ^ "%TryAccessLeaf on the referenced \
					object" ~ "%TryAccessReferencedTerm on the subterm"
				),
				/ $design ^ 'const'
					@ "access of %ContextHandler for glvalue functions",
				/ "avoided conversion of irregular representations"
					// The representation should have been compatible to \
						be called as a glvalue directly.
			),
			+ "function %ReduceCombinedReferent",
			+ "function %EvaluateLiteralHandler",
			/ @ "function %EvaluateIdentifier" $=
			(
				* "missing term regularization" @ "leaf token"
					$orig (@ "function %RewriteLiteral" $since b725)
					// See $2020-02 @ %Documentation::Workflow.
					$= (/ ^ $dep_from "%EvaluateLiteralHandler"),
						// This has a call of %RegularizeTerm if necessary.
				/ DLDI ^ 'const' @ "access of %LiteralHandler"
			),
			/ @ "member function %ContextNode::SetNextTerm" $=
			(
				+ 'ynothorw',
				/ DLI -> "inline function"
			)
		)
	),
	/ "enabled merged %std::type_info by default"
		$= (+ $impl ('-U__GXX_MERGED_TYPEINFO_NAMES',
			'-D__GXX_MERGED_TYPEINFO_NAMES=1') @ "default value" @ "variable \
			%CXXFLAGS_IMPL_COMMON" $effective @ ("%(SHBuild-common-options.sh, \
			SHBuild-YSLib-common.txt, Toolchain.options.mk)" @ %Tools.Scripts,
			%Tools.ProjectGenerator.Main)),
			// See $2020-02 @ %Documentation::Workflow.
	+ $dev $lib 'YB_NORETURN' @ "function template %rethrow_badstate"
		@ %YBase.YStandard.IOS
		// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=noreturn].
),

b882
(
	/ %YBase.YStandardEx $=
	(
		+ $dev $lib 'YB_PURE' @ ("function %empty" @ "class template %list"
			@ %List, ("all 2 function templates %(begins_with, ends_with)",
			"function template %get_quote_mark_nonstrict") @ %String),
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		+ %Allocator,
		/ %Memory $=
		(
			/ "%(__cpp_lib_allocator_traits_is_always_equal, 'alloc_*_t', \
				'is_allocat*', is_byte_allocator, nested_allocator_base, \
				'allocator_*', '*_allocator', '*allocator_guard', 'alloc_on*', \
				uses_allocator_construction_args, make_obj_using_allocator, \
				uninitialized_construct_using_allocator)" >> $dep_from
				%Allocator $dep_to "seperated allocator API header",
				// The order of declarations is now also consistent to WG21 \
					N4830 [memory.syn].
			/ DLDI "header inclusion %Tuple" -> "%Apply"
		),
		+ DLDI 'YB_ATTR_nodiscard' @ "function template \
			%uses_allocator_construction_args implementations" @ %Allocator
			$dep_from "seperated allocator API header",
			// G++ 7.1 warning: [-Wsuggest-attribute=const] is wrong here \
				and %YB_STATELESS would cause crash.
		(
		/ DLDI ("simplified header inclusion %Memory" -> "%Allocator")
			@ %(Tree, String, List, Cache)
			$dep_from "seperated allocator API header";
		/ DLDI "header inclusion %IteratorOperation" @ %List
		)
	),
	/ %YFramework.NPL $=
	(
		+ "!= comparison" @ "class %TermReference" @ %NPLA
			$= (/ $impl
				^ "private base %ystdex::equality_comparable<TermReference>"),
		(
		+ "internal module %NPLA1Internals" $=
		(
			+ $dev $impl "inline namespace %Internals"
				@ "namespace %NPL::A1" $=
				(+ "internal functions %(FetchTailEnvironmentReference; \
					ReduceForCombinerRef)"),
			+ "exposed 'NPLA_Impl_*' macros";
			+ "TCO actions and 'Relay*' function templates"
				@ "inline namespace %Internals"
		);
		+ %NPLA1Forms
		),
		/ %NPLA1 $=
		(
			/ DLDI "separator handling" @ "constructor %REPLContext" $=
				^ ("%vector" ~ "implicit %deque") @ "%stack",
				// This is slightly more efficient. Also to eliminate G++ \
					warning: [-Wshadow].
			(
			(
			+ "function %ReduceCombinedBranch",
			/ DLDI "functions %(ReduceCombined, Forms::Apply)"
				^ "%ReduceCombinedBranch"
			),
			/ DLDI "functions %Forms::(Apply, ForwardListFirst)"
				^ "%ystdex::expand_proxy" ~ "%ystdex::make_expanded";
			/ "namespace %Forms" >> $dep_from %NPLA1Forms,
			),
			/ "TCO frame records compression" $=
			(
				/ DLDI "simplified traverse calls"
					^ "%ystdex::expand_proxy",
				/ "collection" $=
				(
					/ DLI "simplified collection loop condition" ^ 'bool'
						~ 'size_t',
					* "over aggresively collecting parent environments for \
						environments having a list of parent environments"
						$since b827
				)
			),
			(
			/ $revert_ex(b869) "parameter types" @ "function %MatchParameter"
				-> 'const EnvironmentReference&' ~ 'Environment&';
				// This is also slightly efficient for less environment \
					resolutions in the term reference indirection \
					operations in %BindParameter after the necessary \
					modification in the internal implementation.
			/ $forced $impl "simplified and supported tracing unsafe \
				environment reference" @ "function %BindParameter"
				!^ "%MatchParameter"
				// This further improves performance a bit greater by \
					avoiding relying on %function instances.
			)
		)
	),
	/ %Tools $=
	(
		* "missing protection of paths with quotes" @ ("%(SHBuild-self-host, \
			SHBuild-self-host-dll).sh" @ %Scripts $since b556,
			"argument of 'cd' command" @ "%SHBuild-build.sh" @ %Scripts
			$since b538, "%make-clang-android.sh" $since b492,
			"arguments of source commands" @ ("%SHBuild-bootstrap.sh"
			$since b538, "%GenerateProjects.sh" $since b599,
			"%PatchRevision.sh" $since b565, "%SHBuild-build.sh" $orig
			(@ "%build.sh" $since b538), "%SHBuild-common-options.sh"
			$since b562) @ %Scripts, "%install-sysroot.sh" $since b546),
		/ "supported stage 1 SHBuild"
			@ "%(SHBuild-self-host, SHBuild-self-host-dll).sh",
			// Since b546 stage 1 SHBuild is available in a steady way. The \
				original name './shbuild' has never adapted to this previously.
		/ %Scripts $=
		(
			* "possible failure by missing definition of %::WinMain"
				@ "platform %Win32" @ "%SHBuild-self-host.sh"
				$since b474 $=
			(
				/ $impl ^"%CXX" ~ "%LD";
					// Using '$CXX' is also more consistent here.
				/ ^ "%Main.cpp.o" ~ "%SHBuild.a" @ "platform %Win32"
			),
			/ "used stage 2 default '.shbuild-dll' in platform directory for \
				YSLib DLL search path by default" ~ '-L/usr/lib'
				@ "%SHBuild-self-host-DLL.sh",
				// This makes it work once stage 2 is built by default, \
					without additional manual tweaks of library deployment.
			/ $re_add(b867) $forced "updated %LIBS for \
				%YFramework.NPL.(NPLA1Internal, NPLA1Forms)" $dep_from
				%YFramework.NPL.NPLA1 $dep_from %YFramework.NPL.NPLA1Forms
				// Also to work around i686 MinGW32 cc1plus out of memory \
					error on compiling %NPLA1.cpp for stage 1 SHBuild.
		),
		(
		+ "support of quoted values for '-xd,' and '-xid,' options"
			@ %SHBuild.Main ^ "%NPL::Deliteralize";
		+ "protected paths for '-xd,' option for SHBuild with '"'"
			$effective @ "%(SHBuild-self-host.sh, SHBuild-self-host-DLL.sh, \
			SHBuild-BuildApp.sh, SHBuild-YSLib-common.txt)" @ %Scripts
		)
	)
),

b881
(
	/ %YBase.YStandardEx $=
	(
		/ DLDI %Any $=
		(
			/ "optimized emplacement operations" @ "class %any" $=
			(
				+ 'YB_ATTR(always_inline) inline' @ "internal functions",
				/ "handler emplacement" !^ 'try'
			),
			/ "simplified storage type" @ "%value_handler"
				@ "namspeace %any_ops"
		),
		+ "function template %update_thunk" @ %Functional
	),
	/ %YFramework $=
	(
		+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ ("member functions \
			%DSApplication::(GetScreenUp, GetScreenDown, GetDSScreenUp, \
			GetDSScreenDown)" @ %'Helper(DS)'.DSMain, "member function \
			%GUIApplication::GetEnvironmentRef"
			@ %Helper.GUIApplication,
			"friend function %operator==" @ "class %Message" @ %Core.YMessage,
			("member function %BufferedRenderer::RequiresRefresh" @ %YRenderer,
			"member functions %(MUIContainer, MLinearUIContainer)::Contains"
			@ %YUIContainer, "static member function \
			%TimedHoverState::DefaultLocate" @ %Hover, "member functions \
			%(MTextList::(GetItemHeightCore, GetTotal), \
			AMUnitControlList::GetUnitRef)" @ %ListControl, "member function \
			%MenuHost::Contains" @ %Menu,
			"member functions %SequenceViewer::(Contains, GetValid)" @ %Viewer,
			"member function %TreeList::GetIndentWidth" @ %TreeView) @ %UI,
			"function %Contains" @ "class template %GHandlerRegisterBase"
			@ %Core.YFunc) @ %YSLib),
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		+ $dev $lib 'YB_ATTR_nodiscard' @ ("member function \
			%GUIApplication::GetEnvironmentHostRef" @ %Helper.GUIApplication
			("member functions %(GetFullViewHeight, GetItemHeight, \
			GetItemHeightCore, GetLastLabelIndexClipped, GetUnitLocation, \
			GetViewPosition, CheckPoint)" @ "class %AMUnitList"
			@ %Viewer, "member function %AMUnitControlList::MakeIterator"
			@ %ListControl, "member functions \
			%TreeList::(GetNodePath, GetNodeRef)" @ %TreeView) @ %YSLib.UI),
		+ $dev $lib 'yimpl(YB_STATELESS)' @ "member function \
			%GUIApplication::GetGUIHostRef" @ %Helper.GUIApplication',
			// To eliminate G++ 9.2 warning: [-Wsuggest-attribute=const].
		/ %NPL $=
		(
			+ "function template %FetchValueFinder" @ %SContext,
			/ %NPLA1 $=
			(
				/ @ "static member function %ContextState::DefaultReduceOnce" $=
				(
					/ DLI "iterated one subterm case in place";
					* $comp "missing nested call safety in calling \
						%ReduceAgainLifted for the thunked implementation with \
						direct calls" $since b879
						// The call to %ReduceAgain can be recursive.
				),
				/ DLI "function %ParseLeaf" ^ "%ValueNode::operator="
					~ "%ValueNode::emplace",
					// To be consistent with %EvaluateIdentifier, having \
						strong exception guarantee (not gurarnteed in the \
						interface though), and slightly more efficient.
				/ "2 functions %(TransformForSeparator, \
					TransformForSeparatorRecursive)"
					-> "struct %SeparatorTransformer"
					^ $dep_from "%FetchValueFinder" @ %SContext,
				- "function %RegisterSequenceContextTransformer"
					$dep_from %Dependency,
				/ DLDI "simlified function %Forms::BindParameter"
					^ $dep_from ("%ystdex::update_thunk" @ %Functional),
				+ "separater handling by %Preprocess" @ "class %REPLContext"
					$dep_from @ %Tools.Scripts
			),
			(
			+ "macro %NPL_Impl_NPLA1_Enable_ThunkedSeparatorPass";
			/ DLI "function %LoadGroundContext"
				!^ ($dep_from "%SeparatorTransformer" @ %NPLA1
				~ "%RegisterSequenceContextTransformer") $dep_from
				"%REPLContext"
			)
		),
		/ DLDI %YSLib.Core $=
		(
			/ 'YB_PURE YF_API' @ "2 functions %to_string"
				@ %YGDIBase -> 'YF_API YB_PURE',
			/ "optimized emplacement operations" @ "class %ValueObject"
				@ %YObject ^ 'YB_ATTR(always_inline)'
		),
		* "missing %YFramework.YSLib.UI.YPanel file renaming"
			@ "Microsoft VC++ project files" $since b672
			$= (/ "%ypanel.cpp" => "%YPanel.cpp")
	),
	* "missing parenthese around <body> of '$cond' expressions"
		@ "%SHBuild-YSLib-common.txt" @ %Tools.Scripts $since b798
		// See $2020-02 @ %Documentation::Workflow.
),

b880
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ "macro %YPP_Stringize";
			+ "diagnostic macros %(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore)";
			/ DLDI "simplified macro %YB_ASSUME" @ 'YB_IMPL_CLANGPP'
				^ "%(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore)"
		),
		/ %YStandardEx $=
		(
			/ DLDI "simplified macros %(yconstraint, yassume)"
				@ 'YB_IMPL_CLANGPP' @ %CAssert ^ $dep_from
				("%(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore)" @ %YDefinition),
			/ DLI "ignored G++ warnings ('-Wsuggest-attribute=const', \
				'-Wsuggest-attribute=pure')" "functor macros"
				@ 'YB_IMPL_GNUCPP >= 60000' @ %Functor ^ $dep_from
				("%(YB_Diag_Push, YB_Diag_Pop, YB_Diag_Ignore)" @ %YDefinition),
			/ %MemoryResouce $=
			(
				/ $dev $lib 'yimpl(YB_PURE)'
					@ "classes %(pool_resource, monotonic_buffer_resource)"
					-> 'yimpl(YB_STATELESS)';
					// Also to eliminate G++ 9.2 warning: \
						[-Wsuggest-attribute=const].
				* $comp $impl "conflict 'YB_STATELESS' implementation ignored \
					by 'YB_PURE'" $since b879
			),
			/ "function templates %unref" @ %Ref $=
			(
				* "%lref not matched prior to fallback overload"
					$orig (@ %Functional $since b348)
					$= (/ "parameter type" -> "non-reference value type"),
				+ $revert_ex(b554)
					"overload for %std::reference_wrapper instances";
				* $comp "wrong '\note' command" @ "Doxygen comment"
					$mismatch $orig (@ %Functional $since b554)
			),
		)
	),
	/ %YFramework $=
	(
		+ $dev $lib 'YB_STATELESS' @ (("all 2 function and 1 function \
			template %IsPrint" @ %YCommon, ("function %CategorizeNode",
			"member function %FileDescriptor::SetTranslationMode"
			!@ "platform %Win32") @ %FileIO) @ %YCLib,
			"function template %ComposeReferencedTermOp" @ %NPL.NPLA),
			// Also to eliminate G++ warning: [-Wsuggest-attribute=const].
		/ $dev $lib 'YB_PURE' @ ("function %CheckReducible" @ %NPLA,
			$revert_ex(b847) "function %Forms::SymbolToString" @ %NPLA1) @ %NPL,
			"function %ClassifyKey" @ %YCLib.Keys) -> 'YB_STATELESS',
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=const].
		/ %YBaseMacro $=
		(
			/ $dev "suppressed warning [-Wunused-function]" @ "macro \
				%DefBitmaskOperations" @ 'YB_IMPL_CLANGPP'
				^ $dep_from ("%(YB_Diag_Push, YB_Diag_Pop, \
				YB_Diag_Ignore)" @ %YBase.YDefinition),
			+ 'YB_PURE' @ "macros with prefixes ('DefPred', 'DefGetter')"
				$= (+ 'YB_PURE' @ "macros %(DefPred, DefGetter)")
				// This is now more restrictive as it requires the body \
					compatible with 'YB_PURE' and similar attributes \
					(including 'YB_STATELESS') cannot override it in all cases.
		),
		/ $dev $lib %YCLib $=
		(
			+ 'YB_NORETURN' @ "member functions \
				%FileDescriptor::(GetFlags, SetBlocking, SetFlags, SetMode, \
				SetNonblocking)" @ '!YCL_API_POSIXFileSystem' @ %FileIO,
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=noreturn].
			+ 'yimpl(YB_NORETURN)'
				@ "member function %WindowReference::GetParent" @ %HostedGUI,
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=noreturn].
			+ 'YB_PURE' $effective @ ("static member function \
				%Logger::DefaultFilter" @ %Debug, ("functions \
				%FAT::LFN::(GenerateAliasChecksum, ValidateName)",
				"member functions %HDirectory::(GetNativeName, operator \
				(basic_string_view<NativeChar>, string, u16string, bool, !), \
				begin, end)") @ %FileSystem, "functions %(FindFirstKey, \
				FindNextKey, FindFirstKeyInCategroy)" @ %Keys,
				("member functions %ScreenBuffer::(GetBufferPtr, GetStride)"
				@ 'YCL_HostedUI_XCB || YCL_Android', "member function \
				%HostWindow::MapPoint" @ "platform %Win32", "member function \
				%WindowsRegionDeviceContext::IsBackgroundValid") @ %HostedGUI),
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
			+ $dev $lib 'YB_ATTR_nodiscard' "member functions \
				%HDirectory::(operator (basic_string_view<NativeChar>, string, \
				u16string, bool, !), begin, end, GetNativeName, \
				GetNodeCategory)") @ %FileSystem
		),
		/ %NPL $=
		(
			+ $dev $lib 'YB_PURE' $effective
				@ ("function %CheckLiteral" @ %Lexical,
				"member function %TermNode::(empty, operator(bool, !))"
				@ %SContext, $impl "internal lambda-expression"
				@ "functions %Forms::(Equal, EqualValue)" @ %NPLA1),
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
			* "wrongly threw exception on successful lookup" @ "member \
				function %Environment::ReplaceChecked" @ %NPLA $since b867,
			/ %SContext $=
			(
				+ "type %Tokenizer";
				+ "function %Reduce#2 with %Tokenizer parameter";
				/ DLDI "simplified function %Reduce#1" ^ "%Reduce#2",
				+ "(2 function overloads; function template overload) %Analyze \
					with %Tokenizer parameter"
			),
			/ %NPLA1 $=
			(
				+ $impl "workaround of libstdc++ with Clang++ in C++2a mode"
					^ $dep_from ("%ystdex::unref" @ %YBase.YStandardEx.Ref),
					// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=93470.
				+ "function %DefaultEvaluateLeaf",
				/ DLI "default return value"
					@ "static member function %ContextState::DefaultReduceOnce"
					-> "%ReductionStatus::Retained"
					~ "%ReductionStatus::Regular",
					// This actually change nothing but the high-level meaning \
						of the status, as %ReductionStatus::Regular is now \
						equal to %ReductionStatus::Retained.
				/ "default return value" @ "functions %(ReduceLeafToken, \
					EvaluateLeafToken)" -> "%ReductionStatus::Retained"
					~ "%ReductionStatus::Clean",
					// To get more precise semantics of self-reducing terms \
						and to simplify possible replacement of \
						%ContextState::DefaultReduceOnce.
				+ "function %ConvertLeaf",
				/ @ "class %REPLContext" $=
				(
					// See $2020-01 @ %Documentation::Workflow.
					+ "data member %ConvertLeaf" $dep_from
						("%SContext::Tokenizer" @ %SContext);
					/ "constructor intialized to specialized token parser for \
						%ConvertLeaf" ^ $dep_from "%ConvertLeaf";
					/ "2 functions %Prepare" ^ "%ConvertLeaf";
					- "%TokenizeTerm call" @ "all functions %Prepare"
				),
				/ "function %EvaluateLeafToken" $=
				(
					- DLI "redundant assertion for case %LexemeCategory::Symbol"
						@ "function %EvaluateLeafToken",
					- "literal handling except for literal pass call and \
						unsupported extend literal checks"
						$dep_from "constructor %REPLContext"
						// See $2020-01 @ %Documentation::Workflow.
				)
			),
			/ %Dependency $=
			(
				+ DLDI 'YB_PURE' @ "lambda-expression"
					@ "function %DecomposeMakefileDepList" @ %Dependency,
					// To eliminate G++ 9.2 warning: [-Wsuggest-attribute=pure].
				/ "literal parsing setup" @ "function %LoadGroundContext" $=
				(
					/ DLI "simplified with more efficient integer parsing"
						^ $dep_from ("%DefaultEvaluateLeaf" @ %NPLA1)
						$dep_from ("%EvaluateLeafToken" @ %NPLA1);
						// This also does not pollute %errno. \
							%EvaluateLeafToken is required for split checks of \
							unsupportd extended literals.
					* "wrong condition to throw exception of unsupported \
						literal suffix" $since b855
				)
			)
		),
		/ %YSLib.Service $=
		(
			+ $dev $lib 'YB_PURE' $effective @ ("friend function %operator=="
				@ "class %TextFileBuffer::iterator" @ %TextManager,
				$design $impl "lambda-expression" @ "function template \
				%FetchMaxTextWidth" @ %TextLayout, "functions \
				%(CheckBOM#(1, 2, 3), DetectBOM#(1, 2))" @ %TextFile),
			/ %TextLayout $=
			(
				+ DD "'\note' command' to clarify ADL %PrintString being \
					used" @ "Doxygen comment"
					@ "function template %FetchStringWidth#(1, 2)",
					// Similar to %TextRenderer.
				* "missing qualified 'Drawing::'" @ "calls of %FetchStringWidth"
					$since b197
			),
			+ $dev $lib 'YB_ATTR_nodiscard' @ ("all function and function \
				templates %(CheckBOM, DetectBOM)",
				"function template %OpenSkippedBOMtream") @ %TextFile
		)
	),
	/ Tools $=
	(
		* "missing 'ystdex::' qualification" @ "call of %(rtrim, cond_prefix, \
			trim, extract_line_cr, erase_all_if)" @ 'YB_Impl_String_has_P0254R2'
			@ %RevisionPatcher.Main $since b862,
			// ADL should not be relied on since both %basic_string and \
				basic_string_view can be from %std rather than %ystdex. This \
				is actually broken in C++17 mode using G++ 9 or Clang++ 9.
		- DLDI "unused lambda-capture" @ %ProjectGenerator.Main,
			// To eliminate Clang++ warning: [-Wunused-lambda-capture].
		/ %Scripts $=
		(
			+ $re_add(b879) ("-Wsuggest-attribute=noreturn",
				"-Wsuggest-final-types", "-Wsuggest-final-methods")
				@ "%C_CXXFLAGS_IMPL_WARNING" @ "G++ warnings"
				@ "%(SHBuild-YSLib-common.txt, SHBuild-common-options.sh)",
				// See $2020-01 @ %Documentation::Workflow.
			* "wrong variables for options used" @ "%SHBuild-build.sh"
				$since b839 $=
			(
				/ "all empty overriding values ''" -> "' '",
				- "%C_CXXFLAGS_STRIP",
				/ "%LD_CXXFLAGS_GC" => "%LDFLAGS_GC",
				/ "%LD_CXXFLAGS_STRIP" => "%LDFLAGS_STRIP"
			)
		)
	)
),

b879
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			(
			* "wrong clang version detection" @ "%YB_IMPL_CLANGPP" $since b458
				$= (/ $impl ^ "%__clang_major__" ~ "%__clang__");
			/ @ "macro %YB_ASSUME" $=
			(
				* "wrong %YB_IMPL_CLANGPP version detection" $since b864
					$= (/ $impl '30501' ~ '35100')
				/ $dev "ignored warning [-Wassume] for Clang++" ^ '_Pragma'
					// The latter is mainly for %CHRLib.
			),
			),
			* @ "ineffective macro %YB_ATTR_novtable" $since b842 $=
			(
				* "wrong inclusion condition for Clang++ without Microsoft C++ \
					ABI" $since b842 $dep_from "%YB_IMPL_CLANGPP",
				* "wrong macro used to detect Microsoft VC++" $since b842
			)
		),
		/ %YStandardEx $=
		(
			/ "optimized move %operator=" @ "class template specializations \
				%one_shot" ^ "%ystdex::swap_dependent"
				~ "%ystdex::move_and_swap" @ %Functional,
			/ %Swap $=
			(
				/ "class template %move_and_swap" -> "create_and_swap"
					$dep_from %(Functional, YFramework.YSLib.Core.ValueNode),
				/ DLDI @ "function template %copy_and_swap" $=
				(
					/ "simplified" ^ $dep_from "%create_and_swap",
					+ 'YB_ATTR(always_inline)'
				)
			),
			* "implicit defaulted move %operator= as deleted" @ "class \
				template %used_list_cache" @ %Cache $orig (@ "class template \
				%GMRUCache" @ %YFramework.YSLib.Core.Cache $since b461),
				// Also to eliminate Clang++ 8 warning: \
					[-Wdefaulted-function-deleted].
				/ $= (+ "explicit defaulted move %operator=")
			/ $dev "ignored warning [-Wpointer-bool-conversion] for Clang++"
				@ "macro %yconstraint" @ %CAssert ^ '_Pragma',
				// This is for cases where the checked conditions already \
					satisfy 'nonnull' attribute, currently in \
					%CHRLib.CharacterProcessing for example.
			+ $dev $lib 'YB_PURE' @ ("function template %exists_substr#1"
				@ %String, $impl "internal tree functions" @ %Tree,
				"function template %exists" @ %Container,
				"function templates %(max, min)" @ %Algorithm, ("friend \
				functions %operator(<, ==)" @ "class template %path",
				"function template %classify_path") @ %Path)
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
			+ $dev $lib 'YB_STATELESS' @ ("function template %type_id"
				@ %TypeInfo, "all 3 functions" @ %CWideCharacterType,
				"function template %forward_like" @ %Utilities),
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=const].
			+ $dev $lib "'yimpl(YB_PURE)' or 'YB_PURE'" (@ $revert_ex(b847)
				"member function %bad_any_cast::what" @ %Any,
				"member function %bad_optional_access::what",
				$revert_ex(b849) $impl "internal memory resource equality \
				comparison functions) -> 'yimpl(YB_STATELESS)'
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=const].
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ @ "class %ScreenRegionBuffer" @ %Helper.HostedGUI $=
			(
				// As %Logger in %YCLib.Debug.
				+ "user-defined move constructor",
				+ "friend function %swap",
				* "implicit defaulted move %operator= as deleted" $since b428
					// Also to eliminate Clang++ 8 warning: \
						[-Wdefaulted-function-deleted].
					$= (/ "move %operator=" ^ $dep_from "%swap")
			),
			/ %Debug $=
			(
				* "explicit defaulted move %operator= as deleted"
					@ "class %Logger" $since b803
					// Also to eliminate Clang++ 8 warning: \
						[-Wdefaulted-function-deleted].
					$= (/ $impl ^ "user-defined (copy, move) %operator= \
						with %ystdex::(copy_and_swap, move_and_swap)"
						~ "%DefDeCopyMoveAssignment"),
				+ $dev $lib 'YB_PURE' @ 'YB_Use_StrictNoThrow'
					@ "function templates %(Nonnull, FwdIter, Deref)"
			),
			+ $dev $lib 'YB_PURE' @ "function template %FetchRootNameLength_P#4"
				@ %YCLib.FileSystem
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=pure].
		),
		/ "supported move construction" @ "class %WindowThread"
			@ %Helper.HostRenderer $=
		(
			// Also to eliminate Clang++ 8 warning: \
				[-Wdefaulted-function-deleted] for %HostRenderer.
			/ "excluded constructor argument" @ "constructor template"
				^ "%ystdex::exclude_self_params_t";
			/ "deleted move constructor" -> "user-defined move constructor"
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				- $revert(b586) $dev $lib "explicit defaulted copy constructor"
					@ "class %GraphicDevice" @ %YDevice,
					// To eliminate Clang++ 8 warning: \
						[-Wdefaulted-function-deleted].
				/ @ "class %ValueNode" @ %ValueNode $=
				(
					* "missing allocator propogation" @ "copy constructor"
						$since b844;
						// This should be consistent to the copy assignment.
					/ DLI "simplified copy %operator="
						^ (("%ystdex::copy_and_swap"
						~ "%ystdex::move_and_swap") @ %YBase.YStandardEx.Swap),
						// This also avoids redundant copy.
				)
			),
			/ %UI $=
			(
				- $lib "all explicit defaulted move constructor"
					@ "widget classes as subclass of %Widget" @ %UI
					// To eliminate Clang++ 8 warning: \
						[-Wdefaulted-function-deleted].
				/ "header %ypanel.h" => "%YPanel.h",
				/ "header %form.h" => "%Form.h"
			),
			/ @ "class %ImageMetadataFindData" @ %Adaptor.Image $=
			(
				/ "base class %noncopyable" -> "move constructor",
					// Also to eliminate Clang++ 8 warning: \
						[-Wdefaulted-function-deleted] for %HImageMetadata.
				+ "friend function %swap";
				+ "move %operator="
			)
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ "struct %PassCombiner" @ "namespace %NPL"
					>> ("namespace %NPL::A1" @ %NPLA1);
				/ $dev "header inclusion %YSLib.Core.YEvent" >> %NPLA1,
				/ DLDI "functon %LiftFirst" ^ "%LiftTerm" ~ "%LiftOther"
			),
			/ @ "class %TermNode" @ %SContext $=
			(
				// Similar to %YSLib::ValueNode. This is also slightly better \
					for NPLA1 performance.
				* "missing allocator propagation" @ "copy constructor" $since
					b852;
					// This would make copied terms like terms stored in the \
						%Forms::MakeEncapsulationType having different \
						allocators.
				* "missing allocator propagation and strong exception safety \
					gurantee" @ "move %operator=" $since b853
					$= (/ $impl ^ "%ystdex::copy_and_swap")
					// This should come after the modification of copy \
						constructor otherwise there is undefined behavior in \
						the move assignment caused by unequal allocators.
			),
			/ %NPLA1 $=
			(
				/ DLDI "optimized internal iterator operations"
					@ "function %(TransformForSeparator, \
					TransformForSeparatorRecursive)",
				/ @ "class %REPLContext" $=
				(
					+ "function %IsAsynchronous",
					/ @ "constructor" $=
					(
						- "trace setup";
							// If needed, %SetupTrace should be called \
								separatedly.
						- "1st parameter"
					)
				),
				* "possible environment mismatch" @ "function %SetupTraceDepth"
					$since b782,
					// This originally only broke after the environment is \
						altered by finding no name being registered in the \
						altered environment. However, now the ground \
						enviornment is intended to be switched, so it is \
						likely always broken.
				/ DLDI "simplified next term setup"
					@ "function %operator()" @ "class %FormContextHandler",
				/ DLDI "simplified the combiner call"
					@ "function %(ReduceCombined, Forms::Apply)",
				/ DLDI "simplified function %ReduceAgain"
					^ "%ContextState::ReduceOnce" ~ "%ReduceOnce",
				/ DLDI "%ContextState parameter names"
					@ "functions %(ContextState::DefaultReduceOnce, \
					SetupTraceDepth, EvaluateLeafToken)",
				/ DLI ("all captured contexts" @ "asynchronous implementations \
					of functions except %Forms::If" -> "parameter passed from \
					the action") $effective @ "functions %(ReduceOrdered, \
					Forms::(Cond, When, Unless, And, Or))",
					// Only %Forms::If has efficiency gain from a captured \
						context reference.
				/ @ "namespace %Forms" $=
				(
					/ DLDI "simplified combiner calls"
						@ "function %ForwardListFirst",
					+ $dev $lib 'YB_PURE' @ "function %Not"
						// Also to eliminate G++ 7.1 warning: \
							[-Wsuggest-attribute=pure].
				),
				/ @ "function %RelayForEval" $=
				(
					/ "setup term in %ContextState";
					/ DLDI "simplified"
				),
				(
				/ $revert_ex(b878) $lib "form handling call"
					@ "asynchrnonous implementations"
					!^ "%NPL_Impl_NPLA1_Enable_InlineDirect optimization"
					$dep_to "thunked handler call implementation";
				* $comp "reduced handler with optimizations as \
					%NPL_Impl_NPLA1_Enable_InlineDirect clashed with \
					asynchrnous calls" @ "function %ReduceCombined" $since b878
				),
				/ DLDI "static function %ContextState::DefaultReduceOnce"
					^ "%(AccessFirstSubterm, ReduceAgainLifted)"
					~ "%(LiftFirst, ReduceAgain)",
				/ DLI @ "function %FormContextHandler::operator()" $=
				(
					/ "optimized thunked implementation"
						^ "%NPL_Impl_NPLA1_Enable_InlineDirect optimization"
						$dep_from "thunked handler call implementation",
					/ "asynchronous evaluation for arguments"
						!^ "%ReduceArgument"
				),
				/ DLDI "avoided unused function of local class"
					@ 'YB_IMPL_CLANGPP'
					// To eliminate Clang++ warning: [-Wunused-function].
			),
			* $dev "missing excluding Clang++" @ "G++ workaround"
				@ %Lexical $since b858
				// Also to eliminate Clang++ warning: [-Wunknown-attributes].
		),
		+ $dev $lib 'YB_PURE' @ ('YF_Hosted'
			@ "function %DSVideoState::IsLCDMainOnTop" @ %'YCLib_(DS)'.DSVideo,
			$impl "internal console handler" @ %'YCLib_(Win32)'.Consoles),
			// Also to eliminate G++ 7.1 warning: [-Wsuggest-attribute=pure].
		/ $dev $lib %'YCLib_(Win32)' $=
		(
			+ 'YB_ATTR_nodiscard YB_STATELESS'
				@ "all 3 functions %IsDirectory" @ %MinGW32;
			+ 'YB_STATELESS' @ ("static member function \
				%WConsole::ComposeAttributes" @ %Consoles,
				"functions CategorizeNode#(1, 2, 3)" @ %MinGW32), 
				// Also to eliminate G++ 7.1 warning: \
					[-Wsuggest-attribute=const].
		)
	),
	/ @ "%SHBuild-YSTest.sh" @ %YSTest $=
	(
		(
		+ "optional input" @ "%SHBuild_AppBaseDir support";
		+ "build directory creation" ^ 'mkdir -p'
		),
		* "missing protection of paths with quotes"
			@ ("arguments to %SHBuild-BuildApp.sh" $since b421,
			"%SHBuild_AppBaseDir" $since b739)
	),
	/ %Tools $=
	(
		* "missing testing nonnull value for default value"
			@ "%SHBuild_SysRoot" @ "%install-sysroot.sh" $since b546
			$= (/ $impl ^ ':=' ~ '='),
		/ %Scripts $=
		(
			/ @ "%SHBuild-build.sh" $=
			(
				/ "defined %LDFLAGS_IMPL_OPT as ' ' to disable LTO by \
					default" $dep_to "disabled stage 1 bootstrapping LTO",
					// To avoid clash between '-Og' with error 'Optimization \
						level must be between 0 and 3' caused by options \
						passed to the linker from Clang++ driver.
				+ $dev "command line output on non-empty variable \
					%SHBuild_Verbose_"
			),
			/ "changed default value" @ "%LD" @ "%SHBuild-common-toolchian.sh"
				-> '$CXX' ~ 'g++',
				// This is now consistent to %SHBuild-common-toolchain.sh.
			/ "enabled '-flto' for %(CXXFLAGS_IMPL_OPT, LDFLAGS_IMPL_OPT) when \
				using Clang++" @ ("%SHBuild-YSLib-common.txt", \
				"%SHBuild-common-option.sh" $dep_from
				"disabled stage 1 bootstrapping LTO"),
			/ @ "%SHBuild-BuildApp.sh" $=
			(
				/ $lib "proteced default value of %SHBuild_YSLib_Platform \
					with quotes",
					// Although the value of %SHBuild_Env_OS is not expected \
						to have space normally, this is more robust.
				/ "setting for variable %AR" $=
				(
					* "missing hiding stderr output on testing using 'hash' \
						for value of %AR" @ $since b546,
					+ "supported defaulted to 'llvm-ar' when %CXX contains \
						'clang++'",
					/ "defaulted to 'gcc-ar' only when %CXX contains 'g++' \
						but not 'clang++'"
				),
				* "missing protection of paths with quotes"
					@ ("%YSLib_BaseDir" $since b740, "arguments to %SHBuild"
					@ "function %SHBuild_BuildApp" $since b549,
					"'.' commands" $since b556),
				/ "value of %LD on %CXX containing 'clang++' for static builds"
					-> 'g++'
					// This works around LTO issues in Linux using Clang++ as \
						the compiler, which seems not able to find the linker \
						plugin when used as a compiler driver.
			),
			+ ("-Wsuggest-attribute=const", "-Wsuggest-attribute=pure")
				@ "%C_CXXFLAGS_IMPL_WARNING" @ "G++ warnings"
				@ "%(SHBuild-YSLib-common.txt, SHBuild-common-options.sh)"
				// See $2020-01 @ %Documentation::Workflow.
		)
	)
),

b878
(
	/ %YBase.YStandardEx $=
	(
		/ %Function $=
		(
			/ @ "class template specialization %function_base" $=
			(
				- DD $lib 'yimpl' @ "exception specification"
					@ "defaulted move constructor",
					// The non-throwing guarantee is a feature.
				+ DLI 'inline' @ "constructors"
			),
			* "wrong specialization %make_function_type for %function_base \
				specializations" %Function $since b851,
			* $revert_add(b848) "missing workaround for invoker initialization"
				@ "default constructor" @ "class %function_base \
				specializations with policy template argument \
				%empty_function_policy::(no_effect, throwing)" $since b848
				// These cases should also have been covered by the workaround \
					for G++ LTO. There are also some additional side effects \
					due to toolchain issues to be worked around. See $2020-01 \
					@ %Documentation::Workflow.
				$= (+ "static function template %invoke_empty"
					@ "class specializations %function_traits with specified \
					template arguments")
		),
		/ %Functional $=
		(
			+ "class template %expanded_function";
			+ "class template specialization %expanded_function",
			+ "specializations %(make_parameter_list, return_of, is_covariant, \
				is_contravariant, make_function_type, call_projection) for \
				%expanded_function"
		)
	),
	/ %YFramework $=
	(
		/ @ "class %GHEvent" @ %YSLib.Core.YEvent $=
		(
			(
			/ DLDI "constructors#(3, 4)" ^ "%function" ~ "%BaseType";
			/ ("protected base"; "%BaseType") ^ "%ystdex::expanded_function"
				~ "%function"
				// The changes does not simplified constructors, but allow \
					efficient initialization from instances both %function \
					and %ystdex::expanded_function.
			),
			+ 'ynothrow' @ "constructors with function pointer parameters",
			+ DLI 'inline' @ "constructor templates",
			* "redundant copy" @ "constructor with callable type parameter"
				$since b849
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				(
				/ DLDI "function %operator()" @ "class templae %GComposedAction"
					!^ "%Reducer";
				/ $re_ex(b877) $dev $lib "removed comparison" @ "type %Reducer"
					$= (/ $impl ^ $dep_from ("ystdex::expanded_function"
						@ %YBase.YStandardEx.Functional) ~ "%YSLib::GHEvent")
					// Since %operator== is not relied on, better avoid the \
						unused comparator pointer in %GHEvent.
				),
				/ DLI "class %ContextNode" $=
				(
					+ 'YB_ATTR(always_inline) inline'
						@ "function template %SetupTail",
					/ "made functions %(ApplyTail, \
						SwitchEnvironmentUnchecked) inline"
				),
				+ DLI 'YB_ATTR(always_inline) inline'
					@ "function templates %RelayNext"
			),
			/ %Dependency $=
			(
				/ DLDI "applicative 'regex-match?'" @ "function \
					%LoadModule_std_strings" !^ "term check",
				/ "applicative 'forward-list-first'"
					@ "function %LoadGroundContext" => 'forward-list-first%'
					// The syntax should allow unsafe results by expression \
						like 'forward-list-first% id id (list 1 2)', so sigil \
						'%' should be placed here to indicate potential \
						unsafety.
			),
			/ %NPLA1 $=
			(
				/ @ "class %ContextState" $=
				(
					+ "static function %DefaultReduceOnce",
					/ DLDI "simplified initialization" @ "%ReduceOnce"
						^ "%DefaultReduceOnce" ~ "%A1::ReduceOnce"
				),
				/ @ "function %ReduceOnce" $=
				(
					/ "redirected calls"
						^ $dep_from "%ContextState::ReduceOnce",
					(
					* "missing call of %ContextState::SetNextTermRef \
						from 2nd passes" $since b842,
					/ $revert_ex(b842) DLI "avoided call of \
						%ContextState::SetNextTermRef for empty passes sequence"
						// This would cause wront term in the call of \
							%ReduceCombine after the call of %ReduceFirst \
							without merged passes setup in \
							%SetupDefaultInterpretation.
					)
				),
				* $comp "missing redirection to configurable \
					%ContextState::ReduceOnce" @ "%ReduceOnce calls"
					@ "synchronous implementations and functions \
					%(ReduceAgain, ReduceFirst)" $since b877,
				/ @ "function %operator()" @ "class tempalte %GComposedAction"
					$=
				(
					+ DLI 'YB_FLATTEN',
						// XXX: On %ComposeActions, this will crash with \
							x86_64-pc-linux-gnu G++ 9.2.
					* $impl "unexpected ADL call to %RelaySwitched" $since b841
				),
				(
				- $revert(b851) DLDI "static assertion on macro \
					%NPL_Impl_NPLA1_Enable_TailRewriting"
					// See $2020-01 @ %Documentation::Workflow.
				- DLI "macro %NPL_Impl_NPLA1_Enable_TailRewriting" $orig
					(@ "macro %YF_Impl_NPLA1_Enable_TailRewriting" $since b823)
				),
				/ $re_ex(b877) DLI "optimized by folding synchronous call of \
					%ReduceHeadEmptyList before the call of %ReduceFirst"
					@ "function %SetupDefaultInterpretation",
				* "missing %Continuation construction" @ "asynchronous calls"
					@ "function ReductionChildrenOrdered#1" $since b841,
				(
				/ DLI "optimized internal functions to return \
					%ReductionStatus::Neutral" ~ "%ReductionStatus::Clean"
					@ "functions %(ReduceChildren, ReduceArguments)",
				/ "optimized functions to return %ReductionStatus::Neutral"
					~ "%ReductionStatus::Clean"
					@ "functions %ReduceChildrenOrdered"
				),
				/ DLI "internal %ContextState term update" $=
				(
					+ DLI 'YB_FLATTEN' ,
					/ $dev $lib "update term for synchrnoized relaying"
						// This is now more accurate for %Continuation direct \
							call.
				),
				/ DLI @ "function %RelayForEval" $=
				(
					/ $revert_ex(b860) "simplified TCO implementation",
					/ "split implementations for lifting and non-lifting cases"
				),
				(
				+ DLI "macro %NPL_Impl_NPLA1_Enable_InlineDirect";
					// See $2020-01 @ %Documentation::Workflow.
				/ DLI "optimized by avoiding construction of unneeded \
					reduction actions where direct recurison is impossible"
					!^ "%(RelayNext, RelaySwitched)"
				),
				(
				/ "wrapping and unwrapping" @ "%Forms::(Apply, Unwrap, \
					UnwrapRef, ForwardListFirst, Warp, WrapRef, WrapOnce, \
					WrapOnceRef)" ^ "%FormContextHandler::Check";
				/ @ "class %FormContextHandler"
					$dep_from ("%LoadModule_std_strings" @ %Dependency) $=
				(
					- "constructor template#2",
					/ "check" -> "assertion by %IsBranchedList" @ "%operator()";
					- "data member %Check"
				)
				)
			)
		)
	)
),

b877
(
	/ $doc %Documentation $=
	(
		+ "explicit rules to allowing different order of typechecking of \
			NPLA1 operations" @ %Documentation.NPLA1,
		/ "merged files with glob pattern 'Workflow.*.txt'" -> %Workflow;
		/ $foced DLD "cross references" $dep_to %(YCLib, Dependencies,
			ChangeLog.(PreAlpha4, PreAlpha5, 'V0.6', 'V0.7', 'V0.8'))
	),
	/ $forced DLD "source comments with %Documentation.Workflow" $dep_from \
		%Documentation.Workflow $dep_to %(YBase.YStandarEx.(Any, CAssert,
		MemoryResource, Utilities, String, Placement, Meta, Memory, List,
		Iterator), YFramework.(NPL.(NPLA, NPLA1, Dependency),
		'YCLib._(Win32)'.(MinGW32, Consoles), YCLib.(HostedGUI, Host, FileIO), 
		YSLib.(Core.YObject, UI.(YWidget, TreeView),
		Service.(FileSystem, YBlit, YGDI)))),
		// The comments names of sections with dates should not be duplicated \
			in filenames.
	/ $re_add(b875) DD $impl "simplified all tags with '\>' escape'"
		@ %YBase.YStandardEx.Utilities,
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			+ $dev "class name declaration %ContextNode";
			/ "class %Reducer" -> "type %Reducer" $=
			(
				/ "base function type"
					^ "'ContextNode&' as 1st parameter type";
				- "data member %Context",
				- "member type %BaseType"
			);
			/ $forced "passed 1st parameter type 'ContextNode&'"
				@ "member function %operator()"
				@ "class template %GComposedAction"
				$= (/ $impl "passed optional argument"
					^ "%ystdex::expand_proxy"),
					// This must be optional, otherwise there would need more \
						reduction actions with '(ContextNode&)' parameter list \
						in composed lambda-expressions in %NPLA1 to avoid \
						ill-formed compositions.
			/ $forced "passed '*this' as argument of call"
				@ "member function %ContextNode::ApplyTail"
		),
		/ %NPLA1 $=
		(
			/ @ "namespace %Forms" $=
			(
				/ DLDI "simplified function %ForwardListFirst",
					// Also to eliminate G++ 9.2 warning: \
						[-Wpessimizing-move]. Note this is actually not \
						pessimizing, at least on x86_64-pc-linux.
				/ $revert_ex(b876) DLI "optimized function \
					%EvaluateIdentifier" !^ "%ResolveIdentifier"
					// Now tags and containers for regular representations are \
						not set, as before b876.
			),
			* "inconsistent guard call" @ "function %ReduceAgain" $since b812,
				// See $2020-01 @ %Documentation::Workflow.
				/ $impl ^ ("%ReduceOnce" ~ "%Reduce"),
			(
			/ "avoided unnecessary guard call and supported configuration \
				continuation" $effecive @ ("functions \
				%(ReduceArguments, ReduceChildren, ReduceChildrenOrdered, \
				ReduceOrdered, RelayForCall, Forms::(If, And, Or, When, \
				Unless, Cond, Sequence, DefineLazy, DefineWithNoRecursion, \
				DefineWithRecursion, SetWithNoRecursion, SetWithRecursion, \
				ForwardListFirst, Eval, EvalRef, EvalString, EvalStringRef, \
				VauWithEnvironment, VauWithEnvironmentRef)",
				"function %operator()" @ "vau handler") $=
				/ $impl ^ $dep_from ("%ContextState::ReduceOnce"
					~ "%ReduceChecked");
				// Ditto with %A1::ReduceOnce. This is also consistently \
					redundant in asynchronous implementations, though. This is \
					slightly more efficient with %std::ref.
			- $revert(b735) "function %ReduceChecked";
				// See $2020-01 @ %Documentation::Workflow.
			* DD "wrong return value for asynchronized reductions"
				@ "function %ReduceChecked" $since b842
			),
			* "wrong continuation used" @ "synchronous implementation"
				@ "function %RelayForEval"
				$orig (@ "internal implementation" $since b859),
				// The context should not from the next action.
			/ DLDI "declaration order" @ "%(Continuation, ContextState)"
				$dep_to "continuation type completeness adjustement",
			/ @ "class %Continuation" $=
			(
				(
				/ $forced "passed 1st parameter type 'ContextNode&'"
					@ "member function %operator()"
					$dep_from ("%(Reducer, GComposedAction)" @ %NPLA);
				- "data member %Context" $dep_from "%RelayForEval"
				),
				(
				+ "type %allocator_type";
				+ "3 allocator-aware constructors";
				/ DLDI "simplified constructor with 'ContextNode&' \
					parameter type"
				),
				+ $dev $lib $re_add(b872) 'YB_ATTR_nodiscard YB_PURE'
					@ "all 2 static functions %Access",
				+ "data member %ReduceOnce as continuation intialized with \
					%A1::ReduceOnce"
					$dep_from "continuation type completeness adjustement"
			),
			/ $forced $impl "passed 1st parameter type 'ContextNode&'"
				@ "member function %operator()" @ "internal actions"
				$dep_from ("%(Reducer, GComposedAction)" @ %NPLA),
			/ DLI "all default initialization of pass objects"
				-> "constructor#1 using allocator from memory resoruce"
				@ "class %ContextState",
			/ DLI "optimized by folding synchronous call of \
				%ReduceHeadEmptyList before the call of %ReduceFirst"
				@ "function %SetupDefaultInterpretation"
		),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			* $comp "behaviors on exception disagreed in multiple typechecking \
				failure between the native implementation and alternatmive \
				derivation" @ "applicative 'forward-list-first'" $since b875
				$dep_from %Documentation.NPL
		),
		/ DLDI "simplified direct expansion calls" ^ "%ystdex::expand_proxy"
			~ "%ystdex::make_expanded" $effective
			@ ("function template %ResolveTerm" @ %NPLA,
			"function templates %(CallRawUnary, CallResolvedUnaryAs, \
			CallRegularUnaryAs, CallUnary, CallUnaryAs)" @ %NPLA1),
		/ @ ("class template %GComposedAction" @ %NPLA,
			"class %Continuation" @ %NPLA1) $=
		(
			+ "type %allocator_type";
			+ "3 allocator-aware constructors";
			/ "constructor with 'ContextNode&' parameter type" $=
			(
				/ DLDI "simplified"
				+ "parameter type 'ContextNode&'" -> 'const ContextNode&'
			)
		)
	)
),

b876
(
	/ %YFramework.NPL $=
	(
		* "missing copying the term tag" @ "allocator-aware copy/move \
			constructors %TermNode" @ %SContext $since b857,
		/ %NPLA $=
		(
			(
			+ "function %LiftOther";
			/ DLDI "simplified function %(LiftTerm#1, MoveRValueToForward, \
				MoveRValueToReturn, LiftTermOrCopyUnchecked, MoveCollapsed)"
				^ "%LiftOther" ~ "%TermNode::MoveContent"
			),
			(
			/ $dep_from "function %LiftTermOrCopyUnchecked"
				=> "%LiftOtherOrCopy" ^ "%LiftOther";
			/ DLDI "simplified function %ReduceToReference" ^ "%LiftOtherOrCopy"
			),
			/ "function %LiftMovedUnchecked" => "LiftMovedOther",
			* "unsafe shared subterm set on copy"
				@ "function %LiftTermOrCopy" $since b858
				$= (/ $impl ^ $dep_from "%LiftOther" ~ "%TermNode::SetContent"),
					// Irregular term could be invalidated before the call of \
						%TermNode::SetContent call.
			+ DLI 'inline'
				@ "function templates %(AccessRegular, ResolveRegular)",
			/ DLI "doubled reserved heuristic message string length"
				@ "destructor %Environment"
				@ 'NPL_NPLA_CheckEnvironmentReferenceCount',
			(
			(
			/ $lib "exception specification" @ "function template %operator()"
				@ "struct %ReferenceTermOp"
				-> 'ynoexcept_spec(NPL::ReferenceTerm(yforward(term)))'
				~ 'ynothrow';
			/ $lib "exception specification"
				@ "all 2 functions %ReferenceTerm"
				-> 'ynoexcept_spec(std::declval<TermReference>().get())'
				~ 'ynothrow',
			+ $dev "configurable macro %NPL_NPLA_CheckTermReferenceIndirection"
			);
			/ "enabled throwing %TermReference::get with check"
				@ 'NPL_NPLA_CheckTermReferenceIndirection'
			),
			/ $dev "made macro %NPL_NPLA_CheckEnvironmentReferenceCount \
				configurable",
			+ "configurable macro %NPL_NPLA_CheckParentEnvironment",
			/ @ "static member function %Environment::DefaultResolve" $=
			(
				/ $lib ("threw %InvalidReference on parent environment access \
					failure" ~ "%NPLException"),
				/ $lib "exception message",
				/ DLI "disable parent environment check"
					@ '!NPL_NPLA_CheckEnvironmentReferenceCount'
					@ $dep_from "%NPL_NPLA_CheckEnvironmentReferenceCount"
			),
			/ ("returned %TermNode" ~ "%TermReference")
				@ "functions %(PrepareCollapse, ResolveIdentifier)"
		),
		/ %NPLA1 $=
		(
			/ @ "namespace %Forms" $=
			(
				/ DLDI "boolean extraction",
				/ DLDI ("function %operator()" @ "vau handler", "functions \
					%(ListAsterisk, ListAsteriskRef, SetFirstAt)")
					^ $dep_from ("%LiftOther" @ %NPLA)
					~ "%TermNode::MoveContent",
				/ DLDI "reordered declarations" @ "functions \
					(%ForwardListFirst, 'First*', ('SetFirst*', 'SetRest*'))",
				/ "reference binding" @ "function %BindParameter" $=
				(
					* "non-temporary unique reference unexpected moved"
						$since b875;
					/ DLI "allowed reference moved when unique or temporary \
						tags are specified"
				),
				/ "function %ForwardListFirst" $=
				(
					/ $impl "keeping TCO action" ^ "%yunused",
						// To eliminate G++ warning: [-Wunused-result].
					/ "used current environments instead of creating fresh \
						environments" @ "function %ForwardListFirst"
						$dep_to "forward list environment fix",
					* "forwarded bounded reference to tempoaraty list as an \
						expression as operand of list access applicative"
						$since b875,
					* "unexpected subterm and element access applicative copy \
						on binding the element" $since b875 $dep_from %SContext
				),
				/ $re_ex(b860) "further simplified thunked calls"
					@ "%operator()" @ "vau handlers"
					^ $dep_from "%RelayForCall",
					// Now temporary objects are not maintained differently in \
						TCO and non-TCO contexts.
				/ DLDI "simplified function %WrapRef" ~ 'if',
				/ ("function templates %(CheckSymbol, CheckParameterLeafToken)",
					"functions %(MatchParameter, BindParaneter)")
					>> "namespace %A1",
				/ DLI "internal expansion" @ "functions %(Wrap, WrapRef, \
					WrapOnce, WrapOnceRef, Unwrap)" ^ "%YB_FLATTEN",
			),
			/ @ "function %ReduceAgainLifted" $=
			(
				+ DD "more strict precondition" ^ "'\pre' command"
					@ "Doxygen comment";
				/ DLI ^ $dep_from ("%LiftOther" @ %NPLA) ~ "%LiftTerm"
			),
			/ DLDI "unified internal combiner call interface" @ "functions \
				%(Forms::(Apply, ForwardListFirst), ReduceCombined)",
			(
			+ "alias %EnvironmentGuard";
			+ "functions %(RelayForEval; RelayForCall)"
			),
			/ DLDI "simplified function template %CallRegularUnaryAs"
				^ "%NPL::AccessRegular" ~ "%NPL::(CheckRegular, Access)",
			/ DLDI "simplified internal type signature" @ "function templates \
				%(CallResolvedUnaryAs, CallRegularUnaryAs)",
			+ DLI 'inline' @ "function templates %(CallResolvedUnaryAs, \
				CallRegularUnaryAs, 2 Forms::RegisterUnary, 2 \
				Forms::RegisterBinary)",
			/ "irregular representation of combiner subobject" $effective
				@ "function %(Forms::(WrapRef, WrapOnceRef, Unwrap, \
				ForwardListFirst, Apply), ReduceCombined)"
				@ 'NPL_NPLA_CheckEnvironmentReferenceCount' $=
			(
				// This is not touched for efficiency of generated code when \
					'!NPL_NPLA_CheckEnvironmentReferenceCount'.
				/ "saved anchor" @ "wrapper" -> "saved environment reference";
					// Since the reference is tracked by the %TermReference \
						(even when 'NPL_NPLA_CheckEnvironmentReferenceCount' \
						is not enabled), saving the anchor pointer is useless, \
						esp. for %release configurations.
				* $comp "inconsistent anchor and reference count on \
					%Environment destrctor check" @ "calling reference operand \
					on %Forms::(WrapRef, WrapOnceRef, Unwrap)"
					@ 'NPL_NPLA_CheckEnvironmentReferenceCount' $since b869
					// The divergence of counts should not be assumed normal \
						since %EnvironmentReference contains the anchor pointer.
			),
			* $re_add(b869) "missing support irregular reprenstation for \
				reference results"
				$dep_from ("function %ResolveIdentifier" @ %NPLA)
				// An object of irregular representation could be sliced here.
		),
		/ @ "function %LoadGroundContext" @ %Dependency $=
		(
			/ $revert_ex(b875) "simplified alternative derivation"
				@ "applicative %first",
			/ DLDI "simplified native derivation" @ "applications %(id, idv)"
				^ $dep_from ("%LiftOther" @ %NPLA) ~ "%TermNode::MoveContent",
			/ DLDI "simplified alternative derivation"
				@ "operative '$sequence'",
			/ DLDI "reordered derivations" @ "applicatives with names \
				((%apply, 'list*', 'list*%'), ('forward-list-first', \
				pattern 'first*', pattern 'rest*'), pattern 'set-first*')",
				// Applicatives 'list*' is needed for '$defw%!' in following \
					changes. The result is also more similar to [RnRK].
			/ "applicative 'forward-list-first'" $=
			(
				* "unexpected local environment used" @ "alternative derivation"
					$since b875
					$= (/ $impl ^ '$defw%!' ~ '$defl%!'),
					// At least 'list-appv' and 'appv' in the implementation \
						should not be exposed.
				/ $comp "used dynamic environment of the call" $dep_from
					"forward list environment fix";
					// As the rationale of the applicative %map rather than \
						%apply in Kernel, the dynamic environment is preffered \
						to new ones. It also allows more efficient native \
						implementation as %ForwardListFirst.
				* $doc "wrong environment used" $since b875
					// Even if the dynamic environment is not directly used, \
						the local environment should not be exposed.
			),
			* "unexpected local environment used"
				@ "applicatives %(accl, accr, foldr1)" $since b791 $=
			(
				// Using 'apply' instead of 'eval%' is actually more efficient \
					due to less 'lest%' required to be evaluated and omission \
					of evaluation passes in native the 'apply' implemenation. \
					And at least for tail contexts, making evaluation \
					structure smaller is better.
				/ $impl "%accl" ^ 'eval%',
				/ $impl "%fodr1" ^ ('eval%', 'apply')
				/ $impl "%fodr1" ^ 'apply'
			),
			* "wrong 'forward! called on applicative parameter"
				@ "applicative 'map-reverse'" $since b875,
			* $re_add(b869) $forced "missing support irregular reprenstation \
				for reference results" @ "applicative '$resolve-identifier'"
				$since b858 $dep_from ("function %ResolveIdentifier" @ %NPLA),
				// Same to %A1::EvaluateIdentifier.
			* "values set not respective to reference" @ "alternative \
				derivations" @ "operatives ('$set!', '$setrec!)" $since b828
				$= (/ $impl ^ 'unwrap eval%' ~ 'unwrap eval')
		)
	),
	* $re_add(b856) "stage 1 build failure" %Tools.Scripts $since b875 $=
	(
		* $comp "failed evaluation on 'for-each-ltr' expressions"
			$dep_from ('map-reverse' @ %YFramework.NPL.Depencdency) $since b875,
		* "missing changed uses of %rest to %restv" @ "%SHBuild-YSLib-build.txt"
			$since b875
	),
	(
	+ $repo "file %.hgeol";
	/ $comp "converted EOL" @ "%3rdparty/freetype/builds/build-ds.sh"
		-> "LF" ~ "CR+LF"
	)
),

b875
(
	/ $re_add(b870) DD $impl "simplified all tags with '\>' escape'"
		@ "Doxygen comments" @ %(YBase.(LibDefect.(CStandardIO, String),
		YStandardEx.Future)), YFramework.(Platform, YCLib.Keys)),
	- DD $impl "'\c' before ADL identifiers" $effecitve
		@ %(YBase.YStandardEx.Rational,
		YFramework.(CHRLib.Convert, YSLib.(Core.YStorage, UI.YStyle))),
	/ %YFramework $=
	(
		* $re_add(b868) DD "missing '!'" @ "end of '/*'" @ "multiline Doxygen \
			comment" @ %YSLib.Core.YGraphics
			$orig (@ %YSLib.Core.YGDIBase $since b366),
		* DD "wrong Doxygen comment" @ "constructor %DSApplication"
			@ %'Helper_(DS)'.DSMain $orig (@ %Helper.YGlobal $since b269),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "function %(LiftTermOrCopyUnchecked; LiftMovedUnchecked)";
				/ DLI "functions %(MoveRValueToForward, MoveRValueToReturn)"
					^ "%LiftMovedUnchecked" ~ "%LiftMoved"
			),
			/ "namespace %Forms" @ %NPLA1 $=
			(
				/ "supported options tags of %TermTags::Temporary"
					@ "function %MatchParameter" $=
				(
					/ DLDI "exlucded %TermTags::Temporary"
						@ "creatd references bound with sigil '%'"
						$dep_to "binding temporary option tags";
					/ "supported binding references to xvalues with sigil '@'",
					/ "bound xvalues as references instead of moved temporary \
						objects"
						// This is needed in partially binding elements of a \
							list and the elements in the list can be further \
							bound as subterms again.
				),
				/ "function %BindParameter" $=
				(
					/ $forced DLDI $dep_from
						"binding temporary option tags",
					/ "bound additional %TermTags::Temporary"
						@ "binding xvalue operands with sigil '&'"
						$dep_to "unified xvalues binding"
						// Like C++, prvalue and xvalues are both bound to \
							deduced argument. Now '$resolved-identifier' is \
							not needed for 'forward!' for an xvalue not in as \
							a list element.
				),
				(
				/ DLDI "function %Apply";
				+ "function %ForwardListFirst"
				),
				/ "function %First" $=
				(
					/ "supported unified forwarding",
					* "moved or subterm of nonmodifying lists" $since b869
						^ $dep_from ("%LiftTermOrCopyUnchecked" @ %NPLA)
						~ "%LiftTermOrCopy"
				),
				/ DLI ("functions %(FirstVal, Eval, EvalRef, EvalString, \
					EvalStringRef)", "%operator()" @ "vau handler") ^ $dep_from
					("%LiftTermOrCopyUnchecked" @ %NPLA) ~ "%LiftTermOrCopy",
				/ DLI ("%operator()" @ "vau handler", "function %SetFirstAt")
					^ "%TermNode::MoveContent" ~ "%LiftTerm",
				/ DLI "function %SetFirst"
					^ $dep_from ("%LiftMovedUnchecked" @ %NPLA) ~ "%LiftTerm",
				/ DLI "functions %(First, FirstVal)"
					^ $dep_from ("%LiftMovedUnchecked" @ %NPLA) ~ "%LiftMoved"
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				+ "applicative 'forward-list-first'" ^ $dep_from
					("%ForwardListFirst" @ %NPLA1),
				/ "supported unified forwarding" @ "applicative %first" $=
				(
					/ $comp "native derivation" $dep_from ("%First" @ %NPLA1),
					/ $impl "alternative derivation" ^ "sigil '%' binding"
						$dep_from "unified xvalues binding"
				),
				/ "avoided rvalue copies" @ "applicative %accl"
					!^ 'forward' $dep_to "accl forwarding",
				(
				/ $comp "supported forwarding current iterated elements"
					@ "applicative %foldr1" $dep_from "%first";
					// The change of %first is necessary to keep applicatives \
						based on %fordr1 like 'list-concat' or %append sane.
				/ "avoided rvalue copies" @ "applicative %accr"
					!^ 'forward' $dep_from "%first";
				+ "applicative %list-extract" ^ $dep_from 'forward-list-first';
				(
				+ "applicatives ('list-extract-first', 'list-extract-rest%')";
				/ DLI "applicative 'map-reverse'" $=
				(
					/ $impl "simplified" ^ ('list-extract-first',
						'list-extract-rest%');
					/ "supported forwarding values" ^ 'cons%' ~ 'cons'
						$dep_from "accl forwarding"
				)
				)
				),
				/ "passing predicator as lvalue"
					@ "applicatives %(accl, accr)" ^ 'forward!',
					// This is now more consistent to passing of other \
						parameters.
				/ DLI "moving nil rvalue parameter" ^ "appliative %foldr1"
					^ 'forward!' ~ 'forward',
				/ "applicative %rest" => "%restv",
					// This is like %firstv.
				/ "simplified applicative 'move!'"
					^ $dep_from ("%LiftTermOrCopyUnchecked" @ %NPLA)
			)
		)
	)
),

b874
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ DLDI "simplified functions %(MoveRValueToForward, \
					MoveRValueToReturn)",
				/ DLI "collapsed the reference value by move conditionally \
					specified by the 3rd parameter" @ "function \
					%LiftToReference" ~ "collapsed the reference value by copy",
				/ DLI "simplified function %ReduceToReferenceAt"
					^ "%GetLValueTagsOf"
			),
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				* "function %FirstVal wrongly moved referent as \
					rvalues unconditionally" $since b859,
				/ @ "function %MatchParameter" $=
				(
					* "missing copy elision" @ "nonmoving binding \
						variables with sigil '%' on nonmovable prvalues"
						$since b859 $dep_to "binding copy elision"
						$= (/ $revert_ex(b859) "binding by copy"
							-> "binding by temporary objects elision"),
					* $revert_ex(b859) "%TermNode::Unique modification wrongly \
						disallowed" @ "non-unique referent subobject binding"
						$since b859
						// This allows explicit 'expire' to be used to list \
							lvalues to make subobjects moved solely.
				),
				/ $impl "forwarding value for reference" $=
				(
					* $dev "invalid %YB_PURE used" $effective @ "functions \
						%(Wrap, Wrap, WrapOnce, Unwrap, Apply) and \
						decapsulation %operator() from %MakeEncapsulationType"
						$since b859,
						// This seems at least not effective with code \
							generated by current toolchains.
					/ DLD "simplified functions %(Cons, ConsRef, SetRest, \
						SetRestRef)",
						// Elements are forwarded similar to non-list objects.
					/ DLD "optimized" ^ 'YB_FLATTEN'
				),
				/ DLDI "simplified functions %(First, FirstAt, FirstRef, \
					FirstVal)",
				/ DLDI "optimized function %First" !^ "%ReduceToValue"
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				* $dev $impl "missing forwarding the 1st operand for element \
					being extracted" @ "derivation" @ "applicative %map1"
					$since b829,
					// After fixing %id, evaluation of 'map1 id' on a list \
						prvalue containing reference elements would still \
						cause invalid access without this fix.
				* $dev $impl "missing copy elision for parameters"
					@ "alternative derivations with '%' sigil"
					$since b859 $dep_from ("binding copy elision" @ %NPLA1),
				/ DLDI "simplified alternative derivation"
					@ "applicative %first"
					// The old alternative implementation is error-prone for \
						unspecified evaluation order of arguments in the call, \
						but occasionally not a bug.
			)
		),
		* $re_add(b868) DD "missing '!'" @ "end of '/*'" @ "multiline Doxygen \
			comment" @ %YBaseMacro $since b333,
		/ DLI "%InputTimer" @ %YSLib.UI.YGUI ^ 'override' ~ 'virtual'
	)
),

b874
(
	+ "specialiazation for more than 2 template arguments"
		@ "class template %combined_hash" @ %YBase.YStandardEx.Hash
	/ $revert_ex(b860) $lib $impl "lambda-expressions without \
		trailing-return-type" ^ "%(YB_ATTR, YB_PURE, YB_STATELESS)"
		~ "%YB_ATTR_LAMBDA"
		$effective @ %('YCLib_(DS)'.DSIO, YCLib.(YCommon, Debug, FileSystem,
		Host, HostedGUI), 'YCLib_(Win32)'.MinGW32, Helper.Environment,
		NPL.(Dependency, NPLA1)) @ %YFramework,
	/ $re_add(b860) $lib $impl "workaround for G++ 9.2 of attributes \
		on lambda-expressions with qualifiers" ^ "%YB_ATTR_LAMBDA_QUAL"
		$effective @ (("function %uremove" @ "platform %Win32" @ %FileIO,
		"member function %Logger::DoLogException" @ %Debug) @ %YCLib,
		%'YCLib_(DS)'.DSIO, "platform %DS" @ "constructor %Environment"
		@ %Helper.Environment) @ %YFramework,
	/ %YFramework $=
	(
		* $dev "invalid attribute %NONNULL" @ "lambda-expression"
			@ "constructor %Environment" @ "platform %DS"
			@ %Helper.Environment $since b860,
		/ DLDI @ "platform %Win32" @ "function %FetchLimit" @ %YCLib.YCommon,
			// To eliminate G++ warning: [-Wsign-compare].
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ DLDI "simplified function %MoveRValueToForward"
					^ "%TermReference::IsModifiable"
				(
				+ "member functions %TermReference::(SetReferent, SetTags)";
				/ DLI "reference collpase" @ "function %Collapse"
					^ "%TermReference::(SetReferent, SetTags)"
				),
				(
				/ "function %LiftTransferred" -> "%LiftMoved"
					^ "%LiftTermOrCopy" ~ "%LiftTermValueOrCopy";
				/ $forced "transferred by term move" @ "functions \
					%(LiftToReturn, MoveRValueToForward, MoveRValueToReturn)"
					$dep_from "%LiftTransferred"
				),
				* DD "misplaced '\pre' command" @ "Doxygen comment"
					@ "functions %(ReduceToReference, ReduceToReferenceAt)"
					$since b871
			),
			+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
				@ "function %GetLValueTagsOf" @ %SContext,
			/ %NPLA1 @ "namespace %Forms" $=
			(
				/ "function %FirstRefAt" => "%FirstAt",
				/ "function %SetFirstRefAt" => "%SetFirstAt",
				* "bound %TermTags::Temporary for subterm references \
					recursively" @ "function %MatchParameter" $since b859
					$dep_from ("applicative %first"
					@ "function %LoadGroundContext" @ %Dependency),
					// This could cause named variables bound directly as \
						termporary objects matching subterms in the formal \
						parameter in nested binding constructs.
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "applicatives ('first@', 'set-first@!')"
						$dep_from ("%(FirstRefAt, SetFirstRefAt)" @ %NPLA1),
					/ DLDI "reordered derivations" @ "applicatives (('first@', \
						'first&'), ('set-first%!', 'set-first@!'), \
						('assign%!', 'assign!'), (%deshare, ('move!', \
						'transfer!')))",
					/ "avoided return value conversion"
						@ "applicatives ('move!', 'transfer!')";
					* $comp "redundant return value conversion" @ "alternative \
						derivations" @ ("applicative 'set-first!'" $since b856,
						"applicative 'forward!'" $since b872,
						"applicative %first" $sincc b859),
					/ DLI "alternative derivation" @ "appliative %first"
						^ 'forward!',
					+ "applicative %expire" ^ $dep_from
						("%TermReference::SetTag" @ %NPLA),
					/ DLI "optimized trailing parameter forwarding"
						@ "applicatives %append, 'map-reverse'" ^ 'move!'
						~ 'forward!',
					(
					/ "transferred or returned values by term move except for \
						'transfer!'" $=
					(
						/ $comp "native derivations" $dep_from
							("%(LiftToReturn, MoveRValueToForward, \
							MoveRValueToReturn)" @ %NPLA,
						/ "alternative derivation" @ "applicative 'forward!"
							^ 'move!' ~ 'transfer!'
					);
					/ $comp DLI "optimized native and alternative derivations \
						to return list"
					);
					/ DLI "optimized trailing parameter forwarding"
						@ "operatives ('$let*', '$let*%')" ^ 'move!' ~ 'idv',
					/ DLI "optimized all lvalue trailing parameters 'body' \
						forwarding" ^ 'move!',
					/ DLI "optimized 'clause'" @ "alternative derivation"
						@ "operative '$cond'" ^ 'move!',
					* "non-reference objects not forwarded" @ "alternative \
						derivations" @ "applicative %id" $since b828
						$= (/ $impl ^ "'bound-lvalue?', 'move!' and sigil '&'"
							~ "sigil '%'")
				)
			)
		)
	),
),

b872
(
	- DLDI "redundant 'YB_PURE YB_ATTR_returns_nonnull'"
		@ "member function %bad_optional_access::what"
		@ %YBase.YStandardEx.Optional,
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %SContext $=
			(
				(
				+ "2 functions %AccessFirstSubterm";
				+ "function %MoveFirstSubterm"
				),
				+ "2 functions %ShareMoveTerm"
					$dep_from ("%shared_ptr" @ %NPLA)
			),
			/ %NPLA $=
			(
				/ "alias declarations %(shared_ptr, weak_ptr, make_shared)"
					>> %SContext,
				/ @ "class %Environment" $=
				(
					+ "static function %EnsureValid",
					/ DLD "parameter type" @ "functions %(SwitchEnvironment, \
						SwitchEnvironmentUnchecked)" -> 'const \
						shared_ptr<Environment>&' ~ 'shared_ptr<Environment>'
				),
				/ DLDI "simplified functions %(ReduceHeadEmptyList, \
					%SXML::(ConvertAttributeNodeString, PrintSyntaxNode))"
					^ $dep_from ("%AccessFirstSubterm" @ %SContext)
				/ DLDI "simplified function %LiftFirst"
					^ $dep_from ("%AccessFirstSubterm" @ %SContext)
					~ "%AssertBranch",
				/ DLDI "simplified function %SXML::ConvertDocumentNode"
					^ "%IsBranch",
				(
				/ "function %LiftReferenceToReturn"
					-> "functions %(LiftTermValueOrCopy; LiftTransferred)";
				/ $forced DLDI "function %(LiftToReturn, MoveRValueToReturn)",
				+ "function %MoveRValueToForward"
				)
			),
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					- $revert_ex(b871) "hosted environment value checks"
						^ @ "function %Apply"
						// This should be safe because it is eventually \
							checked in %ContextNode::SwitchEnvironment.
					/ DLDI "simplified funtions ('Define*', 'SetWith*', \
						'Lambda*', 'Vau*')"
						^ $dep_from ("%ShareMoveTerm" @ %SContext),
					/ DLDI "simplified funtions ('Define*', 'SetWith*')"
						^ $dep_from ("%MoveFirstSubterm" @ %SContext),
					/ DLDI "simplified functions %(When, Unless)"
						^ $dep_from ("%AccessFirstSubterm" @ %SContext),
				),
				/ DLDI "simplified funtions %(ReduceCombined, ReduceFirst, \
					Forms::(Apply, First, FirstRef, FirstRefAt, SetFirst, \
					FirstVal, SetFirstRef, SetFirstRefAt)"
					^ $dep_from ("%AccessFirstSubterm" @ %SContext)
				/ DLDI "simplified funtions %(SetRest, SetRestRef)" ^ $dep_from
					("%(AccessFirstSubterm, MoveFirstSubterm)" @ %SContext)
				/ DLDI "simplified functions %(Forms::(When, Unless), \
					ReduceOrdered)" ^ "%IsBranch"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "simplified applicative 'freeze-environment!'"
						^ $dep_from ("%Environment::EnsureValid" @ %NPLA)
						~ "%Environment::ThrowForInvalidValue",
					+ "applicative 'transfer!'"
						^ $dep_from ("%LiftTermValueOrCopy" @ %NPLA),
					+ "applicative 'forward!'" ^ $dep_from ('transfer!',
						("%MoveRValueToForward" @ %NPLA)),
					* "missing '&' for the operand binding"
						@ "alternative derivations ('$and?', '$or?')"
						$since b860
				),
				/ "all non-alised operands forwarding" ^ $dep_from
					'forward!' ~ 'forward' $effective @ (("alternative \
					derivations ('set-first%!', 'set-first@!', \
					'check-environment', 'apply', 'list*%', '$and?', '$or?')",
					"derivations (%accl, %accr, %foldr1, %map1, 'list-concat', \
					%append, 'map-reverse')") @ "function %LoadGroundContext",
					"applicatives %(memoize, force)"
					@ "function %LoadModule_std_promises")
			),
		),
		+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ "functions with name \
			prefixes ('FetchBiChar', 'Get')" @ %CHRLib.CharacterMapping,
		/ $dev "header %ymsgdef.h" @ %YSLib.Core => "%YMessageDefinition.h",
		/ $re_add(b868) $dev "all %std::function" -> "%function"
			$effective @ %(Helper_(Android).AndroidHost, Helper.(GUIApplication,
			HostRenderer), YSLib.(Core.(YFunc, YMessageDefinition),
			Service.TextRenderer, UI.(Animation, Hover, ListControl, TabControl,
			TreeView, YControl, YStyle, Selector))),
	)
),

b871
(
	/ %YFramework $=
	(
		/ "supported terminal" @ "%platform %Android" @ %Host,
			$= (- "conditional inclusion for declarations of (classes \
				%(TerminalData, Terminal), function %UpdateForeColorByLevel)"),
				// This should be usable on Termux.
		/ %NPL $=
		(
			/ %NPLA $=
			(
				(
				+ "function %LiftReferenceToReturn";
				/ DLDI "simplified function %LiftToReturn"
					^ "%LiftReferenceToReturn"
				),
				(
				/ $revert_ex(b857) "function %LiftRValueToReturn"
					-> "function %MoveRValueToReturn";
				+ "function %ReduceToValue"
				),
				- $revert(b869) "function %ReduceForwarded" $dep_all_from
					"removal of ReduceForwarded",
				+ "functions %(ReduceToReferenceAt; ReduceToReference)",
				/ $revert_ex(b870) "function %LiftCollapsedTerm"
					-> "function %MoveCollapsed",
				/ "%IsLValueTerm" => "%IsBoundLValueTerm",
				(
				/ @ "class %Environment" $=
				(
					+ "data member %Frozen";
					+ "function %MakeTermTags",
					+ "static function %ThrowForInvalidEnvironment"
				),
				/ "reference term tags" @ "function %PrepareCollapse"
					^ $dep_from "%Environment::MakeTermTags"
			),
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				* "wrong %ReductionStatus::Neutral status instead of \
					%ReductionStatus::Retained for forwarding lvalue operands"
					@ "functions %(CheckEnvironment, First, FirstVal)"
					^ $dep_from ("%MoveRValueToReturn" @ %NPLA)
					~ "%ReduceForwarded" $since b869 $dep_to
					"removal of ReduceForwarded",
				/ DLDI "simplified functions %(First, FirstRef)"
					^ $dep_from ("%ReduceToReference" @ %NPLA),
				/ DLDI "simplified function %FirstRefAt"
					^ $dep_from ("%ReduceToReferenceAt" @ %NPLA),
				(
				+ "enum %WrappingKind";
				+ "function template %RegisterHandler";
				/ DLDI "simplified function templates %(RegisterForm, \
					RegisterStrict)" ^ "%RegisterHandler",
				/ "supported wrapping" @ "all 4 function templates \
					%(RegisterStrictUnary, RegisterStrictBinary)"
					-> "%(RegisterUnary, RegisterBinary)"
				),
				/ "allowed move-only functions" @ "constructor templates \
					%(UnaryExpansion, UnaryAsExpansion, \
					BinaryExpansion, BinaryAsExpansion)"
					$= (/ "constructed stored function with move" ^ "%std::move"
						~ "direct copy-initialization"),
				/ "assertion" -> "hosted environment value checks"
					@ "function %Apply" ^ $dep_from
					("%Environment::ThrowForInvalidValue" @ %NPLA),
				+ "hosted environment value checks" ^ $dep_from
					("%Environment::ThrowForInvalidValue" @ %NPLA)
					$effective @ "functions (%(Apply, CheckEnvironment), \
					'Lambda*', 'Vau*', 'SetWith*')"
			),
			/ %Dependency $=
			(
				* "missing removed unused 2nd parameter"
					@ "function template %LoadModule" $since b867,
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "simplified applicative 'move!'"
						^ "%Forms::CallResolvedUnary",
					/ DLI "simplified native derivations" @ "applicatives \
						%(deshare, collapse)" ^ "%Forms::CallRawUnary",
					/ DLI @ "native derivations" @ "applicatives %(id, idv)" $=
					(
						/ $design ^ "%Forms::CallRawUnary",
						/ ^ "%TermNode::MoveContent" ~ "%LiftTerm"
					),
					/ @ "native derivation" @ "applicative %forward" $=
					(
						/ DLDI ^ "%Forms::CallRawUnary",
						* "wrong %ReductionStatus::Neutral status instead of \
							%ReductionStatus::Retained for lvalue \
							operands" ^ $dep_from ("%ReduceToValue"
							@ %NPLA) ~ "%ReduceForwarded" $since b869 $dep_to
							"removal of ReduceForwarded"
					),
					/ $forced DLI "native derivation" @ "applicatives \
						(%collapse, 'assign%!')" ^ (($dep_from "%MoveCollapsed"
						~ "%LiftCollapsedTerm") @ %NPLA),
					(
					/ "applicative 'resolve-identifier'"
						-> "operative '$resolve-identifier'"
						^ $dep_from ("%RegisterUnary" @ %NPLA1);
						// Similar to the rationale to change 'binds?' to \
							'$binds?' in [RnRK].
					/ $forced "simplified alternative derivations"
						@ "applicatives %(collapse, forward, first)"
						^ '$resolve-identifier' ~ '(unwrap resolve-identifier)'
					),
					/ "applicative 'lvalue?'" -> 'bound-lvalue?'
						$= (/ $forced DLDI $dep_from ("%IsLValueTerm" @ %NPLA)),
					/ "protected the ground environment from modification \
						after initialization of bindings"
						$dep_from ("%Environment::Frozen" @ %NPLA),
					+ "applicative 'freeze-environment!'" ^ $dep_from
						("%Environment::ThrowForInvalidEnvironment" @ %NPLA)
				),
				/ $forced DLDI "functions %(LoadGroundContext, \
					LoadModule_std_environments, LoadModule_std_strings, \
					LoadModule_std_io, LoadModule_std_io, LoadModule_SHBuild)"
					$dep_from ("%(RegisterUnaryStrict, RegisterBinaryStrict)"
					@ %NPLA1)
			),
			/ $revert_ex(b869) DLDI "renamed internal 'TermNode&' parameter \
				names" $effective @ (("functions %(CheckEnvironment, \
				EqualLeaf, EqualReference, FirstVal, MakeEncapsulationType)",
				"function templates %(CallUnary, CallUnaryAs, \
				CallResolvedUnary)") @ "namespace %Forms" @ %NPLA1,
				"function %LoadGroundContext" @ %Dependency)
				// Subterms not being resolved are now named 'tm' instead \
					of 'node', 'nd' or 'src'.
		)
	)
),

b870
(
	* DD "wrong '\param' command" @ "Doxygen comment" @ "private function"
		@ "class %ShlTextReader" @ %YReader.ShlReader
		$orig (@ "function %Switch" $since b286),
	/ $re_add(b851) DLDI "simplified" ^ "%rebind_alloc_t" ~ "%allocator_traits"
		$effective @ %YBase.YStandardEx.Cache,
	/ %YBase $=
	(
		/ %LibDefect $=
		(
			/ "disabled %(__atomic_add_fetch, __atomic_sub_fetch) workaround"
				@ '!_GLIBCXX_HAS_GTHREADS || __clang__' @ %Exception,
				// Since platform %Android now uses Clang++ and libc++ \
					(instead of G++ with libgcc_s), libatomic is not needed.
			/ 'defined(__GLIBCXX__) && (defined(__GXX_EXPERIMENTAL_CXX0X__) \
				|| __cplusplus >= 201103L) \
				&& !(defined(_GLIBCXX_USE_C99_MATH_TR1))' @ %CMath $=
			(
				/ DLDI "simplified macros",
				+ "optional support of %(_GLIBCXX_BEGIN_NAMESPACE_VERSION, \
					_GLIBCXX_END_NAMESPACE_VERSION)",
				+ 'extern "C++"'
			)
		),
		/ %YStandardEx $=
		(
			/ %Ref $=
			(
				/ "supported resolution of LWG 2993" @ "class template %lref",
				/ DD $impl "simplified all tags with '\>' escape'"
					@ "Doxygen comments"
			),
			/ $re_add(b863) DLDI "simplified" ^ "%nor_" ~ "%(not_, or_)"
				$effective @ %CString,
			* $re_add(b865) DD "missing escaping tag" @ "Doxygen comments"
				$since b660 $effective @ %(CString, Ref),
					// To eliminate Doxygen warning: Unsupported xml/html tag \
						found.
			/ %BitSegment $=
			(
				/ DD "group %type_traits_operations" @ "'\ingroup' command"
					@ "Doxygen comment"
					@ "class templates %(bitseg_traits, ordered_bitseg_traits)"
					@ -> "%traits",
				+ DLDI "'const' after 'yconstexpr'" @ "trait %bitseg_traits"
			),
			+ DD '\ingroup YBase_replacement_features' @ "Doxygen comment"
				@ ("class template %integer_sequence",
				"alias template %index_sequence") @ %IntegerSequence,
			+ DD '\ingroup YBase_replacement_extensions' @ "Doxygen comment"
				@ "function template %(begin, end, rbegin, rend, data) with \
				rvalue reference parameter" @ %Range,
			/ $re_add(b852) $dev "all %std::function" -> "%function"
				@ %(ScopeGuard, Thunk, Cache)
		)
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			+ "function %LiftCollapsedTerm" @ %NPLA,
			/ %NPLA1 $=
			(
				/ "function %ReduceCombined set %TermTags::Temporary on \
					reduced term" ~ "on first subterm";
				/ $forced "simplified %operator" @ "vau handlers"
			),
			/ @ "function %LoadGroundContext" @ %Dependency $=
			(
				/ "simplified native derivation" @ "applicatives (%collapse, \
					'assign%!')" ^ $dep_from ("%LiftCollapsedTerm" @ %NPLA),
				+ "alternative derivation" @ "applicative 'assign%!'"
					^ "applicative %collapse"
				/ DLI "alternative derivation" @ "applicative 'assign!'"
					^ "applicatives ('assign@!', %collapse)"
					~ "applicative 'assign%!'"
					// To be more efficient.
			)
		),
		* $re_add(b853) DD "wrong Doxygen command '\build' used" ~ '\brief'
			@ ("class %WConsole", "member function %WConsole::Style")
			@ %'YCLib_(Win32)'.Consoles $since b520,
			// To eliminate Doxygen warning: Found unknown command.
		/ $re_ex(b863) DLDI "simplified without 'ystdex::' for %bad_any_cast"
			@ %YSLib.(UI.Loader, Service.ContentType),
		/ %YCLib $=
		(
			* %Video $since b517 $=
			(
				* $re_add(b660) DD "wrong Doxygen command '\breif' used"
					~ '\brief' @ "class template %AXYZValueTraits",
				* $dev "spelling error" @ "static assert message of integer \
					width check failure"
			),
			/ DLDI @ "platform %DS" @ "function %SetEnvironmentVariable"
				@ %YCommon ^ 'yunused',
				// To eliminate G++ warning: [-Wunused-parameter].
			- $revert(b529) $lib 'using yimpl(std)::make_shared;' @ %Reference
				// Now %YBase.StandardEx.Memory is sufficient.
		)
	)
),

b869
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			+ "enuerator %Neutral" @ "enum %ReductionStatus";
			/ "supported %ReductionStatus::Neutral" @ "%CheckReducible";
			+ "function %ReduceForwarded",
			/ "returned %ReductionStatus::Neutral" ~ "%ReductionStatus::Clean"
				@ "function %ReduceHeadEmptyList" $dep_to
				"avoided clean reduction overriding",
			/ ("default %ReductionStatus value" @ "struct %PassesCombiner",
				"default value" @ "%ContextNode::LastStatus")
				-> "%ReductionStatus::Neutral" ~ "%ReductionStatus::Clean"
			),
			/ "returned %ReductionStatus::Regular for empty lists"
				~ "%ReductionStatus::Clean"
				@ "functions %(ReduceToList, ReduceToListValue)",
			- $revert(b769) "function %CheckNorm" $dep_from
				("%EvaluateIdentifier" @ %NPLA1),
			* $lib "missing support to irregular representation for references \
				to reference with irregular representation"
				@ "function %ReduceForLiftedResult" $since b858
				// This is still compatible because the values of the \
					enumerators %ReductionStatus::Regular and \
					%ReductionStatus::Retained are equal, thus the results \
					cannot be distinguished by the call sites.
				$= (/ "return value %ReductionStatus::Regular"
					-> "%ReductionStatus::Retained"),
			+ "function %IsOverridableReductionResult",
			/ @ "function %CombineReductionResult" $=
			(
				/ $lib "%YB_PURE" -> "%YB_STATELESS",
				(
				/ $impl "simplified" ^ "%IsOverridableReductionResult"
					$dep_from "avoided clean reduction overriding",
				/ $comp "allowed %ReductionStatus::Clean in the result"
					@ "function %CombineReductionResult"
				)
			),
			/ DLI "encoded %ReductionStatus enumerators explicitly",
				// This is still in 'yimpl' to be implementation details. \
					However, current implemenation has already relies on the \
					underlying code to be more efficient, e.g. in \
					%IsOverridableReductionResult and %CheckReducible above.
			/ DLDI "reordered declaration of enum %ReductionStatus",
				// To be consistent with %Documentation.NPL.
			/ @ "class %Environment" $=
			(
				(
				/ "use of struct %AnchorValue" @ "anchor" -> "private data";
				- $revert(b849) "struct %AnchorValue"
				),
				+ $re_add(b856) DLI "out-of-line destructor"
					!@ 'NPL_NPLA_CheckEnvironmentReferenceCount',
					// This is defaulted and it is good for performance.
				/ DLI "simplified shared anchor",
				/ @ "static function %DefaultResolve" $=
				(
					* "exception message" $since b853,
					- "support of %observer_ptr<const Environment> as the \
						environment host type" $dep_to
						"removal of internal environment host type support",
					- $forced 'const' @ "supported environment types"
						@ "function %DefaultResolve" $dep_from "%NameResolution"
						$dep_to "removal of const requirements for \
							default name resolutions"
				),
				- 'const' @ "type %NameResolution" $dep_from
					"removal of internal environment host type support",
				/ $forced DLI "braced-init-list" @ "%Resolve" $dep_from
					"removal of const requirements for default name resolutions"
			),
			(
			+ "defaulted default constructor %EnvironmentReference";
			/ DLDI "function %LiftToReference"
				^ "explicit 'EnvironmentReference()'"
			),
			(
			+ DLDI "class name declaration %Environment";
			/ DLDI "reordered definition" @ "class %EnvironmentReference";
			/ "supported tracing environment reference" @ "%TermReference"
				^ "%EnvironmentReference" ~ "%AnchorPtr" $=
			(
				- $revert(b857) "2 constructors without trailing parameters"
					$dep_from "function %LiftToReference";
					// Now empty environment references would not be \
						implicitly introduced.
				/ "saved %EnvironmentReference" ~ "%AnchorPtr";
				/ $forced "constructors",
				+ "function %GetEnvironmentReference"
			)
			),
			(
			/ $forced "2nd parameter type" @ "function %PrepareCollapse"
				^ 'Environment&' ~ 'const AnchorPtr&' $dep_from
				"constructors %TermReference";
			/ $forced "supported tracing environment reference"
				@ "function %ResolveIdentifier"
				$= (/ $impl $dep_from "%Environment::NameResolution");
			/ "enabled %NPL_NPLA_CheckEnvironmentReferenceCount as %true"
				@ '!defined(NDEBUG)'
				$dep_all_from "NPLA1 tracing environment reference support"
				// Now term references are also traced to get correct weak \
					counts.
			),
			+ "function %IsUncollapsedTerm"
		),
		/ %NPLA1 $=
		(
			/ "function %ReduceOnce" $=
			(
				/ DLDI "simplified" !^ 'else',
				/ DLI "default internal %ReductionStatus value"
					-> (($dep_from "%ReductionStatus::Neutral"
					~ "%ReductionStatus::Partial") @ %NPLA)
					// The default value is chosen to be consistent with \
						%NPL::PassesCombiner now.
				* "%ReductionStatus::Retained wrongly set at the last \
					asynchronous pass call" $since b841
					$= (/ ^ (($dep_from "%ReductionStatus::Neutral"
						~ "%ReductionStatus::Retained") @ %NPLA)),
					// In the call of %CombineSequenceReductionResult, the \
						result would wrongly override %ReductionStatus::Clean \
						returned by previous passes and the setting of \
						%ReductionStatus::Clean (if any) returned by the last \
						pass would have no effect.
				/ "returned %ReductionStatus::Regular for regular values"
					~ "%ReductionStatus::Clean"
			),
			/ $lib "normal path return value" @ "function %EvaluateIdentifier"
				^ (($dep_from "%ReductionStatus::Neutral" ~ "%CheckNorm")
				@ %NPLA) $dep_from ("%CheckReducible" @ %NPLA),
				// The regularization would be redundant for normal cases.
			/ DLDI "simplified internal %NPL::Deref calls",
				// If the size is known (e.g. from the call of %RetainN), \
					there is no need to call %NPL::Deref in the same \
					procedure. Otherwise, it is better needed.
			(
			+ "function %ReduceAgainLifted";
			/ DLDI "simplified functions %(Forms::(If, Cond, Or, And), \
				ReduceOrdered)"
			),
			/ @ "namespace %Forms" $=
			(
				/ "simplified functions %(First, FirstVal, CheckEnvironment)"
					^ $dep_from ("%ReducedForwarded" @ %NPLA)
				/ $forced "supported tracing environment reference"
					@ "function %(FirstRef, FirstRefAt, \
					MakeEncapsulationType, Unwrap, WrapRef)" $dep_from
					("constructors %TermReference" @ %NPLA)
					$dep_to "NPLA1 tracing environment reference support"
					$= (/ $impl ^ $dep_from
						("%TermReference::GetEnvironmentReference" @ %NPLA)),
				(
				/ "parameter types" @ "function %MatchParameter"
					-> 'Environment&' ~ 'const AnchorPtr&';
				/ $forced $impl "supported tracing environment reference"
					@ "function %BindParameter"
					$dep_to "NPLA1 tracing environment reference support"
				),
				/ DLI "moved %TermReference term" @ "function %SetFirstRef"
			),
			/ $lib "returned %ReductionStatus::Regular for leaf term"
				~ "%ReductionStatus::Retained" @ "function %ReduceFirst"
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				/ $re_add(b868) DLI
					"optimized derivation" @ "applicative %accl",
				/ DLDI "native derivation" @ "applicative %idv"
					^ "%ReduceForLiftedResult" ~ "%LiftToReturn",
				/ DLI "native derivation" @ "applicative %id"
					^ 'YB_ATTR_LAMBDA(const)',
				/ DLI "native derivation" @ "applicative %forward" ^ (($dep_from
					"%ReduceForwarded" ~ "%LiftRValueToReturn") @ %NPLA),
					// This now has %ReductionStatus::Neutral if the value is \
						not lifted.
				/ DLDI "native derivation" @ "applicative %deshare"
				* $lib $impl "missing previous derivation of applicative \
					'first@' for internal use" @ "alternative derivation"
					@ "applicatives ('set-first!', 'set-first%!', \
					'set-first@!')" $since b859
					$= (/ "derivation order of 'first@'"),
					// This should be not observable in the user code because \
						the missing derivation is defined later again.
				* $lib $impl "missing previous derivation of applicatives \
					('rest&', 'rest%') for internal use"
					@ "alternative derivation" @ "operatives ('$and?', '$or?')"
					$since b860,
					// Ditto.
				/ "applicative %move" => 'move!',
				+ "applicative 'uncollapsed?'"
					^ $dep_from ("%IsUncollapsedTerm" @ %NPLA),
				+ "applicative %collapse",
				/ DLDI "simplified applicative 'assign%!'"
					// By sharing implementation with applicative %collapse.
			),
			/ @ "native derivations" @ "function %LoadModule_std_strings" $=
			(
				/ DLDI "simplified variable names"
					@ "applicative 'string<-'",
				+ DLDI 'ynothrow' @ "lambda-expression"
					@ "applicative 'string-contains-ci?'" 
			)
		),
		/ DLDI "renamed internal 'TermNode&' parameter names" $effective
			@ ("functions %Forms::(CheckEnvironment, 'Eval*', 'First*', \
			MatchParameter, MakeEncapsulationType, 'SetFirst*', 'SetRest*')"
			@ %NPLA1, "functions %(LoadGroundContext, LoadModule_std_strings)"
			@ %Dependency)
			// To make the use of term names more consistent. This is mainly \
				for preventing 'TermNode& tm' used as a resolved node from \
				term (while 'tm' is still remained in the parameters of public \
				APIs). Other results including terms named as 'x' and 'y', \
				resolved terms like 'nd_x' and 'nd_y', direct term operand for \
				binary operands like 'dst' and 'src', and the string \
				parameters prefixed with 'str'.
	),
	/ $dev $lib "poisoned unsafe functions not friendly to environment \
		stability or dangerous to environments except \
		'lock-current-environment'" @ "%SHBuild-YSLib-common.txt"
		@ %Tools.Scripts $dep_from ("applicative %move"
		@ "function %LoadGroundContext" %YFramework.NPL.Dependency)
),

b868
(
	/ DLDI "removed redundant captures" @ "lambda-expressions"
		@ ("constructor %SettingPanel" @ %ReaderSettingUI,
		"constructor %ShlExplorer" @ %ShlExplorer) @ %YReader,
		// To eliminate Clang++ warning: [-Wunused-lambda-capture].
	/ %YBase.YStandardEx $=
	(
		/ $re_add(b852) DLI "simplify constructor templates"
			^ "%exclude_self_params_t" ~ "%exclude_self_t"
			@ "class template %guard" @ %ScopeGuard,
		/ %Optional $=
		(
			+ DD "%YBase_replacement_extensions" @ '\ingroup command'
				@ "metafunction %optional_relop_t",
			+ DD "%YBase_replacement_features" @ '\ingroup command'
				@ "class %cpp2017::bad_optional_access",
			+ DD '\ingroup YBase_replacement_features'
				@ "Doxygen comment" @ "class template %cpp2017::optional",
			+ DD '\ingroup YBase_replacement_extensions'
				@ "Doxygen comment" @ "function template %ref_opt, class \
				template %optional_last_value"
			+ DD '\ingroup tags' @ "Doxygen comment" @ "%(nullopt_t, nullopt)",
			- $re_add(b864) DLDI "redundant '&&'"
				@ "'*_constructible' template arguments",
			/ DLDI "simplified" ^ "%nand_" ~ "%(not_, and_)"
		),
		* DD "missing escape for angle brackets" @ "Doxygen comment"
			@ "function templates %(to_lower, to_upper)" @ %CCtype $since b605
	),
	* $re_add(b851) DD "missing '!'" @ "end of '/*'" @ "multiline Doxygen \
		comment" @ %(YBase.(YStandardEx.Base),
		YFramework.YSLib.(Service.YDraw, Adaptor.New, UI.YStyle)) $since b203,
	/ DLDI "simplified all 'YB_ALLOCATOR YB_ATTR_nodiscard'"
		-> 'YB_ALLOCATOR' $effective @ %YFramework.YSLib.Adaptor.YNew,
	- $re_add(b863) DLDI "redundant '&&'"
		@ "'*_constructible' template arguments" $effective
		@ %(YBase.YStandardEx.ScopeGuard, YFramework.YSLib.Service.FileSystem),
	- $re_add(b863) DLDI "redundant '&&'" @ "%std::declval template arguments"
		$effective @ "exception specifier" @ "constructor template"
		@ "class template %unlock_delete" @ %YBase.YStandardEx.PseudoMutex,
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ $dev $lib "annotated unused argument" @ "static member \
				functions (%Logger::FetchDefaultSender" @ %Debug,
				!"platform %Win32" @ "function %SetBinaryIO" @ %FileIO)
				^ "%yunused",
				// To eliminate warning: [-Wunused-parameter] when %assert \
					is used and the %YAssertNonnull expression expands to \
					nothing.
		),
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					+ "functions %(When, Unless)",
					/ DLDI "simplified function %DefineLazy" ^ "%std::bind"
					/ DLDI "simplified thunked implementation"
						@ "function %DefineWithNoRecursion",
					/ DLDI "simplified function %DefineWithNoRecursion"
						!^ "%ContextState::Access",
					(
					/ "1st parameter type" @ "function %BindParameter"
						-> 'Environment&' ~ 'ContextNode&';
					/ $forced DLDI ("functions %(DefineLazy, \
						DefineWithNoRecursion, DefineWithRecursion)",
						"%operator()" @ "vau handlers")
					),
					/ DLDI "functions %(SetFirst, SetFirstRef, SetFirstRefAt)",
						// For consistent functor argument position with other \
							function implementations: when it is for a \
							reduction function, the 'TermNode&' parameter \
							always comes first.
					+ "functions %(SetWithNoRecursion, SetWithRecursion)",
				),
				/ DLDI "simplified functions %(ReduceCombine, ReduceFirst, \
					Forms::Apply)"
			),
			/ @ "function %LoadGroundContext" %Dependency $=
			(
				/ DLDI "parameter name" @ "derivations"
					@ "operatives ('$sequence', '$when', '$unless')"
					^ 'exprseq' ~ ('vexpr' or 'body'),
					// To be consistent with the current %Documentation::NPL.
				/ DLDI "derivation" @ "operative '$unless'" ^ '#inert' ~ 'not?',
				+ "native derivation" @ "operative '$set!' and enabled by \
					default" ^ $dep_from ("%SetWithNoRecursion" @ %NPLA1),
				+ "native derivation" @ "operative '$setrec!' and enabled by \
					default" ^ $dep_from ("%SetWithRecursion" @ %NPLA1),
				/ DLI "optimized derivation" @ "applicative %accr",
					// Direct recursion without auxiliary function is slightly \
						more efficient.
				/ DLDI "applicative %deshare" !^ "%LiftTermIndirection"
			),
			/ $revert_ex(b858) $lib $dev "workaround for x86_64-w64-linux G++"
				@ %Lexical $=
			(
				/ $impl "simplified" ^ "%YB_ATTR" ~ "#pragma directive",
					// There is only one function to modify, anyway.
				/ "disabled by specifying 'YB_IMPL_GNUCPP < 90100'",
					// This works again. But there is still no relevant bug \
						report found at https://gcc.gnu.org/bugzilla.
			),
			- $revert(b834) "function %LiftTermIndirection" @ %NPLA
				$dep_from ("applicative %deshare"
				@ "function %LoadGroundContext" @ %Dependency)
		),
		/ $re_add(b862) $dev "%std::function" @ ("alias %Handler" @ %UI.YStyle,
			"alias %CopyFileHandler" @ %Service.FileSystem) @ %YSLib
			-> "%function"
	)
),

b867
(
	/ %YBase.YStandardEx $=
	(
		/ %Meta $=
		(
			+ "unary type trait %is_unqualified_object",
			* "binary type trait %is_same_or_convertible" $since b850
		),
		+ "transformation traits %(increment_post_t, decrement_t, \
			decrement_post_t, subscript_t, equal_t, not_equal_t)" @ %TypeTraits,
		/ %Memory $=
		(
			/ "unary type trait %is_allocatable" ^ ($dep_from
				"%is_unqualified_object" ~ "%is_nonconst_object") @ %Meta;
				// LWG 2447.
			+ "unary type trait %is_allocator" ^ "%is_allocatable";
			(
			+ "binary type trait %is_allocator_for";
			+ "unary type trait %is_byte_allocator"
			),
			/ "enhanced allocator check" @ "%has_nested_allocator"
				^ "%is_allocator"
		),
		/ DLDI "simplified static assertion"
			@ ("class template %any_ops::allocator_value_handler",
			"allocator-extended constructors" @ "class %any") @ %Any
			^ $dep_from ("%is_byte_allocator" @ %Memory),
		/ DLDI "simplified static assertion"
			@ ("class template %list" @ %List, "class template %map" @ %Map)
			^ $dep_from ("%is_allocator_for" @ %Memory),
		/ %TypeOperation $=
		(
			/ "simplified binary type trait %has_subscription" >> %TypeTraits
				^ $dep_from ("%subscript_t" @ %TypeTraits)
			/ "simplified binary type trait %has_equality_operator"
				>> %TypeTraits ^ $dep_from ("%equal_t" @ %TypeTraits)
		),
		/ $foced "inclusion %TypeOperation" @ %Examiner -> "%TypeTraits"
			$dep_from ("%has_equality_operator" @ %TypeOperation),
		/ DLDI "simplified %list internal construction" @ %List
			// To make it more like %Tree.
		/ DLI "internal construction parameters" ^ "node allocator type"
			~ "node allocator reference type" @ %(List, Tree),
			// This is slightly more efficient.
		/ %MemoryResource $=
		(
			/ @ "class %resource_pool" $=
			(
				/ $revert_ex(b864) "supported move operations" $=
				(
					- $revert(b864) "private base %nonmovable";
					+ "move constructor",
					+ "move %operator="
				),
				/ DLI "chunks owner" ^ "%list" ~ "%map",
					// Ideally this should be a intrusive list like the \
						implementation in Microsoft VC++. Now just keep it \
						simple.
				* "upstream allocated memory leak" @ "chunk allocation failure"
					@ "replenish" @ "function %allocate"
					$orig (@ "%pool_resource::allocate" $since b843)
					// Intrusive lists would have no such problem, as the \
						allocation of node is non-throwing.
			),
			/ @ "class %pool_resource" $=
			(
				/ $revert_ex(b865) DLI "pools type" ^ "%std::vector" ~ "%list"
					$dep_from ("supported move operations" @ "%resource_pool"),
					//	Some more optimized memory resource client code relied \
						on the random accesses of the vector (with some \
						preallocation techniques) can make small objects like \
						%NPL::TermReference in %YFramework.NPL.NPLA allocation \
						more efficient, at least on x86-64 Linux.
				/ DLI "simplified function %do_deallocate" ^ "%yverify"
					~ "%yassume"
			)
		)
	),
	/ %YFramework $=
	(
		/ DLDI "adjusted position of %YB_ATTR_fallthrough" @ "function \
			template %Decode" @ "class template specializations \
			%(GUCSMapper<CharSet::UTF_16BE>, GUCSMapper<CharSet::UTF_16LE>)"
			@ %CHRLib.StaticMapping,
			// To eliminate Microsoft VC++ warning: C4468.
		/ %YCLib.Container $=
		(
			/ DLDI "simplified function template %to_std_string#3"
				^ ("%ystdex::enable_if_same_param_t"
				@ %YBase.YStandardEx.Meta) ~ "%ystdex::enable_if_same_t",
			/ "%list" ^ ("%ystdex::list" @ %List) ~ "%std::list"
				// See $2019-08 @ %Documentation::Workflow. It also makes %NPL \
					performance slightly better.
		),
		/ %YSLib.Core $=
		(
			/ %YObject $=
			(
				/ "class template %AllocatorHolder" ^ "byte allocator" $=
				(
					+ "1st template parameter for %value_type";
					+ $dev "static assertion" ^ $dep_from
						("%ystdex::is_allocatable" @ %YBase.YStandardEx.Memory),
					(
					/ "restricted allocator as byte allocator";
					+ $dev "static assertion" ^ $dep_from
						("%ystdex::is_byte_allocator"
						@ %YBase.YStandardEx.Memory),
					- DLDI "rebinding" @ "function %Create"
					)
				);
				/ $forced DLDI "internal allocator holder type"
					@ "class %ValueObject"
					// This makes less allocator holder class templates need \
						to be instantiated.
			),
			/ @ "function templates %(AsNode, MakeNode, StringifyToNode)"
				@ %ValueNode $=
				// Constructor parameter of allocators in %ValueNode is not \
					changed. See See $2019-09 @ %Documentation::Workflow.
			(
				/ "excludes convertible to %ValueNode::allocator"
					@ "overloads#1"
				/ "parameter 'ValueNode::allocator_type'"
					@ "function template overloads#2"
					-> 'const ValueNode::allocator_type&'
			)
		),
		/ %NPL $=
		(
			/ "parameter 'TermNode::allocator_type'"
				@ "function template %(AsTermNode#2, Analyze)" @ %SContext
				-> 'const TermNode::allocator_type&',
				// Constructor parameter of allocators in %TermNode is not \
					changed. See See $2019-09 @ %Documentation::Workflow.
			/ %NPLA $=
			(
				/ $dev "parameter 'Environment::allocator_type'" @ "function \
					template %AllocateEnvironment#1"
					-> 'const Environment::allocator_type&',
				/ @ "class %Environment" $=
				(
					/ $dev "kept private anchor reference count away"
						!@ 'NPL_NPLA_CheckEnvironmentReferenceCount',
						// To eliminate Clang++ warning: \
							[-Wunused-private-field]. The ABI compatibility \
							here is not kept now.
					/ "split forced and normal binding mutators" $=
					(
						// For performance.
						/ "function %Define"
							-> "functions %(Define, DefineChecked)",
						/ "function %Redefine"
							-> "functions %(Replace, ReplaceChecked)"
							// Rename to avoid confusion of the distinction \
								between redefinition and multiple definitions.
						/ "function %Remove"
							-> "functions %(Remove, RemoveChecked)"
					)
				),
				(
				- $revert(b788) "all function templates %(FetchValue, \
					FetchValuePtr; LookupName)";
				/ "ill-formed instantaitions of %(FetchValue, FetchValuePtr, \
					LookupName)" $since b852
				)
			),
			/ %NPLA1 $=
			(
				/ "function %Undefine" @ "namespace %Forms"
					-> "functions %(Undefine, UndefineChecked)"
					$= (/ $forced $impl ^ $dep_from
						("%Environment::(Remove, RemoveChecked)" @ %NPLA))
			),
			/ %Dependency $=
			(
				/ $forced DLDI "function %LoadModule_SHBuild" $dep_from
					("%Environment::Define" @ %NPLA)
					$= (/ $impl ^ $dep_from
						("%Environment::DefineChecked" @ %NPLA)),
				/ $forced DLI "function %LoadGroundContext" $dep_from
					("%Environment::Define" @ %NPLA)
					// In initialization of the ground environment, there \
						should be no such symbol.
					$= (/ "forced overriding of definition of '#ignore'"
						^ $dep_from ("%Environment::Define" @ %NPLA)),
				/ "function template %LoadModule"
					-> "function templates %(LoadModule, LoadModuleChecked)"
					$= (/ $forced $impl ^ $dep_from
						("%Environment::(Define, DefineChecked)" @ %NPLA))
			)
		)
	),
	/ %Tools $=
	(
		/ "%SHBuild-bootstrap.sh" @ %Scripts $=
		(
			/ $re_add(b843) $forced "updated %LIBS for \
				%YBase.YStandardEx.NodeBase" $dep_from
				%YFramework.YCLib.Container,
			/ DLDI "reordered files of %YBase.YStandardEx" @ "%LIBS"
				// As the module order in %Documentation::YBase.
		),
		/ $forced DLDI "initialization of environment for running NPL from \
			stream" @ %SHBuild.Main $=
		(
			/ $dep_from ("%Environment::Define" @ %NPLA)
				$= (/ $impl ^ $dep_from
					("%Environment::(Define, DefineChecked)" @ %NPLA))
			/ $dep_from ("%LoadModule" @ %Dependency)
				$= (/ $impl ^ $dep_from ("%LoadModuleChecked" @ %Dependency))
		)
	)
),

b866
(
	/ DLI "iterator verfication with %is_dereferenceable" ^
		("%YB_VerifyIterator" @ %CAssert) ~ "%(yassume, yconstraint)" $effective
		@ %YFramework.CHRLib.StaticMapping,
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			+ "function template %make_move_if_noexcept_iterator"
				@ %IteratorOperation,
			+ "function templates %(lower_bound_n; upper_bound_n)" @ %Algorithm,
			/ %IteratorTrait $=
			(
				* "metafunctions %(enable_for_iterator_t, \
					enable_for_input_iterator_t)" $since b865,
				+ "binary type trait %has_iterator_value_type"
			),
			* "missing supported the fix of LWG 1234" \
				!@ '__cpp_lib_string_view >= 201606L \
				|| __cplusplus >= 201606L' @ "class template %basic_string"
				@ %String $since b833
				// This is an ISO C++14 feature that should have been \
					supported because %ystdex::basic_string is a %cpp2017 \
					replacement, but previously not relied on by the client \
					code in YSLib (which relies on ISO C++11 \
					%std::basic_string).
				$= (/ ("constructor template with iterator parameters",
					"function templates %(append, assign, insert, replace) \
					with iterator parameters") ^ $dep_from
					("%enable_for_input_iterator" @ %IteratorTrait)),
			/ %NodeBase $=
			(
				* "missing moving node count for list header" $since
					b865 $dep_to "node count fix",
					// This would cause 'list::size()' not synchronized \
						properly.
				+ DLDI "%ynothrow" @ "internal lambda-expressions"
					// To avoid G++ warning: [-Wnoexcept].
			)
			/ %List $=
			(
				* "wrong %Tree dependency" @ "unused alias" @ "list node" $since
					b865,
				(
				+ $impl "internal list base class template" $dep_from
					"node count fix";
				+ "class template %list" ^ ($impl %NodeBase, $dep_from
					("%make_move_if_noexcept_iterator" @ %IteratorOperation,
					"%enable_for_input_iterator" @ %IteratorTrait))
				)
			),
			/ @ "class %pool_resource" @ %MemoryResource $=
			(
				(
				// See $2019-09 @ %Documentation::Workflow.
				/ DLI "optimized pool finding"
					^ $dep_from ("%ystdex::lower_bound_n" @ %Algorithm
					~ "%std::lower_bound");
				/ $revert_ex(b864) "pools type"
					^ $dep_from ("%list" @ %List) ~ "%std::list"
				),
				- $revert(b849) "workaround for pre-C++11 allocator members"
					@ "unneeded workaround for incomplete C++11 implementation"
					$dep_from "Android toolchain update"
			),
			* "excepton specification" @ "move %operator="
				@ "class template %mapped_set" @ %Set $since b865,
				$= (- "explicitly specified exception specification")
				// To avoid Clang++ 8 error: exception specification of \
					explicitly defaulted move assignment operator does not \
					match the calculated one. The change is caused by the \
					exception specifier in %Tree. See also \
					https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91541 and LWG \
					3267.
			/ "tree class template" @ %Tree $=
			(
				/ DLDI "reordered several tree member functions"
				* "allocator-extended move constructor of tree" $since b830
					$dep_to "tree constructor fix"
					// As https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85845.
				/ DLI "simplified constructor with a single allocator \
					parameter" ^ "default constructed comparison object"
					~ "comparison object copy",
					// As GCC r260806.
				/ DLI "simplified destruction and header setting for move \
					assignment",
				/ DLDI "simplified internal insertion"
			),
			/ @ "class template %map" @ %Map $=
			(
				+ DD "'yimpl' for strengthened exception specifications",
				/ DLDI "reordered declarations of %swap",
				+ DD $lib 'yimpl' @ "all '= default'" @ "special member functions",
					// Some implicitly defaulted exception specifications are also \
						strengthened.
				/ DLDI "simplified function %get_allocator and constructors with \
					allocator parameter" !^ "explicit cast to %allocate_type",
					// Different to libstdc++, there is no support for extension \
						of different allocators between %allocator_type and \
						allocator type rebound to %value_type.
				/ DLI "simplified tree constructor with a single allocator \
					parameter" ^ "default constructed comparison object"
					~ "comparison object copy",
					// As GCC r260806.
				* "improper exception specficiation of allocator-extended move \
					constructor" $since b830 $dep_from "tree constructor fix",
					// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91541 and \
						LWG 3267.
				* "missing support of LWG 2005" @ "function templates %insert"
					$since b830
					^ $dep_from ("%has_iterator_value_type" @ %IteratorTrait),
					// Since ISO C++17 features are documented, this is a bug. As \
						GCC r264059 and GCC r264060. See \
						https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78595 and \
						https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87194.
				+ "(function, function template) %contains"
					// WG21 P0458R2.
			),
			* "missing support for non-constant alignment" !@ 'YB_IMPL_GNUCPP'
				@ "pseudo keyword %yaligned" @ %Placement $since b864
		),
		/ "excluded ARM EHABI" @ 'YB_IMPL_CLANGPP && defined(__arm__) \
			&& !defined(__USING_SJLJ_EXCEPTIONS__) \
			&& !defined(__ARM_DWARF_EH__)' @ "macro %YB_PURE" @ %YDefinition
			// See https://bugs.llvm.org/show_bug.cgi?id=43275.
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			* "missing compatibility check" @ "platform %Android"
				@ %NativeAPI $since b651 $=
				// Despite the definitions, the declarations are already \
					broken because the exception specifications mismatch.
			(
				/ "disabled %futimens" @ '__ANDROID_API__ >= 19',
				/ "disabled %utimensat" @ '__ANDROID_API__ >= 12',
				/ "disabled %linkat" @ '__ANDROID_API__ >= 21',
				+ 'yimpl' @ 'ynothrow' @ "%(futimes, utimesnat, linkat)"
			),
			/ %FileIO $=
			(
				/ "file stream extensions" $=
				(
					+ "support for libc++" @ '_LIBCXX_VERSION' $=
					(
						+ "#error directive to exclude configuration having \
							%_LIBCPP_HAS_NO_GLOBAL_FILESYSTEM_NAMESPACE",
						+ "%yconstexpr extended modes objects %(ios_nocreate, ios\
							_noreplace)",
						+ "%basic_filebuf %open support"
					),
					* "missing exclusion of extended modes" @ '__GLIBCXX__'
						@ "membber function template %open with path parameter"
						@ "class template %basic_filebuf" $since b616
				),
				* DD "wrong Doxygen command '\nsince' used" ~ '\since'
					@ "function %IsNodeShared" @ %FileIO $since b638
			)
		),
		/ %NPL $=
		(
			* "invalid 'yconstfn'" @ "function %IsDelimiter" @ %Lexical $since
				b335,
				// The call to 'std::isgraph' does not support to get a \
					constant-expression.
				$= (/ 'yconstfn' -> 'inline')
				// Also to eliminate Clang++ error from warning: \
					[-Winvalid-constexpr].
			* $re_add(b865) "relying on SFINAE-friendly call wrapper result"
				@ ("applicative 'lock-environment'" @ "function \
				%LoadGroundContext", "applicative 'string-empty?'"
				@ "function %LoadModule_std_strings") $since b791
				// Results from %std::mem_fn are not guaranteed well-formed in \
					SFINAE contexts and actually rejected by libc++. See YSLib \
					issue 40, WG21 P0826R0. Note %std::bind is OK with \
					libstdc++ and libc++.
		),
		* "invalid 'yconstexpr'" @ "object %Text::Encodings"
			@ !'__cplusplus > 201103L' @ %Helper.ShellHelper $since b307
	),
	* $re_add(b862) "wrong 'nonnull(1)' attribute used" @ ("member function \
		%DualScreenReader::ShowErrror" @ %YReader.DSReader $since b744,
		%'Helper_(Android)'.AndroidScreen $since b592)
		$dep_to "nonnull fix"
		$= (/ 'YB_NONNULL(1)' -> 'YB_NONNULL(2)'),
		// To eliminate Clang++ error.
	/ $revert_ex(b727) "updated toolchain version with Android NDK r20"
		~ "standalone toolchain CrystaX NDK 10.3.2" $dep_from
		(%(YBase.YStandard.Placement, YFramework.(NPL.Lexical,
		Helper.ShellHelper)), '_LIBCPP_VERSION' @ %YFramework.YCLib.FileIO,
		"nonnull fix") $dep_to "NDK update",
		// NDK r20 only supports Clang++ and libc++.
	(
	/ $build "update toolchain" @ "platform %Android" $=
	(
		- '-Wnoexcept' @ "makefile" @ "project %YBase",
			// To eliminate Clang++ warning: [-Wunknown-warning-option].
		/ "makefile %Toolchain.Android.mk" @ %Tools.Scripts $=
		(
			+ '-fPIC' @ "variable %C_CXXFLAGS_COMMON",
				// This is required by API level 21.
			/ $forced "updated target platform" $dep_from "NDK update"
				$dep_to "Android target update",
				// The minimal supported API level in NDK r20 is 16.
				$= (/ "value of %ANDROID_PLATFORM" -> '21' ~ '9'
					$dep_from (%YFramework.YCLib.NativeAPI,
					"%C_CXXFLAGS_COMMON"));
					// The minimal support version now is Android 5.0.
			/ "overriden default value for %C_CXXFLAGS_IMPL_WARNING as \
				'-Wdouble-promotion -Wno-assume'",
			/ "overriden default value for %CXXFLAGS_IMPL_WARNING as \
				'-Wno-defaulted-function-deleted -Wno-ignored-attributes \
				-Wno-mismatched-tags -Wno-noexcept-type \
				-Wzero-as-null-pointer-constant'",
			+ "overriden default value for %CXXFLAGS_IMPL_OPT as '-s -flto'",
			+ "overriden default value for %LDFLAGS_IMPL_OPT as '-s -flto'";
			/ $forced ("changed %CC and %CXX values defaulted to ('clang', \
				'clang++')" $dep_from ("makefile" @ "project %YBase",
				%YBase.YStandardEx.YDefinition)) $dep_from "NDK update"
				$dep_to "Android toolchain update",
				// NDK r20 has no GCC toolchain for ARM.
			/ "updated value" @ "variable %ANDROID_SDKVER" -> '29.0.2'
				~ '25.0.2'
		),
		/ @ "project %YSTest" $=
		(
			/ $forced "updated 'uses-sdk' property with attribute \
				'android:minSdkVersion' value '21'" ~ '9'
				@ "%AndroidManifest.xml" $dep_from "Android target update",
			/ @ "%Makefile" $=
			(
				/ "set default value to empty" @ "variable %LIBCRYSTAX_STATIC",
				/ @ "destination '$(OUTPUTSO)'" $=
				(
					/ "commented out operations for stub library \
						'libcrystax.a'",
					/ $forced "value" @ "variable %SOARCH" -> 'armeabi-v7a'
						~ 'armeabi' $dep_from "NDK update"
						// NDK has removed support of ARMv5(armeabi), see https://android.googlesource.com/platform/ndk/+/master/docs/Roadmap.md#ndk-r17.
				),
				/ $forced @ "linker command line" $dep_from
					"Android toolchain update" $=
				(
					+ $build '-Wl,--exclude-libs,libgcc.a \
						-Wl,--exclude-libs,libunwind.a',
						// This is an enhancement for future use of the \
							library being liked for others. See \
							https://github.com/android-ndk/ndk/issues/823 and \
							https://developer.android.com/ndk/guides/cpp-support#libc.
					// See $2019-09 @ %Documentation::Workflow.
					+ '-libstdc++-static'
				),
				- '-Wl,--dynamic-list-data -Wl,--dynamic-list-cpp-new \
					-Wl,--dynamic-list-cpp-typeinfo' @ "variable %LDFLAGS"
					// These are supported by 'ld.bfd' and 'ld.gold' but not \
						'ld.lld'. Although lld is not the default linker in \
						NDK r21 and it currently might work improperly \
						(waiting with 0% CPU usage), it would be the default \
						in future as per the roadmap of NDK.
			)
		)
	);
	* $re_add(b849) $comp "build failure" @ "platform %Android" $since b850
		$dep_to "unneeded workaround for incomplete C++11 implementation"
	)
),

b865
(
	/ DD "allowed the version (in '\since') of documented entities kept \
		unchanged only with equivalent exception specifciation modifications"
		@ %Documentation.ProjectRules,
	/ %YBase.YStandardEx $=
	(
		/ %Meta $=
		(
			(
			+ "binary type trait %is_same_param";
			+ "metafunction %enable_if_same_param_t"
			),
			/ $dev $lib @ "metafunction %exclude_self_t" $=
			(
				- $doc "'\pre' command" @ "Doxygen comment",
				/ $impl "simplified" ^ $dep_from "%is_same_param"
			),
			+ "type trait operation %is_unqualified",
			/ "type trait operation %is_decayed" $=
			(
				/ DD "Doxygen group" -> "%type_trait_operations"
					~ "%unary_type_traits",
				/ "decayed 2nd parameter" ~ "decayed 1st parameter"
					// To be consistent with %is_unqualified and sane to \
						unchecked (possibly not decayed) 2nd argument. \
						This does not change the result when the 2nd argument \
						is the default argument or an already decayed type. \
						Currently no known use of a non-decayed type as the \
						2nd argument, so nothing is to be broken.
			),
			+ "unary type trait %is_throwing_move_copyable"
		),
		/ $dev %TypeOperation $=
		(
			* $re_add(b863) $doc "missing escaping tag" @ "Doxygen comments"
				$since b660,
				// To eliminate Doxygen warning: Unsupported xml/html tag found.
			/ $lib @ "metafunction %exclude_self_params_t" $=
			(
				- $doc "'\pre' command" @ "Doxygen comment",
				/ $impl "simplified" ^ $dep_from ("%is_same_param" @ %Meta)
			)
		),
		/ %Memory $=
		(
			+ $dev $lib 'YB_ATTR_nodiscard'
				@ "function template %alloc_on_copy#2",
			/ DLI 'inline' @ "function templates %(alloc_on_copy, \
				alloc_on_move, alloc_on_swap") -> 'yconstfn_relaxed',
			+ 'ynothrow' @ "function templates %(alloc_on_move, alloc_on_move, \
				alloc_on_swap) with 2 parameters",
			* "incorrect condition '__cplusplus >= 201703L'"
				@ "condition for using %std::allocate_shared"
				$since b849
				$= (/ '__cplusplus >= 201703L' -> '__cplusplus > 201703L'),
				// The use of %allocator_traits::construct is not added until \
					WG21 P0674R1 is adopted in 2017-07. See also ISO C++17 \
					(FDIS WG21 N4659) [util.smartptr.shared.create]/1.
			/ @ "function template %create_with_allocator" $=
			(
				* "mismatched trailing return type" $since b849,
				/ $lib "all %decay_t" -> "%remove_cvref_t"
			)
		),
		/ %Tree $=
		(
			/ DLDI "tree class template" $=
			(
				+ "several 'ynothrow'",
				+ $re_add(b864) 'YB_ATTR_nodiscard YB_PURE'
					@ "iterator observers, count, boundary search and \
					verification functions",
				+ 'YB_ATTR_nodiscard' @ "member functions to create nodes, to \
					extract node handles, to get the node allocator or the \
					comparison object",
				/ 'YB_ATTR_nodiscard' @ "raw node creator"
					-> 'YB_ALLOCATOR YB_ATTR_returns_nonnull',
				/ "comparison functions" ^ "%(cbegin, cend)"
					~ "%(begin, end)",
				/ "reordered several private tree members",
				(
				+ "node alias type";
				+ "static assertions to ensure trivially default constructible \
					and trivially distructible";
				/ "simplified node construction and destroy"
					!^ "placement new and explicit destructor call";
				/ "simplified node construction"
					^ "%(allocator_guard, allocator_guard_delete)"
				)
			),
			* "allocator not properly propagated when on %is_always_equal"
				$since b830,
				// See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91531.
			* "missing inclusion <algorithm>" $since b863,
			* "possible name clash between node allocator members and list \
				header" $since b830
				// This is not same to libstdc++ which uses reserved names.
		),
		* "missing inheriting base members" @ "class template specialization \
			%expand_proxy for function without parameters" @ %Functional
			$since b810,
		(
		+ %NodeBase;
		/ $impl "non-templated node classes" @ %List -> %NodeBase
		+ "internal node free functions"
		),
		+ "transformation trait %increment_t" @ %TypeTraits,
		/ %IteratorTrait $=
		(
			/ DLDI "simplified metafunction %enable_for_iterator_t" $=
			(
				!^ "%std::pair",
				^ $dep_from ("%increment_t" @ %TypeTraits)
			),
			+ "metafunction %enable_for_input_iterator"
				^ $dep_from ("%increment_t" @ %TypeTraits),
			+ "binary type trait %has_iterator_category",
			* "failed to detect contagories same but not convertible to \
				specified tag" @ "type trait %have_same_iterator_category"
				$since b627
				$= (/ $impl ^ "%(and_, is_convertible)" ~ "%are_same")
		),
		* $comp "failed meeting complexity requirements when parameter has tag \
			not same but convertible to %std::random_access_iterator_tag"
			@ "function template %equal"
			@ '!(__cpp_lib_robust_nonmodifying_seq_ops >= 201304L)' @ %Algorithm
			$since b627 $dep_from
			("%have_same_iterator_category" @ %IteratorTrait),
		/ %List
		(
			* DLI "missing friend class template of const iterator for \
				internal iterator" $since b864,
			* DLI "internal const iterator type members" $since b864
		)
	),
	/ %YFramework.NPL $=
	(
		/ $dev $lib "annotated unused term argument" @ ("function \
			%AssertBranch" @ %SContext, "function template \
			%AllocateEnvironment#3" @ %NPLA) ^ "%yunused",
			// To eliminate warning: [-Wunused-parameter] when %assert is \
				used and the %YAssert expression expands to nothing.
		/ DLI "annotated unused immediate variables"
			@ "functions %(ReduceCombined, Forms::Apply)" @ %NPLA1,
			// Ditto.
		/ %NPLA $=
		(
			* DD "wrong '\pre' command" @ "Doxygen comment"
				@ "member function %ContextNode::Push#2" @ $since b812,
			* "missing qualified 'NPL::'" @ "call of %AllocateEnvironment"
				@ "function template %AllocateEnvironment#2" @ %NPLA $since
				b847
				// ADL is not intended here.
		),
		/ "applicative 'get-current-repl'" @ "function \
			%LoadModules_std_environments" @ %Dependency $=
		(
			/ DLDI "simplified" ^ "lambda-expression" ~ "%ystdex::bind1";
				// This also gets rid of the requirement on SFINAE-friendly \
					%std::bind result.
			* $comp "relying on SFINAE-friendly call wrapper result"
				// Results from %std::bind are not guaranteed well-formed in \
					SFINAE contexts and actually rejected by Microsoft VC++. \
					Some other instances are remained blocking. See YSLib \
					issue 40, WG21 P0826R0. Note currently this is OK with \
					libstdc++ and libc++.
		),
		* "undefined behavior caused by invalid access lifting flag after \
			moved vau object when TCO is enabled" @ "%operator()"
			@ "vau handlers" @ %NPLA1 $since b861
	),
	/ $build "Microsoft VC++ projects" $=
	(
		/ %YFramework $=
		(
			/ "updated project files" @ "platform %Android" $=
			(
				(
				- "%default_font.bin" @ ".vcxproj file";
				* $comp "redundant data file not included in the filter" $since
					b492,
				),
				* "missing files" @ "the .filter file" $since b502
			),
			* "missing retargeting" @ "platform %DS" $since b862 $=
				$= (/ $re_add(b862) $dev $lib "updated \
					'WindowsTargetPlatformVersion' value '10.0'"
					~ '10.0.17134.0')
		),
		/ ".vcxproj file" @ "platform %Android" @ %YSTest $=
		(
			* "'ProjectGuid' and 'RootNamespace' properties clashed with \
				platform %DS YSTest project" $since b492,
			* "failed loading project file" $since b862
				$= (* "invalid value '../../Build.props'"
					@ "tag 'Improject Project'" $since b862),
			* "redundant data files not included in the filter" $since b492
		),
		/ @ ".vcxproj file" @ %SHBuild $=
		(
			- DLDI "redundant empty 'ItemGroup' tag",
			* "missing UTF-8 BOM" $since b847
		),
		/ DLDI "removed redundant slashes" @ "output file paths"
			@ "all 6 projects" @ "platform %Win32" $=
			(/ "value '$(IntDir)/%(RelativeDir)/'"
				-> '$(IntDir)%(RelativeDir)' @ "tag 'ObjectFileName'"),
		+ "tag 'FunctionLevelLinking' with value 'true'"
			@ "configuration %release" @ "platform %Win32"
			@ "project %(YBase, YFramework)"
			// To be consisten to configuration %Release in client projects \
				like %SHBuild. This would add '/Gy' in the compiler options. \
				Note the '/ZI' in the compilier options of %debug \
				configuration of these projects already implies '/Gy'.
	)
),

b864
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ "macro %YB_ASSUME" $=
			(
				/ $lib "specifically supported %__builtin_assume" ^ "condition \
					'__has_builtin(__builtin_assume) \
					|| YB_IMPL_CLANGPP >= 35100'",
				/ $impl ^ 'void()' ~ 'void(0)'
					// To be consistent to %YStandardEx.CAssert. This header has \
						already no support ISO C anyway.
			),
			+ "macro %YB_ATTR_QUAL",
			+ $dev $re_add(b862) "preceding and following '__' for attribute \
				names conditons" @ "argument of %__has_attribute" $effective
				@ "macros %(YB_ATTR_fallthrough, YB_ATTR_maybe_unused, \
				YB_ATTR_nodiscard, YB_ATTR_nonnull, YB_ATTR_returns_nonnull)",
			/ $lib ^ "%__builtin_offsetof when available"
				@ "pseudo keyword %yoffsetof",
			/ $lib "specifically supported Clang++" @ "macro %YB_FLATTEN"
				^ "condition 'YB_IMPL_CLANGPP >= 30402'"
		),
		/ %YStandardEx $=
		(
			/ %Any
			(
				/ @ "namespace %any_ops" $=
				(
					(
					+ "enumerator %get_allocator_ptr" @ "enum %base_op";
					+ "handling of %get_allocator_ptr"
						@ "static member function %manage" @ "class \
						templates %(value_handler, allocator_value_handler)"
					),
					+ $dev $lib "static assertion to ensure the owned pointer \
						is stored locally"
						@ "class template %allocator_value_handler"
				),
				+ "metafunctions %(exclude_tag_t, exclude_tagged_params_t)",
				/ @ "class %any" $=
				(
					- DLDI "redandant 'template'"
						@ "constructors with allocator parameter",
					/ DLDI "simplified %any" ^ $dep_from "%exclude_tag_t",
					(
					* "missing exclusion of tags at 1st parameter"
						@ "function template %any::emplace#1" $since b677
						$= (/ $impl ^ $dep_from "%exclude_tagged_params_t");
					+ "3 function template overloads %emplace with allocator \
						parameter" $dep_to "any allocator emplacement"
					)
				),
				/ DLI "ruled out assertion condition of type sanity seperatedly"
					@ "all 2 function templates %(unchecked_any_cast, \
					unsafe_any_cast)" ^ "%YAssert"
					// This is not efficient to be in %yconstrained in general.
			),
			/ %CAssert $=
			(
				// See $2019-08 @ %Documentation::Workflow.
				/ "%YAssert" @ !'YB_Use_YAssert' ^ "%assert"
					~ "%yassume",
				+ "pseudo keyword %yverify"
			),
			/ DLI ("function templates %polymorphic_downcast#(1, 5)"
				@ %Cast, "all 2 function templates %erase_n" @ %Container,
				"member function %extract#1" @ "class template %map" @ %Map,
				"function template %vsfmt" @ %String, $impl
				"allocator equality checks" @ %Tree, "member function \
				%oversized_map::deallocate" @ %MemoryResource) ^ "%YAssert"
				~ "%yassume",
			(
			+ "macro %YB_VerifyIterator" @ %DerefOperation
				^ $dep_from ("%yverify" @ %CAssert);
			/ DLI "iterator verfication with %is_dereferenceable"
				@ "function %share_sequence" @ "class template \
				%transposed_iterator" @ %Iterator ^ "%yverify" ~ "%yassume",
			/ DLI "iterator verfication with %is_dereferenceable" ^ $dep_from
				"%YB_VerifyIterator" ~ "%(yassume, yconstraint)" $effective
				@ %(Algorithm, Iterator, IteratorOperation,
				Container, CStandardInteger, Placement)
			),
			/ %AddressOf $=
			(
				+ "unary type trait %has_no_overloaded_addressof",
				/ @ "function templates %addressof" $=
				(
					+ $dev $lib 'YB_PURE' @ "all overloads not deleted",
					* "ill-formed for incomplete type used in the parameter"
						@ !'__cpp_lib_addressof_constexpr >= 201606L \
						|| __has_builtin(__builtin_addressof)' $since b660
						$dep_to "addressof fix",
					+ 'YB_IMPL_GNUCPP >= 70100 || YB_IMPL_CLANGPP >= 30300'
						@ "contition to use %__builtin_addressof"
				)
			),
			* $comp "ill-formed instantiations of iterator types with \
				incomplete %value_type" @ ($impl %Tree; %Map) $dep_from 
				"addressof fix" $since b830 $dep_to
				"map iterator to incomplete type fix",
				// Another change of %__builtin_addressof also works for GCC \
					>= 7.1.0.
			/ %Placement $=
			(
				+ "pseudo keyword %yaligned"
					^ $dep_from ("%yverify" @ %CAssert),
				* "wrong exception specification" @ "default constructor \
					%tagged_value" $since b718
					$= (/ $impl !^ "%std::is_nothrow_default_constructible"),
				/ DLDI "simplified exception specification"
					@ "function template %constructor"
					@ "class template %default_init_allocator"
					!^ "%is_nothrow_default_constructible"
			),
			/ %Tree $=
			(
				/ DLDI "minor code format" @ %Tree,
				+ DLDI "13 'inline'" @ "function templates"
				/ DLI "split 4 function templates for emplacement"
					-> "functions and function templates" ^ "%YF_FLATTEN"
				+ DLI 'YF_FLATTEN' @ "5 functions for erasure",
				- DLDI "redundant spaces before ';'",
				- DLDI "%self_type" @ "iterator class templates",
				/ DLI "hid %(iterator, link_type) as private aliases",
				/ DLDI "renamed internal allocator traits alias for nodes",
					// To be consistent to other headers.
				* "ill-formed assertions due to wrong data member name of node \
					handles when reinsertion functions are instantiated" $since
					b830,
				+ $re_add(b863) DLI 'YB_ATTR_nodiscard YB_PURE'
					@ "internal access of nodes, iterator equality comparison \
					and iterator dereference",
				(
				* "wrong exception specification" @ "tree %swap, tree data \
					construction, tree move %operator= and and tree \
					comparator constructors" $since b830
					$= (/ $impl ^ "%ynoexcept" ~ "%ynoexcept_spec");
				/ DLDI "simplified use of %(ynoexcept, \
					is_nothrow_default_constructible)" -> "%ynoexcept_spec"
				)
			),
			/ %Map $=
			(
				- $re_add(b861) DLDI "redundant '&&'"
					@ "'*_constructible' template arguments",
				+ DLDI "23 'inline'" @ "function templates",
				/ DLI "all 'noexcept' noexcept-specifier" -> 'ynothrow'
					$effective @ "functions %(cbegin, cend, crbegin, crend)"
					@ "class template %map",
				/ @ "class template %map" $=
				(
					/ DLDI ^ "%is_same" ~ "%std::is_same"
					+ DD "'\note' commands to indicate \
						implementation-defined types"
						@ "aliases %(size_type, difference_type, \
						iterator_type, const_iterator_type)",
					/ DLI "simplified internal allocator traits"
						!^ "rebinding with %rebind_alloc_t"
						// This is needed for a traditional-libstdc++ \
							extension which is not relied on. See comments of \
							GCC r271866.
					* "wrong exception specification" @ "member function %swap"
						$since b848
						$= (/ $impl ^ "%ynoexcept" ~ "%ynoexcept_spec"),
					* "wrong exception specification" @ "friend function %swap"
						$since b848
						$= (/ $impl !^ "%noexcept"),
					* $comp "wrong implicit exception specification"
						@ "move %operator=" $since b830 $dep_from
						("tree %operator=" @ %Tree)
				)
			),
			/ %MemoryResource $=
			(
				/ DLI "simplified member function %memory_resource::allocate"
					^ $dep_from ("%yaligned" @ %Placement)
					~ "%(yassume, is_aligned_ptr)",
				/ DLI "class template %pool_resource" ^ "%std::list"
					~ "%vector",
				/ @ "class %resource_pool" $=
				(
					+ "function %clear",
					/ DLDI "hid default block next capacity value from header",
					(
					/ "move (constructor, %operator=)"
						-> "private bases %(noncopyable, nonmovable)"
						$dep_From "%pool_resource";
					* $comp "termination on pool with wrong allocator moved \
						due to %ynothrow" $since b863
						// Internally the %ynothrow exception-specifier was \
							designated since b843. This worked since the \
							implementation guaranteed no incompatible \
							allocator could be reached.
					),
					/ DLI "optimization" $=
					(
						/ "constructor" ^ $dep_from ("%yverify" @ %CAssert)
							~ "%yconstraint",
						/ "optimized function %allocate"
							(!^ "%(ystdex::logical_not, retry_on_cond)",
							^ $dep_from "%yverify" @ %CAssert ~ "%yconstraint"),
						/ "simplified move constructor" !^ "%ystdex::exchange",
						+ 'YB_PURE' @ "internal intrusive stack observers",
						/ "simplified meta block data access"
							^ $dep_from ("%yaligned" @ %Placement)
							~ "%(yassume, is_aligned_ptr)",
						(
						/ "simplified block size passing in allocating block \
							at the end of the chunk",
						/ "pools type" ^ "%std::list" ~ "%std::vector";
						/ "stashed and empty pointer" -> "iterators" $dep_from
							"map iterator to incomplete type fix"
							$dep_from "%pool_resource";
							// The invalidation requirements on move \
								operations of pools count, unless all pools \
								are guaranteed fixed. This is now done by \
								using %std::list instead of %std::vector in \
								%pool_resource.
						/ "functions %(allocate, deallocate) avoided \
							unnecessary key access"
						),
						/ "chunks emplacement" @ "function %allocate"
							^ "%std::(piecewise_construct, forward_as_tuple)",
							// Without newly add instances of %YB_FLATTEN in \
								emplacement function templates in %Tree, this \
								is more inefficient, at least with G++ 9.1 on \
								x86-64 Linux.
					)
				),
				+ DLI "pure attribute" @ "lambda-expression"
					@ "internal pool finding" @ "member functions \
					%pool_resource::(do_allocate, do_deallocate)" ^ $dep_from
					("%YB_ATTR_LAMBDA_QUAL" @ %YDefinition),
				/ DLI "simplified function %do_allocate"
					@ !'__cpp_aligned_new >= 201606L' @ "internal resource"
					@ "function %new_delete_resource" ^ $dep_from ("%yaligned"
					@ %Placement) ~ "%(yconstraint, is_aligned_ptr)"
			),
			/ "class template %basic_string" @ %String $=
			(
				+ DD "'\see' command for LWG 2455" @ "Doxygen comment"
					@ "default constructor",
				/ DLDI 'this->' -> 'base::' $effective
					@ ("operator %sv_type", "replace#9"),
					// To be consistent.
				* "missing supported fix of LWG 2788" \
					!@ '__cpp_lib_string_view >= 201606L \
					|| __cplusplus >= 201606L'$since b833
					// This is an ISO C++17 feature that should have been \
						supported.
					$= (/ "function templates %(append, assign, insert, \
						replace) with iterator parameters"
						^ "%base::get_allocator")
			),
			+ %List,
				// Currently only stubs and some internal implementations.
			/ %Iterator $=
			(
				/ @ "class template %indirect_input_iterator" $=
				(
					/ "private data member" ^ "brace-init-list '{}'";
					/ "default constructor" $=
					(
						/ $impl "defaulted";
						/ $comp "conditional implicit 'constexpr' and \
							'noexcept'"
					)
				)
				/ @ "class template %transposed_iterator" $=
				(
					/ "all private data members"
						^ "brace-or-equal-initializer '{}' or '= 0'";
					/ $comp "conditional implicit 'constexpr' and 'noexcept'"
						@ "defaulted default constructor"
				)
			)
		)
	),
	* "ill-formed without '-std=c++2a'" @ %YDE.ImageBrowser.ImageControl $since
		b863,
		// The change required WG21 P0409R2.
	/ %YFramework $=
	(
		/ %YSLib.Core.YObject $=
		(
			* "missing exclusion of tags at 1st parameter"
				@ ("function template %emplace#1" @ "class %ValueObject"
				$since b863, "function template %CreateInPlace#1"
				@ "class template %HolderOperations")
				$= (/ $impl ^ $dep_from ("%ystdex::exclude_tagged_params_t"
					@ %YBase.YStandardEx.Any)),
			(
			+ "2nd parameter 'const any&'" @ "abstrat method %Create"
				@ "interface %IValueHolder";
			+ $forced "2nd parameter" @ "function %Create" @ "class templates \
				%(ValueHolder, AllocatorHolder, PointerHolder, RefHolder)",
			/ $forced DLDI "member function %ValueObject::Create"
			),
			/ @ "class template %AllocatorHolder" $=
			(
				/ "avoided stored allocator"
					$dep_from ("2nd parameter" @ "%AllocatorHolder::Create")
				(
					/ "allocation for %(Copy, Move)" @ "function %Create"
						^ "2nd parameter" ~ "stored allocator" $dep_from
						("%any::ops::get_allocator_ptr"
						@ %YBase.YStandardEx.Any);
					- "function %get_allocator";
					- "stored allocator"
				),
				/ "simplified" ^ "%ValueHolder" $=
				(
					+ $lib 'using Creation = IValueHolder::Creation;';
					+ "public base class %ValueHolder<value_type>";
					- "overriders (Equals, OwnsCount, get, type)"
				),
				- "allocator parameter" @ "constructor"
			),
			/ @ "class %ValueObject" $=
			(
				/ $forced "simplified" @ ("constructor#5", "emplace#2")
					$dep_from ("constructor" @ "%AllocatorHolder"),
				* "emplace#2 missing using of underlying allocator"
					$dep_from "any allocator emplacement",
				+ DLD "inline" @ ("all constructor templates",
					"all function templates %emplace")
			)
		)
	),
	/ %Tools $=
	(
		/ %Scripts $=
		(
			+ '-Wl,-allow-multiple-definition' @ "default value"
				@ "variable %LDFLAGS_IMPL_OPT" @ ("%SHBuild-common-options.sh",
				"%SHBuild-YSLib-common.txt") $dep_to "script LTO workaround",
			+ DLDI "note to null device" @ "%SHBuild-YSLib-common.txt"
				// Similar to %SHBuild-common-options.sh, but the NPLA1 script \
					has already handle it more smoothly than the shell script.
		)
		+ "'-flto -Wl,-allow-multiple-definition' after '-s' @ "linker option"
			@ "non-debug configurations" @ %ProjectGenerator.Main
	),
	* $re_ex(b825) $comp $build "propable build failure with LTO"
		@ "%release configurations" @ "platform %Win32" $since b353
		$dep_from ("script LTO workaround", %Tools.ProjectGenerator.Main)
),

b863
(
	/ %YBase.YStandardEx $=
	(
		/ "improved incomplete element type support" @ "class template %nptr"
			@ %Pointer $=
		(
			/ "member functions %operator*" -> "function templates";
			/ $dev $impl "removed static assertions for equality operations \
				only for operator*"
		),
		/ DLI "simplified member functions %(seekoff, seekpos)"
			@ "class template %basic_membuf" @ %StreamBuffer,
		/ %CStandardIO $=
		(
			/ $dev $lib 'YB_PURE' @ "function %openmode_conv#1"
				-> 'YB_STATELESS',
				// This should be safe. For some similar but more aggressive \
					uses, see https://lwn.net/Articles/285332/.
			/ "return value" @ "function %setnbuf" %CStandardIO
				^ "%bool to indicate success"
				~ "zero value of %int to indicate success"
		),
		* "allocator not SFINAE-friendly" @ "constructor %any#15" @ %Any $since
			b851,
		/ %Functor $=
		(
			/ ("inclusion <algorithm>", "feature-test macro \
				%__cpp_lib_robust_nonmodifying_seq_ops") @ >> %Algorithm
				// This could have been done after removal of \
					%ystdex::deref_str_comp since b660.
			/ $re_add(b853) DLDI "simplified" ^ "%nor_" ~ "%(not_, or_)"
				$effective @ "%is_equal::operator()",
			+ DD '\ingroup YBase_replacement_extensions' @ "Doxygen comment"
				@ "functors %(addrof, indirect, ref_eq, first_of, second_of)",
			- $re_add(b861) DLDI "redundant '&&'"
				@ "%std::declval template arguments",
			* $re_add(b861) $doc "missing escaping tag" @ "Doxygen comments"
				$since b660
				// To eliminate Doxygen warning: Unsupported xml/html tag found.
		),
		/ DD %Algorithm $=
		(
			+ '\ingroup YBase_replacement_features' @ "Doxygen comment"
				@ "all 2 function tmeplates %(max, min, clamp)",
			+ '\ingroup YBase_replacement_extensions' @ "Doxygen comment"
				@ "function tmeplate %clamp_range"
		),
		/ %Memory $=
		(
			+ ('using std::uses_allocator_construction_args;',
				'using std::make_obj_using_allocator;',
				'using std::uninitialized_construct_using_allocator;')
				@ '__cplusplus > 201703L \
				&& (!defined(__GLIBCXX__) || __GLIBCXX__ > 20190731)',
				// '__GLIBCXX__' can be '20190301' (since svn 269311) without \
					the bug of %std::make_obj_using_allocator. See \
					https://github.com/cplusplus/draft/issues/3111.
			/ "restricted %(uses_allocator_construction_args, \
				make_obj_using_allocator, \
				uninitialized_construct_using_allocator) only when %std \
				counterparts are not available"
		),
		/ %MemoryResource $=
		(
			/ DLDI "cleanup unused functions" @ 'YB_Has_memory_resource != 1',
				// To eliminate compiler warnings in such cases (e.g. in ISO \
					C++17 mode).
			+ "function %adjust_pool_options",
			+ "class %resource_pool" $dep_from %Pointer,
			+ "class %oversized_map",
			/ @ "class %pool_resource" $=
			(
				(
				/ DLI ^ $dep_from "%resource_pool" ~ "internal pool" $=
				(
					// This makes a little inefficient using the \
						%pool_resource, but the exposed pool interface can be \
						used to built more efficient memory resources. A \
						verbatim implementation of %pool_resource in the \
						executable object can even be more efficient due to \
						the aggressive optimization (at least compared with \
						dynamic %YBase shared object in x86-64 Linux).
					/ $design "simplified pool allocation",
					(
					/ "allocated internal chunks with upstream resource";
					/ $design "simplified pool upstream resource storage"
						!^ "%pool_resource dependency"
					),
					/ $design "simplified" ^ "%equal_to" ~ "%std::equal_to",
					(
					/ $design "moved maximum blocks per chunk initialization \
						out of pool allocation";
					/ "supported optional extra data" @ "pool objects"
						// This avoids mandatory of the geometric sequence (of \
							base 2) of pool sizes in client code without \
							significant performance degeneration.
					)
				);
				* $comp DLI "relying on WG21 N4510" $mismatch $since b843
					// The %std::vector now does not use incomplete pool type.
				),
				/ "simplified constructor %pool_resource#2 with new \
					implementation-defined values of %pool_options default \
					limits" ^ $dep_from "%adjust_pool_options"
					// The Microsoft ABI uses consistent size for \
						%::ptrdiff_t across x86 and x64 configurations. This \
						is hardly a portable option in general.
					$= (/ $comp "%(max_blocks_per_chunk, \
						largest_required_pool_block)" ^ ('sizeof(size_t)', \
						'CHAR_BIT') ~ "%PTRDIFF_MAX"),
				/ DLDI "simplified oversized data handling" $=
					// This improves performance slightly.
				(
					/ "simplified allocation and deallocation",
					(
					/ "simplified releasing";
					/ $comp "destruction order between oversized data and \
						pooled data"
						// This is always unspecified.
					)
				)
			),
			+ "WG21 P0339R6 support" @ "class template %polymorphic_allocator"
				$=
			(
				+ 'using std::pmr::polymorphic_allocator'
					@ 'YB_Has_memory_resource && __cplusplus > 201703L \
					&& (!defined(__GLIBCXX__) || __GLIBCXX__ > 20190731)',
					// '__GLIBCXX__' can be '20190304' without the bug of \
						%std::make_obj_using_allocator. See %Memory above.
				/ "replacement implementation" $=
				(
					/ "restricted only when %std::pmr::polymorphic_allocator \
						is not available",
					+ "default template argument %byte",
					+ "function templates %(allocate_bytes, deallocate_bytes, \
						allocate_object, deallocate_object, new_object, \
						delete_object"
				)
			)
		),
		* "missing 'const' for unused parameter" @ "lambda-expression for \
			%std::accumulate" @ "primary class template %default_last_value"
			@ %Functional $since b675
			// This is qualified a bug because of unexpectation at first. \
				This would actually break the code since WG21 P0616R0 is \
				accepted. See also LWG 2055.
	),
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ @ "class template %GHEvent" @ %YEvent $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ "functions %(cbegin, \
					cend, crbegin, crend, begin, end, rbegin, rend, count)",
				+ $dev $lib 'YB_PURE' @ "function %size",
				+ $re_add(b851) "function %get_allocator"
			),
			/ %YObject $=
			(
				/ "class %ValueObject" $=
				(
					(
					+ "constructor with allocator parameter and parameter pack \
						as constructor#5";
					/ DLDI "simplified constructor#3" ^ "constructor#5"
					),
					+ "function template %emplace with allocator parameter"
				),
				/ @ "function templates %EmplaceCallResult" $=
				(
					- "redundant template parameter pack";
					+ "overloads to support allocator" ^ $dep_from
						"%ValueObject::emplace"
				)
			)
		),
		/ %NPL $=
		(
			/ DLI ^ "allocator on string %ValueObject construction in the \
				result" @ "function %TransformToSyntaxNode" @ %NPLA,
			/ %NPLA1 $=
			(
				/ DLI "supported allocators" @ "function \
					%RegisterSequenceContextTransformer"
					^ $dep_from ("%get_allocator" @ "%GEvent"
					@ %YSLib.Core.YEvent),
				/ "namespace %Forms" $=
				(
					/ @ "function %MatchParameter" $=
					(
						/ DLI "simplified by reducing internal parameter \
							passing",
						/ DLI "left away an assertion to parameter"
							!@ 'NDEBUG';
						* $re_add(b862) "potentional undefined behavior caused \
							by native call overflow for large input" $since b335
							$= (/ $impl ^ "trampoline"
								~ "direct recursive calls")
					),
					+ "function %StringToSymbol with 'string&&' parameter",
						// Note allocators are not needed in most cases for \
							%TokenValue.
					/ DLI "allocated %ContextHandler with allocator"
						@ "function %MakeEncapsulationType"
						$dep_from %YBase.YStandardEx.Any
						// By 'std::allocator_arg, a' after each 'tag'. For \
							performance, %ValueObject for handlers are not \
							allocated with allocators. This is get done by \
							'std::allocator_arg, a' before each 'tag', which \
							relies on the new constructor %ValueObject. \
							Internal type placeholder are also not allocated \
							with allocators for the same reason.
				)
			),
			/ DLI "supported moving the prvalue argument" @ "applicative \
				'symbol->string'" @ "function %LoadModule_std_strings"
				@ %Dependency ^ $dep_from ("%StringToSymbol" @ %NPLA1)
		)
	),
	+ "initial ISO C++20 support" $=
		// Tested with Clang++ 8.0.1 with '-std=c++2a'.
	(
		/ $comp "well-formedness" $dep_from %YBase.YStandardEx.Functional,
		/ "all 'u8R'string literal prefix" -> 'R' $effective
			@ %(YFramework.(NPL.Dependency, Helper.Initialization),
			YReader.(ShlExplorer, ReaderSettingUI, About)),
			// The %char8_t support is not ready. As per WG21 P1423R1, the \
				compatibility issues are expected to exist. In fact, \
				currently no UTF-8 is relied on in %YSLib projects code, since \
				all of these string literals uses only the basic execution \
				character set. (Note the character encoding (UTF-8) is also \
				enforced by the project rules.) So, simple removal of 'u8' is \
				appropriate.
		/ DLI "avoided deprecated lambda capture '=' with implicit 'this'"
			$effective @ %(YBase.(YStandardEx.Concurrency, YTest.Test),
			YFramework.('YCLib_(DS)'.DSIO, YCLib.(FileIO, Host, MemoryMapping)),
			YReader.ShlReader, Tools.SHBuild.Main,
			YDE.ImageBrowser.ImageControl)
			// To eliminate Clang++ warning: [-Wdeprecated-this-capture]. \
				It can not be disabled by '-Wno-deprecated-this-capture'. This \
				seems a bug.
	),
	/ %YReader.About $=
	(
		/ "updated copyright year" @ "label text" @ "constructor %AboutPanel",
		/ $re_ex(b850) DLDI "simplified without 'ystdex::' for %bad_any_cast"
	)
),

b862
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %String $=
			(
				- $revert(b846) 'YB_ATTR_nodiscard'
					@ "function template %filter_prefix";
				* $dev "unused result warning"
					@ "function template %cond_prefix" $since b846,
				/ $revert_ex(b861) DLDI "function templates %(vsfmt, sfmt)"
					^ ('const', 'value_type*') ~ 'const_pointer'
					// To eliminate Clang++ warning on '__nonnull__' attribute.
			),
			/ $resolve(#35) "functon template %destruct_in" @ %Placement
				$= (+ $workaround(#35) @ 'YB_IMPL_MSCPP < 1921')
		),
		/ %YDefinition $=
		(
			+ "optional condition '__has_attribute(nonnull)' to enable"
				@ "macro %YB_NONNULL" $dep_from ("%vsfmt" @ %YStandardEx.String,
				"wrong use of YB_NONNULL on member functions",
				"%ThrowInvalidSyntaxError" @ %YFramework.NPL.NPLA1),
			/ @ "macro %YB_ATTR_gnu_printf" $=
			(
				+ "optional condition '__has_cpp_attribute(format)' to enable \
					secondary substitution",
				/ DLDI "removed space character after '__format__' attribute \
					in the replaced token sequences"
					// For consistency.
			),
			+ "preceding and following '__' for attribute names in replaced \
				token sequences enclosed in %YB_ATTR except for Microsoft VC++ \
				extensions" $effective @ "macros %(YB_ATTR_fallthrough, \
				YB_ATTR_maybe_unused, YB_ATTR_nodiscard, \
				YB_ATTR_returns_nonnull)"
				// For consistency. Note Clang also supports this as GCC. See \
					https://clang.llvm.org/docs/LanguageExtensions.html. \
					Currently only attribute names used in %YDefinition rely \
					on the feature. 
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ "function templates %to_std_string" @ %Container $=
			(
				+ "assertion" @ "overload with parameter of %basic_string_view \
					instance" ^ "%YAssertNonnull",
				+ "overloads for possible same source to destination type of \
					the string argument"
			),
			/ DLDI "simplified constructors %Exception#(3, 6)" @ %YCLib.Host
				^ "delegating constructors",
		),
		/ $re_add(b861) $dev "all %std::function" -> "%function"
			@ %(YSLib.Core.YDevice, Helper.HostRenderer),
		/ %Helper.HostRenderer $=
		(
			/ DLDI ("'std::forward<_tParams&&>' within variadic parameter packs"
				-> 'std::forward<_tParams>') @ "class %WindowThread",
			/ $re_add(b851) DLD "simplified without 'ystdex::'" ^ "%any"
		),
		+ "workaround for GCC 'nonnull' attribute" @ %YSLib.Service.File
			$dep_to "workaround for GCC PR 91127",
			// This is for the case where nonnull attribute with argument on \
				the constructor of class with a virtual base is used. See \
				https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91127.
		/ %NPL $=
		(
			/ %Lexical $=
			(
				(
				+ "alias %SmallString";
				/ "all %string except those in %list<string>" @ ("classes \
					%(LexicalAnalyzer, UnescapeContext)", "functions \
					%(HandleBackslashPrefix, IgnorePrefix, NPLUnescape)")
					-> "%SmallString",
				/ @ "function Decompose" $=
				(
				/ "parameter type" -> 'const SmallString&' ~ "%string_view";
				- "assertion"
				),
				(
				/ "all %list<string>" @ ("class LexicalAnalyzer",
					"functions %(Decompose, Tokenize)")
					-> $dep_from ("%TokenList" @ %SContext),
				+ "overload of function %Tokenize with parameter of \
					'SmallString&&' type"
				)
				)
			),
			/ %Dependency $=
			(
				/ $forced DLDI "function %DecomposeMakefileDepList"
					$dep_from ("%LexicalAnalyzer::ParseQuoted" @ %Lexical)
			),
			/ %SContext $=
			(
				/ "alias %TokenList" >> %SContext ^ ("%SmallString" @ %SContext)
					~ "%string",
				/ @ "class %Session" $=
				(
					/ $forced "return type" @ "function %GetBuffer"
						$dep_from ("%LexicalAnalyzer::GetBuffer" @ %Lexical),
					/ "alias %CharParser" ^ "reference type" ~ "%function",
					/ "all 4 constructor template" ^ "parameter of template \
						parameter type defaulted to %CharParser"
						~ "non-template %CharParser parameter"
				),
				/ @ "function %Reduce" $=
				(
					/ $forced DLDI "constructed %string explicitly"
						$dep_from "%TokenList",
					/ "enable allocator support on constructed strings"
				),
				/ $dev $impl "all 2 function templates %AsTermNode"
					^ "direct-initialization" ~ "implicit list-initialization"
					// For better diagnostics.
				* "potentional undefined behavior caused by native call \
					overflow for large input"
					@ "functions %(Reduce, Validate)" $since b335
					$= (/ $impl !^ "direct recursive calls")
			),
		),
		* $design $impl "over-specified exception specification"
			@ "%::devoptab_t operations for %fsync" @ %YCLib_(DS).DSIO
			$since b702
			$= (/ $revert_ex(b702) 'ynothrow' -> 'ynothrowv'),
		/ %NPLA1 $=
		(
			* "wrong 'YB_NONNULL(1)' position"
				@ "function %ThrowInvalidSyntaxError#1" $since b859,
				// To eliminate Clang++ error.
			/ DLI "supported allocator" @ "mem-initializer" @ "data member \
				%(Preprocess, ListTermPreprocess)" @ "class %REPLContext"
				^ "%Allocator"
		)
	),
	/ %Tools $=
	(
		* "missing project %RevisionPatcher" @ "list of development tools to \
			be built with stage 2 SHBuild" @ "%SHBuild-YSLib-build.txt"
			@ %Scripts $since b838,
			// This was overlooked. The original script %install-sysroot.sh \
				in %Tools was OK.
		* "ill-formed use of string types" @ %RevisionPatcher.Main $since b861
	),
	* $re_add(b861) "wrong 'nonnull(1)' attribute used" $effective @ (("member \
		function %Screen::Update" @ %YSLib.Core.YDevice, (("member functions \
		%ScreenBuffer::(Premultiply, UpdateFrom, UpdateFromBounds)",
		"constructor %WindowClass#1" @ "platform %Win32") @ %HostedGUI,
		("member function %Logger::DoLogRaw" @ %Debug) @ %YCLib, $impl
		"internal member function %DSScreen::Update" @ %Helper_(DS).DSScreen,
		("member functions %Window::(UpdateFrom, UpdateFromBounds)"
		@ %HostWindow, "member function %HostRenderer::Update" @ %HostRenderer)
		@ %Helper) @ %YFramework $since b592), "constructors \
		%(SharedInputMappedFileStream, UniqueLockedOutputFileStream)"
		@ %YFramework.YSLib.Service.File $since b724 $dep_from
		"workaround for GCC PR 91127", "lambda-expression"
		@ "main function" @ %SHBuild.Main $since b657) $dep_to
		"wrong use of YB_NONNULL on member functions"
		$= (/ 'YB_NONNULL(1)' -> "'YB_NONNULL(2)' or 'YB_NONNULL(3)'"),
	/ $build "Microsoft VC++ projects" $=
	(
		/ $resolve(#36, #37) "retargeted toolchain to Microsoft VC++ 2019 \
			(vc142)" ~ "Microsoft VC++2017 (vc141)",
			// There are new issues not yet reported to be resolved, though.
		/ $re_ex(b832) $dev $lib "updated 'WindowsTargetPlatformVersion' value \
			'10.0'" ~ '10.0.17134.0'
			// The value '10.0' is "newest version" indicated by the update \
				GUI in Microsoft VS 2019.
	)
),

b861
(
	/ %YBase.YStandardEx $=
	(
		/ %MemoryResource $=
		(
			+ $dev $lib 'YB_ATTR_returns_nonnull' @ "member function %resource"
				@ "class template polymorphic_allocator",
			* $re_add(b857) DD "missing escaping tag" @ "Doxygen comments"
				$since b842
				// To eliminate Doxygen warning: Unsupported xml/html tag found.
		),
		* "cv-qualifier" @ "internal deduced return types for %pair instances"
			@ "function template %uses_allocator_construction_args" @ %Memory
			$since b850,
		/ %StringView $=
		(
			/ @ "class template %basic_string_view" $=
			(
				+ DD '\ingroup YBase_replacement_features' @ "Doxygen comment"
				* "missing 'ynothrowv'" @ "constructor#3" $since b640
			),
			+ DD '\ingroup YBase_replacement_extensions' @ "Doxygen comment"
				@ "alias template %string_view_t"
		),
		/ %String $=
		(
			/ "function templates %(vsfmt, sfmt)" $=
			(
				/ "template parameter" !^ "character type",
				/ "%sfmt" ^ "%ystdex::vsfmt" ~ "ADL %vsfmt"
			),
			+ "function template %make_string_view" $dep_from
				("constructor %basic_string_view#3" @ %StringView)
		),
		* "missing traits template argument" @ "class template specialization \
			%path for %basic_string instances" @ %Path $since b836
			// The allocator argument is actually treated as the traits and \
				the actual allocator is the default one in %basic_string.
	),
	/ %YFramework $=
	(
		+ "allocator support" @ %CHRLib.CharacterProcessing $=
		(
			+ "transcoding function overloads",
			+ "%(MakeUCS2LE, MakeUCS4LE, MakeMBCS) overloads"
		),
		/ %YCLib $=
		(
			/ DLDI @ !"platform %Win32" $=
			(
				- $revert(b632) "redundant internal function"
					// To eliminate Clang++ warning: [-Wunused-function].
				/ "function %SetBinaryIO" ^ "%YAssertNonnull" ~ "%Nonnull"
					// To eliminate Clang++ warning: [-Wunused-variable].
				/ "avoided template default argument for %CHRLib::(MakeMBCS, \
					MakeUCS2LE) calls" @ %FileIO $dep_to "avoiding relying on \
					the platform string equivalence with std::string"
			),
			/ DLDI "avoided template default argument for %CHRLib::MakeUCS2LE \
				call" @ "member function %FAT::EntryData::FillNewName"
				@ %FileSystem $dep_to "avoiding relying on the platform string \
				equivalence with std::string",
			/ %Host $=
			(
				/ DLDI "constructors %Exceptions" ^ $dep_from ("%to_std_string"
					@ %YSLib.Adaptor.YAdaptor) $dep_to "avoiding relying on \
					the platform string equivalence with std::string",
				+ 2 "constructors %Exception with 'const std::string&' \
					parameter",
				- $re_add(b852) DLDI "redundant '&&'"
					@ "'*_constructible' template arguments"
			),
			/ %Debug $=
			(
				/ "return type" @ "all function and function templates \
					%ComposeMessageWithSignature" @ %Debug -> "%std::string"
					~ "%string" $dep_from %YCLib_(Win32).MinGW32 $dep_to
					"avoiding relying on the platform string equivalence with \
					std::string",
					// The interface for message is mainly used for \
						exceptions. Thus, it should better not relying on the \
						equivalence between %string and %std::string.
				/ DLDI ("macro %YF_TraceRaw" ^ 'ystdex::sfmt<platform::string>',
					"function %LogWithSource" ^ 'sfmt<string>') ~ 'sfmt'
					$dep_from ("%ysdex::sfmt" @ %YBase.YStandardEx.String)
					$dep_to "avoiding relying on the platform string \
					equivalence with standard string",
				* "invalid null message argument on catching '...'"
					@ "member function %Logger::DoLogException" $since b547
			),
			/ @ "namespace %platform" @ %Container $=
			(
				/ @ "inline namespace %strings" $=
				(
					+ "function template %to_std_string"
					+ 'using ystdex::make_string_view;' ^ $dep_from
						("%ystdex::make_string_view"
						@ %YBase.YStandardEx.String),
					+ "class template speailization %std::hash for \
						%basic_string with an allcator of \
						ystdex::polymorphic_allocator instance" $dep_to
						"extended string hash",
					(
					/ $dev "loosed static assertion for string types";
						// Now %string is allowed not being able to initialize \
							a %std::string.
					* $comp $dev "redundant word" @ "static assertion message \
						for %string" $since b833,
					/ "changed default allocator argument" @ "%basic_string"
						^ "%pmr::polymorphic_allocator" ~ "%std::allocator"
						($dep_all_from "avoiding relying on the platform \
						string equivalence with std::string",
						%(YSLib.Core.YString, %YBase.YStandard.(Memory, Path)),
						$dep_from "extended string hash")
						// The fixes in %YBase.YStandard are needed, otherwise \
							the change would break %YSLib.Service.ContentType \
							(for %Memory) or %Tools.ProjectGenerator.Main (for \
							%Path).
					)
				),
				+ "inline namespace %ios" $=
				(
				(
				+ "alias templates %(basic_stringbuf; stringbuf_from)";
				+ "aliases %(stringbuf, wstringbuf)"
				),
				(
				+ "alias templates %(basic_istringstream; istringstream_from)";
				+ "aliases %(istringstream, wistringstream)"
				),
				(
				+ "alias templates %(basic_ostringstream; ostringstream_from)";
				+ "aliases %(ostringstream, wostringstream)"
				),
				(
				+ "alias templates %(basic_stringstream; stringstream_from)";
				+ "aliases %(stringstream, wstringstream)"
				)
				)
			),
			- $re_add(b850) DLDI "redundant '&&'" @ "%std::declval template \
				arguments" @ "macro %YCL_DeclCheck_t" @ %YCommon
		),
		* "wrong 'nonnull(1)' attribute" @ "lambda-expressions"
			@ (($impl "member function %Logger::DoLogException" @ %Debug $since
			b654, "macros %(YCL_WrapCall_CAPI, YCL_TraceWrapCall_CAPI)"
			@ %YCommon $orig (@ %FileIO $since b714), !'YCL_Win32'
			@ $impl "constructor %DirectorySession" @ %FileSystem $since b662)
			@ %YCLib, "macros %(YCL_WrapCall_Win32, YCL_TraceWrapCall_Win32)"
			@ %YCLib_(Win32).MinGW32 $since b651, $impl "function %Mount"
			@ %YCLib_(DS).DSIO $since b611),
			// To eliminate Clang++ error in %YB_ATTR_LAMBDA attributes \
				since b860.
		/ %YCLib_(Win32).MinGW32 @ "class %Win32Exception" $dep_to "avoiding \
			relying on the platform string equivalence with std::string" $=
		(
			/ @ "constructors" @ %YCLib_(Win32).MinGW32 $=
			(
				+ "2 overloads with 'const char*' and 'const std::string&' \
					parameter respectively";
				/ "moved default arugument of 'string_view' parameter to \
					'const char*'"
			),
			/ DLDI "static function %FormatMessage" ^ $dep_from
				("%to_std_string" @ %YSLib.Adaptor.YAdaptor)
		),
		* "missing replace lambda attributes %YB_NONNULL with %YB_ATTR_LAMBDA"
			@ "function %Mount" @ %YCLib_(DS).DSIO $since b680,
			// There are 2 entries in the %::devoptab_t data are missed. \
				However, other attributes are still mostly wrong, see above.
		/ %YSLib $=
		(
			/ %Adaptor.YAdaptor
			(
				+ ('using platform::make_string_view;',
					'using platform::to_std_string;') $dep_from
					("%(make_string_view, to_std_string") @ %YCLib.Container),
				+ 'using namespace platform::ios;' $dep_from
					("namespace %platform::ios" @ %YCLib.Container)
			),
			/ %Core $=
			(
				/ "return type" @ "function and function templates %to_string"
					@ %YGDIBase -> "%std::string" ~ "%string" $dep_to
					"avoiding relying on the platform string equivalence with \
					std::string",
				/ %YException $=
				(
					/ $re_add(b852) $dev "all %std::function" -> "%function",
					/ "constructor %LoggedEvent#2" ^ $dep_from ("%to_std_string"
						@ %YSLib.Adaptor.YAdaptor) $dep_to "avoiding relying \
						on the platform string equivalence with std::string"
				),
				/ %YString $=
				(
					+ "4 constructor templates %String with \
						'const allocator_type&' parameter" ^ $dep_from
						("%MakeUCS2LE" @ %CHRLib.CharacterProcessing),
					/ "preserved allocator" @ "function %GetMBCS"
						^ $dep_from
						("%MakeMBCS" @ %CHRLib.CharacterProcessing)
				)
			),
			/ DLDI %Service $dep_to "avoiding relying on the platform string \
				equivalence with std::string" $=
			(
				/ "avoided template default argument for %MakeMBCS call"
					@ "function %EnsureDirectory" @ %FileSystem
				/ "exception string arguments" @ %File
					^ "%(c_str(), std::string)" ~ "%string"
			),
			/ DLDI %UI.Loader $dep_to "avoiding relying on the platform string \
				equivalence with std::string" $=
			(
				/ "avoided string stream relying on allocator"
					@ "function %ParseRect" ^ $dep_from ("%istringstream"
					@ %YFramework.YSLib.Adaptor.YAdaptor)
					~ "%std::istringstream",
				/ "%std::stoul call argument" @ "member function \
					%WidgetLoader::TransformUILayout" ^ $dep_from
					("to_std_string" @ %YFramework.YSLib.Adaptor.YAdaptor)
			)
		),
		/ DLDI "function %LoadComponents" @ %Helper.Initialization
			^ $dep_from ("%to_std_string" @ %YSLib.Adaptor.YAdaptor)
			$dep_to "avoiding relying on the platform string equivalence with \
			std::string",
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ 'namespace pmr = YSLib::pmr;';
				+ "consturctor %LexicalAnalyzer with memory resource parameter"
			),
			+ "3 consturctors %Session with memory resource parameter"
				@ %SContext $dep_from ("%LexicalAnalyzer" @ %Lexical),
			/ %NPLA $=
			(
				/ "return type" @ "functions %(ResolveIdentifier; \
					PrepareCollapse)" -> "%TermReference"
					~ 'pair<TermReference, bool>',
				/ DLI "functions %(ReduceForLiftedResult, ReduceToList, \
					ReduceToListValue)" -> "inline function",
				- $revert(b752) ("function %LiftDelayed"; "type %DelayedTerm")
					$dep_from ("%EvaluateDelayed" @ %NPLA1),
				/ DLDI "function %DecodeNodeIndex" ^ ("%YSLib::make_string_view"
					@ %YSLib.Adaptor.YAdaptor) $dep_to "avoiding relying on \
					the platform string equivalence with std::string"
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified vau handlers data members",
				/ "TCO implementation" $=
				(
					/ "improved collection without keeping saved temporary \
						function prvalues" @ "%operator()" @ "vau handlers",
						// See $2019-06 @ %Documentation::Workflow.
					/ DLI "avoid specialized inactive frame detection"
						// See $2019-06 @ %Documentation::Workflow.
				),
				* "ill-formed call" @ !'NPL_Impl_NPLA1_Enable_TCO'
					@ "%operator()" @ "vau handlers" $since b860,
				/ DLDI "simplified result value and status setting"
					@ "functions %Forms::(Cond, If)",
				/ @ "function %EvaluateIdentifier" $=
				(
					/ $forced DLDI "simplified"
						$dep_from ("%ResolveIdentifier" @ %NPLA),
					(
					- "%EvaluateDelayed call" $dep_to "dropped support of \
						builtin delayed term evaluation";
						// For performance. The delayed evaluation can be \
							derived by the promises API instead.
					/ DLDI "simplified" ^ "%CheckNorm"
					)
				),
				- "all 2 functions %EvaluateDelayed" $dep_from "dropped \
					support of builtin delayed term evaluation",
				/ DLI "allcated unit with allocator"
					@ ("functions %Forms::(EvalString, EvalStringRef)",
					"member functions %Perform" @ "class %REPLContext")
					$dep_from ("%Session" @ %SContext)
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					* "PTC support" @ ("operatives with name prefix '$let",
						("applicative %accl"; $comp "applicative \
						'map-reverse'"), "applicatives %(accr; foldr1; map1)")
						$since b829
						$= (- "redundant %forward call"),
					+ "native derivation" @ "applicative 'not?' and enabled by \
						default" ^ $dep_from ("%Cond" @ %NPLA1),
					/ $forced DLDI "simplified applicative 'resolve-identifier'"
						$dep_from ("%ResolveIdentifier" @ %NPLA)
				),
				/ @ "function %LoadModule_std_promises" $=
				(
					/ $comp "PTC support of $lazy operations" $dep_from
						('$let' @ "%LoadGroundContext") $since b856,
						// Now it works as the last example for promises \
							(namely, the "stream-filter" example) in [RnRK].
					/ DLI "optimized 'expr' with binding mark '&'"
						@ "operatives ('$lazy', '$lazy/e')",
						// To be consistent with other functions. This also \
							does not need to call %move.
					/ @ "applicative %force" $=
					(
						/ DLI "simplified" ^ "less %forward calls",
						* "missing %forward call for the call when setting the \
							redirected promise" $since b856,
							// The bug would cause invalid access on \
								duplicated %force calls when the lazily \
								evaluated expression has a prvalue promise \
								result (e.g. the result from a %memoize call).
						* "inconsistent results for already forced promises"
							$since b856 ^ "%forward" ~ "%idv",
						/ DLDI "inlined internal promise handling call"
							$dep_from ("%operator()" @ "vau handlers" @ %NPLA1)
							// This relies on the fact that prvalues does not \
								eliminates the PTC gurarntee after the \
								improvement.
					),
					* "missing %forward call for the bound value"
						@ "applicative %memoize" $since b856,
				)
			),
			/ DLDI "simplified" %(NPLA, NPLA1) ^ $dep_from ("%pmr" @ %Lexical)
				~ "%YSLib::pmr",
			/ DLDI ("function %TermToString" @ %NPLA, "%operator()"
				@ "vau handler" @ %NPLA1) ^ 'sfmt<string>' ~ 'sfmt'
				$dep_from ("%ysdex::sfmt" @ %YBase.YStandardEx.String)
				$dep_to "avoiding relying on the platform string \
				equivalence with std::string"
		)
	),
	/ %Tools.SHBuild.Main $=
	(
		(
		/ DLDI "all %sfmt calls prefixed with 'ystdex::'",
		/ DLDI "avoided string stream relying on allocator"
			^ $dep_from ("%istringstream" @ %YFramework.YSLib.Adaptor.YAdaptor)
			~ "%std::istringstream",
		/ DLDI "%ston call argument" ^ $dep_from ("to_std_string"
			@ %YFramework.YSLib.Adaptor.YAdaptor);
		/ DLI "optimized string printing and exception message construction"
			$dep_to "avoiding relying on the platform string equivalence \
			with std::string"
		),
		/ "minor exception message changed for unsupported input commands",
		* "stored option descriptions invalidly" $since b547
	),
	/ DLDI %YReader $=
	(
		/ ($forced "constructor %ShlExplorer" @ %ShlExplorer,
			$dep_from %YFramework.YSLib.Core.YGDIBase,
			"member function %ShlReader::SaveBookmarks")
			$= (/ $impl ^ $dep_from
				("%make_string_view" @ %YAdaptor.Adaptor)),
		/ ("constructor %BookmarkPanel" @ %BookmarkUI, "constructor \
			%ReaderSetting" @ %ReaderSetting) ^ $dep_from ("%to_std_string"
			@ %YSLib.Adaptor.YAdaptor) $dep_to "avoiding relying on the \
			platform string equivalence with std::string",
		/ $dev $impl "avoided potential ambiguity between %ystdex::string and \
			%YSLib::string" $dep_to "avoiding relying on the platform string \
			equivalence with std::string"
			$= (- 'using namespace ystdex;'),
		/ "member function %ShlReader::LoadBookmarks" @ %ShlReader
			^ "%std::string" ~ "%string" $dep_to "avoiding relying on the \
			platform string equivalence with std::string"
	)
),

b860
(
	(
	+ "macro %YB_ATTR_LAMBDA" %YBase.YDefinition;
		// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89640.
	+ $lib $impl "workaround for x86_64-w64-linux G++ 9.1 of attributes on \
		lambda-expressions" ^ "%YB_ATTR_LAMBDA" ~ "%(YB_ATTR, YB_PURE, \
		YB_NONNULL)" $effective @ ("explicit class specification#3 \
		%function_traits" @ %YBase.YStandardEx.Function,
		(("function %LoadComponents" @ %Initialization
		"constructor %Environment" @ %Environment) @ %Helper,
		("function %LoadGroundContext" @ %Dependency,
		"function %(ReduceCombined, Forms::(WrapOnce, WrapOnceRef, \
		MakeEncapsulationType))" @ %NPLA1) @ %NPL,
		("mebmer function %Logger::DoLogException" @ %Debug,
		"function %ExecuteShellCommand" @ %HostedGUI,
		"macro %YCL_WrapCall_CAPI" @ %YCommon, "%constructor DirectorySession#2"
		@ %FileSystem, "function %MakePipe" @ %Host) @ %YCLib, "function %Mount"
		@ %'YCLib_(DS)'.DSIO, ("macros %(YCL_WrapCall_Win32, \
		YCL_TraceWrapCall_Win32)", "member function %DirectoryFindData::Read")
		@ %'YCLib_(Win32)'.MinGW32) @ %YFramework)
	),
	/ $re_add(b852) DLDI "'std::forward<_tParams&&>' within variadic parameter \
		packs" -> 'std::forward<_tParams>' $effective
		@ %YFramework.('YCLib_(DS)'.DSIO),
	/ %YFramework $=
	(
		+ $lib $impl "workaround of internal compiler error for \
			x86_64-w64-linux G++ 9.1" @ "static member function template \
			%Decode#2" @ "class template specialization \
			%GUCSMapper<CharSet::UTF_8>" @ %CHRLib.StaticMapping,
			// See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90966.
		/ $re_add(b852) $dev "all %std::function" -> "%function"
			@ (%Helper.Initialization $effective @ "function \
			%InitializeKeyModule", %'YCLib_(DS)'.DSIO $effective
			@ "constructor %DEntry#4", %YCLib.FileSystem $effective
			@ "member function %FAT::EntryData::FillNewName"),
		/ $re_add(b852) $dev "all %std::function" -> "%YSLib::function"
			@ %YCLib.HostedGUI,
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					/ DLDI "simplified" @ ("functions %(Eval, EvalRef, \
						EvalString, EvalStringRef)", "%operator()"
						@ "vau handlers"),
					/ "supported move of rvalue expressions" @ "functions \
						%(Eval, EvalRef, EvalString, EvalStringRef)"
						^ ("%NPL::IsMovable" @ %NPLA),
					/ DLI "simplified functions %(First, FirstVal)"
						^ "%TermNode::MoveContent" ~ "%LiftTerm",
					+ "functions %(ListAsterisk, ListAsteriskRef)",
					/ DLDI "simplified function %If",
					* $impl "missing trailing-return-type" @ "lambda expression"
						@ "functions %(And, Or)" $since b808,
						// This does not conforming to ISO C++11.
					/ @ "function %Or" $dep_to
						"wrong native non-strict logical-OR results" $=
					(
						* "wrong result by wrongly treating non-bool type as \
							'#f'" $since b754,
							// This would cause '$or? 1 #f' evaluates to '#f'.
						* "wrong result by wrongly treating non-false result \
							as '#t'" $mismatch(Documentation.NPL) $since b754,
							// This is not same to the documented behavior \
								similar to the 'and' form in RnRS Scheme. This \
								would cause '$or? 1 #f' evaluates to '#t' \
								rather than '1' even the bug above is fixed.
					),
					+ "function %Cond",
					* "captured dynamic environment named '#ignore'"
						@ "functions %(Vau, VauRef, VauWithEnvironment, \
						VauWithEnvironmentRef)" $since b799 $dep_to
						"vau dynamic capture ignorance fix",
						// See $2019-06 @ %Documentation::Workflow.
					/ DLDI "simplified TCO compression"
				),
				/ DLDI "reordered declarations %(Continuation, InsertChild, \
					TransformNode, LoadNode) with others",
				* "temporary lifetime" @ ("function %ReduceOrdered";
					"function %Forms::Sequence") $since b823 $=
					(/ $impl "simplified" !^ "tail rewriting"),
				- DLDI "temporary store" @ "non-TCO implementations of \
					evaluation calls" $dep_from "%ReduceOrdered",
				(
				/ DLI "differentiated prvalues function"
					@ "function %ReduceCombined";
				/ DLI "avoided copy of evaluated structure on prvalue handlers"
					@ "%operator()" @ "vau handlers",
				),
				/ DLDI "simplified functions %(Reduce, ReduceOnce, \
					EvaluateLeafToken, Forms::DefineWithRecursion)"
					^ "%ContextState::Access",
				/ "TCO improvement" $=
				(
					/ DLDI "optimized TCO frame adding by avoiding traversing \
						known candidate environments",
						// This is not used with the following changes, though.
					(
					// See $2019-06 @ %Documentation::Workflow.
					- DLI "removed weak roots collection by default";
					/ "avoided stored tempoarary object for the operand"
						@ "%operator()" @ "vau handlers";
					* "temporary collected too aggresively" $since b842,
					- "temporary store" @ "TCO frames" $dep_from
						"%ReduceOrdered"
						// This also stop the orphan temporary object cleanup \
							in %ReduceAgain, which relies on %ReduceOrdered \
							implementation change to keep PTC.
					),
					/ DLI "optimized non-temporary function transferring when \
						there is no temporary handler to be moved"
				)
			),
			/ %Dependency $=
			(
				/ "function %LoadGroundContext" $=
				(
					+ "native derivation and enabled by default"
						@ ("applicative %list" ^ $dep_from
						("%ListAsterisk" @ %NPLA1), "applicative 'list%'"
						^ $dep_from ("%ListAsteriskRef" @ %NPLA1),
						"operative '$cond'" ^ $dep_from ("%Cond" @ %NPLA1)),
					/ "applicative 'nullpr?'" => 'nullv?',
					* $comp "wrong result" @ "operative '$or?'" $orig
						(@ "special form '$or'" $since b759) $dep_from
						"wrong native non-strict logical-OR results",
					+ "alternative derivation" @ "operatives ('$and?', '$or?')",
					* $comp "broken PTC guarantees on the evaluation of body \
						in ('$vau', '$vau/e', '$vau/e', '$vau/e%') abstractions"
						$dep_from "vau dynamic capture ignorance fix" $since
						b799 $dep_to "captureless eformal vau PTC fix",
						// See $2019-06 @ %Documentation::Workflow.
					* $comp "wrong temporary lifetime in parameters"
						@ "native implementation" @ "operative '$sequence'"
						$since b823 $dep_from ("%Sequence" @ %NPLA1),
						// See $2019-06 @ %Documentation::Workflow.
					/ $re_ex(b840) DLDI "renamed various environment names"
						@ "derivations"
						// Mostly, 'senv' to 'ef' to represent syntactic \
							category '<eformal>' in %Documentation.NPL.
				),
				* $comp "PTC guarantees were broken" @ "almost all alternative \
					derivations" $since b799 $dep_from
					"captureless eformal vau PTC fix"
			)
		)
	)
),

b859
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
				@ "function %ResolveToTermReferencePtr",
			(
			+ "function %IsMovable";
			+ "function template %IsMovable",
			/ "supported moving object referenced by reference arguments as \
				rvalues and avoided non-reference lifting by calling \
				%LiftTermIndirection" @ "function %LiftToReturn"; $comp
				"functions %(LiftSubtermsToReturn; ReduceBranchToListValue)"
				// The call to %LiftTermIndirection should be avoid in cases \
					other than a few like applicative %deshare. This is \
					basically not guaranteed in interface (and annoying to \
					simulate in non-native derivations). This also improves \
					performance in many cases.
			),
			/ @ "function template %CheckRegular" $=
			(
				/ "removed forwarding call parameters" $dep_to
					"simplified regular check call";
					// This change (rather than removing 'YB_PURE') is made \
						also to improve perforance, although it requires user \
						code to change.
				* "wrong 'YB_PURE'" $since b855
			),
			/ $forced DLDI @ "function template %AccessRegular" $dep_from
				"simplified regular check call",
			/ DLDI "avoid redundant ',' at end of enumerators"
				@ "enum class %ReductionStatus",
			+ "functions %(IsUniqueTerm, LiftTermOrCopy)",
			* "missing optional argument support caused by wrong \
				trailing-return-type" @ "function template %ResolveTerm"
				$since b855,
			- DLDI "redundant 'const'" @ "1st parameter"
				@ "constructor %NPLException#2"
		),
		/ %NPLA1 $=
		(
			/ @ "namespace %Forms" $=
			(
				* "termination caused by invalid 'ynothrow' when failed to \
					modify term" @ "decapsulation strict context handler \
					%operator()" @ "function %MakeEncapsulationType" $since
					b858,
				/ @ ("function %Unwrap",
					"decapsulation strict context handler %operator()"
					@ "function %MakeEncapsulationType") $=
				(
					* $comp "temporary parameters not treated as rvalues"
						(@ "function %Unwrap" $since b858,
						@ "decapsulation strict context handler %operator()"
						@ "function %MakeEncapsulationType" $since b857),
						$dep_from ("%TermReference::IsUnique" @ %NPLA),
					/ DLDI "simplified" ^ $dep_from
						("%NPL::IsMovable" @ %NPLA)
				),
				+ "function template %CallResolvedUnaryAs",
					// This is not used currently. It is friendly to future \
						extensions.
				/ @ "function template %CallRegularUnaryAs" $=
				(
					/ $forced DLDI "simplified" $dep_from
						"simplified regular check call";
					* $comp $since b855
						// This behaves wrongly even in %debug configurations.
				),
				(
				/ "supported moving object referenced by non-aliased reference \
					arguments as rvalues" $=
				(
					/ $comp "functions %(Cons, SetRest)" $dep_from
						("%LiftSubtermsToReturn" @ %NPLA)
						$dep_to "native return move support",
					/ @ "functions %(Wrap, WrapOnce)" $=
					(
						/ "function type" -> 'void(TermNode&)'
							~ 'ContextHandler(const ContextHandler&)';
						/ $impl ^ $dep_from "%CallRegularUnaryAs"
					)
				);
				+ "functions %(WrapRef, WrapOnceRef)" ^ $dep_from
					"%CallRegularUnaryAs"
				),
				/ "supported %ValueToken::Unspecified for NPLA1 expression \
					without <alternate> subexpression" @ "function %If",
				/ "supported move of rvalue operands"
					@ "functions %(Cons, ConsRef, SetRest, SetRestRef)"
					^ $dep_from ("%NPL::IsMovable" @ %NPLA)
					$dep_to "native rvalue operands move support",
				/ "rvalue references checked as failure"
					@ "function %CheckListReference" $mismatch $since b857,
				/ "supported %TermTags::Unique and %TermTags::Temporary \
					propagation for references" @ "function %MatchParameter",
					// This makes the %TermTags parameter to have more \
						precise meaning to the enumerators.
				/ @ "function %BindParameter" $=
				(
					/ "preserved tail anchor in the current environment"
						@ "TCO implementation",
					/ $forced DLDI $dep_from "function %MatchParameter",
					/ "supported move for binding by value with rvalue \
						operands",
					/ "term tag on sigil '&' binding for non-reference operands"
						$=
					(
						* "missing removing %TermTags::Temporary from the \
							source term" $since b857;
							// Since the referent can be bound in an \
								environment, it may have this tag.
						* "bogus %TermTags::Nonmodifying added" $since b856
							$dep_to "modifying qualification fix",
						/ "inherited input tags"
					),
					* "bogus %TermTags::Temporary initialized for references"
						@ "term tag on sigil '&' binding for reference operands"
						$since b857 $dep_from ("missing massive forwarding",
						"avoiding reference temporary tags rebinding")
						$dep_to "shared temporaries fix"
						// This bug would cause binding on temporaries used \
							more than once easily moved unexpectedly.
				),
				/ DLDI "simplified resolved list reference checks"
					@ "functions %(CheckListReference, SetFirst, \
					SetFirstRef, SetRest, SetRestRef)",
					// This is similar to the changel of %CheckRegular.
				* "missing 'YF_API" @ "function \
					%ThrowValueCategoryErrorForFirstArgument" $since b857,
				+ "functions %(FirstRef, FirstRefAt, \
					ThrowNonmodifiableErrorForAssignee)",
				(
				+ "function %ThrowInsufficientTermsError";
				/ DLDI "simplified function %ThrowInsufficientTermsError"
					^ "%ThrowInsufficientTermsError",
				+ "function %First"
				),
				/ DLDI "avoided redundant branching"
					@ "functions %(SetFirst, SetFirstRef, SetFirstRefAt)",
				/ "supported move" @ "function %SetFirst" ^ $dep_from
					("%LiftTermOrCopy" @ %NPLA),
				/ DLDI "functions %(SetRest, SetRestRef)",
				+ "function %FirstVal" ^ $dep_from "%ResolveTerm",
				+ "function %CheckEnvironment",
				* DD "missing <pre> and </pre> tags" @ "Doxygen comments"
					@ "functions %(EvalString, EvalStringRef, EvalUnit)" $since
					b855,
				/ DLDI "simplified functions %(Cons, ConsRef)",
				/ @ ("functions %(Eval, EvalRef, EvalString, EvalStringRef)",
					"%operator()" @ "vau handlers") $=
				(
					/ "simplified" ^ $dep_from ("%LiftTermOrCopy" @ %NPLA),
					* "missing setting current term for the next continuation"
						$since b851
				),
				/ DLDI "function %MakeEncapsulationType" !^ 'const auto&',
					// To be consistent with other instances of the \
						initialization of the allocator object.
				+ "function %Apply",
				+ "2 functions %ThrowInvalidSyntaxError"
			),
			(
			/ @ "class %FormContextHandler" $=
			(
				(
				+ "data member %Wrapping";
				/ "supported wrapping calls" @ "operator %()",
				+ "wrapping count parameter with 0 default argument"
					@ "2 function templates",
				/ $forced $lib $impl "%(operator==, swap)"
				),
				/ DLI "optimized argument evaluation of cases with no argument"
					@ "thunked implementation"
					// Like klisp.
			);
			/ ("functions %(RegisterSequenceContextTransformer, \
				Forms::(Wrap, WrapOnce, Unwrap; Lambda, LambdaRef, \
				MakeEncapsulationType))", "function template %RegisterStrict")
				^ "%FormContextHandler" ~ "%StrictContextHandler";
			/ $comp "failure message on operative arguments"
				@ "%Forms::Unwrap",
			- $revert(b754) "class %StrictContextHandler"
			),
			/ DLDI "simplified non-thunked implementation"
				@ "function %ReduceChildrenOrdered"
		),
		/ %Dependency $=
		(
			/ @ "function %LoadGroundContext" $=
			(
				/ $forced "applicative %wrap" ^ "%RegisterStrict"
					~ "%RegisterStrictUnary" $dep_from ("%Wrap" @ %NPLA1);
				(
				/ $comp "supported move parameters as possible"
					@ ("applicative %list" $dep_from
					("%ReduceBranchToListValue" @ %NPLA),
					"applicative %cons" $dep_from ("%Cons" @ %NPLA1),
					"applicative 'set-rest!'" $dep_from
					("%SetRest" @ %NPLA1), "applicative %wrap");
				/ $forced DLDI "derivation equivalence of applicatives \
					('cons', 'cons%', 'set-rest!', 'set-rest%!')"
					$dep_from "native return move support"
					$= (/ $comp $dep_from "native rvalue operands move support")
				),
				/ $comp "result of operatives ('$if'; '$when', '$unless') \
					when the condition is '#f'" -> '#inert' ~ '()' $dep_from
					("%If" @ %NPLA1),
				* "wrong result" @ "operatives ('$when', '$unless') when \
					<body> is empty" $since b789,
				* $comp "wrong result of 'eqv?' for subobject references \
					wrapped from %unwrap lvalues" $since b858 $dep_from
					("%operator==" @ "class %FormContextHandler") @ %NPLA1,
				+ "applicative 'wrap%'" ^ $dep_from ("%WrapRef" @ %NPLA1),
				/ DLDI "simplified" @ "applicative 'assign!'" ^ $dep_from
					("%NPL::IsMovable" @ %NPLA),
				+ "native derivation" @ "applicative 'check-environment' and \
					enabled by default" ^ $dep_from
					("%CheckEnvironment" @ %NPLA1),
				+ "native derivation and enabled by default" @ ("applicative \
					'first&'" ^ $dep_from ("%FirstRef" @ %NPLA1), "applicative \
					'first@' " ^ $dep_from ("%FirstRefAt" @ %NPLA1)),
				+ "modifiable lvalue check before assignment"
					@ "applicatives ('assign!', 'assign%!', 'assign@!')"
					^ $dep_from
					("%ThrowNonmodifiableErrorForAssignee" @ %NPLA1)
					$dep_from "modifying qualification fix",
					// This would break 'force' in 'std.promises' without the \
						fix.
				/ DLDI "simplified symbol 'denv'" @ "derivation"
					@ "operatives ('$bindings/p->environment', \
					'$bindings->environment')"-> 'd',
				+ "applicative 'unique?'" ^ $dep_from
					("%IsUniqueTerm" @ %NPLA),
				/ "copied the term to respect %TermTags::Nonmodifying on move"
					@ "applicative %move",
				/ DLDI "sigils" @ "applicative 'list*%'"
					-> '&' ~ '%',
				/ DLDI "parameter binding sigil" ^ '%' ~ '&'
					@ "alternative derivation" @ "applicative %forward"
					$dep_from 'list*%' $dep_to
					"avoiding reference temporary tags rebinding",
				* "missing forwarded lists" @ "applicatives (%(accl, accr, \
					foldr1, map1, append), 'list-concat', 'map-reverse')"
					$since b829 $dep_to "missing massive forwarding",
				(
				+ "applicative %firstv" ^ $dep_from
					("function %FirstVal" @ %NPLA1);
				/ "ensured binding formation incompatible to forwarding %first"
					@ "operatives ('$let', '$let%', '$let/d', '$let/d%',
					'$let/e', '$let/e%', '$letrec', '$letrec%')" ^ "%firstv"
					~ "%first",
					// Due to bugs (see below) in %first, this does not cause \
						bugs yet.
				/ @ "applicative %first" $=
				(
					// The following bug occasionally avoided references in \
						parameter trees, hence it was not obviously buggy.
					* "missing move for rvalue results" $since b858 ^ $dep_from
						"%forward" $dep_from "shared temporaries fix";
						// This is not effective as long as the terms operated \
							are preserved.
					* DLDI "%ReductionStatus use" @ "native derivations did \
						not respect irregular representation of references"
						$since b858
						$= (/ DLDI "native derivation" @ "applicatives ('id', \
							'idv', 'ref&')" ^ "%ReductionStatus::Retained"
							~ "%ReductionStats::Regular"),
					+ "native derivation" @ "applicative %first and enabled \
						by default" ^ $dep_from ("%First" @ %NPLA1)
						// Only with the bug above fixed, the native \
							implementation can behave the same.
				)
				),
				- $revert(b829) DLI "redundant %forward call"
					@ "applicative 'unfoldable?'",
				/ DLDI "simplified applicatives %move, 'assign!'"
					^ $dep_from ("function %LiftTermOrCopy" @ %NPLA),
				/ DLDI "simplified basic processing" ^ $dep_from
					("%ThrowInvalidSyntaxError" @ %NPLA1)
				+ "applicative 'raise-invaild-syntax-error'" ^ $dep_from
					("%ThrowInvalidSyntaxError" @ %NPLA1),
				/ @ "applicative %apply" $=
				(
					+ "error check for syntax with environment to ensure only \
						1 environment argument" ^ '$lambda',
						// This is needed to make the native implementation \
							sane enough.
					/ "forwarded applicative and argument list rvalues",
						// This is like %ystdex::apply as well as \
							%std::apply in ISO C++17. It also makes the \
							equivalent native implementation simpler.
					/ "handled error" ^ $dep_from 'raise-invalid-syntax';
						// This is also needed to make the equivalent native \
							implementation simpler.
					+ "native derivation and enabled by default"
						^ ("%Apply" @ %NPLA1)
				)
			),
			/ @ "applicative 'string<-'" @ "function %LoadModule_std_strings" $=
			(
				/ DLDI "simplified" ^ $dep_from ("%NPL::IsMovable" @ %NPLA),
				+ "modifiable lvalue check before assignment" ^ $dep_from
					("%ThrowNonmodifiableErrorForAssignee" @ %NPLA1)
			)
		)
	),
	+ "1 test case for %ystdex::function" @ %Test.YBase
),

b858
(
	/ %YFramework $=
	(
		/ @ "function template %SetContentWith" @ %YSLib.Core.ValueNode $=
		(
			* $re_ex(b844) "exception safety not kept on container operation \
				failure" $since b844;
			* $comp "container invalidated too early" $since b844
				// As of b844, the %Value cannot refer to the the container. \
					Before b844, the elements in the container cannot refer to \
					the %Value reliably, either.
		),
		/ %NPL $=
		(
			+ $lib $impl "workaround for x86_64-w64-linux G++ 8.3 wrong code \
				generation with '-O3' option" @ "function %Literalize"
				@ %Lexical,
				// Otherwise, it would cause invalid memory access in %release \
					configurations. It could crash if there is no valid \
					'yconf.txt' already available with message \
					"free(): double free detected in tcache 2" from glibc.
			/ %SContext $=
			(
				+ "function %IsExtendedList",
					// Is is exactly the same to old %IsList.
				/ "function %IsList" $dep_from ("%ResolveEnvironment" @ %NPLA),
				+ "function %IsBranchedList",
				/ @ "function template %SetContentWith" $=
				(
					* "exception safety not kept on container operation \
						failure" $since b852;
					* $comp "container invalidated too early" $since b852
						$dep_to "irregular representation support"
						// For references with irregular representation, the \
							container shall be valid before the operation on \
							the %Value is performed, e.g. in %LiftToReturn.
				)
			),
			/ %NPLA $=
			(
				/ DLDI "function %ResolveEnvironment"
					^ (($dep_from "%IsExtendedList" ~ "%IsList") @ %NPLA),
				/ $comp "excluded irregular list representation"
					@ "function template %CheckRegular" $dep_from
					("%IsList" @ %SContext) $dep_to
					"irregular representation support",
				* "allowed constructed references by objects with zero owner \
					count" @ "function %LiftToReference" $since b800,
					// This would cause undefined behavior as in 'ref (id 1)'.
				/ $re_add(b854) "enhanced handling to corruptied values"
					@ "function %LiftToReturn" ^ "%NPL::TryAccessLeaf"
					~ "%NPL::AccessPtr",
				/ "supported references with irregular representation"
					@ ("functions %(TermToTags, Collapse, PrepareCollapse)",
					"all 2 functions %ReferenceTerm")
					^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm" $dep_to
					"irregular representation support",
				/ "merged functions %(IsReferenceLeaf, IsReferenceTerm)"
					-> "function %IsReferenceTerm" $dep_to
					"irregular representation support",
					// The new function is same to old %IsReferenceLeaf.
				/ "merged functions %(IsLValueLeaf, IsLValueTerm)"
					-> "function %IsLValueTerm" $dep_to
					"irregular representation support",
					// The new function is same to old %IsLValueLeaf.
				/ "merged function templates %(ResolveLeaf, ResolveTerm)"
					-> "function %ResolveTerm",
					// The new function template is same to old %ResolveLeaf.
				/ "functions %(ReduceToList, ReduceToListValue)"
					^ (($dep_frmo "%IsBranchedList") ~ "%IsBranch" @ %SContext)
					$dep_to "irregular representation support",
				+ "2 function tmeplates %TryAccessReferencedTerm",
				/ "all 2 function templates %TryAccessReferencedLeaf"
					^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm",
					// The old TryAccessReferencedLeaf is now \
						%TryAccessReferencedTerm.
				/ $re_add(b857) "functions %LiftTerm with %ValueObject source \
					supported self lifting",
					// To be consistent with %LiftTerm#1.
				+ "function %LiftCollapsed",
				/ $re_add(b856) DLDI
					"renamed internal conditional inclusion macro",
				* DD "return value for non-reference terms" @ "Doxygen comment"
					@ "function %TermToTags" $mismatch $since b857,
				+ DLI "static assertions for %AnchorPtr type"
					^ "ystdex::(is_nothrow_copy_constructible, \
					is_nothrow_copy_assignable, is_nothrow_move_constructible, \
					is_nothrow_move_assignable)"
			),
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					/ @ "function %MatchParameter" $=
					(
						(
						/ "option parameter %bool" -> "%TermTags";
						+ "support of list option to indicate list prvalues"
							^ "%TermTags::Unique" $dep_to "tag match support"
						),
						/ "reordered branches to support references with \
							irregular representation" ^ $dep_to
							"matched regular representation first",
						/ "simplified ellipsis detection" $=
						(
							/ $impl ^ $dep_from ("%IsList" @ %SContext)
								~ "%ReferenceTerm";
							/ $comp "removed lvalue support for empty list"
								// A symbol denoting an empty list is still a \
									symbol, not an empty list in the formal \
									parameter tree.
						)
					),
					/ @ "function %BindParameter" $=
					(
						+ "check to throw %InvalidReference on non-list cases \
							for sigil '@'" $dep_from "tag match support",
						/ "supported references with irregular representation"
							^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm"
							$dep_from "matched regular representation first"
							$dep_to "irregular representation support"
					),
					/ @ "function %SetFirstRef" ^ $dep_from
						("%LiftCollapsed" @ %NPLA) $=
					(
						/ "supported references with irregular representation"
							^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm"
							$dep_to "irregular representation support",
						* "missing collapse on the source argument" $since b834
							^ $dep_from ("%Collapse" @ %NPLA),
						+ "support of self assignment"
							// See $2019-05 @ \
								%Documentation::Workflow.
					),
					+ "function %SetFirstRefAt" ^ $dep_from
						("%LiftCollapsed" @ %NPLA),
					/ @ "function template %CallRegularUnaryAs" $=
					(
						* "missing trailing variadic packed arguments"
							@ "trailing return type" $since b855,
						/ "cast with 1st template parameter" @ "called functor"
							$dep_to "explicit type for regular unary call"
					),
					/ "decapsulating values" @ "function %MakeEncapsulationType"
						$=
					(
						/ $forced DLDI $dep_from
							"explicit type for regular unary call",
						(
						/ "supported non-aliased reference arguments as \
							rvalues";
						* "redundant tag %TermTags::Nonmodifying for rvalue \
							reference arguments" $since b857
						),
						/ "supported references with irregular representation"
							^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm"
							$dep_to "irregular representation support"
					),
					/ $forced $revert_ex(b854) DLDI
						"functions %(SetRest, SetRestRef)"
						^ ("%ResolveTerm" ~ $dep_from "%ResolveLeaf" @ %NPLA),
						// The assumption to use %ResolveLeaf is actually \
							invalid.
					/ $comp "excluded irregular list representation"
						@ "functions %(Cons, ConsRef, SetRest, SetRestRef)"
						$dep_from ("%IsList" @ %SContext) $dep_to
						"irregular representation support",
					/ DLDI "simplified functions %(Equal, EqualValue)"
						^ "%ystdex::(ref_eq, equal_to)",
					/ ("thunk" @ "function %DefineWithRecursion", "check"
						@ "function %CheckListReference")
						^ ((dep_from "%IsBranchedList" ~ "%IsList") @ %SContext)
						$dep_to "irregular representation support",
					/ $forced DLDI ("functions %(And, If, Or)", "member \
						function %operator()" @ "functor as predicate \
						returned by %MakeEncapsulationType")
						^ (($dep_from "%NPL::TryAccessReferencedTerm"
						~ $dep_from "%NPL::TryAccessReferencedLeaf") @ %NPLA),
					/ $comp "member function %operator()" @ "functor as \
						constructor returned by %MakeEncapsulationType"
						$dep_from ("%NPL::TryAccessReferenceLeaf" @ %NPLA)
						$dep_to "irregular representation support",
					* "wrapped redundant %ContextHandler for \
						%FormContextHandler" @ "function %Wrap" $since b785,
						// This was not consistent with even %WrapOnce.
					/ @ "function %Unwrap" $=
					(
						* "failed to unwrap context handlers wrapped more than \
							once" $since b785 $dep_from "%Wrap",
						/ "supported forwarding" $=
						(
							/ "parameter 'const ContextHandler&'"
								-> 'TermNode&, ContextNode&',
							/ "return type" -> 'ReductionStatus'
								~ 'ContextHandler',
							/ "move %StrictContextHandler::Handler object for \
								rvalues"
							/ "forwarding by subobject reference for lvalues"
								@ "function %Unwrap" $dep_all_from
								"function %ReduceCombined"
								// Subobject references need the check of \
									%TermReference without branch comes first. \
									The referent is put as the only subterm here.
								$= (/ $impl ^ "%CallRegularUnaryAs" $dep_from
									"explicit type for regular unary call")
						)
					)
				),
				/ @ "functions %ReduceCombined" $=
				(
					/ $forced DLDI
						^ ("%ResolveTerm" ~ $dep_from "%ResolveLeaf" @ %NPLA),
					/ $comp "excluded irregular list representation"
						^ (($dep_from "%IsBranchedList" ~ "%IsBranch")
						@ %SContext) $dep_to "irregular representation support";
					+ "support of irregular representation" $=
					(
						+ $impl "assertions for supported irrgular \
							representation",
							// The only supported one is documented in \
								%Documentation.NPL.
						+ "access of %ContextHandler in the irregular \
							representation" ^ "%NPL::Access";
						+ "conversion to rvalues"
					)
				),
				/ ("initialier for %FormContextHandler::Check", "check"
					@ "%operator()" @ "vau handler")
					-> ((dep_from "%IsBranchedList" ~ "%IsList") @ %SContext)
					$dep_to "irregular representation support",
				/ @ "fucntion %ReduceFirst" $dep_to
					"irregular representation support" $=
				(
					/ "list condition" ^ ((dep_from "%IsBranchedList"
						~ "%IsList") @ %SContext),
					/ "returned %ReductionStatus::Retained"
						~ "%ReductionStatus::Clean"
				),
				/ @ "function %ReduceOnce" $=
				(
					/ "reordered to skip irregular representations for list \
						evaluation passes",
						// %IsBranchedList is not needed separatedly here.
					/ DLI "optimized by avoiding access RTTI on list \
						evaluation passes"
				),
				/ $forced DLDI "function %EvaluateIdentifier"
					^ (($dep_from "%NPL::TryAccessReferencedTerm"
					~ $dep_from "%NPL::TryAccessReferencedLeaf") @ %NPLA),
				/ DLDI "qualified with 'YSLib::' at the calls of %share_move"
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ "applicative %ref" => 'ref&',
						// This is essentially unsafe.
					(
					/ "applicatives ('<-', '<-%', '<-@')"
						=> "(assign!, assign%!, assign@!)";
						// These functions do not allow non-references as the \
							1st argument as 'string<-' does, so the '<-' \
							postfix is not fit.
					* $comp "applicative '<-' wrongly moved nonmodifiable \
						referents" $since b857,
					+ "alternative derivation" @ "applicative 'assign!'"
						^ 'assign%!',
					/ @ "applicative 'assign%!'" ^ $dep_from
						("%LiftCollapsed" @ %NPLA) $=
					(
						/ "supported references with irregular representation"
							^ "%NPL::TryAccessLeaf" ~ "%NPL::TryAccessTerm"
							$dep_to "irregular representation support",
						* $comp "missing collapse on the source argument" $since
							(@ '<-%' $mismatch(Documentation.NPL) $since b857)
							^ $dep_from ("%Collapse" @ %NPLA),
							// As documented, '%' shall be used for preserving \
								collapsed references.
						* "missing handling self assignment" $orig
							(@ '<-%' $since b857)
							// See $2019-05 @ \
								%Documentation::Workflow.
					)
					),
					* "missing internal definition of operative '$defv!'"
						@ '!NPL_Impl_NPLA1_Native_Forms \
						&& !NPL_Impl_NPLA1_Use_Id_Vau' $since b856,
					+ "alternative derivation" @ "operative '$deflazy!'"
						^ '$def!',
					/ DLDI "simplified operatives ('$provide!', '$provide/d!')"
						^ ('$vau%', 'lock-environment')
						~ ('$quote', 'lock-current-environment'),
					(
					/ "applicative %box" => 'box%';
						// To be consistent with 'list%'.
					+ "applicative %box"
						// To be consistent with %list.
					),
					/ DLDI "reordered some combiner definitions",
					/ "supported references with irregular representation"
						@ "applicative %deshare" ^ "%NPL::TryAccessLeaf"
						~ "%NPL::TryAccessTerm" $dep_to
						"irregular representation support",
					+ "applicative %set-first@!",
					/ $comp "excluded irregular list representation"
						@ "applicatives ('list?', 'listpr?')"
						$dep_from ("%IsList" @ %SContext) $dep_to
						"irregular representation support",
					(
					/ "avoided applicative %first" @ "applicative %map-reverse"
						^ 'first%' ~ "%first";
					- "appliactive %first";
					/ "applicative 'first%'" => "%first";
						// To make accessors consistent to 'unbox', etc. The \
							%rest family is still special without special \
							irregular representation support, though.
					/ $forced DLDI ("applicatives ('first-null?', %foldr1)",
						"operatives ('$let', '$let%', '$let/d', '$let/d%',
						'$let/e', '$let/e%', '$let*', '$let*%', '$letrec',
						'$letrec%', '$bindings/p->environment'") ^ "%first"
						~ 'first%'
					),
					/ DLDI "adjusted newline before 'eval'"
						@ "operatives ('$defw!', '$defw%!', '$defw/e!', \
						'$defw/e%!', '$defl/e!', '$defl/e%!')",
					/ "applicative %unwrap" $=
					(
						/ $forced ^ "%RegisterStrict" ~ "%RegisterStrictUnary"
							$dep_from ("%Unwrap" @ %NPLA1);
						/ $comp "supported access of subobject references"
					),
					(
					/ "object %inert" -> "prvalue literal #inert";
						// This is now also more similar to Kernel.
					/ $forced DLI "all %inert" -> '#inert';
						// This is more efficient due to less lvalue-to-rvalue \
							conversions.
					/ $comp "enforced prvalue result for call without arguments"
						@ "applicative '$cond'"
					)
				),
				/ "supported forward parameter rvalues" @ "applicative '<-'"
					@ "function %LoadModule_std_strings",
				+ $re_add(b853) DLDI "qualified all calls of %AccessPtr with \
					'NPL::'",
					// To be consistent with %NPLA1.
				/ $forced DLDI "applicative 'bound?'"
					@ "function %LoadModule_std_environments"
					^ (($dep_from "%NPL::TryAccessReferencedTerm" ~ $dep_from
					"%NPL::TryAccessReferencedLeaf") @ %NPLA)
			),
			/ DLDI "qualified with 'NPL::' at the calls of %Deref"
				$effective @ %(NPLA, NPLA1, Dependency)
		)
	)
),

b857
(
	/ %YBase.YStandardEx $=
	(
		/ %Memory $=
		(
			+ "function templates %is_undereferenceable for %std::(unique_ptr, \
				shared_ptr, weak_ptr) instances",
				// This enhances %Deref debuggin in %YFramework.
			* DD "wrong Doxygen command '\sinne' used" ~ '\since'
				@ "function templates %is_sharing" $since b784
		),
		/ %Pointer $=
		(
			+ "friend function" @ "class template %observer_ptr" @ %Pointer
				// Ditto.
			* $re_add(b852) DD "missing escaping tag" @ "Doxygen comments"
				$since b660
				// To eliminate Doxygen warning: Unsupported xml/html tag found.
		)
	),
	/ %YFramework $=
	(
		* $lib "missing precondition to prevent self move"
			@ "member function %ValueNode::MoveContent"
			@ %YSLib.Core.ValueNode $since b806
			$= (+ "assertion"),
		/ %NPL $=
		(
			/ %SContext $=
			(
				(
				+ "enum %TermTagIndices";
				+ "enum class %TermTags";
				+ 'DefBitmaskEnum(TermTags)';
				+ "function %GetLValueTagsOf"
				),
				/ @ "class %TermNode" $=
				(
					* $lib "missing precondition to prevent self move"
						@ "function %MoveContent" @  $since b853
						$= (+ "assertion"),
					+ "object %Tags" ^ $dep_from "%TermTags"
				)
			),
			/ %NPLA $=
			(
				+ "function %TermToTags" ^ $dep_from
					("%GetLValueTagsOf" @ %SContext),
				/ @ "class %TermReferece" $=
				(
					/ $revert_ex(b856) "tags type" $=
					(
						/ "all tags" ^ $dep_from ("%TermTags" @ %SContext)
							~ "%Tags";
						- "enum %Tags"
					),
					/ "function %IsTermReferenced"
						-> "function %IsReferencedLValue"
						$dep_from "avoided TermReference::IsTermReferenced"
						$= (* "invalid nonmodifying interaction"
							@ "function %IsTermReferenced" $since b856
							$dep_from ("%TermTags" @ %SContext)),
					(
					- 'ynothrow' @ "constructor#1";
						// Now corruptied terms would be handled by throwing.
					/ "inherited tags for reference arguments"
						@ "constructors#(1, 2)" ^ "%TermToTags"
						~ "%HasReferenceValue"
						// Now lvalues can be modifiable.
					),
					+ "function %GetTags" $dep_from "%TermTags",
					+ "friend function %swap",
					+ "function %IsMovable" ^ $dep_from
						("%TermTags" @ %SContext)
				),
				- $revert_ex(b854) "function %HasReferenceValue" $dep_from
					"constructors %TermReference#(1, 2)",
					// %IsReferenceTerm is preferred as it can handle \
						corruptied terms.
				(
				/ $dev $lib "order of some declarations";
				/ $revert_ex(b829) "2 function overloads %Collapse"
					-> "function %PrepareCollapse" $=
				(
					/ "specified 2nd parameter with %AnchorPtr"
						~ "nothing or %Environment",
					/ "adjusted reference tags" ^ $dep_from
						("%TermNode::Tags" @ %SContext)
						// To avoid redundant call in initialization of the \
							%TermReference object.
				);
				- $revert(b840) $dev "class name declaration %Environment",
				/ $forced $impl "function %ResolveIdentifier"
					^ "%PrepareCollapse" ~ "%Collapse"
				),
				* $lib "missing handling self lifting" @ "function %LiftTerm#1"
					$since b806,
					// This should be no-op.
				/ @ "class %Environment" $=
				(
					/ DLDI ("alias %NameResolution", "function %LookupName")
						^ "%BindingMap::mapped_type" ~ "%TermNode",
					+ "function template %Bind"
				),
				+ "function %LiftRValueToReturn"
			),
			/ %NPLA1 $=
			(
				/ @ "function %EvaluateIdentifier" 
					$dep_from (("applicative 'first%'" @ %Dependency),
					"split forwarding binding operatives")
					// See $2019-04 @ %Documentation::Workflow.
					$=
				(
					/ "specified %TermTags::Unqualified on general \
						lvalues" ~ "%TermTags::Nonmodifying",
						// This makes lvalues modifiable by default.
					* "references to object environment not marked as lvalues"
						$since b829 $dep_from "%Forms::BindParameter"
						$dep_to "fixed lvalue resolution"
				),
				/ @ "namespace %Forms" $=
				(
					/ DLDI ("function %CheckListLValue", "decapsulation strict \
						context handler %operator()"
						@ "function %MakeEncapsulationType")
						^ "%TermReference::IsUnique"
						~ $dep_from "%TermReference::IsTermReferenced"
						$dep_to "avoided TermReference::IsTermReferenced",
					/ @ "function %BindParameter" $=
					(
						/ DLI "enabled reference move on '%' or '&' sigils on \
							matched reference value operands",
						/ "enabled rvalue tag" $dep_from ("%TermReference"
							@ %NPLA, ("%TermNode::Tags", "%GetLValueTagsOf")
							@ %Scontext),
						/ DLDI "simplified" ^ $dep_from ("%Environment::Bind"
							@ %NPLA) ~ "%Environment::operator[]"
							// This would be probably slightly inefficient, \
								though.
					),
					/ "supported move of unique referents"
						^ $dep_from ("%TermReference::IsMovable" @ %NPLA)
						@ "function %MatchParameter"
						$dep_from "%EvaluateIdentifier",
						// The old implementation would be buggy to move the \
							terms marked with unique tag because all lvalues \
							are evaluated to be unique in %EvaluateIdentifier, \
							which is also different to the host language.
					/ DLDI "simplified function %DefineWithRecursion"
						^ $dep_from ("%Environment::Bind" @ %NPLA),
					/ "missing reference collapse" @ "decapsulation applicative"
						@ "function %MakeEncapsulationType" $since b855,
					/ DD "reference funnction name" @ "Doxygen comment"
						@ "function %IsSymbol" -> 'string-symbol?' ~ 'symbol?',
						// To conform to the convention of predicates to types.
					(
					+ "function %ThrowValueCategoryErrorForFirstArgument";
					/ "exception message" ^ 'a reference' ~ 'an lvalue'
						@ "functions %(SetFirst, SetFirstRef, SetRest, \
						SetRestRef, CheckListLValue)"
						^ "%ThrowValueCategoryErrorForFirstArgument";
					/ "function %CheckListLValue" => "%CheckListReference"
					)
				)
			),
			/ %Dependency $=
			(
				/ "function %LoadGroundContext" $=
				(
					* "applicative '<-'" @ "function %LoadGroundContext"
						$since b856
						$= (/ $impl ^ "%TermReference::IsUnique"
							~ "%TermReference::IsModifiable"),
					* DLI "redundant native operative '$vau%' used"
						@ "alternatives for primitives" @ $since b837,
						// This means alternative '$vau%' is wrongly overriden \
							and not used at all.
					* "missing introducing '$defv!' before"
						@ "alternative derivation" @ "applicative 'first@'"
						$orig (@ "applicative 'set-first!'" $since b855),
						// In some configurations where '$defv!' is not \
							native, it would fail.
					* "applicative 'first%' failed to move out \
						lvalue reference components" $since b828
						!^ "applicative %forward",
					/ "split operatives ('$let', '$let/d', \
						'$let/e', '$let*', '$letrec')" $dep_to
						"split forwarding binding operatives"
						// See $2019-04 @ %Documentation::Workflow.
					(
						+ "operatives with '%' postfix and old implementations",
						/ "kept old operatives without '%' postfix in the \
							inner call";
						- $impl "'forward' before %body"
					),
					+ $lib "native derivation" @ "operative '$quote' and \
						enabled by default",
					* $comp "wrong result of applicative 'lvalue?' for named \
						lvalue references" $since b828 $dep_from
						"fixed lvalue resolution",
					/ @ "applicative 'forward'" $=
					(
						+ "native derivation" ^ $dep_from
							("%LiftRValueToReturn" @ %NPLA),
							// See $2019-04 @ \
								%Documentation::Workflow.
						/ DLI "original derivation" ^ "%unwrap" ~ '$quote'
					),
					+ "applicatives (%(box, unbox), 'box?')" $dep_from
						("%MakeEncapsulationType" @ %NPLA1),
					(
					/ "applicative '<-%'" => '<-@';
						// This is consistent to 'first@'. Only these \
							functions can return references to reference.
					(
					+ $forced "applicative <-%" ^ $dep_from
						("%Collapse" @ %NPLA);

				//	* $comp "missing collapse" @ "alternative derivation"
						@ "applicative 'set-first%!'" $since b;

					* "possible cyclic reference move self or subterm"
						@ "applicatives ('<-', '<-%')" $since b856
						^ $dep_from ("%LiftTerm#1" @ %NPLA)
					),
					/ DLDI "simplified alternative derivation"
						@ "applicative 'set-first!'" ^ $dep_from '<-@' ~ '<-%'
					),
					/ $forced ("applicative 'check-list-lvalue'"
						-> 'check-list-reference', "exception message of \
						native implementations of applicatives ('<-', '<-%')")
						$dep_from ("%CheckListLValue" @ %NPLA1)
						^ ("%ThrowValueCategoryErrorForFirstArgument" @ %NPLA1)
						// The exception message is kept same here.
				)
			),
			/ DLDI "derivation of applicative %force"
				@ "function %LoadModule_std_promises" ^ $dep_from '<-@' ~ '<-%'
		)
	)
),

b856
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				/ @ "class %Environment" $=
				(
					/ $revert_ex(b847) ("function %Anchor"
						-> "function %GetAnchorPtr") $dep_from
						"avoided Environment::Anchor";
						// This makes it same to %TermReference. The new \
							function returns anchor pointer but unlike \
							%Anchor, it does not modify the underlying \
							reference count.
					(
					+ "macro %NPL_NPLA_CheckEnvironmentReferenceCount";
					/ "internal anchor interface to make the value store the \
						secondary reference count" \
						@ 'NPL_NPLA_CheckEnvironmentReferenceCount' $dep_to
						"secondary reference count",
					+ "destructor" $dep_from "%EnvironmentReference" $=
						(+ $lib "optional anchor count check and diagnostics"
							@ 'NPL_NPLA_CheckEnvironmentReferenceCount'
							^ "%YSLib::FilterExceptions")
							// See $2019-03 @ \
								%Documentation::Workflow.
					)
				),
				/ $forced DLDI ("function %Collapse#2", "constructor \
					%EnvironmentReference#2") ^ $dep_from \
					"%Environment::GetAnchorPtr" ~ "%Environment::Anchor",
				/ "stored secondary reference count"
					@ "class EnvironmentReference" $dep_from
					"secondary reference count" $=
				(
					+ "move constructor",
					+ "destructor",
					/ $impl "constructors"
				),
				(
				+ "enumerator %Regular" @ "enum class %ReductionStatus";
				/ "simplified function %ReduceForLiftedResult"
					^ "%ReductionStatus::Regular" ~ "%CheckNorm"
				),
				+ "function templates %(ComposeSwitchedUnchecked; \
					ComposeSwitched)",
				/ @ "class %TermReference" $=
				(
					+ "enum %Tags";
					(
					/ ("all %bool parameter" -> "%Tags parameter")
						@ "constructors";
					/ $forced "function %TermReferenced and internal state"
						^ "%Tags"
					),
					+ "predicates %(IsModifiable, IsUnique)"
				),
				/ @ "function %LiftToReference" $=
				(
					/ $forced "lifted reference value" $dep_from
						"constructor %TermReference" ^ $dep_from
						"%TermReference::Unqualified";
					* $comp "wrong non-lvalue reference used" $since b855
				)
			),
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					* "missing lvalue-to-rvalue conversion for the operand"
						@ "function %ValueOf" $since b855 ^ "%ReferenceTerm",
					/ "simplified function %CheckListLValue" ^ $dep_from
						("%ReductionStatus::Regular" @ %NPLA) ~ "%CheckNorm",
					* "missing current action null value check"
						@ "thunked implementation" @ "functions %(And, Or, If, \
						DefineWithRecursion)" $since b817
						$= (/ "simplified" ^ $dep_from
							("%ComposeSwitched" @ %NPLA)),
					+ "anchor parameters" @ "function %MatchParameter",
					/ @ "function %BindParameter" $=
					(
						(
						/ $forced "calling %MatchParameter with anchors"
							$ep_from "%BindParameter";
							// Anchors are still needed for TCO although they \
								interfere \
								%NPL_NPLA_CheckEnvironmentReferenceCount. See \
								$2019-03 @ %Documentation::Workflow.
						* "anchors wrongly moved for multiple references" $since
							b855 !^ "%Environment::Anchor"
							$dep_to "avoided Environment::Anchor",
							// This would cause only the 1st occurence is valid.
						) $dep_to "encapsulation anchor fix",
						/ DLI "avoided anchor access for symbols known to bind",
						/ $forced DLDI $dep_from
							("constructor %TermReference" @ %NPLA),
						+ "support of sigil '@'" ^ $dep_from
							("TermReference::(Nonmodifying, Unqualified)"
							@ %NPLA)
					),
					* "decapsulated prvalue wrongly collected by TCO"
						@ "function %MakeEncapsulationType" $since b855
						$dep_to "encapsulation anchor fix"
				),
				* "term references referred out of environment lifetime \
					due to TCO action cleanup order" $since b820
				* "term references referred out of environment lifetime \
					due to TCO components cleanup order in the same frame"
					$since b820,
					// The bug fixes of TCO action also make the instruction \
						numbers decreased more than 1.5% on Linux x64 within a \
						small test run.
				/ "simplified" ("non-thunked implementation" @ "functions \
					%(ReduceChecked, ReduceChildrenOrdered#1)", "thunked \
					implementation" @ "function %ReduceOrdered") ^ $dep_from
					("%ReductionStatus::Regular" @ %NPLA) ~ "%CheckNorm",
				/ "simplified" ("function %ReduceCombined", "non-TCO thunked \
					implementation" @ "function %ReduceChecked") ^ $dep_from
					("%ComposeSwitched" @ %NPLA),
				* "missing current action null value check" @ ("non-TCO \
					thunked implementation" @ "function %ReduceAgain" $since
					b819, "thunked implementation" @ ("function %ReduceOrdered"
					$since b813, "member function \
					%StrictContextHandler::operator()" $since b841))
					$= (/ "simplified" ^ $dep_from
						("%ComposeSwitched" @ %NPLA) ~ "%ComposeActions"),
				* $revert_ex(b841) $re_add(b842) "missing handling of \
					previous reduction status" @ "non-TCO thunked \
					implementation" @ "function %ReduceChecked" $since b841
					$= (/ $impl ^ "TCO implementation"),
					// The divergence of TCO and non-TCO implementations \
						since b842 was not intended. The old \
						implementation was actually same to %ReduceAgain \
						except the bug fixed above.
				/ DLI "simplified composing %ReduceChecked call"
					@ "thunked implementation" @ "action relaying"
					@ "functions (%Forms::'Eval*', vau handler %operator())",
				/ "thunked implementation" @ "function %ReduceChildren" $=
				(
					+ $lib "%Continuation construction of subterms",
						// To be consistent with other implemenations. \
							Continuations are not supported yet, though.
					/ "simplified" ^ ("%RelayNext",
						$dep_from ("%ComposeSwitched" @ %NPLA))
						~ "%RelaySwitched"
				),
				/ $forced DLDI "function %EvaluateIdentifier" $dep_from
					("constructor %TermReference" @ %NPLA)
			),
			/ "namespace %Forms" @ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					* "dangling reference returned"
						@ "derivation of applicative 'rest&'" $since b855
						$= (/ $impl ^ '$lambda' ~ '$lambda%'),
						// This would usually crash. It could occasionally \
							look normal because of TCO.
					* $comp "missing lvalue-to-rvalue conversion on the operand"
						@ "applicative 'value-of'" $since b855 $dep_from
						("%ValueOf" @ %NPLA1),
					/ "simplified applicatives %(deshare, id, idv, ref)"
						^ $dep_from ("%ReductionStatus::Regular" @ %NPLA)
						~ "%CheckNorm",
					/ DLDI "operative '$quote'" ^ '$defv' ~ ('$def!', '$vau'),
					+ "applicative 'check-environment'",
					/ DLDI "simplified alternative derivation"
						@ "applicative 'set-first!'" ^ "%move" ~ "%idv",
					(
					+ "applicative 'first@'",
					* "alternative derivations ('set-first!', 'set-first%!') \
						unexpectedly resolved destination reference term" $since
						b855 ^ 'first@' ~ 'first&'
					),
					(
					* "missing resolution of reference value of 2nd argument"
						@ "applicative '<-'" $since b855,
						// The naming convention needs it to do \
							lvalue-to-rvalue conversion.
					+ "applicative '<-%'";
					/ $forced DLDI "alternative derivation"
						@ "applicative 'set-first%!'" ^ '<-%' ~ '<-',
					)
				),
				/ DLDI "applicative 'regex-match?'"
					@ "function %LoadModule_std_strings"
					^ "%ReductionStatus::Clean" ~ "%TermNode::ClearTo",
				+ "function %LoadModule_std_promises" $dep_all_from
					"encapsulation anchor fix" $=
				(
					+ "applicatives ('promise?', %memoize)",
					+ "applicative %force" ^ $dep_from
						("applicatives ('<-', '<-%')"
						@ "function %LoadGroundContext")
					+ "operative '$lazy'",
					+ "operative '$lazy/e'" ^ $dep_from
						('check-environment' @ "%LoadGroundContext")
				)
			),
			/ DLDI "renamed internal conditional inclusion macros"
				@ %(NPLA1, Dependency),
				// 'YF_' prefix is changed to 'NPL_', which is already in \
					%Documentation::Definitions.
			/ @ "class %TermNode" @ %SContext $=
			(
				- "all 2 functions %ClearTo"
					$dep_from ("%Forms::LoadModule_std_strings" @ %Dependency),
				* $comp "wrong exception specification" @ "function %ClearTo#1"
					$since b776
			)
		),
		/ @ "class %ValueNode" @ %YSLib.Core.ValueNode $=
		(
			- $revert_ex(b776) "all 2 functions %ClearTo";
			* $comp "wrong exception specification" @ "function %ClearTo#1"
				$since b776
		)
	),
	* $comp "stage 1 build failure" $since b855 $dep_from ('value-of'
		@ "function %Forms::LoadGroundContext" @ %NPL.Dependency)
),

b855
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				(
				(
				- $revert(b822) "function %LiftSubtermsToSelfSafe";
				- $revert(b821) "function %LiftToSelfSafe"
				),
				(
				- $revert(b800) "function %LiftToOther" $dep_from
					("%Forms::ValueOf" @ %NPLA1);
				* $comp DD "function %LiftToOther" $mismatch $since b803
				);
				- $revert(b800) "function %LiftToSelf" $dep_all_from
					"avoiding LiftToSelf"
				),
				(
				(
				/ "avoided handling indirect values other than references"
					@ "function %LiftToReturn"
					// The old behavior is preserved in the applicative \
						%deshare.
					$= (/ "copy reference target" ^ "%ValueObject::MakeCopy"
						~ "%(LiftTermRefToSelf, LiftTermRefToSelf)");
				- $revert(b828) "function %LiftTermRefToSelf" $dep_from
					("applicative %deshare"
					@ "function %A1::Forms::LoadGroundContext" @ %Dependency)
				),
				* "missing support of list term" @ "function %LiftToReference"
					$since b800 ^ "%TermReference" ~ "%LiftTermOnRef";
					// This is still unsafe if the operand is not a reference \
						value, because the anchor is not referenced.
				- $revert(b828) "function %LiftTermOnRef" $dep_from
					"%LiftToReference"
				),
				(
				+ "%bool parameter to specify reference mark explicitly"
					@ "function %ThrowListTypeErrorForInvalidType"
					~ "%IsReferenceTerm",
					// This makes it more efficient by avoiding %ReferenceTerm \
						at caller sites, although call sites like \
						%AccessRegularValue were not with it (and being not \
						correct, see below).
				* $forced "wrong $ListTypeError exception message string for \
					wrong lvalues" @ "all 2 function template \
					%AccessRegularValue" ^ "%NPL::IsReferenceTerm" $since b840
				),
				(
				+ "alias %ResolveTermHandler";
				+ "function %ResolveToTermReferencePtr";
				/ "supported optional arguments in handlers" @ "%ResolveTerm"
					^ "%(ystdex::make_expanded, std::ref, ResolveTermHandler, \
					NPL::ResolveToTermReferencePtr)" $dep_to
					"resolved term reference pointer argument"
				),
				/ "merged 2 function templates %(ResolveTerm, ResolveLeaf)"
					^ "universal reference of term class",
				+ "function %ReduceForLiftedResult",
				- $revert(b841) "function %ReduceForClosureResult" $dep_from
					"simplified term regularization",
					// The order of calls in %ReduceForClosureResult is \
						correct but it is only suited for TCO implementation \
						and the calls are not for the same reduction. To avoid \
						confusion, this is now implemented internally in NPLA1.
				/ DLDI "variable names" @ "function %RegularizeTerm",
				(
					+ "function template %CheckRegular";
					+ "function template %AccessRegular;
					/ "all 2 function templates %AccessRegularValue"
						-> "function template %ResolveRegular"
						^ "%AccessRegular"
				),
				+ "defaulted default (move constructor, move %operator=)"
					@ "class %TermReference" ^ "%DefDeCopyMoveCtorAssignment"
					// Since there is an anchor object, it is sensible to move.
			),
			/ %NPLA1 $=
			(
				(
				+ "function template %CallRawUnary";
				/ DLDI "function template %CallUnary" ^ "%Forms::CallRawUnary",
				(
				+ "function template %CallResolvedUnary";
				+ "function template %CallRegularUnaryAs" $dep_from
					"resolved term reference pointer argument"
				)
				),
				/ "namespace %Forms" @ %NPLA1 $=
				(
					/ @ "function %DefineWithRecursion" $=
					(
						/ DLI "avoided redundant restoring for bound variable \
							without more than 1 shared reference",
						/ "handling of default object" $dep_from
							("%PointerHolder::type" @ %YSLib.Core.YObject),
						- DLDI "redundant thunk creation",
						(
						// See $2019-03 @ %Documentation::Workflow.
						/ "made default object as strong references to thunks \
							with environment resolution",
							// This can avoid invalidation as well as cyclic \
								references involving default objects.
						* "invalidation of bound variables caused by directly \
							overriden bound variable" $since b780;
						/ "avoided change of bound object in the \
							environment in restoring the default objects" $=
						(
							/ "restored thunk accessing environment"
								$dep_to "delayed environment access",
							+ "throwing %InvalidReference for expired \
								environment",
							+ "throwing %BadIdentifier on access failure"
						)
						),
						* "ill-formed thunk construction" @ "direct style code"
							$since b854
					),
					/ @ "function %MatchParameters" $=
					(
						(
						/ "supported access of referent of %TermReference as \
							symbols" $dep_to "ptree reference support";
						/ DLDI "simplified leaf accesses"
							^ "%ValueObject::GetObject" ~ "%NPL::TryAccessTerm"
						),
						* DD "exception name" @ "'\exception' command"
							@ "Doxygen comment" $since b780 $=
							(/ DD 'bad_function' -> 'bad_function_call')
					),
					- $revert(b800) DLI "call of %LiftToSelf before parameter \
						tree binding" @ ("function %Forms(DefineLazy, \
						DefineWithNoRecursion, DefineWithRecursion, Lambda, \
						LambdaRef, Vau, VauRef, VauWithEnvironment, \
						VauWithEnvironmentRef)") $dep_to "avoiding LiftToSelf",
					/ @ "function %BindParameter" $=
					(
						* DD "operand lifting" $mismatch
							$since b803 $dep_to "avoiding LiftToSelf",
							// Since b803, %LiftTermOnRef is called instead of \
								%LiftToSelf. Since b822, %LiftToSelf is called \
								only for by value passing. Since b828, lifting \
								is moved out of matching and lifting functions \
								are not called any more.
						/ DLI "optimized anchor by avoiding copying",
						* "lists in lvalues bound to sigil '&' as copied \
							rvalues" $since b829 $dep_to
							"list rvalue binding fix"
							// It is actually safe to be bound as lvalues when \
								%copy is set for it or one of its ancestor.
					),
					* DD "operator names" $mismatch(Documentation.NPL)
						@ ("functions %(LambdaRef, VauRef, \
						VauWithEnvironmentRef)" $since b828,
						@ "function %VauWithEnvironment" $since b839),
					/ "function %ValueOf" ^ "%LiftTerm" ~ "%LiftToOther",
					/ "simplified functions %(Eval, EvalRef, EvalString, \
						EvalStringRef, MatchParameter)" ^ "%ResolveTerm"
						~ "%NPL::TryAccessTerm",
					* "wrong $ListTypeError exception message string for wrong \
						referenced lvalues" @ "functions %(Cons, ConsRef)"
						$since b840,
						// Referenced type instead of %TermReference is \
							expected.
					/ DLI "removed redundant term regularization"
						@ "thunked code" @ "functions %(Eval, Lambda, Vau, \
						VauWithEnvironment)" ^ $dep_from
						("%ReduceForLiftedResult" @ %NPLA) $dep_to
						"simplified term regularization",
						// The inner regulation in the TCO action is \
							redundant. It would be also redundant elsewhere \
							except in the implementation %ReduceCombined (or \
							at the end of the TCO action).
					* "invalid access in decapsulating prvalues" @ "function \
						%MakeEncapsulationType" $since b834 ^ $dep_from
						"%Forms::CallRegularUnaryAs",
					* "typo" @ "exception message" @ "%ValueCategoryMismatch \
						exception thrown" @ "functions %(SetFirst, \
						SetFirstRef, SetRest, SetRestRef)" $since b834,
					/ DLDI "reordered function declarations",
					(
					+ "function %CheckListReference";
					/ DLDI "shared error check with %CheckListReference"
						@ "functions %(SetFirst, SetFirstRef, SetRest, \
						SetRestRef)"
					)
				)
			),
			/ "namespace %A1::Forms" @ %Dependency $=
			(
				* "too large value of integer literal handled as invalid suffix"
					@ "integer literal handling" $orig (@ "function \
					%LoadNPLContextForSHBuild" $since b770),
				/ @ "function %LoadGroundContext" $=
				(
					/ DLDI "derivation of operatives ('$provide!', \
						'$provide/d!')" @ "function %LoadGroundContext",
					/ DLDI "applicative %deshare"
						@ %Dependency ^ "%LiftTermRef" ~ "%LiftTermRefToSelf",
					/ DLDI "simplified applicative %move" ^ $dep_from
						("%ReduceForLiftedResult" @ %NPLA),
					/ DLDI "loaded applicative ('make-encapsulation-type', \
						'ref', 'deshare') earlier",
						// These are the primitive operation, so let it loaded \
							together with other primitives.
					* $comp "invalid references to temporary objects"
						@ "applicatives ('first&', 'rest&')" $since b829
						$dep_from "list rvalue binding fix",
						// This also includes cases of undefined behavior like \
							nested 'first&' calls on nested list \
							lvalues.
					+ "applicative '<-'",
					(
					+ "applicative 'check-list-reference'" ^ $dep_from
						("%CheckListReference" @ %NPLA);
					+ "check to exclude undefined behavior on rvalue argument"
						@ "derivation" @ "applicatives ('first&', 'rest&')"
						^ 'check-list-reference'
					),
					+ "alternative derivations"
						@ "applicatives ('set-first!', 'set-first%!')"
						^ $dep_from ('<-', 'first&', 'check-list-reference')
						// Relying on 'check-list-reference' is necessary for \
							cases where the 1st argument is a list prvalue \
							(e.g. from expressions like 'rest& x').
				)
			),
			/ DLDI "all 'YSLib::Deref'" -> 'NPL::Deref' $effective @ %NPLA1
		),
		/ DLDI "simplified function %Equals" @ "class template %PointerHolder"
			@ %YSLib.Core.YObject
			// Also to eliminate Clang++ warning: [-Wpointer-bool-conversion].
	),
	* ("return references for applicatives ('first%', 'first&', '%rest', \
		'%rest&')") @ %Documentation.NPL $since b828
),

b854
(
	/ %YBase.YStandardEx $=
	(
		/ %Any $=
		(
			/ @ "namespace %any_ops" $=
			(
				/ @ "function template %pointer_holder" $=
				(
					+ "assertion to ensure pointer has nonnull value"
						@ "constructor";
					+ $dev $lib 'YB_ATTR_returns_nonnull' @ "function %get"
				);
				/ $doc "%base_op::get_ptr guaranteed result as non-void \
					pointers",
				+ $dev $lib 'YB_ATTR_returns_nonnull' @ "function %get"
					@ "class %holder"
			),
			/ @ "class %any" $=
			(
				* "ill-formed result" @ "function templates %emplace"
					$since b848,
				+ $dev $lib 'YB_ATTR_returns_nonnull'
					@ "function %unchecked_get" $dep_from "%any_ops",
				+ DLDI 'ynothrow' @ "internal getter",
				(
				* DD "wrong Doxygen group %YBase_replacement_features for \
					%taget" $since b847
					$= (/ DD ^ "%YBase_replacement_extensions"
						~ "%YBase_replacement_features");
				/ "all 2 %target" => "%try_get_object_ptr" $dep_from
					"function templates %ystdex::any_cast with reference \
					parameter"
				),
				+ "2 function templates %get_object_ptr"
			),
			+ $dev $lib 'YB_ATTR_returns_nonnull' @ "function templates \
				%unchecked_any_cast" $dep_from "%any::unchecked_get",
			/ "function templates %any_cast with reference parameter supported \
				throwing from holders"
				^ $dep_from "%any::try_get_object_ptr" ~ "%any::target",
			/ $forced DLDI "function templates %any_cast with pointer parameter"
				^ $dep_from "%any::try_get_object_ptr" $dep_from "%any::target"
		),
		/ $forced DLDI "function templates %target"
			@ "class template %function_base" @ %Function ^ $dep_from
			("%any::try_get_object_ptr" @ %Any) $dep_from "%any::target",
		/ @ "class template %any_iterator" @ %AnyIterator $=
		(
			+ 'using any::get_object_ptr;' $dep_from
				("%any::get_object_ptr" @ %Any)
			/ $forced 'using any::target;' -> 'using any::try_get_object_ptr;'
				^ $dep_from ("%any::try_get_object_ptr" @ Any) ~ "%any::target"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core.YObject $=
			(
				/ @ "function %get"
					@ "class templates %(ValueHolder, AllocatorHolder)" $=
				(
					+ $dev $lib 'YB_ATTR_returns_nonnull',
					+ 'ynothrow'
				),
				+ "2 function templates %IsNullPointer",
				/ @ "class template %PointerHolder" $=
				(
					/ "function %type" ^ $dep_from "%YSLib::IsNullPointer"
						~ "%traits_type::is_owner",
						// See $2019-03 @ %Documentation::Workflow.
					/ @ "function %get" $=
					(
						+ $dev $lib 'YB_ATTR_returns_nonnull',
						+ "assertion to ensure nonnull return value"
					)
				)
			),
			/ @ "member function %Menu::TryShowingSub" @ %UI.Menu $=
			(
				+ "return value of %bool representing operation performed";
				* $comp $dev "missing conventional return value"
					$mismatch(Documentation.CommonRules) $since b846
					// A function named 'Try*' shall return a value.
			)
		),
		/ %NPL $=
		(
			* "wrong 'ynothrow'" @ "all 2 function templates %Access with \
				%TermNode parameter" @ %SContext $since b852,
			/ %NPLA $=
			(
				/ @ "all 2 functions %ReferenceTerm" $=
				(
					+ 'ynothrow',
					/ DLDI "simplified"
						^ ("%ystdex::invoke_value_or", "%TermReference::get")
						~ ("%ystdex::call_value_or", "lambda-expression")
				),
				/ @ "function template %operator()" @ "struct %ReferenceTermOp"
					$=
				(
					+ 'ynothrow' $dep_from "%ReferenceTerm",
					* "missing qualified with 'NPL::' at the call \
						of %ReferenceTerm" $since b801
				),
				(
				+ "2 functions %TryAccessLeaf";
				(
				/ @ "all 2 function templates %AccessTermPtr"
					-> "%TryAccessTerm" ^ "%TryAccessLeaf" $=
				(
					- "call of %ReferenceTerm",
						// This now requires external check.
					(
					- 'ynothrow';
					* $comp $lib "wrong 'ynothrow'" $since b800,
						// Call of %ReferenceTerm also did not provide \
							guarantee at interface level previously.
					/ "made exception neutral to exceptions thrown by value \
						holders" ^ "%(YSLib::Access, std::addressof, \
						NPL::make_observer)" ~ "%YSLib::AccessPtr"
						$dep_from %SContext
					),
					+ $re_add(b840) "%IsList check"
						// They are now checked like the old %AccessTerm \
							overloads but without \
							%ThrowListTypeErrorForInvalidType call.
				);
				+ "2 function templates %TryAccessReferencedLeaf"
					^ "%(TryAccessTerm, ReferenceTerm)",
				/ "enhanced handling to corruptied values and non-leaf values"
					@ "function %TermToNamePtr"
					^ "%NPL::TryAccessTerm" ~ "%NPL::AccessPtr"
					$dep_to "enhanced handling to corruptied values",
				+ "2 function templates %ResolveLeaf" ^ "%NPL::TryAccessLeaf"
				),
				/ ("enhanced handling to corruptied values and supported to \
					check list term" @ ("all 2 function templates %ResolveTerm";
					$comp "function %ResolveEnvironment#2"),
					"enhanced handling to corruptied values and limited \
					reference handling to the regularized form"
					@ ("all 2 functions %(Collapse, ReferenceTerm)",
					("function %LiftTermOnRef"; $comp "functions \
					%(LiftToReference, (LiftTermRefToSelf; LiftToReturn, \
					LiftToSelf, LiftToOther))"))) ^ "%NPL::TryAccessTerm"
					~ "%NPL::AccessPtr" $dep_to
					"enhanced handling to corruptied values",
				),
				/ $dev "split constructor with %bool and %TermReference \
					parameter" -> "2 constructors with 2nd parameter as \
					'const TermReference&' and 'TermReference&&'",
					// To decrease cost of reference count of the anchor \
						pointer as possible.
				/ DLDI "simplified function %IsLValueTerm"
					^ "%ystdex::invoke_value_or"
					~ ("%ystdex::call_value_or", "%std::mem_fn"),
				/ "all 2 function templates %AccessTerm"
					=> "%AccessRegularValue",
				(
				+ "function %HasReferenceValue";
					// This is same to the old %IsReferenceTerm. It is usually \
						not to be directly bound as a primitive in the object \
						language.
				/ "constructors %TermReference#(1, 2)" ^ "%HasReferenceValue"
					~ "%IsReferenceTerm"
				),
				+ "function %(IsLValueLeaf, IsReferenceLeaf)",
				/ "enhanced handling to corruptied values"
					@ ("function %IsLValueTerm", "function %IsReferenceTerm"
					$dep_from "constructors %TermReference")
					$dep_to "enhanced handling to corruptied values" $=
				(
					- 'ynothrow';
					/ $impl ^ "%"
				),
				/ $comp "enhanced handling to corruptied values"
					@ "function %ThrowListTypeErrorForInvalidType"
					$dep_from "%IsReferenceTerm" $dep_to
					"enhanced handling to corruptied values",
				/ @ "class %ContextNode" $=
				(
					/ "reordered data members %Current and %Delimited",
						// Delimited actions should live longer.
					(
					/ "friend function %swap swapped %(Delimited, Current, \
						LastStatus)";
					/ $comp "move constructor moved all data members"
					)
				)
			),
			/ %NPLA1 $=
			(
				* "missing cleanup if the result term is not lifted" @ "TCO"
					@ "functions %(ReduceCombined, Forms::(Eval, EvalRef))"
					$orig (@ "function %ReduceCheckedClosure" $since b821),
				/ DLI "reduced unnecessary operation of iterators"
					@ "admistrative handling with thunked code",
				(
				* "missing insulation of last reduction status before 1st \
					administrative action" $since b842 $=
					(/ "insulated by %ReductionStatus::Partial");
					// This is necessary to make full evaluations immune from \
						%ReductionStatus::Retrying.
				* "missing skipping next administrative actions for nested \
					asynchronous by returning %ReductionStatus::Retrying"
					@ "TCO Action for function %ReduceAgain" $since b841;
					// After the removal of \
						%ContextNode::SkipToNextEvaluation, this would wrongly \
						return %ReductionStatus::Clean, although it would not \
						make obvious differences in results.
				* $comp "reduction status wrongly overwritten to \
					%ReductionStatus::Clean unconditionally at end of TCO \
					action when call %ReduceAgain" $since b820
				),
				/ DLDI "simplified guard update" @ "TCO",
				/ @ "namespace %Forms" $=
				(
					/ DLDI "simplified inner function"
						@ "functions %(SetRest, SetRestRef)"
						^ $dep_from ("%ResolveLeaf" @ %NPLA) ~ "%ResolveTerm",
					/ "enhanced handling to corruptied values" @ "functions \
						%(DefineWithRecursion, MatchParameter)" ^ $dep_from
						("%NPL::TryAccessLeaf" @ %NPLA) ~ "%NPL::AccessPtr"
						$dep_to "enhanced handling to corruptied values"
				),
				(
				/ $forced "enhanced handling to corruptied values"
					@ "%functions %(Forms::(And, If, MakeEncapsulationType, \
					Or), ReduceCombined)"
					^ $dep_from ("%NPL::TryAccessReferencedLeaf" @ %NPLA)
					$dep_from ("%NPL::AccessTermPtr" @ %NPLA) $dep_to
					"enhanced handling to corruptied values";
				/ $comp "avoided redundant call to %ReferenceTerm"
					@ "functions %Forms(And, If, Or)"
				),
				/ $forced "enhanced handling to corruptied values"
					@ "%function %EvaluateIdentifier"
					^ $dep_from ("%NPL::TryAccessTerm" @ %NPLA)
					$dep_from ("%NPL::AccessTermPtr" @ %NPLA) $dep_to
					"enhanced handling to corruptied values",
				/ @ "function %ReduceCombined" $=
				(
					(
					/ "filtered out non-leaf nodes at first" ^ "%IsLeaf";
					/ DLDI "improved rvalue access" ^ $dep_from
						("%NPL::TryAccessLeaf" @ %NPLA) ~ "%NPL::AccessPtr"
					),
					/ DLDI "simplified throwing"
						^ $dep_from ("%ResolveLeaf" @ %NPLA) ~ "%ResolveTerm"
				),
				/ "enhanced handling to corruptied values" @ "functions \
					%(Forms::(Eval, EvalRef, SetFirst, SetFirstRef, \
					BindParameter, MatchParameter, ValueOf), EvaluateDelayed#1)"
					^ $dep_from ("%NPL::TryAccessTerm" @ %NPLA)
					~ "%NPL::AccessPtr" $dep_to
					"enhanced handling to corruptied values",
				(
				/ "exception filtering" @ "member function \
					%FormContextHandler::operator()"
					-> "static member function %REPLContext::ReduceAndFilter",
				/ "all %Reduce call except in %REPLContext::ReduceAndFilter"
					@ "class %REPLContext" -> "%ReduceAndFilter calls";
				/ $comp "avoided %FormContextHandler filter difference \
					exceptions to code within other contexts",
					// For example, when %ReduceCombined meets a %bad_weak_ptr \
						exception thrown, it now will not terminate in the \
						REPL once %LoggedEvent is handled properly.
				* $comp "exception filtering in function application did not \
					fully supported to work with thunked asynchronous actions"
					$since b809
					// Although the external work is still to be done \
						elsewhere, the inner reduction should now be consistent.
				)
			),
			/ %Dependency $=
			(
				/ @ "function %LoadGroundContext" $=
				(
					/ @ "derivation of applicative 'copy-environment'"
					(
						* "environment object in bindings directly copied as \
							%Environment objects" $orig (@
							"function %LoadNPLContextForSHBuild" $since b794),
						/ DLI "improved copy bindings without create an \
							%Environment object unconditionally"
							^ "%NPL::AllocateEnvironment"
					),
					+ "applicative 'deshare'",
					/ DLDI "simplified native applicatives %(id, idv)"
				),
				/ $forced "enhanced handling to corruptied values"
					@ "derivation of applicative 'bound?'"
					@ "function %LoadModule_std_environments"
					^ $dep_from ("%TryAccessReferencedLeaf" @ %NPLA)
					$dep_from ("%NPL::AccessTermPtr" @ %NPLA),
				/ $comp "derivation of various functions supported corruptied \
					values detection" ($dep_all_from "enhanced handling to \
					corruptied values", $dep_from ("%any::any_cast"
					@ %YBase.YStandardEx.Any, "%PointerHolder"
					@ %YSLib.Core.YObject))
			)
		)
	)
),

b853
(
	/ %YBase.YStandardEx $=
	(
		/ %Meta $=
		(
			/ $revert_ex(b351) "unary type traits %(is_pod_struct, \
				is_pod_union)" @ %Meta -> ("unary type traits \
				%(is_trivial_class, is_trivial_class_type, is_trivial_union")
				^ "%is_trivial" ~ "%is_pod";
			/ DLDI "simplified" ^ "%nor_" ~ "%(not_, or_)"
				@ "unary type trait %is_returnable"
		),
		- $revert(b254) 'using std::is_pod;' @ %TypeInspection $dep_from
			("%(is_pod_struct, is_pod_union)" @ %Meta),
			// To avoid use of deprecated feature, see WG21 P0767R1.
		/ DLI "removed redundant 'const' for %ystdex::type_id" $effective
			@ "function templates %(unchecked_any_cast, unsafe_any_cast)"
			@ %Any,
		/ %Any $=
		(
			* $re_add(b852) DD "wrong Doxygen command '\build' used" ~ '\brief'
				@ "%(any_trivial_local_data, any_local_data)" $since b848,
			/ DLDI "removed redundant internal copy and move constructors"
				@ "non-local stored thunk value"
				@ "class template %value_handler",
			- 'ynothrowv' @ "all 2 function templates %unchecked_any_cast"
				$dep_from ("%ValueObject::GetObject" @ %YSLib.Core.YObject),
			- 'ynothrowv' @ "all 2 function templates %unsafe_any_cast",
			/ @ "class %any" $=
			(
				/ DLDI "function templates %target" !^ "%get";
				- 'ynothrow' @ "%get" $dep_from "%unsafe_any_cast";
				(
				* $comp "terminated on %get when holder throws" $since b352,
				(
				- 'ynothrowv' @ "%unchecked_get" $dep_from
					"%unchecked_any_cast";
				* $comp "terminated on %unchecked_get when holder throws" $since
					b677
				)
				)
			)
		)
	),
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			/ %ValueNode $=
			(
				+ "function %GetNodeRef" @ "class %NodeLiteral",
					// To avoid ambiguity in user code accepting both \
						'const ValueNode&' and 'ValueNode&&' (e.g. in \
						copy-initialization of %ValueNode), the conversion \
						function is not extended with different ref-qualifiers.
				- "all 2 function templates %AsIndexNode" $dep_all_from
					"avoided AsIndexNode for term node",
				- $revert(b790) "functions %GetLastIndexOf" $dep_from
					"avoided GetLastIndexOf",
				/ DLDI "simplified function %GetValueOf"
					^ "%ystdex::invoke_value_or"
					~ "%(ystdex::call_value_or, std::mem_fn)"
			),
			/ "function template %ClearSequence" @ %YCoreUtilities
				^ "%std::is_trivial" ~ "%std::is_pod",
				// To avoid use of deprecated feature, see WG21 P0767R1.
			/ %YObject $=
			(
				+ $re_add(b852) dev $lib 'YB_PURE' @ "function %type"
					@ "class template %RefHolder"
				* $re_add(b852) DD "wrong Doxygen command '\build' used"
					~ '\brief' @ "member functions \
					%ValueObject::(GetHolderPtr, GetHolderRef)" $since b752,
				/ @ "class %ValueObject" $=
				(
					/ DLDI "simplified special member functions"
						^ "%DefDeCopyMoveCtorAssignment"
						~ "%(DefCopyCtor, DefMoveCtor, DefDeCopyAssignment, \
						DefDeMoveAssignment)"
					- 'ynothrowv' @ "all 2 functions %GetObject"
				),
				(
				+ "2 function templates %GetRawPtrOf";
				/ "supported throwing for %weak_ptr instances" @ "static \
					function %get" @ "trait template %PointerHolderTraits"
					^ "%YSLib::GetRawPtrOf" ~ "ADL %get_raw"
				)
			)
		),
		/ %NPL $=
		(
			/ %SContext $=
			(
				+ 'using YSLib::Deref;',
				+ "2 functions %GetNodeNameOf",
				/ @ "class %TermNode" $=
				(
					(
					/ DLDI "function %MoveContent" !^ "%ValueNode::MoveContent";
					- 'using ValueNode::MoveContent;',
					),
					(
					/ DLDI "function %Remove" !^ "%TermNode::Remove";
					- 'using ValueNode::Remove;'
					),
					- "function template %insert_or_assign";
					(
					/ "function template %insert forwarded to container";
						// Now it supports hint, until %Container is \
							changed to the implementation based on \
							%YSLib::list (see below).
					/ $lib "using declarations %(GetContainer, \
						GetContainerRef, GetName; operator(!, bool), \
						AddValueTo, Clear, ClearContainer, ClearTo, \
						SetContent, SwapContent, empty, get_allocator, size)"
						-> "functions" $dep_to "removal of using declarations",
					- "functions %operator[]"
					),
					(
					/ $impl "class %TermNode" !^ "base class %ValueNode"
						$dep_from ("qualified Deref", "%MapNPLALeafNode"
						@ %NPLA, "explicit initializers for TermNode",
						"explicit allocator type for TermNode",
						"%(TransformNode, Forms::BindParameter)"
						@ %NPLA1) $dep_to "removal of base ValueNode";
					/ $forced DLDI "constructors and various member functions",
					+ $comp "constructor with %NoContainerTag but no allocator",
					- $comp "functions %SetContainer with ValueNode parameters",
					- $comp "static function %CreateRecursively with \
						%IValueHolder::Creation parameter",
					- $comp "function %MoveContent with %ValueNode parameter",
					),
					(
					/ "return type" @ "function template %emplace"
						-> "%iterator" ~ "%pair<iterator, bool>",
					- "function template %emplace_hint" $dep_from
						"avoided TermNode::emplace_hint",
					/ "return type" @ ("all 2 functions", "all 2 function \
						templates %AddValueTo") -> "%void" ~ "%bool"
						$dep_from "removal of using declarations",
					/ "%(reverse_iterator, const_reverse_iterator)"
						!^ "%ystdex::reverse_iterator";
					/ "%Container" ^ "%list"
						~ "%(ystdex::(mapped_set, less), MappedSetTraits)"
						$dep_from "removal of base ValueNode";
					/ DLDI "simplified %allocator_type"
						^ "%Container::allocator_type"
						~ "%YSLib::pmr::polymorphic_allocator",
					/ $forced DLDI "various member functions",
					(
					- "key parameter" @ "function templates %AddValueTo"
						$dep_to "removal of term node key in AddValueTo",
					- "function templates %AddChildToTail" $dep_from
						"%NPL::AddChildToTail";
					- "string parameter" @ "all constructor templates",
						$dep_to "removal of term node key construction"
					),
					(
					(
					- "struct %MappedSetTraits" $dep_from
						("%Environment::BindingMap" @ %NPLA),
					- "comparison operators"
					);
					- "function %GetName" $dep_from
						("%(TraverseNodeChildAndPrint, TransformToSyntaxNode)"
						@ %NPLA, "avoided key index for term node construction \
						forms");
					/ DLI "avoided swap internal name"
						@ "friend function %swap";
					- DLI "internal name data member"
					)
					)
				),
				- "function template %AddChildToTail" $dep_from
					"avoided AddChildToTail",
				(
				- "function %AsTermNode with 1 %TermNode parameter",
				(
				/ "function %Reduce" ^ "%NPL::AsTermNode"
					~ "%NPL::AsIndexTermNode";
				- "all 2 function templates %AsIndexTermNode"
				);
				/ $forced DLI "all 2 function templates %AsTermNode"
					!^ "NPL::MakeIndex" $dep_from "removal of term node key \
					construction";
				- "string parameter" @ "all 2 function template %AsTermNode";
				* $forced "potentially index overflow" @ "function %Reduce"
					$since b335
				),
				+ 'using YSLib::Access',
				(
				+ 'using YSLib::AccessPtr';
				- DLDI 'using YSLib::AccessPtr;'
					@ "function template %TraverseSubnodes"
				)
			),
			/ %NPLA $=
			(
				/ DLDI "member function %BadIdentifier" ^ $dep_from
					("%NPL::Deref" @ %SContext) ~ "%YSLib::Deref",
				/ DLDI "functions %(LiftFirst, LiftLast, \
					Environment::operator[])" ^ $dep_from ("%NPL::Deref"
					@ %SContext) ~ "%Deref" $dep_to "qualified Deref",
				/ @ "class %Environment" $=
				(
					(
					/ DLI "%BindingMap" ^ "%(YSLib::map, string)"
						~ "%(ystdex::mapped_set, TermNode::MappedSetTraits)";
					/ $forced DLDI
						"functions %(operator[], Deduplicate, LookupName)"
					),
					/ DLDI "qualified call of %get_raw with 'YSLib::'"
						@ "static function %DefaultResolve",
					/ DLDI "function templates %AddValue" $dep_from
						"removal of term node key construction"
				),
				/ DLI @ "all 2 function templates %InsertSyntaxNode" $=
				(
					/ ^ "%emplace" ~ "%emplace_hint" $dep_from
						("%emplace" @ "%TermNode" @ %SContext)
						$dep_to "avoided TermNode::emplace_hint",
					/ !^ "index" $dep_from
						"removal of term node key construction"
				),
				/ "function template %TraverseNodeChildAndPrint" ^ $dep_from
					(("%NPL::GetNodeNameOf" ~ "%TermNode::GetName")
					@ %SContext),
				/ @ "function %TransformToSyntaxNode" $=
				(
					/ DLDI "explicitly constructed item" @ "initializer-list"
						^ "%TermNode" $dep_to
						"explicit initializers for TermNode",
					(
					/ "1st parameter" ^ 'ValueNode&&' ~ 'const TermNode&'
						$dep_to "1st parameter of syntax node transformation",
					/ $forced $impl ^ "%ParseNPLANodeString"
						~ "%ParseNPLATermString",
					/ DLI "optimized without %TermNode copies"
					),
					(
					- "last parameter";
					/ $forced DLDI "avoided use of %TermNode name"
						$dep_from "removal of term node key construction"
					),
					/ DLDI ^ "%NPL::AsTermNode" ~ "%AsIndexNode"
						$dep_from ("%TermNode::Container" @ %SContext)
						$dep_to "avoided AsIndexNode for term node"
				),
				+ "function %TransformToSyntaxNode overload for 'NodeLiteral&&'"
					$dep_from "1st parameter of syntax node transformation"
					^ $dep_from
					("%NodeLiteral::GetNodeRef" @ %YSLib.Core.ValueNode),
				/ $forced DLDI "function template %EmplaceLeaf#1" $dep_from
					"removal of term node key construction",
				/ $forced "simplified" @ "function template \
					%InsertChildSyntaxNode#3" $dep_from
					"1st parameter of syntax node transformation" $=
				(
					/ "2nd paraemter type 'const NodeLiteral&'"
						-> 'NodeLiteral&&';
					/ $revert(b852) $impl "simplified"
						!^ "explicit cast to %TermNode" ^ $dep_from
						("%NodeLiteral::GetNodeRef" @ %YSLib.Core.ValueNode)
				)
			),
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					/ DLI "function %MakeEncapsulationType"
						^ "allocator from term parameter",
					/ "function %BindParameter" $=
					(
						/ DLDI "simplified" ^ "%TermNode" ~ "%ValueNode",
						/ $forced DLDI ^ "%emplace_back" ~ "%emplace"
							$dep_from ("%TermNode::Container" @ %SContext),
						/ $forced DLDI !^ "key" $dep_from
							"removal of term node key construction"
					),
					/ "functions %(BindParameter, MakeEncapsulationType, Cons, \
						ConsRef, SetRest, SetRestRef)" !^ "index" $dep_from
						"removal of term node key construction" $dep_to
						"avoided key index for term node construction forms",
					/ DLDI "functions %(TransformForSeparator, \
						TransformForSeparatorRecursive)" $=
					(
						/ "qualified call of %AsTermNode with 'NPL::'",
						/ $forced $dep_from ("%NPL::AsTermNode" @ %SContext),
						/ $forced $dep_from
							"removal of term node key construction",
						/ DLDI ^ "%NPL::AsTermNode" ~ "%AsIndexNode"
							$dep_from ("%TermNode::Container" @ %SContext)
							$dep_to "avoided AsIndexNode for term node"
					),
					/ DLDI "functions %(Cons, ConsRef, SetRest, SetRestRef, \
						TransformForSeparator, TransformForSeparatorRecursive)"
						^ $dep_from ("%TermNode::Add" @ %SContext)
						~ "%NPL::AddChildToTail" $dep_from
						("%TermNode::Container" @ %SContext) $dep_to
						"avoided AddChildToTail",
					/ DLDI ^ "%TermNode::Container::splice"
						@ "functions %(Cons, ConsRef)" $dep_from
						("%TermNode::Container" @ %SContext)
						~ "%GetLastIndexOf" $dep_to
						"avoided GetLastIndexOf",
					/ DLI "optimized term move" @ "functions %(SetRest, \
						SetRestRef)" ^ "%TermNode::Container::splice",
					/ @ "function %DefindWithRecursion" $=
					(
						* "unexpected overwirtten of default value for \
							invalid handler after more than one symbol binding"
							$since b784,
						* "crash on referencing duplicated symbols in the \
							parameter tree during evaluation of expression"
							$since b780,
							// For example, '$defrec! (a a) list a a' would \
								crash, but '$defrec! (a a) list 1 1' would not.
						/ DLI "simplified by avoiding assignment to duplicate \
							symbols"
					)
				),
				/ DLDI ("function %SetupTraceDepth", "vau handler constructor")
					!^ "key" $dep_from "removal of term node key construction"
			),
			/ $forced DLDI "explicitly cast for allocator in constructing item"
				@ ("functions %(TransformToSyntaxNode, MapNPLALeafNode)"
				@ %NPLA, "function %(TransformNode, TransformForSeparator, \
				TransformForSeparatorRecursive)" @ %NPLA1)
				^ "%ValueNode::allocator_type" $dep_from "%TermNode::Container"
				$dep_to "explicit allocator type for TermNode",
			/ %Dependency $=
			(
				/ $forced DLDI "derivation of applicative 'copy-environment'"
					@ "function %LoadGroundContext" $dep_from
					("%Environment::BindingMap" @ %NPLA,
					"removal of term node key construction"),
				/ $forced DLDI "derivation of applicatives ('cmd-get-args', \
					'system-get')" @ "function %LoadModule_std_system" $dep_from
					"removal of term node key in AddValueTo"
			),
			/ DLDI ^ "%TNIter" ~ "%TermNode::iterator"
				$effective @ ("%(InsertSyntaxNode, InsertChildSyntaxNode)"
				@ %NPLA, "internal vau creation funcion" @ %NPLA1),
			/ DLDI "qualified call of %(Access, AccessPtr) with 'NPL::'"
				$dep_from ("%NPL::(Access, AccessPtr)" @ %SContext) $effective
				@ %(NPLA, NPLA1),
			/ DLDI "qualified call of %(AccessTerm, AccessTermPtr) with 'NPL::'"
				$effective @ %(NPLA, NPLA1, Dependency)
		)
	),
	/ $forced "call to %TransformToSyntaxNode" @ %Tools.ProjectGenerator.Main
		$dep_from "1st parameter of syntax node transformation"
		$= (/ $revert(b852) $impl "simplified" !^ "explicit cast to %TermNode"
			$dep_from ("%TransformToSyntaxNode#2" @ %YFramework.NPL.NPLA))
),

b852
(
	/ %YBase.YStandardEx $=
	(
		/ %Memory $=
		(
			* "ill-formed function template %allocate_shared#1"
				@ !('__cplusplus >= 201703L \
				|| (__GLIBCXX__ && !(__GLIBCXX__ <= 20111108))') $since
				b851,
			* DD "missing escaping tag" @ "Doxygen comments" $since b660
				// To eliminate Doxygen warning: Unsupported xml/html tag found.
		),
		/ %Concurrency $=
		(
			+ "workaround for Microsoft VC++ 2017 non-conforming \
				std::packaged_task"
				@ "function template %wait_to_enqueue" @ "class %thread_pool",
				// According to https://developercommunity.visualstudio.com/content/problem/108672/unable-to-move-stdpackaged-task-into-any-stl-conta.html, \
					Microsoft VC++ 2019 would not have the fix for ABI \
					compatibility. Thus the workaround is enabled for \
					compatibility with a near future of Microsoft VC++.
			/ DLDI "'std::forward<_tParams&&>' within variadic parameter \
				packs" -> 'std::forward<_tParams>' $effective
				@ "function template %wait_to_enqueue" @ "class %task_pool",
			/ $re_add(b851) $dev "all %std::function" -> "%function" $effective
				@ "constructors %(thread_pool, task_pool)",
			* DD "wrong Doxygen command '\build' used" ~ '\brief'
				@ "member function %task_pool::reset" $since b723
		),
		/ %Path $=
		(
			/ @ "class template %path" $=
			(
				/ DLI "check size first" @ "function %has_leaf_nonempty",
					// This is more predictable in efficiency, and (hopefully) \
						more efficient, as the %size call to the underlying \
						sequence container is usually guaranteed O(1) and it \
						should be usually cheap.
				* $revert_ex(b838) "empty paths cannot be overriden"
					@ "functions %operator/=#(1, 2)" $since b838
					// The buggy implementation would ignore the case when \
						self (rather than the parameter) is empty, so it would \
						never append the element to an empty path.
			),
			- $re_add(b851) DLDI "redundant '&&'"
				@ "'*_constructible' template arguments",
			+ DD '\ingroup customization traits' @ "Doxygen comment"
				@ "class template %path_traits",
			+ $dev $lib 'YB_PURE' @ "all static functions"
				@ "class template specialization %path_traits<void>",
			- DLDI "redundant 'public" @ "base class"
				@ "class template specialization %std::uses_allocator"
		)
	),
	/ %YFramework $=
	(
		/ "improved compatibility" @ "alias %ModuleProc"
			@ %YCLib_MinGW32.MinGW32 ^ '__stdcall',
			// This allows Microsoft VC++ which does not has extension for \
				'__stdcall' in %std::remove_reference.
		/ %YSLib.Core.ValueNode $=
		(
			+ "trait class MappedSetTraits" @ "class %ValueNode",
			+ $dev 'ynothrow' @ "function %AsNode",
			- $revert(b598) "function %MakeIndex overloads with container \
				parameter or %ValueNode parameter" $dep_all_from
				"avoided MakeIndex with container"
		),
		/ %NPL $=
		(
			// Changes to tag "TermNode iterator" are to avoid dependency on \
				%TermNode::Container::iterator and %TermNode::iterator.
			/ %SContext $=
			(
				+ "function templates %(Access, AccessPtr)",
				(
				+ 'using YSLib::NoContainer;';
				+ "function templates %AsTermNode";
				+ "function templates %AsIndexTermNode" $dep_from
					("%MakeIndex" @ %NPLA);
				/ DLDI "function %Reduce" ^ "%NPL::AsIndexTermNode"
					~ "%AsIndexNode"
				),
				/ DLDI "function %Reduce" ^ "%TermNode::Add"
					~ "%TermNode::operator+=",
				+ 'ynothrow' @ "functions %(MapToTermNode, MapToValueNode) \
					with return value same to the parameter",
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "functions with name prefix 'Is', function template \
					%HasValue",
				+ $re_ex(b850) $dev $lib 'YB_ATTR_nodiscard'
					@ "functions %(Verify, Reduce), function template %Analyze"
					@ "namespace %SContext",
				+ 'using YSLib::SetContentWith;',
				+ 'using YSLib::make_observer;',
				- $revert(b733)
					"all functions %(MapToTermNode, MapToValueNode)",
					// Explicit constructions or conversions are needed in \
						these cases.
				+ "functions %AddChildToTail",
				(
				+ 'using YSLib::make_pair;',
				+ 'using YSLib::NoContainerTag;';
				/ "alias %TermNode" -> "class %TermNode; function overloads \
					%(AsTermNode, MapToTermNode, MapToValueNode, RemoveHead), \
					function template %SetContentWith" $dep_all_from
					("TermNode iterator", "avoided calls prefixed YSLib in NPL",
					"syntax term type") $dep_from ("%Reduce",
					"%Environment::NameResolution" @ %NPLA, "%(ReduceTail, \
					TransformForSeparator, TransformForSeparatorRecursive, \
					Forms::(MakeEncapsulationType, SetRest, SetRestRef, Cons, \
					ConsRef))" @ %NPLA1)
				)
			),
			/ %NPLA $=
			(
				/ DLDI "function %SXML::ConvertDocumentNode"
					!^ "%TermNode::Container" $dep_to "TermNode iterator",
				/ 'using YSLib::MakeIndex' >> %SContext,
				/ "function templates %ResolveTerm" ^ $dep_from
					("%NPL::AccessPtr" @ %SContext) ~ "%YSLib::AccessPtr"
					$dep_to "avoided calls prefixed YSLib in NPL",
				/ "functions %(LiftTermIndirection, LiftTermRef)"
					^ ("%NPL::SetContentWith" @ %SContext)
					~ "%YSLib::SetContentWith" $dep_to
					"avoided calls prefixed YSLib in NPL"
				/ DLDI "function template EmplaceLeaf#1"
					^ ("%ystdex::insert_or_assign",
					$dep_from ("%NoContainer" @ %SContext)),
				/ @ "class %Environment" $=
				(
					+ "function templates %AddValue"
						^ $dep_from ("%NoContainer" @ %SContext),
					(
					+ "function template %operator[]"
						^ $dep_from ("%NoContainer" @ %SContext),
					(
					/ @ "function %LookupName" $=
					(
						/ DLDI "return type" -> "%NameResolution::first_type"
							~ "%observer_ptr<ValueNode>",
						/ $impl ^ $dep_from ("%NPL::make_observer" @ %SContext)
					)
					/ "BindingMap" ^ ($dep_from "%MappedSetTraits"
						@ "%ValueNode" @ %YSLib.Core.ValueNode,
						"%ystdex::mapped_set") ~ "%ValueNode" ($dep_from
						"%EmplaceLeaf", "name lookup adjustment") ^ $dep_from
						"%NoContainer" @ %SContext;
					/ "%NameResolution" ^ "%TermNode" ~ "%ValueNode"
					);
					/ $forced DLDI "functions %(Define, Deduplicate, Remove)"
					),
					/ "operator==" ^ "%ystdex::ref_eq<>"
						~ "%BindingMap %operator=="
						// Although this is not directly used normally (with \
							%shared_ptr equality instead), it is better \
							consistent with all members (rather than only \
							%BindingMap), or just of identity respected like \
							%ystdex::ref_eq.
				),
				/ DLDI "function %RedirectToShared" ^ $dep_from
					("%NPL::make_observer" @ %SContext) ~ "%make_observer",
				/ @ "namespace %SXML" $=
				(
					+ "function template %NodeLiteralToTerm";
					/ DLDI "function %MakeTop" ^ "%SXML::(MakeXMLDecl, \
						NodeLiteralToTerm)" ~ "%YSLib::AsNodeLiteral";
					/ "all 'ValueNode'" -> 'TermNode' $dep_to "syntax term type"
				),
				* "missing preventing ADL call %InsertSyntaxNode" @ "all 3 \
					function temlates %InsertChildSyntaxNode" $since b599
					$= (/ $impl "qualified call with 'NPL::'"),
				/ 'ValueNode' @ ("all 2 function templates %InsertSyntaxNode",
					"all 3 function temlates %InsertChildSyntaxNode",
					"function %TransformToSyntaxNode") -> 'TermNode' $dep_to
					"syntax term type",
				/ 'using YSLib::pair;' >> %SContext,
				- DLDI 'using YSLib::obersever_ptr',
					// This has been in %SContext.
				(
				/ DLDI "%alias NodeInserter" !^ "%GNodeInserter";
				(
				- $revert(b597) "alias %NodeSequenceInserter" $dep_from
					("%TransformNodeSequence" @ %NPLA1);
				- $revert(b597) "alias template %GNodeInserter"
				),
				/ 'TermNode' @ "%NodeInserter" -> 'ValueNode'
				),
				(
				/ DLDI "qualified %NodeSequence with 'YSLib::'"
					@ "function %TransformToSyntaxNode",
				(
				+ "explicit cast to '_tNode' for %NodeSequence element"
					@ "function template %TraverseSubnodes";
				/ "function template %TraverseSubnodes" >> %Scontext;
				),
				- $revert(b600) 'using YSLib::NodeSequence;' $dep_from
					("%InsertSequenceChild" @ %NPLA1,
					"%NodeSequenceInserter" @ %NPLA)
					// %TransformToSyntaxNode need support of \
						%YSLib::NodeSequence to kepp the capability with \
						%Tools.ProjectGenerator.Main, and %TraverseSubnodes \
						also need it for %PrintNode.
				),
				/ DLDI "reordered declarations",
					// To put functions insensitive to equivalence of \
						%TermNode and %ValueNode together.
				+ "alias %TermNodeToString",
				(
				+ "function %ParseNPLATermString";
				/ DLDI "simplified functions %(MapNPLALeafNode, \
					TransformToSyntaxNode)" ^ "%ParseNPLATermString"
				),
				+ "function %DecodeNodeIndex",
				/ @ "function template %TraverseNodeChildAndPrint" $=
				(
					/ "supported parmaterized node as 1st parameter template"
						~ "%ValueNode",
					^ "%YSLib::IsPrefixedIndex" ~ "ADL %IsPrefixedIndex"
				),
				/ @ "function %PrintNode" $=
				(
					/ "decoded node names" ^ "%DecodeNodeIndex",
					/ DLDI "simplified" ^ "%std::(bind, placeholders::_1, ref)"
				),
				* DD "wrong Doxygen command '\tt' used" ~ '\c'
					@ "function %RelaySwitchedUnchecked" $since b838,
					// To eliminate Doxygen warning: Found unknown command.
				/ DLDI "qualified %AsNode with prefix 'YSLib::'"
					@ "function %MapNPLALeafNode",
				/ DLDI "simplified function templates %AccessTerm"
					^ $dep_from ("%NPL::Access" @ %SContext),
				/ DLDI "simplified function templates %AccessTermPtr"
					^ $dep_from ("%NPL::AccessPtr" @ %SContext),
				/ DLDI !^ "%MakeIndex with size" @ ("function \
					%TransformToSyntaxNode", "functions %InsertSyntaxNode")
					$dep_to "avoided MakeIndex with container"
			),
			/ %NPLA1 $=
			(
				/ "functions %(ReduceArguments, ReduceChildren, \
					ReduceChildrenOrdered)" $dep_to "TermNode iterator" $=
				(
					/ DLDI "overload with term parameter"
						!^ "overload with container parameter";
					- "overload with container parameter"
				),
				/ DLDI "vau handler, TCO action, functions \
					%(SetupTraceDepth, Forms::(DefineWithRecursion, \
					BindParameter))" ^ $dep_from (("%Environment::(operator[], \
					AddValue)" @ %NPLA), "%NPL::(Access, make_observer)"
					@ %SContext) $dep_to "name lookup adjustment",
				/ DLDI "member function %ContextState::SetNextTermRef"
					^ $dep_from ("%NPL::make_observer" @ %SContext)
					~ "%YSLib::make_observer",
				- "function templates %(LoadNodeSequence; \
					TransformNodeSequence); function %InsertSequenceChild",
				/ @ "function %InsertChild" $=
				(
					/ $forced 'TermNode' -> 'ValueNode' $dep_from
						("%NodeInserter" @ %NPLA),
					/ DLDI !^ "%MakeIndex with size" $dep_to
						"avoided MakeIndex with container"
				),
				/ "function %TransformNode" ^ (($dep_from "%(TermNodeToString, \
					ParseNPLATermString)")
					~ "%(NodeToString, ParseNPLANodeString)" @ %NPLA),
				/ DLDI "function %ReduceTail" !^ "container",
				/ @ "namespace %Forms" $=
				(
					/ DLDI "simplified initializer-list" @ "function \
						%MakeEncapsulationType" !^ "explicit 'TermNode'",
					/ DLDI "avoided %GetLastIndexOf call relying on %TermNode \
						and %ValueNode equivalence"
						@ "functions %(Cons, ConsRef)" ^ $dep_from
						("%NPL::AddChildToTail" @ %SContext),
					/ "simplified functions %(SetRest, SetRestRef)"
						^ $dep_from ("%NPL::AddChildToTail" @ %SContext),
					/ DLDI !^ "%MakeIndex with size" @ "function %BindParameter"
						$dep_to "avoided MakeIndex with container",
					/ DLDI "initialized with context state"
						@ "function %DefineWithRecursion"
				),
				+ DD "made around '<pre>' and '</pre>' for NPL call grammars"
					@ "Doxygen comments",
					// Also to eliminate Doxygen warning: \
						"Unsupported xml/html tag <...> found".
				* DD $impl "wrong Doxygen command '\t' used" ~ '\c'
					@ "function %RelaySwitchedUnchecked" $since b800,
					// To eliminate Doxygen warning: Found unknown command.
				/ DLDI "qualified %AsNode with prefix 'YSLib::'"
					@ "function %(InsertChild, TransformNode)",
				/ "functions %(TransformForSeparator, \
					TransformForSeparatorRecursive)" $=
				(
					/ DLDI ^ $dep_from ("%AsTermNode" @ %SContext)
						~ "%AsNode",
					/ DLDI ^ "%TermNode::Add" ~ "%TermNode::operator+=",
					/ DLDI "simplified" ^ $dep_from
						("%NPL::AddChildToTail" @ %SContext),
					(
					- "last parameter";
						// This is reducible in all known and intended uses.
					* "last parameter type" $since b753;
						// As a term node name, this should be %string but not \
							%TokenValue.
					/ DLI "simplified without redundant subnode name index \
						construction"
						// Only %TransformForSeparatorRecursive did need it \
							directly, and it was actually not needed at all \
							since the name would be equal to the index of term \
							being added to, got from %MakeIndex.
					),
					/ DLDI !^ "%MakeIndex with size" $dep_to
						"avoided MakeIndex with container"
				),
				/ $forced DLDI "simplified function %ReplaceSeparatedChildren"
					$dep_from ("last parameter type" @ "%TransformForSeparator")
			),
			/ DLI "simplified constructor templates" @ "class %Configuration"
				@ %Configuration $=
			(
				/ $re_add(b851) DLI ^ "%exclude_self_params_t"
					~ "%exclude_self_t",
				/ $design ^ $dep_from ("%NoContainer" @ %SContext)
					~ "%YSLib::NoContainer"
			),
			/ DLDI !^ "%MakeIndex with size" @ "derivation of applicative \
				'cmd-get-args'" @ "function %LoadModule_std_system"
				@ %Dependency $dep_to "avoided MakeIndex with container"
		)
	),
	/ %Tools $=
	(
		/ %ProjectGenerator.Main $=
		(
			* $comp "crash due to invalid path handling"
				$since b838 $dep_from
				("%operator/=" @ "class template %path"
					@ %YBase.YStandardEx.Path),
				// The paths would be accessed by %front without check, \
					expecting they should have been set by %operator/=. For \
					empty paths, this would cause undefined behavior with \
					the buggy %operator/= which would do nothing and keep the \
					paths staying empty.
			/ $dev "syntax term node Type %ValueNode" -> "%TermNode" $dep_to
				"syntax term type",
			/ $forced DLDI "main function" $dep_from
				("%TermNode" @ %YFramework.NPL.SContext)
				^ "%YSLib::ListContainer"
				// To avoid matching unexpected argument lists, %TermNode now \
					does not allow to be implicilty constructed.
		),
		(
		/ %SHBuild.Main $=
		(
			/ $impl ^ "%function" ~ "%std::function";
			* $comp "applicative 'SHBuild_EchoVar' from module 'SHBuile_env_' \
				did not have effect due to mismatched hook type" $since b851
		);
		* $comp "option %SS_DebugEnv printed nothing after 'SS_DebugEnv'"
			@ "%SHBuild-YSLib-common.txt"
		)
	),
	/ DLDI !^ "%MakeIndex with size" @ "member function %ReadingList::operator \
		ValueNode::Container" @ %YReader.ReadingList $dep_to
		"avoided MakeIndex with container"
),

b851,
(
	/ $re_add(b850) DLDI ^ "%YSLib::unchecked_any_cast"
		~ "%ystdex::unchecked_any_cast" $effective
		@ %YFramework.YSLib.Core.Application,
	/ DLDI "simplified all perfect parameter forwarding without \
		variadic parameter in lambda-expressions" ^ "%yforward"
		~ "%std::forward" $effective
		@ %YBase.YStandardEx.(Swap, Tree, Utilities),
		// The exceptional case is blocked to work around G++ 5 crash.
	- $re_add(b850) DLDI "redundant '&&'" @ "'*_constructible' \
		template arguments" @ %(YBase.YStandardEx.(Any, Swap,
		Utilities), YFramework.(NPL.NPLA1, YSLib.Core.ValueNode)),
	/ DD "Doxygen group name patterns '*programing*' -> '*programming*'"
		$effective @ %YBase.YStandardEx.IntegralConstant,
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ "constructors" @ "class template %boxed_value" @ %Utilities $=
			(
				+ "type %nothrow_default_constructible";
					// This is a workaround for G++ 8.1 on platform %DS.
				+ $re_add(b848) $dev 'explicit'
					@ "constructor with %default_init_t parameter",
				/ $re_add(b849) DLI "simplified constructor templates"
					^ "%exclude_self_params_t" ~ "%exclude_self_t",
				* $re_add(b849) "possible ill-formed but no diagnostics \
					required bogus 'yconstfn'" $since b477 $=
					(- 'yconstfn' @ "constructors"),
				/ "improved SFINAE-friendly" $dep_to
					"SFINAE-friendly boxed_value" $=
				(
					/ "excluded tags in constructors with %in_place_type_t \
						instance, %std::allocator_arg_t and private tag types",
						// This is an extension.
					(
					+ "braced-init-list '{}'" @ "data member %value";
					/ "default constructor" -> "defaulted constructor"
					),
					/ "all other constructor templates made SFINAE-friendly" $=
					(
						/ DLDI "exposed private constructors";
							// They have to be public, otherwise they would \
								not be viable candidates.
						+ $impl "template parameter to enable SFINAE check"
					)
				)
			),
			/ @ "namespace %vseq" @ %Variadic $=
			(
				/ "metafunctions (ctor_of, param_of)" $=
				(
					* "missing fallback specialization" $since b656 $dep_to
						"vseq SFINAE",
						// The missing of fallback would break SFINAE with \
							%detected_or.
					* "wrong specialized template argument existed partial \
						specialization" $since b656
						// The missing %when<true> in specialized template \
							argument list would break the expect of order of \
							specialization for user code.
				),
				* "missing fallback specialization" @ "metafucntion %defer"
					$since b688 $dep_to "vseq SFINAE"
			)
			* "binary type trait %is_instance_of" @ %TypeOperation $since b849
				^ "%detected_or_t" ~ "%vdefer" $dep_from
				("vseq SFINAE" @ %Variadic),
				// It actually needs one, but Clang++ needs also the %defer \
					instantiation to be complete.
			/ %Placement $=
			(
				+ $re_add(b848) $dev 'explicit' @ "constructor with \
					%default_init_t parameter" @ "class template %tagged_value",
				+ DD '\ingroup tags' @ "Doxygen comment" @ "%(default_init_t, \
					default_init, value_init_t, value_init)",
				+ DD '\ingroup YBase_replacement_features tags'
					@ "Doxygen comment" @ "%(in_place_tag, in_place_t, \
					in_place_type_t, in_place_index_t)",
				/ DLDI "ordered 'static_cast<void>' discarded values at end in \
					'for' statements" $effective @ %Placement,
					// To be consistent with implementation of \
						%ystdex::swap_ranges. This is intended for more \
						clarity that the result of whole expreesion is also \
						discarded.
				(
				+ "struct %in_place_index_ctor";
				+ "class template specialization %vseq::ctor_of for \
					%in_place_index_t instances"
				),
				+ "class template specialization %vseq::ctor_of for \
					%in_place_type_t instances" $dep_to "tag type constructors"
			),
			+ "metafunctions %(nand_, nor_)" @ %IntegralConstant,
			+ DD '\ingroup YBase_replacement_features' @ "Doxygen comment"
				@ "metafunctions %(conjunction, disjunction, negation)"
				@ %IntegralConstant,
			/ %Any $=
			(
				(
				/ "improved SFINAE-friendly handler construction"
					@ "namespace %any_ops" $=
				(
					/ "public function template %init supported SFINAE"
						$effecitve @ "class templates %(value_handler; \
						holder_handler, allocator_value_handler)";
					+ "function template %construct" ^ "trailing return type"
				),
				/ "improved SFINAE-friendly constructors" @ "class %any" $dep_to
					"SFINAE-firendly value objects" $dep_from
					"tag type constructors", ("constructor templates
					%ValueObject" @ %YFramework.YSLib.Core.YObject) $=
				(
					* $re_ex(b848) "constructor with %in_place_type_t tag \
						parameter missing exclusion of \
						non-constructible parameters" $mismatch $since b848,
						// WG21 N4606 does not have the requirements, but ISO \
							C++17 has.
					/ "all other constructor templates made SFINAE-friendly"
						$dep_from ("%is_instance_of" @ %TypeOperation),
						"%construct" ^ $dep_from ("%nor_" @ %IntegralConstant)
				)
				),
				* "missing underlying implementation for constructor with \
					%std::initializer_list instance and allocator parameters"
					$since b848
			),
			* "invalid 'YB_STATELESS for %observer_ptr and %std::hash instances"
				@ %Pointer $since b846
				/ $= (/ $revert_ex(b846)
					"all 'YB_STATELSS' except for %to_address#2" -> 'YB_PURE'),
				// This would break stage 1 Sysroot with Clang++ 7.0.1 on \
					x86-64 Linux, because the output %SHBuild binary does not \
					work.
			/ %Function $=
			(
				(
				/ "transformation trait %make_parameter_tuple"
					-> "%make_parameter_list" ^ "%empty_base" ~ "%std::tuple";
				/ $forced DLDI "type trait %parameter_of" ^ "%vseq::at_t"
					~ "%std::tuple_element",
				/ $forced DLDI "type trait %paramlist_size"
					^ "%vseq::seq_size_t" ~ "%std::tuple_size"
				),
				/ @ "type traits %(is_covariant, is_contravariant, \
					make_function_type)" $=
				(
					+ "specialization for %(empty_base, function_base) \
						instances";
					/ DLDI "simplified other specializations"
				),
				/ DLDI "type trait %make_function_type_t" ^ "%empty_base"
					~ "%std::tuple"
			),
			/ %Tree $=
			(
				* $impl "missing class template declaration for tree" $since
					b830,
					// To eliminate Microsoft VC++ error: C2872. This error is \
						caused by ambiguity between the name in the inline \
						namespace and enclosing namespace.
				/ $re_add(b849) DLDI "simplified" ^ "%rebind_alloc_t"
					~ "%allocator_traits"
			),
			/ @ "function template %swap_dependent" @ %Swap $=
			(
				* "ambiguity for type with specialized %swap namespace %std"
					$orig (@ %Utilities $since b830),
				* "missing applying ADL %swap for enumerations" $since b837
					$= (/ $impl ^ "%is_enum")
			),
			/ %Memory $=
			(
				+ "function templates %(allocate_unique; allocate_shared) for \
					parameters of %std::initializer_list instances",
				+ 'using std::make_shared',
				* "self recursive calls" @ "make_unique for parameters of \
					%std::initializer_list instances" $since b
					$= (/ ^ "%ystdex::cpp2014::make_unique"
						~ "%ystdex::make_unique"),
				/ @ "functiont templates %(share_copy, share_forward, \
					share_move, unique_copy, unique_forward, unique_move)" $=
				(
					/ ^ $dep_from "%ystdex::(make_shared, make_unique)"
						~ "ADL %(make_shared, make_unique)",
					+ ("overloads for of allocator and parameter packs",
						"overloads for allocator and parameters of \
						%std::initializer_list instances") ^ $dep_from
						"%ystdex::(allocate_unique, allocate_shared)"
				),
				/ DLDI "simplified function templates %(shared_copy, \
					unique_copy)" !^ 'yforward',
				* "missing inclusion %IntegerSequence" @ %Apply $since b850
			),
			* "irrespective non-deduced context"
				@ "transformation trait %invoke_result" @ %Invoke $since b832
				// This would fail with Clang++ 7.0.1 for some SFINAE \
					contexts, like initialization %YSLib::GHEvent with a \
					%YSLib::GHEvent value referenced in %lref
				$= (/ $impl "base class" !^ "%identity")
		),
		* $dev "Microsof VC++ project missing header %YStandardEx.Apply" $since
			b850
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YApplication $=
				(
					/ $re_add(b850) DLD "simplified without 'ystdex::'"
						^ "%any",
					* $re_add(b850) DD "missing '!'" @ "end of '/*'"
						@ "multiline Doxygen comment" @ "protected message \
						queue data member" @ %YApplication $since b481,
				),
				/ %YObject $=
				(
					- DLDI $revert(b759) "redundant internal function"
						@ %YObject
						// To eliminate Clang++ warning: [-Wunused-function].
					(
						/ "improved SFINAE-friendly %ValueHolder constructor \
							templates" $dep_from "SFINAE-friendly boxed_value",
						/ "improved SFINAE-friendly %ValueObject constructor \
							templates with object parameter" $dep_from
							%UI.YWidgetEvent,
							// To avoid possible tag types used as values, \
								also to exclude nested %ValueHolder instances \
								(as a workaround similar to \
								%ystdex::boxed_value).
						* "invalid fallback"
							@ "static function templates %CreateInPlace"
							@ "class templates %HolderOperations" $since b850;
						* $comp "broken %ValueObject holder creation for user \
							code" $since b850 $dep_from
							"SFINAE-firendly value objects"
						// See $2019-01 @ %Documentation::Workflow.
					)
				),
				/ %ValueNode $=
				(
					/ $re_add(b850) DLD "simplified without 'ystdex::'"
						^ "%in_place_type",
					/ "functions %MakeIndex" $=
					(
						/ "made encoding result unspecified";
						- "limitation for domain of parameter value",
						/ $impl ^ "%ystdex::floor_lb" ~ "%std::snprintf"
							// This makes it more efficient.
					),
					(
					+ "function %DecodeIndex";
					/ $forced $impl "functions %(GetLastIndexOf, \
						IsPrefixedIndex)" $dep_from "function %MakeIndex"
					)
				)
			),
			/ %Service.YGDI $=
			(
				* "redundant 'using BaseType::GetBufferPtr;'"
					@ "class %CompactBitmap" $since b566
					// To eliminate Microsoft VC++ errors: C2668 and C2440. \
						The ambiguity is never expected.
				/ $workaround(#38) $resolve(#38) $impl "function %swap for \
					classes %(CompactPixmap, CompactPixmapEx)"
					^ $dep_from ("%ystdex::swap_dependent"
					@ %YBase.YStandardEx.Swap) ~ "%std::swap<BaseType>"
					// To eliminate Microsoft VC++ errors: C2039 and \
						subsequent other errors.
			),
			/ %UI $=
			(
				* "wrong height used for drop list up to the widget" $since b290
					@ "handled event %TouchDown" @ "%DropDownList" @ %ComboList,
					// Also to eliminate Microsoft VC++ warning: C4146.
				* "constructor %EventRef with 'EventItem&' parameter type"
					@ %YWidgetEvent $since b850 $=
					// This would cause unexpected initialization to \
						%ValueObject from a %EventRef prvalue.
				(
					+ 'const' @ "parameter type",
					/ "excluded parameters not referernce to %ValueObject"
						^ "%ystdex::enable_if_same_t"
						// To keep %UI::GetMappedEvent implementation \
							well-formed, 'explicit' cannot be applied here.
				)
			)
		),
		/ %NPL $=
		(
			(
			+ 'using YSLib::bad_any_cast;' @ %NPLA;
			/ $re_ex(b850) DLDI "simplified without 'ystdex::' for \
				%bad_any_cast" @ %(NPLA, NPLA1)
			),
			(
			+ 'using YSLib::in_place_type;' @ %NPLA;
			/ $re_add(b850) DLD "simplified without 'ystdex::'"
				@ %(Dependency, NPLA1) ^ "%in_place_type"
			),
			(
			+ (+ 'using YSLib::any;', 'namespace any_ops = YSLib::any_ops;'）
				@ %NPLA;
			/ $re_add(b850) DLD "simplified without 'ystdex::'"
				@ %NPLA1 ^ "%(any, any_ops)"
			),
			/ DLDI "simplified function %LoadModule_std_environments"
				@ %Dependency !^ "redundant 'static_cast'",
			(
			+ 'using YSLib::function;' @ %Lexical
			/ $dev "all %std::function" -> "%function" $effective
				@ %(Lexical, SContext, NPLA, NPLA1, Dependency)
			),
			/ %NPLA $=
			(
				+ "function %get_allocator" @ "class %ContextNode",
				/ @ "class template %GComposedAction" $=
				(
					+ $dev "static asserts to constraint action components are \
						objects";
					/ "constructor template allocated components with allocator"
						^ ("%ystdex::make_obj_using_allocator", $dep_from
						"%ContextNode::get_allocator")
				)
			),
			/ %NPLA1 $=
			(
				/ "allocated components with allocator"
					@ "constructor template %Continuation"
					^ ("%ystdex::make_obj_using_allocator", $dep_from
					"%ContextNode::get_allocator"),
				/ DLI "optimized allocator for %share_move"
					$dep_from ("share_move" @ %YBase.YStandardEx.Memory),
				/ DLDI "simplified function %ReduceOnce",
				/ DLDI "made check parameter tree earlier" @ "vau handler",
					// This makes slightly performace gain when the parameter \
						tree is ill-formed.
				/ "fresh evaluation of closures and expressions and vau \
					handlers call" $=
				(
					// This improves performance because less continuations \
						are needed and the redundant TCO without TCO action \
						case is not supported.
					/ DLDI "simplified" !^ "%(ReduceCheckedClosure, \
						ContextState::SetNextTermRef)" $dep_to
						"avoided ReduceCheckedClosure",
					- DLI "redundant current term setting and recovery",
						// The continuation capture is not allowed here.
					(
					* $re_ex(b825, b842) "missing saving temporary function \
						and operand to the frame record list for TCO when the \
						internal guard holding no environment" $since b823,
					* "missing saving temporary function and operand to the \
						frame record list in 1st enclosing calls" $since b842;
						// When temporary operand can be updated more than one \
							place, it could not guarantee the omission of \
							1st frame record entry insertion is safe (to avoid \
							to be overwritten).
					+ $lib "assertion to ensure no temporary operand is \
						unexpectedly overwritten"
					),
					/ $lib "check for TCO action" -> "assertion to ensure TCO \
						action has been created",
					/ DLI "avoided saving terms" @ "non-TCO implementations"
				),
				+ $re_add(b820) DLDI "internal static assertion to ensure TCO \
					implementation as the premise of tail rewriting",
				- "function %ReduceCheckedClosure" $dep_from
					"avoided ReduceCheckedClosure"
				/ DLI "TCO" $=
				(
					/ $design "simplified TCO action" ^ ($dep_from
						"%get_allocator" ~ "%GetMemoryResourceRef")
						@ "class %ContextNode" @ %NPLA,
					/ "TCO record compressor and guard list" ^ "allocator"
				)
			)
		)
	),
	/ DLB "excluded files without definitions" @ "platform %Win32"
		@ "Microsoft VC++ projects"
		// To eliminate Microsoft VC++ error: LNK4221.
),

b850
(
	/ DLDI "qualified %unseq_apply with 'ystdex::'" $effective
		@ %(YFramework.YSLib.UI.(YWidget, YUIContainer), YReader.(ShlExplorer,
		ShlReader)) $dep_to "qualified unseq_apply",
	/ DLDI "qualified %(max, min) with 'ystdex::'" $effective
		@ %(YFramework.YSLib.(Core.YGDIBase, Service.(TextLayout, TextFile,
		TextRenderer, YBlit, YGDI), UI.(ComboList, ExStyle, Selector,
		TabControl, TextBox, Viewer, YStyle, ListControl, YGUI, Border)),
		YReader.(ReaderSetting, DSReader, HexBrowser)) $dep_to
		"qualified max and min",
	/ DLDI "qualified %seq_apply with 'ystdex::'" $effective
		@ %Tools.ProjectGenerator.Main $dep_to "qualified seq_apply",
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %Meta $=
			(
				+ "binary type trait %is_same_or_convertible";
				/ "loosed complete type requirment of parameters" 
					@ "binary type trait %is_interoperable"
					^ "%is_same_or_convertible" ~ "%is_convertible"
			),
			+ "binary type trait %is_expandable" @ %Functional
				^ $dep_from ("%as_function_type_t" @ %Function),
			/ %Ref
			(
				/ @ "class template %lref" $=
				(
					- $revert(b554) "constructor for parameter of \
						%std::reference_wrapper instances";
					* "possible ambiguity when constructed from a value \
						convertible to both reference and \
						%std::reference_wrapper instance value" $orig
						(@ %Functional $since b554)
				),
				/ "transforamtion traits %(decay_unwrap, decay_unwrap_t)"
					=> "%(unwrap_ref_decay, unwrap_ref_decay_t)"
					// As WG21 P0318R1.
			),
			/ %Invoke $=
			(
				+ DD "\ingroup commands" @ "Doxygen comment" @ "traits",
				/ @ "transformation trait %invoke_result" $=
				(
					/ DLDI "simplified with less specializations",
					* "wrong result caused by unexpectedly adjusted \
						cv-qualified parameter types in specializations" $since
						b832 ^ "%empty_base" ~ "function types" $dep_to
						"fixed function type of invocation detect"
						// The function parameters and return types are \
							adjusted as decaying, which should not be done in \
							%invoke_result. Note the style of function type \
							specializtion as in %std::result_of parameter also \
							does not work to distinguish cv-qualified \
							parameters and return types.
				),
				* "ill-formed for incomplete return types in SFINAE contexts"
					@ "binary type traits %(is_invocable_r, \
					is_nothrow_invocable_r)" $since b832
					// See $2019-01 @ %Documentation::Workflow.
					$= (/ $impl ^ $dep_from
						("%is_same_or_convertible" @ %Meta) ~ "%is_convertible")
			),
			/ %Function $=
			(
				+ "unary type trait %as_function_type_t" @ %Function,
				- DLDI "redundant '&&'" @ "%std::declval template arguments"
					@ "transformation trait %enable_fallback_t",
				* $comp "ill-formed for incomplete return types"
					@ "constructors" @ "ystdex::function_base" $orig
					(@ "constructors %function" $since b849)
					$dep_from ("%invocable_r" @ %Invoke)
			),
			(
			+ %Apply;
			/ "class template %call_project except specializations for \
				%(std::function, function_base)" @ %Functional >> %Apply;
			* "missing updating %apply implementation to ISO C++17" $since b833
				$= (/ ^ "%apply_invoke" ~ "%apply_call")
				@ "class template specializations %call_projection"),
			* "missing forwarding for parameters" @ "%apply_invoke"
				@ "class template specializations %call_projection" $since b810,
			/ $forced "class template %call_project specializations for \
				%(std::function, function_base)" @ %Functional >> %Function,
			(
			/ "function templates %(apply, make_from_tuple)" @ %Tuple >> %Apply;
			/ %Memory $=
			(
				+ DLDI "inclusion %Tuple" $dep_from %Apply;
				+ "function templates %(uses_allocator_construction_args; \
					make_obj_using_allocator, \
					uninitialized_construct_using_allocator)"
					$dep_from ("fixed function type of invocation detect",
					"avoided explicit CopyConstructible holder check")
					// See $2019-01 @ %Documentation::Workflow.
			)
			)
			),
			/ %MemoryResource $=
			(
				/ "enhanced %construct"
					@ "class template %polymorphic_allocator" $=
				(
					// See WG21 P0591R4.
					/ "simplified %construct" ^ $dep_from
						("%ystdex::uninitialized_construct_using_allocator"
						@ %Memory);
					/ "enabled class template %polymorphic_allocator"
						@ 'YB_Has_memory_resource == 1';
						// As of Microsoft Visual C++ 2017 15.9.4, \
							%std::polymorphic_allocator implementation does \
							not support interface of WG21 P0591R4.
					/ "class template %polymorphic_allocator"
						@ "inline namespace %cpp2017" >> "namespace %ystdex"
						// WG21 P0591R4 is a feature in the current working \
							draft targeting ISO C++2a.
				),
				+ $dev "explicitly defaulted default constructor and copy \
					constructor" @ "class %memory_resource";
					// See WG21 P0619R4.
			)
		),
		/ %YDefinition $=
		(
			/ "macro %__cpp_lib_tuple_element_t" >> $dep_from %YStandadEx.Apply;
			* $comp "wrong location of macro definition \
				%__cpp_lib_tuple_element_t" $since b833
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Adaptor.YAdaptor $=
			(
				/ "removed declarations error-prone to ADL" $=
				(
					- $revert(b303) 'using ystdex::unseq_apply;' $dep_from
						"qualified unseq_apply",
					- $revert(b303) 'using ystdex::seq_apply;' $dep_from
						"qualified seq_apply",
					- $revert(b578) ('using ystdex::max;', 'using ystdex::min;')
						$dep_from ("qualified max and min", %(Core.YGDIBase,
						YDE.ImageBrowser.ImageControl))
				),
				+ 'using std::abs',
				/ "aliases %(GetTicks, GetHighResolutionTicks)"
					>> "namespace %Timers",
				/ DLDI "reordered declarations",
				+ "aliases %(any, function, bad_any_cast, in_place_type, \
					in_place_type_t, any_cast, unchecked_any_cast, \
					unsafe_any_cast) from namespace %ystdex",
				+ 'namespace any_ops = ystdex::any_ops;',
			),
			/ %Core $=
			(
				/ DLDI "function template %ScaleMin" @ %YGDIBase
					^ "%ystdex::min" ~ "%YSLib::min",
				/ %YObject $=
				(
					(
					/ $lib $impl "optimized %RefHolder" !^ "%ValueHolder";
					+ $dev "static assertion of %RefHolder instances to ensure \
						efficient allocation" @ "constructor %ValueObject with \
						%OwnershipTag<> parameter"
						^ "%ystdex::any_ops::is_in_place_storable"
					),
					- DLDI "redundant '&&'" @ "'*_constructible' template \
						arguments" @ "constructor template %ValueHolder",
					/ DLD "simplified without 'ystdex::'" ^ $dep_from
						"%(any, any_ops, in_place_type, in_place_type_t)"
						@ %Adaptor.YAdaptor,
					/ DLDI ^ ("%YSLib::(unchecked_any_cast, any_cast)"
						@ %Adaptor.YAdaptor)
						~ "%ystdex::(unchecked_any_cast, any_cast)",
					(
					/ $revert_ex(b764, b868) "function templates \
						%CreateHolderInPlace"
						-> "class template %HolderOperations";
					/ $forced DLDI "holders creation" @ "holder class \
						templates and class %ValueObject" ^ "%HolderOperations"
						~ "%CreateHolderInPlace" $dep_to
						"avoided explicit CopyConstructible holder check"
					)
				),
				/ %YEvent $=
				(
					/ @ "constructors %GHEvent" $=
					(
						/ "constructors with expandable caller types excluded \
							non-expandable types" 
							^ ("%ystdex::is_strictly_expandable"
							@ %YBase.YStandardEx.Functional),
						+ $re_add(b849) "constructor template with allocator, \
							object and pointer to member parameters",
						/ DLDI ^ ("%function" @ %Adaptor.YAdaptor)
							~ "%ystdex::function"
					),
					/ @ "class template %GEvent" $=
					(
						(
						+ "function template %Emplace"
							^ "%(ContainerType::emplace, \
							std::piecewise_construct)";
						/ DLI "all 2 function templates %Insert" ^ "%Emplace",
						- $lib "all 2 functions %Insert",
							// This is covered by the 1st function template \
								%Insert and there should be no more efficient \
								like %insert over %emplace since a pair object \
								has to be constructed otherwise.
						),
						(
						/ DLI "all 2 function templates %Add"
							^ "function templates %Insert" ~ "functions %Add";
							// Similar to implementations of %Insert.
						- "all 2 functions %Add"
						),
						+ "allocator support" $dep_from "%GHEvent" $=
						(
							+ "alias %allocator_type";
							/ $forced "excluded parameter not constructible to \
								%HandlerType as 1st parameter" @ "constructor \
								template with handler as 1st parameter",
							+ "5 constructors with trailing %allocator_type \
								parameter"
						),
						- DLDI "redundant '&&'" @ "'*_constructible' template \
							arguments" @ "constructor templates"
					),
					- $revert(b195) "class template %GDependencyEvent",
					(
					- $revert(b242) "class template %GEventPointerWrapper"
						$dep_from ("%EventMapping::MappedType"
						@ %UI.WidgetEvent) $dep_to "avoided %GIHEvent";
					/ $comp "constructor template %GEventPointerWrapper" $=
					(
						* "missing moving for initiailiztion" $since b553,
						* "missing '&&'" @ "exception-specifiction" $since b319
					)
					),
					(
					- $revert(b173) "class template %GEventWrapper"
						$dep_from ("%WidgetController::Paint"
						@ %UI.WidgetEvent) $dep_to "avoided %GIHEvent";
					- $revert(b413) "class template %EventArgsHead"
						$dep_all_from "avoided %EventArgsHead";
					- "alias %TupleType"
						@ "class templates %(GEvent; GHEvent)"
					),
					- $revert(b333) "interface template %GIHEvent"
						$dep_all_from "avoided %GIHEvent",
					- $revert(b429) "class template %GEventGuard",
						// This can be replaced by the more generic templates \
							like %ystdex::guard.
					- $revert(b333) "all 4 function templates %AddUnique"
						// It is better to be replaced by multiple operations \
							explicitly for the cost.
				)
			),
			/ %UI $=
			(
				/ %YWidgetEvent $=
				(
					/ DLDI "simplified function %GetEvent"
						^ "%ystdex::emplace_hint_in_place"
						~ "%EventMapping::PairType",
					/ DLDI "alias %VisualEventMap"
						!^ "%EventMapping::MapType",
					(
					/ @ "namespace %EventMapping" $=
					(
						- $revert(b242) "alias %SearchResult",
						- "alias %PairType" $dep_from "%GetEvent",
						- "alias %MapType" $dep_from ("%VisualEventMap",
							"%Controller" @ %YControl),
						(
						/ "alias %MappedType" -> ("%EventItem"
							@ "namespace %UI") ^ "%YObject"
							~ "%GEventPointerWrapper";
						/ "alias %ItemType" -> ("class %EventRef"
							@ "namespace %UI") ^ "%ValueObject"
							~ "%GIHEvent" $dep_to "avoided %GIHEvent";
						+ "function template %Cast"
						)
					);
					- $revert(b242) "namespace %EventMapping"
					),
					/ $forced "%WidgetController::Paint" ^ "%GEvent"
						~ "%GEventWrapper" $dep_from "%EventRef"
					/ $forced $impl "function templates %(DoEvent, all 2 \
						FetchEvent)" ^ $dep_from "%EventMapping::Cast"
						$dep_from "EventMapping::MappedType",
					/ "parameter" @ "function template %DoEvent"
						^ "ystdex::parameter_of_t" ~ "%EventArgsHead"
						$dep_to "avoided %EventArgsHead",
					(
					+ "alias templates %(HandlerOf; EventOf)";
					/ "functions %(GetItem, GetItemRef)"
						@ "classes %(AController, WidgetController)"
						-> "%(GetEvent, GetEventRef)",
					/ DLDI "simplified function template %(NewEvent, \
						FetchEvent)",
					/ DLD "simplified return type"
						@ "function templates %FetchEvent"
					),
					/ "function %GetEvent" -> "%GetMappedEvent",
					+ $dev $lib 'YB_ATTR_nodiscard'
						@ "function template %FetchEvent"
				),
				/ $forced $lib "all 'EventMapping::ItemType&'"
					-> 'EventMapping::IterRef' $dep_from
					("%EventRef" @ %YWidgetEvent)
					$effective @ %(YWidgetEvent, YControl),
				/ %YControl $=
				(
					/ DLDI "all %EventMapping::MapType" -> "%VisualEventMap"
						$effective @ "class %Controller",
					/ @ "function template %CallEvent" $=
					(
						- $dev $lib "static assertion" @ "function template \
							%CallEvent" $dep_to "avoided %EventArgsHead",
						/ DLDI "simplified type" ^ $dep_from
							("%HandlerOf" @ %YWidgetEvent)
					),
					/ $forced "functions %(GetItem, GetItemRef)"
						@ "class %Controller" -> "%(GetEvent, GetEventRef)"
						$dep_from ("%AController" @ %YWidgetEvent),
					/ DLD "simplified return type" @ "function template \
						%FetchEvent" ^ $dep_from ("%EventOf" @ %YWidgetEvent)
				),
				/ %YUIContainer $=
				(
					/ DLDI "simplified function templates %(AddWidgets, \
						AddWidgetsZ, RemoveWidgets)"
						^ 'static_cast<IWidget&>' ~ 'std::forward<IWidget&>',
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard YB_PURE'
						@ "functions with names %(begin, end) or name \
						prefixes ('Fetch', 'Locate') except for function \
						with non-const reference parameters",
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard'
						@ "function %LocateForTopOffset"
				),
				/ DLDI %YStyle $=
				(
					/ "trucated cast to 'MonoType'" @ "operator %Color"
						@ "classes %(HSV, HSL)",
						// To eliminate Microsoft VC++ 2017 warning: C4244.
					/ "trucated cast to 'unsigned'" @ "operator %Color"
						@ "class %HSV",
						// To eliminate Microsoft VC++ 2017 warning: C4244.
					/ "cast to 'uint16_t'" @ "constructor %HSL"
						// To eliminate Microsoft VC++ 2017 warning: C4244.
				),
				/ %YWidget $=
				(
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard YB_PURE'
						@ "functions with name \
						prefixes ('Contains', 'Fetch', 'Get')",
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard'
						@ "function template %WrapRenderer#2"
				)
			),
			/ %Service $=
			(
				/ %YBlit $=
				(
					* $re_add(b835) DD "missing '!'" @ "end of '/*'"
						@ "multiline Doxygen comment" @ "function templates \
						%(ClearPixels, FillPixels, FillVerticalLine)"
						$since b438,
					+ DLDI ('inline' -> 'yconstfn') @ "internal function",
					+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS ynothrow'
						@ "function template %BlitScaleComponent"
				),
				/ %YGDI $=
				(
					/ $dev $lib 'inline' -> 'yconstfn'
						@ "functions %(GetHorizontalOf, GetVerticalOf)",
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard YB_PURE'
						@ "functions %(operator(-, +, *), functions with name \
						prefixes ('Get', 'Fetch')",
					+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard'
						@ "functions with name prefix 'Clip'",
					+ 'ynothrowv' @ "functions with name prefix 'Get'",
					+ 'ynothrow' @ "functions %operator(-, +, *), functions \
						with name prefixes ('Fetch', 'Clip')"
				),
				+ $re_ex(b849) $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "functions or function templates with name prefix 'Fetch'"
					@ %TextLayout,
			)
		),
		/ $forced DLDI "constructor, function %Refresh" @ "class %FPSCounter"
			@ %Helper.ShellHelper $dep_from
			("%GetHighResolutionTicks" @ %YSLib.Adaptor.YAdaptor)
	),
	+ $re_add(b849) DLDI 'YB_ATTR_nodiscard YB_PURE' @ "internal functions \
		or function templates" @ %(YFramework.YSLib.(Core.YGDIBase,
		Service.(TextRenderer, YBlit), UI.YGUI), Tools.ProjectGenerator.Main,
		YReader.(ReaderSetting, DSReader)),
	+ DLDI 'YB_ATTR_nodiscard' @ "internal functions"
		@ %(YFramework.YSLib.Service.TextRenderer, YReader.ShlExplorer,
		Tools.ProjectGenerator.Main)
	+ DLDI 'ynothrow' @ "some internal functions"
		@ %Tools.ProjectGenerator.Main,
	/ DLDI %YDE.ImageBrowser.ImageControl $=
	(
		/ "member function %ImagePanel::Load" ^ "%ystdex::max" ~ "%YSLib::max",
		/ "avoided namespace scope 'static'" @ "'yconstexpr' objects"
	),
	/ DLDI "'std::abs' where %abs introduced from YFramework" -> 'abs'
		$effective @ %(YFramework.YSLib.Service.(TextRenderer, YDraw),
		YReader.DSReader) $dep_from
		("%abs" @ %YFramework.YSLib.Adaptor.YAdaptor),
	/ DLDI "'std::round' where %round introduced from YFramework" -> 'round'
		$effect @ "constructor %ImagePanel" @ %YDE.ImabeBrowser.ImageControl
),

b849
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ ('__cplusplus >= 201103L', 'YB_IMPL_MSCPP >= 1800')
				@ "inclusion condition disjunction" @ "macro %YB_HAS_ALIGNAS",
			+ '__has_feature(cxx_alignof) || __has_extension(cxx_alignof)',
				'__cplusplus >= 201103L', 'YB_IMPL_MSCPP >= 1800'
				@ "inclusion condition disjunction" @ "macro %YB_HAS_ALIGNOF"
		),
		/ %YStandardEx $=
		(
			+ "binary type trait %is_instance_of" @ %TypeOperation,
			/ %MemoryResource $=
			(
				/ DLDI "fixed class-key for %pool_resource::pool_t" ^ 'class'
					~ 'struct',
					// To eliminate Microsoft VC++ warning: C4099.
				* "ill-formed pool implementation due to conditional inclusion"
					@ 'YB_Has_memory_resource != 1' $since b843,
				+ $re_add(b847) DLDI 'YB_ATTR_nodiscard YB_PURE'
					@ "internal functions",
				/ @ "class template %polymorphic_allocator" $=
				(
					+ "workaround for pre-C++11 allocator members"
						@ 'defined(__GLIBCXX__) && (__GLIBCXX__ <= 20150617 \
						|| YB_IMPL_GNUCPP < 60000)' $dep_to
						"G++ 5.3 workarounds",
					/ DLDI "simplified function template %construct#1"
						^ $dep_from ("%is_instance_of" @ %TypeOperation)
						~ "%vseq::ctor_of_t"
				)
			),
			/ %Set $=
			(
				/ @ "class template %mapped_set" $=
				(
					/ @ "private function templates to implement %(emplace, \
						emplace_hint)" $=
					(
						* $dev "redundant parameter pack" @ %Set
							$since b845,
							// To eliminate Microsoft VC++ 15.9.4 error: \
								C3547. This should be conforming but it was \
								not intended.
						+ "workaround" ^ "%std::forward" ~ "%yforward" $dep_to
							"G++ 5.3 workarounds"
					),
					/ $re_add(b848) DLDI "simplified private member type"
						^ "%rebind_alloc_t" ~ "%allocator_traits",
					+ $dev $lib 'YB_PURE' @ "function %empty",
					- DLDI 'inline' @ "friend function %swap"
				),
				+ $re_ex(b847) $dev $lib 'YB_ATTR_nodiscard' @ "returning \
					non-void functions or function templates with names \
					%(get_allocator, find, count, equal_range) or name \
					postfixes ('begin', 'end', 'size', 'comp', 'bound')"
					$effective @ "class template %mapped_set"
			),
			/ %CStandardInteger $=
			(
				* "wrong range used for %floor_lb except for 32-bit or 64-bit \
					integer pamaters" @ "'__builtin_clz*' is not used"
					@ %CStandardInteger $since b842,
					// Use of %std::uintmax_t could be wrongly truncated.
				+ $dev 'YB_STATELESS' @ "functions %(floor_lb, ceiling_lb)",
				+ $re_add(b847) $dev 'YB_ATTR_nodiscard YB_PURE' @ "function \
					templates %(pack_uint, read_uint_be, read_uint_le)"
			),
			/ %Any $=
			(
				/ @ "union %any_ops::any_local_data" $=
				(
					+ "type %allocated_t";
					/ "type" @ "%allocated" ^ "%aligned_storage_t";
					/ $comp "made the destructor not defined as deleted"
						// To eliminate Microsoft VC++ warning: C4624."
				),
				* "invalid copy" @ "internal thunk" @ "class template \
					%value_handler" $since b848,
				/ @ "class %any" $=
				(
					// It would also be nonconforming to ISO C++17.
					* "missing exclusion of %in_place_type_t instance"
						@ "%any constructors and %operator= with target \
						parameter" $since b717 ^ $dep_from
						("%is_instance_of" @ %TypeOperation),
					* "missing exclusion of %std::initializer_list instance \
						mismatching to value type" @ "%any constructors with \
						parameter of %std::initializer_list instance" $since
						b848
				)
			),
			/ %Meta $=
			(
				/ "inclusion condition" @ "alias template %well_formed_t" @ $=
				(
					* "missing refinement of G++ version" $orig
						(@ "alias template %void_t" @ %TypeTraits $since b653)
						$= (/ $dev $revert_ex(b727) "refined inclusion \
							condition 'YB_IMPL_GNUCPP' as \
							'YB_IMPL_GNUCPP > 50000'"),
						// The CWG issue resolution should be reflected even \
							if the minimal revision is changed to guarantee \
							all supported versions (currently documented in \
							%Documentation.Dependencies) of the implementation \
							can work, which is not obvious here. Note before \
							this change, the development branch GCC 5 should \
							still be supported, so it is a bug since before \
							b727 till now.
					+ "disjunction 'YB_IMPL_MSCPP >= 1900' as the condition",
						// Also to eliminate Microsoft VC++ 15.9.4 error: \
							C2794. Note the %void_t implementation in \
							<type_traits> indicates CWG 1558 should be already \
							resolved. There seems other bugs.
					+ "disjunction '__cplusplus >= 201703L' as the condition",
						// ISO C++17 contains the resolution.
					+ "disjunction 'YB_IMPL_CLANGPP' as the condition"
						// Nothing in https://clang.llvm.org/cxx_status.html \
							mentions the status. It seems that resolution of \
							CWG 1558 is always supported by Clang++, cf. https://github.com/ericniebler/range-v3/commit/07f46e32781ec8057aef1587508f762c1439b793#diff-89dffaa78208ff41cbaac3034d99a114R579.
				)
			),
			/ DD "Doxygen groups %(type_traits_operations, unary_type_traits, \
				binary_type_traits, transformation_traits)" >> %TypeInspection
			/ %Memory $=
			(
				(
				/ DLDI "simplified function templates %(make_allocator_guard, \
					create_with_allocator)" ^ "%allocator_guard"
					~ "%std::unique_ptr";
				* "wrong value type" @ "alias template %allocator_guard" $since
					b843
				),
				(
				/ "function template %create_with_allocator" $=
				(
					/ "returned %std::unique_ptr instance" ~ "raw pointer",
						// To avoid leaks too easy.
					/ "%create_with_allocator supported uses-allocator \
						construction" ^ "%allocator_traits constructor"
				);
				/ @ "function template %allocate_unique" $=
				(
					/ $forced DLDI "return",
					* $comp "missing uses-construction support" $since b847
				),
				+ "function template or using-declaration %allocate_shared"
				),
				+ $dev 'YB_ATTR_nodiscard'
					@ "function template %allocate_unique"
			),
			/ @ "unary type trait %is_null_ptr"
				@ '__cpp_lib_is_null_pointer >= 201309L' @ %TypeInspection $=
			(
				+ DD '\ingroup YBase_replacement_features unary_type_traits'
					@ "Doxygen comment",
				* "undeclared %remove_cv_t" $since b832
					$= (/ ^ "%std::remove_cv" ~ "%remove_cv_t",
				* "redundant 'std::' before 'nullptr_t" $since b832
			),
			/ @ "class templates %basic_string" @ %String $=
			(
				* "wrongly initialized to empty string due to missing \
					base-init-list" @ "constructor %basic_string with \
					parameter of %std::initializer_list instance"
					!@ '__cpp_inheriting_constructors >= 201511L' $since b838,
				* "wrong order of 'YB_NONNULL(1)' and 'YB_PURE'"
					@ "%operator+ overloads with pointer parameter"
					$mismatch(Documentation.LanguageConvention) $since b846
			),
			/ %Function $=
			(
				+ "enum class %empty_function_policy";
				+ "class template %function_traits";
				/ $lib "function template %function"
					-> "function template %function_base; alias template \
					%function";
				+ $comp "throwing %std::bad_function_call"
					@ "%operator() call on empty targets" @ "%function",
					// This is now similar to %std::function.
				* $comp "missing '&&'" @ "parameter type" @ "%operator= for \
					callable paramters"
					@ "class template specicalization %function"
					@ %Function $since b948,
				/ $lib "extended %function specialization to %function_base"
					@ "traits %(make_parameter_tuple, return_of)",
				+ "alias templates %unchecked_function",
					// This is similar to the old %ystdex::function.
				+ "alias templates %optional_function"
			),
			/ %Functional $=
			(
				/ @ "class template %expanded_caller"
					$def_from ("class templates %(CallUnary, CallUnaryAs, \
					CallBinary, CallBinaryAs)" @ %YFramework.NPL.NPLA1) $=
				(
					/ DLDI "names of template parameters",
						// To be consistent to %YSLib::GHEvent, etc.
					+ "explicitly defaulted (default, copy, move) constructors, \
						(copy, move) %operator=",
					/ "constructor template" ^ "callable object"
						~ "callable reference" !^ "%ystdex::decay_t"
						// See $2019-01 @ %Documentation::Workflow.
				),
				/ "function template %make_expanded" $=
				(
					/ "parameter" -> "callable object" ~ "callable reference"
						!^ "%ystdex::decay_t",
						// Ditto.
					* "ill-formed but no diagnostics required bogus \
						'yconstfn'" $since b448
						$= (/ 'yconstfn' -> 'inline')
				),
				+ $re_ex(b847) 'YB_ATTR_nodiscard YB_PURE' @ "function \
					templates %(bind1, bind_forward, compose, make_expanded)",
				+ $re_ex(b847) 'YB_ATTR_nodiscard'
					@ "function template %invoke_for_value",
				/ $lib "extended %function specialization to %function_base"
					@ "traits %call_projection" $dep_from
					("%function_base" @ %Function)
			)
		)
	),
	/ %YFramework $=
	(
		/ %CHRLib $=
		(
			/ %CharacterProcessing $=
			(
				* "missing inclusion %YBase.YStandardEx.CString"
					@ "<string_view> used" $since b831,
				+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
					@ "function templates %(IsASCII, ToASCII)",
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' 
					@ "functions with name prefix 'Make'"
			),
			* "missing inclusion %YBase.YStandardEx.TypeTraits"
				@ "<string_view> used" @ %MappingEx $since b831,
			+ $dev $lib 'YB_ATTR_nodiscard'
				@ "function templates with name %(Decode, Encode)"
				@ %(StaticMapping, MappingEx),
			+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
				@ "static function with name postfix 'Invalid'"
				@ "class template specialization %GUCSMapper<CharSet::UTF_8>"
				@ %MappingEx
			/ @ %StaticMapping $=
			(
				/ "distinguished %byte and other 1-byte integral"
					@ "static assertion" @ "function template %CheckIterator",
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "function templates with name prefix 'Fetch'",
				/ DLI "avoided redundant %byte initialization"
					@ "static function %Decode#2" @ "class template \
					specialization %GUCSMapper<CharSet::UTF_8>"
			)
		),
		/ "%allocate_shard" %YCLib.Reference
			^ ($dep_from "%ystdex::allocate_shared" @ %YBase.YStandardEx.Memory)
			~ "%std::allocate_shared" $dep_all_from "qualified allocate_shared",
			// See https://developercommunity.visualstudio.com/content/problem/417142/lwg-2070p0674r1-stdallocate-shared-is-not-conformi.html, \
				also https://developercommunity.visualstudio.com/content/problem/80724/allocate-shared-performane-issue.html.
		/ %YSLib $=
		(
			/ %YSLib $=
			(
				/ %Adaptor $=
				(
					/ %Font $=
					(
						+ "debug logs"
							@ "member function %FontCache::LoadTypefaces",
						+ $dev 'YB_ATTR_returns_nonnull'
							@ "function %FetchName",
						+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' 
							@ "functions with name prefixes ('Fetch', 'Get', \
							'Lookup')",
						/ DLDI "member functions %Font::(GetAscender, \
							GetDescender)"
					),
					/ %Image $=
					(
						/ "truncated 'unsigned'" ~ 'unsigned long'
							$effective @ "%Image::(SetCount, SetLength), \
							%ImageMemory constructor buffer size",
							// Also to eliminate Clang++ warning: \
								[-Wshorten-64-to-32].
						+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' 
							@ "functions with name prefixes 'Get' or names \
							%(operator*, operator CompactPixmap, Lock, begin, \
							end, to_string, Load)", \
						+ $dev $lib 'YB_ATTR_nodiscard' 
							@ "functions and function templates with names \
							%(Release, DetectFormat) or prefix 'LoadFor'",
						+ $dev $lib 'YB_ATTR_returns_nonnull YB_PURE'
							@ "member function %HBitmap::operator[]",
						- $revert(b557) 'final'
							@ "class %ImageMetadataFindData",
						/ @ "class %HImageMetadata" $=
						(
							(
							/ DLI ^ "private base" ~ "%unique_ptr" $dep_from
								"%ImageMetadataFindData";
							/ $forced DLDI "function %operator (bool, ++), \
								constructor",
							* "missing definition of function operator \
								%ImageTag" $since b557 ^ "%DefCvt",
							/ $forced $lib "function %Rewind"
								-> 'using ImageMetadataFindData::Rewind;'
							),
							- $revert(b557) $dev $lib "redundant \
								'friend deref_self<HImageMetadata>;'",
							* $re_add(b820) "missing exclusion of self type"
								@ "constructor template" $since b557,
							(
							/ "function %operator bool" -> "function operator \
								%(!, bool)" ^ "%DefBoolNeg" ~ "%DefCvt";
							+ $comp "function %operator!"
							)
						)
					),
					/ $re_add(b847) DLDI ^ 'YB_ATTR_nodiscard' @ %(Font, Image)
				),
				/ %Core $=
				(
					/ %ValueNode $=
					(
						/ @ "class %ValueNode" $=
						(
							- $revert(b844) "all 2 constructors with \
								%allocator_arg_t and trailing parameters \
								having equivalences with trailing allocator \
								parameter"
								// This was useful during transition. It is now \
									redundant to the uses-allcator construction.
							+ "parameter" @ "static functions \
								%(ThrowIndexOutOfRange, ThrowWrongNameFound)",
							+ $dev $lib 'YB_PURE'
								@ "function %get_allocator"
						),
						/ $forced "recoded parameter on throw"
							@ "(function, function templates) %AccessNode",
						+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' 
							@ "functions with names %(extend_key, \
							get_value_key, operator(==, <, >), \
							size, IsPrefixedIndex), postfixes ('begin', 'end', \
							'ToNode', 'Nodes') or prefixes ('Access', 'As', \
							'Get', 'Make')"
					),
					/ %YEvent $=
					(
						/ @ "class template %GHEvent" $=
						(
							* "invalid 'yconstfn_relaxed'" @ "friend function %swap \
								for %Comparer" $since b834
								^ "%ystdex::swap_dependent" ~ "%std::swap",
							/ "simplified constructors" $=
							(
								/ DLDI "all SIFNAE function parameter"
									-> "template parameter",
									// This gets all the 'yimpl' instances in \
										each declaration together.
								* "ill-formed but no diagnostics required \
									bogus 'constexpr'" @ "constructors" $since
									b246
									$= (- 'yconstfn')
							),
							/ $revert_ex(b948) $comp "throwing behavior for \
								empty targets" @ "%operator()" $dep_from
								("%ystdex::function"
								@ %YBase.YStandardEx.Function),
								// This is actually not relied on, but anyway \
									the performance impact should be evaluted \
									later.
						),
						* "ill-formed but no diagnostics required bogus \
							'yconstfn'" @ "default constructor %GEvent" $since
							b246
							$= (- 'yconstfn')
						/ $revert_ex(b333, b448, b808) "constructor \
							templates with callable reference parameter"
							-> "constructor templates with callable \
							object parameter" @ "class templates %(GHEvent, \
							GEvent)" ^ "%std::move" ~ "%yforward"
							!^ "ystdex::decay_t",
							// Note %operator= or compound assignment \
								operators are not applicable. See $2019-01 @ \
								%Documentation::Workflow.
						- "filtering %std::bad_function_call"
							@ "function template %operator"
							@ "struct %CountedHandlerInvoker" $dep_from
							%YSLib.UI.YComponent
							// This was actually never relied on except for \
								%UI::HBrush.
						- $revert(b494) "class template %GHandlerAdaptor"
							$dep_from %UI.YWidgetEvent
					)
				),
				/ $re_add(b847) DLDI ^ 'YB_ATTR_nodiscard'
					@ %Service.CharRenderer,
				/ %UI $=
				(
					/ "%HBrush" @ %YComponent $=
					(
						^ "%ystdex::optional_function" ~ "%std::function";
						/ $comp "avoided throwing %std::bad_function_call for \
							empty object on %operator() call"
					),
					(
					/ DLDI "simplified member function %TabControl::Attach"
						@ %TabControl !^ "%AddWidgetHandlerAdaptor";
						// This is not a modification to the interface and the \
							behavior is same because the identity of the \
							handler is in the implementation details.
					- $revert(b494) "function templates \
						%AddWidgetHandlerAdaptor; MakeWidgetHandlerAdaptor; \
						alias template %GWidgetHandlerAdaptor" @ %WidgetEvent
					)
				)
			),
			/ %NPL $=
			(
				/ %NPLA1 $=
				(
					// Microsoft VC++ 15.9.4 still has bug in instantiating \
						%WrapContextHandler. See https://developercommunity.visualstudio.com/content/problem/279415/using-tuple-element-in-if-constexpr-yields-erroneo.html.
					/ $re_add(b848) DLI "simplified constructor templates \
						%WrappedContextHandler"
						^ "%ystdex::exclude_self_params_t"
						~ "%ystdex::exclude_self_t",
					/ @ "namespace %Forms" $=
					(
						/ DLDI "function %DefineWithRecursion"
							^ "%YSLib::allocate_shared" ~ "%allocate_shared"
							$dep_to "qualified allocate_shared",
						/ $dev "class templates %(CallUnary, CallUnaryAs, \
							CallBinary, CallBinaryAs) avoided copy or move \
							functions" ^ "%ystdex::lref" ~ 'yforward',
						/ DLDI "function %MakeEncapsulationType"
							^ "%ystdex::invoke_value_or"
					),
					/ DLDI ^ "%(YB_ATTR_nodiscard, YB_PURE, ynothrow)"
				),
				/ %NPLA $=
				(
					/ @ "function template %AllocateEnvironment" $=
					(
						/ DLDI ^ "%YSLib::allocate_shared" ~ "%allocate_shared"
							$dep_to "qualified allocate_shared",
						/ $comp $dev $lib
							!^ "dependency on LWG 2070 of %std::allocate_shared"
							$dep_from %YCLib.Reference,
					),
					/ DLDI ("braced-init-list" @ "private data member"
						@ "class %ContextNode", "private class constructor"
						@ "class %Environment") ^ "%YSLib::allocate_shared"
						~ "%allocate_shared" $dep_to
						"qualified allocate_shared",
					* $re_add(b838) "ill-formed %Reducer constructors used"
						!@ '__cpp_inheriting_constructors >= 201511L' $since
						b841,
					/ $re_add(b848) DLDI "simplified class %Environment \
						private member" ^ "%rebind_alloc_t"
						~ "%allocator_traits",
					- $revert(b847) 'using YSLib::allocate_shared;'
						$dep_all_from "qualified allocate_shared",
					+ 'ynothrow'
						@ "all 3 non-template constructor %TermReference"
				),
				* $comp "all delimiters are inserted as empty strings"
					@ "platform %Android" @ "function %Decompose" @ %Lexical
					$since b838 $dep_from %YBase.YStandardEx.String
			)
		)
	),
	* $re_add(b838) "missing explicit cast to integer type from %byte or other \
		incompatible operations with %byte" $effecitve @ (((("wrong small \
		bitmap internal types" @ "class %Typeface" $since b612,
		"wrong aliased type" @ "%CharBitmap::(BufferType, ScaleType)" $since
		b562) @ %Font, ("wrong cast destination type" @ "constructor \
		%ImageMemory#3" $since b477, "constructor#2, operator \
		%(CompactPixmap, []), %GetPixels" @ "class %HBitmap" $since b430)
		@ %Image) @ %Adaptor, "functions %(RenderChar, RenderCharAlpha)"
		@ %Service.CharRenderer $since b415) @ %YSLib, "member function \
		%RegistryKey::GetRawValue" @ %'YCLib_(MinGW32)'.Registry $since b633,
		("static member function template %GUCSMapper<CharSet::GBK>::Decode"
		@ %MappingEx $orig (@ %StaticMapping $since b272), "static member \
		functions %GUCSMapper<CharSet::UTF_8>::(Decode, Encode), \
		%(GUCSMapper<CharSet::UTF_16BE>, GUCSMapper<CharSet::UTF_16LE>)::Decode"
		$since b272 $dep_from "%CheckIterator" @ %StaticMapping) @ %CHRLib)
		@ %YFramework ^ "%ystdex::(replace_cast, octet)",
		// This would be ill-formed once the %byte is %std::byte or other \
			types not implicitly convertible to %char.
	* $re_add(b839) $comp "build failure" @ "platform %Android" $since b841
		($dep_from ("%Reducer" @ %YFramework.NPL.NPLA), $dep_all_from
		"G++ 5.3 workarounds"),
	* $comp "configuration loading failure" @ "platform %Android" $since b838
		$dep_from %YFramework.NPL.Lexical
),

b848
(
	/ DLI "removed redundant 'const' for %ystdex::type_id" $effective
		@ "function templates %(unchecked_any_cast, unsafe_any_cast)"
		@ %YBase.YStandardEx.Any,
		// For %any, see also LWG 2769.
	/ %YBase.YStandardEx $=
	(
		/ %AnyIterator $=
		(
			/ @ "case %dereference" @ "static function %manage"
				@ "class template %iterator_handler" $=
			(
				* "missing support of cv-qualified object %reference type"
					$since b743,
				* "wrongly discarded cv-qualifier in referent of reference type"
					$since b743,
				/ DLDI ^ "%any_ops::(with_handler_t, wrap_handler)"
					~ "wrapping implicitly implied by constructor %any"
					$dep_to "avoided implicit wrapping of %any construction"
			),
			+ $dev $lib "static assertion to ensure valid reference type"
				@ "class template %input_iterator_handler",
				// The reference shall meet the requriements of ISO C++17 \
					%InputIterator, or some relaxed variants when the \
					%value_type is an abstract class.
			/ @ "friend function %operator==" @ "class %any_input_iterator" $=
			(
				/ "assertion"  ^ "%yconstraint" ~ "%yassume",
				/ DLDI "simplified" ^ "%any_storage::unchecked_access"
					~ "%any_storage::pun"
			)
		),
		/ %Memory $=
		(
			+ "unary type trait %alloc_value_t",
			+ "binary type traits %(rebind_alloc_t, rebind_traits_t)",
			/ DLDI "simplified function template %allocate_unique" ^ $dep_from
				"%rebind_alloc_t"
		),
		/ %TypeOperation $=
		(
			+ "transformation trait %exclude_self_params_t",
			/ DD "Doxygen groups"
		),
		+ ("class %allocator_mismatch_error"; "function \
			%throw_allocator_mismatch_error") @ %Exception,
		/ %Any $=
		(
			/ @ "namespace %any_ops" $=
			(
				+ $dev $lib "static assertion to constraint template parameter \
					%_type" @ "class templates %(value_handler, wrap_handler)"
					^ "%is_decayed",
					// This will constrain various handlers to allocate only \
						cv-unqualified non-array object types, include those \
						in %AnyIterator. Note this only makes the constraint \
						explicit without any incompatible change, since other \
						types have never been supported by the semantics.
				+ $dev $lib "static assertion to constraint resulted \
					%value_type is an object type"
					@ "class template %wrap_handler",
					// Ditto.
				/ @ "class template %ref_handler" $=
				(
					/ DLDI "class-key 'type'" @ "static function %init#1"
						 -> 'class',
					* "missing const stroage overloads for %(get_pointer, \
						get_reference)" $since b692,
					- "base class"
				),
				+ $re_add(b686) DLDI 'YB_ATTR(always_inline)'
					@ "static function template %init"
					@ "class templates %(ref_handler, holder_handler)",
				(
				+ "unions %(any_trivial_local_data; any_local_data)",
				/ @ "alias %any_storage" ^ "%any_local_data" $=
				(
					/ $re_ex(b847) "enlarged %any_storage size to \
						guarantee the local allocation support of object \
						pointers, functions and member pointers",
					/ $re_add(b847) "enlarged %any_storage alignment"
				)
				),
				+ "unary type trait %check_holder_t",
				+ "enumerators %(get_allocator_type, clone_with_allocator, \
					transfer_with_allocator)" @ "enum %base_op",
				/ DLDI @ "class template %value_handler" $=
				(
					/ $re_add(b847) "private %try_init" => "%init_or_throw",
					/ "simplified %copy" !^ "explicit %local_storage",
					/ DLDI "simplified non-local allocation and access"
						^ ("%std::unique_ptr", "%exclude_self_params_t"
						@ %TypeOperation),
					/ $dev "strenthened static assertion" ^ $dep_from
						"%check_holder_t",
					+ "handling of %(get_allocator_type, compare_allocator)"
						@ "%value_handler" $dep_from
						"%get_allocator_type, compare_allocator"
				),
				+ "'ynothrow' or 'ynothrowv'" @ ("all static member \
					%(get_pointer, get_reference) overloads" @ "class \
					templates %(value_handler, ref_handler, holder_handler)",
					"static member function %get_holder_pointer"
					@ "class template %holder_handler"),
				/ "base access-specifier" @ "value_handler inscances"
					@ "class template %holder_handler" -> 'private' ~ 'public',
				+ "alias %holder_type" @ "class template %holder_handler",
				(
				+ "class template %allocator_value_handler" ^ $dep_from
					"%(get_allocator_type, clone_with_allocator, \
					transfer_with_allocator)";
				+ "binary type trait %allocator_value_handler_t"
				),
				(
				+ "class template %allocator_holder_handler" ^ $dep_from
					"%(check_holder_t, get_allocator_type, \
					clone_with_allocator, transfer_with_allocator)";
				+ "binary type trait %allocator_holder_handler_t"
				),
				(
				+ "unary type trait %is_in_place_storable";
				/ DLDI "simplified default template argument"
					@ "class template %value_handler" ^ "%is_in_place_storable"
				)
			),
			/ @ "class %any" $=
			(
				/ "preserved type of reference wrappers"
					@ "constructor template %any with 1 parameter"
					^ "%any_ops::value_handler" ~ "%any_ops::ref_hanlder"
					$dep_from "avoided implicit wrapping of %any construction",
					// See $2018-12 @ %Documentation::Workflow.
				/ DD "updated descriptions on extensions and external \
					references" @ "Doxygen comment",
				* $revert(b847) "wrong 'YB_ATTR_nodiscard YB_PURE'"
					@ "functions named %(unchecked_access, call)" $since b847,
				/ "access-specifier 'protected'" @ "members %(get_storage, \
					call, unchecked_access)" -> 'public',
				(
				/ DLI "in-class storage initialization" -> "base class \
					constructor with %default_init_t and default \
					constructor with explicit 'yconstfn' and 'ynothrow'";
				/ DLI "kept move constructor away from redundant storage swap",
					// See $2018-12 @ %Documentation::Workflow.
				+ "constructor with %default_init_t parameter"
				),
				/ DLDI "simplified base (copy, move) operations",
				/ DLDI "object destroying and reset",
					// They share implementations.
				/ DLI "copy %operator=" ^ "move %operator=" ~ "%swap",
				/ DLI "move %operator=" ^ "%reset" ~ "%swap",
					// See $2018-12 @ %Documentation::Workflow.
				/ DLDI "protected base constructions",
				/ DLI "all out-of-line %any member function definitions and \
					base cleanup member functions" -> "header",
					// See $2018-12 @ %Documentation::Workflow.
				(
				+ "unary type trait %opt_in_place_t";
				(
				+ "8 constructor templates with %std::allocator_arg_t parameter"
					^ $dep_from ("%any_ops::(allocator_value_handler_t, \
					allocator_holder_handler_t, clone_with_allocator, \
					transfer_with_allocator)", "%opt_in_place_t",
					"%throw_allocator_mismatch_error" @ %Exception),
					// Allocator holders are not used if object can be \
						constructed in-place. There are 5 constructors to \
						differentiate in-place constructions. The remained one \
						is exceptional because of explicit use of the handler \
						type.
				+ "binary type traits %(allocated_value_handler_t, \
					allocated_holder_handler_t)"
				) ^ $dep_from "%rebind_alloc_t" @ %Memory
				),
				+ $dev 'explicit' @ "all 2 constructor templates with 1 \
					non-pack parameter and parameter pack",
				(
				+ "2 constructor templates with %std::initializer_list \
					instance";
					// To be conforming to ISO C++17.
				* "missing constructor template with %std::initializer_list \
					instance" $mismatch $since b717
					// WG21 N4582 does not have the constructor, but WG21 \
						N4606 has.
				),
				/ "overloads return reference" @ "all 3 function templates \
					%emplace",
					// See LWG 2857. As an extension, the holder case is \
						similar to the resolution.
				/ DLI "optimized %emplace_with_handler to avoid redundant \
					assignment in normal path" ^ "try-catch block"
			),
			/ "function %swap for %any" -> ("friend function" @ "class %any"),
			/ "template function overloads %any_cast with reference parameter"
				$=
			(
				// See LWG 2769.
				/ $dev "static assertions" !^ "%is_any_cast_dest" $dep_to
					"avoided any cast destination trait",
				- DLI "redendant 'const'" @ "cast target"
					@ "overload with const reference parameter",
				* "missing 'std::move' for result before cast"
					@ "overload for rvalue reference" $since b671
			),
			- $revert(b671) "trait %is_any_cast_dest" $dep_from
				"avoided any cast destination trait"
		),
		/ %Function $=
		(
			* "ill-formed traits %(make_parameter_tuple, return_of)"
				@ '__cpp_noexcept_function_type >= 201510L'
				$since b847,
			+ ("function templates %function_not_empty",
				"class template %function" ^ "%any" $dep_from
				("constuctors %any" @ %Any));
			+ "class template specializations of %(make_parameter_tuple, \
				return_of) for %function"
		),
		/ %Functional $=
		(
			/ $dev $impl "simplified class specialization %call_projection for \
				%std::function" ^ "public base",
			+ "class specialization %call_projection for %function"
				$dep_from ("%function" @ %Function), ("%any::call" @ %Any)
				// This is insufficient without the change of \
					%any_ops::any_storage.
		),
		/ %Map $=
		(
			/ DLDI "simplified all parameter forwarding without variadic \
				parameter in lambda-expressions" ^ "%yforward" ~ "%std::forward"
				$effective @ "member functions %insert" @ "class template %map",
			/ "function template %swap for %map instances" 
				@ %Map -> ("friend function" @ "class template %map"),
				// To be consistent with %(any, function).
			/ DLDI "simplified class template %map" ^ $dep_from
				"%(alloc_value_t, rebind_alloc_t)" ~ "%allocator_traits"
		)
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ @ 'YCL_HostedUI_XCB' @ %HostedGUI $=
			(
				/ "%platform_ex::NativeWindowHandle" !^ "%nptr";
					// To simplify because similar handle in other platforms \
						are all not wrapped by %nptr and it would be wrapped \
						in %WindowReference. Note this implies ownership so it \
						should not be merely an observer, so it also cannot be \
						an instance of %tidy_ptr.
				/ $forced DLDI "simplified (member functions \
					%(HostWindowDelete::operator(), WindowReference::Deref), \
					constructor %HostWindow)"
			),
			/ @ "class %Logger" @ %YCLib.Debug $=
			(
				/ "types %(Filter, Sender)" ^ ("%ystdex::function"
					@ %YBase.YStandardEx.Function) ~ "%std::function",
				- $revert(b804) $dev "implementation specific check for \
					non-throwing %std::function swap" @ "member function %swap"
			)
		)
		/ %Helper.HostRenderer $=
		(
			/ $forced DLDI @ 'YCL_HostedUI_XCB' @ "static member function \
				%WindowThread::WindowLoop" $dep_from %YCLib.HostedGUI
			* $dev $lib "wrong parameter order" @ "%WM_ERASEBKGND handling"
				@ "platform %Win32" @ "constructor %RenderWindow"
				@ %Helper.HostRenderer
				// The parameters are dummy so there was no effect. Also to \
					eliminate G++ warning: [-Wsign-conversion] when even map \
					underlying handler is not wrapper type introduced from \
					system headers.
		),
		/ %YSLib $=
		(
			* $dev "missing 'const'" @ "member function \
				%BorderBrush::operator()" @ %UI.Border $since b284;
				// This is compatible with %GHEvent implemented by \
					%std::function but not %ystdex::function.
			/ %Core $=
			(
				/ @ "class template %GHEvent" @ %YEvent $=
				(
					(
					/ $impl "base" ^ $dep_from ("%ystdex::function"
						@ %YBase.YStandard.Function) ~ "%std::function"
						$dep_from (("class template specialization \
						%ystdex::make_parameter_tuple" @ %Function),
						("class template specialization \
						%ystdex::call_projection" @ %Functional)
						@ %YBase.YStandard);
						// The specialization of %ystdex::make_parameter_tuple \
							is needed to keep %NPL.NPLA1 well-formed and \
							the specialization of %ystdex::call_projection \
							is needed for %YSLib.UI.
					- $comp "permissive non-const %operator() target support",
						// Now qualifiers of target %operator() shall be more \
							strictly matched (see %UI.YBrush modification \
							above for example).
					- $revert(b806) $dev "implementation specific check for \
						non-throwing %std::function swap"
						@ "member function %swap",
					+ "5 constructor templates with %std::allocator_arg_t and \
						allocator parameters"
					),
					/ $revert_ex(b825) "simplified workaround"
						@ "constructor with callable object parameter"
				),
				/ %YObject $=
				(
					(
					+ "2 function template %CreateHolderInPlace overloads with \
						%std::allocator_arg_t and allocator parameters"
						$dep_from ("constructor %any" @ %YBase.YStandardEx.Any),
					/ @ "class template %AllocatorHolder" $=
					(
						- $doc "allow reference template parameter";
						+ DLDI "stored allocator object as base class";
						+ "function %get_allocator",
						- $dev "static assertion",
							// This is redundant since the base class shall be a
							//	cv-unqualified class type.
						(
						// This is now similar to %ValueHolder except that it \
							also has an allocator object initialized before \
							the %value data member. The allocator-aware \
							allocation is now expected to be managed by \
							%ystdex::any_ops::holder_handler, to avoid \
							excessive allocation due to the object not fit in \
							%ystdex::any_ops::any_storage.
						- $revert(b847) $dev "static assertion";
						/ $revert_ex(b847) "stored without allocator deletion"
							!^ "%unique_ptr";
						/ "conditionally created object with allocator object \
							for %(Copy, Move) operations" @ "function %Create"
							^ $dep_from ("%CreateHolderInPlace",
							("%ystdex::any_ops::is_in_place_storable"
							@ %YBase.YStandardEx.Any)),
						/ $dev "simplified constructors and %operator="
							^ "%DefDeCopyMoveCtorAssignment",
						(
						- "null state";
						+ 'YB_PURE' @ "functions %(OwnsCount, get, type)"
						)
						)
					);
					/ "constructor %ValueObject with allocator parameter" $=
					(
						/ $impl ^ $dep_from (("%ystdex::any constructor with \
							allocator, %allocated_holder_handler_t" @ %Any,
							"%ystdex::(alloc_value_t, rebind_alloc_t)"
							@ %Memory) @ %YBase.YStandardEx);
							// %AllocatorHolder is still used since \
								%ValueHolder cannot create other object by \
								%Create with the allocator and it is actually \
								less efficient.
						+ $dev "static assertion to ensure no non-local \
							additional allocation performed"
					)
					),
					+ $dev 'explicit' @ "the constructor template with 1 \
						non-pack parameter and parameter pack"
				)
			)
		)
	)
),

b847
(
	/ %YBase.YStandardEx $=
	(
		/ %Pointer $=
		(
			+ "explicit specialization of class template %std::hash for \
				%ystdex::nptr",
			/ @ "class template %observer_ptr" $=
			(
				/ $revert(b757) DLDI ^ "%add_pointer_t" ~ "%add_ptr_t",
				* $revert(b757) "ill-formed when %void is used as \
					template parameter" $since b629 $=
				(
					/ $impl ^ "%add_lvalue_reference_t" ~ "%add_ref_t",
					/ "operator*" ^ 'yconstfn_relaxed' ~ 'yconstfn'
				),
				* "missing conversion detection on template paramete type"
					@ "construtor template" $since b669;
				/ $doc "updated reference LFTS v3" @ "Doxygen comment"
			),
			/ %Any $=
			(
				+ DD '\ingroup YBase_replacement_features' @ "Doxygen comment"
					@ ("class %any", "function %swap for %any", "all function \
					templates %(2 make_any, 5 any_cast)"),
				+ DD '\ingroup YBase_replacement_extensions'
					@ "Doxygen comment" @ ("namespace %any_ops",
					"member functions %bad_any_cast::(from, from_type, to, \
					to_type)", ("constructors with %any_ops::use_holder_t \
					parameter", "functions %(get, get_holder, unchecked_get, \
					unchecked_get_holder, unchecked_type)", "function \
					template %(emplace_with_handler, all 2 target)",
					"protected functions %(get_storage, call)", "protected \
					function template %unchecked_access") @ "class %any",
					"function templats %(hold_same, all 2 unchecked_any_cast, \
					all 2 unsafe_any_cast)"),
				+ "%YBase_replacement_extensions" @ "'\ingroup' command"
					@ "Doxygen comment" @ "unary type trait %is_any_cast_dest",
				+ $re_add(b846) $dev 'YB_ATTR_nodiscard YB_PURE'
					@ "functions and function templates with specified glob \
					name patterns or names"
					// With some restrictions added to virtual functions.
				$= ('*access', '*target', '*type', "%any_cast", "%from",
					"%has_value", "%hold_same", "%operator _type", "%to",
					'un*_any_cast', 'un*_get*'),
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "all 2 function templates %make_any",
				+ $dev $lib 'YB_ATTR_nodiscard yimpl(YB_PURE)'
					@ "member function %bad_any_cast::what",
				/ "enlarged %any_ops::any_storage size",
				/ $dev @ "namespace %any_ops" $=
				(
					+ "static assertion to ensure enough space available when \
						stored locally" @ "class template %value_handler",
					(
					+ $doc "Doxygen group %any_handlers";
					/ $doc "class templates %(value_handlers, ref_handlers, \
						holder_handlers)" >> "Doxygen group %any_handlers"
					)
				)
			)
		),
		/ %Memory $=
		(
			(
			* "constructor" @ "class template %allocator_delete" $since b846
				$= (/ "inherited base constructor"
					-> "constructor template excluding self type parameter");
			+ "function template %allocate_unique",
			),
			/ "object creation function templates with glob 'try_*' pattern as \
				names" @ %Memory => '*_or_throw' $effective @ "%try_new, \
				try_create, try_create_with_allocator"
				// To be more consistent to description of well-knowned use of \
					'try_*' prefix in %Documentation.CommonRules.
		),
		/ @ "function template %construct#1" @ "class template \
			%polymorphic_allocator" @ %MemoryResource $=
		(
			/ DLDI "simplified uses-allocator construction inner dispatch with \
				allocator parameter at end",
			* "allocator value type intefered construction due to wrong type \
				used for %std::uses_allocator" $since b842 $dep_to
				"fixed polymorphic allocated type"
		),
		(
		+ %Function;
		+ "inclusion %Function" @ %Functional
		/ $lib "metafunctions %(is_covariant, is_contravariant, \
			make_parameter_tuple, make_parameter_tuple_t, return_of, \
			return_of_t, parameter_of, parameter_of_t, paramlist_size, \
			make_function_type, make_function_type_t, id_func_t, \
			id_func_clr_t, id_func_rr_t), function templates %(sizeof_params, \
			varg, chain_apply, seq_apply, unseq_apply), class templates \
			%(variadic_param, enable_fallback_t)" %Functional >> %Function;
		/ %Function $=
		(
			/ DD '\ingroup metafunctions' -> '\ingroup transformation_traits'
				@ "Doxygen comment" @ "all metafunctions",
			+ DD '\ingroup transformation_traits' @ "Doxygen comment"
				@ "metafunctions %(enable_fallback_t, id_func_t, \
				id_func_clr_t, id_func_rr_t)",
			/ @ "traits %(make_parameter_tuple, return_of)" $=
			(
				/ $revert_ex(b358, b675) $impl "simplified" ^ "%remove_cvref_t",
				* $comp $re_add(b358) "missing cv-qualifier for non-member \
					function types" $orig (@ %Functional $since
					b333)
				* $comp "missing cv-qualifier for %std::function instances"
					$orig (@ %Functional $since b447),
				/ $re_add(b845) "supported ISO C++17 'noexcept' type qualifiers"
					$= (/ "specializations"
						^ "%(ynoexcept_param, ynoexcept_qual)")
			),
			* $re_add(b675) "missing specialization for trailing '...' \
				parameters as ignored"
				@ "transformation trait %make_parameter_tuple" $since b333
		)
		)
	),
	/ %YFramework $=
	(
		/ @ "inline namespace %references" @ "namespace %platform"
			@ %YCLib.Reference $=
		(
			+ "alias %allocate_shared",
			+ "alias %allocate_unique" $dep_from
				("%allocate_unique" @ %YBase.YStandardEx.Memory),
		),
		/ %YSLib.Core.YObject $=
		(
			+ "class template %AllocatorHolder" $dep_from (%YCLib.Reference,
				("any_ops::any_storage" @ %YBase.YStandardEx.Any));
			/ @ "class %ValueObject" $=
			(
				+ "constructor %ValueObject with %std::allocator_arg_t, \
					allocator and object parameters" ^ $dep_from
					"%AllocatorHolder",
				/ "excluded %std::allocator_arg_t parameter"
					@ "constructor template with 1 parameter"
			)
		),
		/ %NPL $=
		(
			/ "supported allocator" @ ("function %Reduce#1" @ %SContext,
				"function %LoadGroundContext" @ %Dependency)
				$dep_from %YSLib.Core.YObject,
				// This is usually efficient here. Not applied elsewhere \
					because it would not be necessarily efficient.
			/ %NPLA $=
			(
				+ "alias %allocate_shared" $dep_from %YCLib.Reference,
				+ "alias %AnchorPtr",
				/ @ "class %Environment" $=
				(
					(
					(
					/ "initialized with allocator" @ "anchor";
					/ $forced "defaulted copy constructor"
						-> "user-defined providing allocator from %Bindings",
					)
					+ "friend function %swap";
					/ "defaulted %operator=" -> "user-defined function"
						^ "%ystdex::copy_and_swap"
					- DLDI "copy" @ "anchor"
					),
					+ DLI 'ynothrow' @ "anchor move %operator=",
					+ 'ynothrow' @ "function %Anchor",
					(
					/ DLDI ^ $dep_from "%AnchorPtr" ~ "%shared_ptr<void>";
					/ "function %GetAnchorPtr" -> "%GetAnchorCount"
					),
					/ "allocatedd environemnt bindings map pointer" ^ $dep_from
						"allocate_shared" ~ "%make_shared",
					(
					+ "uses-allocator construction support"
						$dep_from ("constructor template with 1 parameter"
						@ "class %ValueObject" @ %YSLib.Core.YObject) $=
						// The constructors shall avoid %std::allocator_arg_t \
							to be initalized as a parent environment object.
					(
						+ "alias %allocator_type",
						/ "swapped parameter with 1st allocator type"
							@ "constructors #(5, 6)",
						/ $forced DLDI "constructors #(7, 8)"
					);
					/ $dev $lib "simplified allocator parameters"
					)
				),
				/ DLI "intialization of environment"
					@ "class %ContextNode" ^ $dep_from "%allocate_shared"
					$dep_from "uses-allocator construction support""
				(
				+ "3 function templates %AllocateEnvironment" ^ $dep_from
					"allocate_shared" $dep_from ("fixed polymorphic allocated \
					type", "uses-allocator construction support"
					@ "class %Environment");
				/ DLI "function %SwitchToFreshEnvironment"
					^ "%NPL::AllocateEnvironment"
				),
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "functions and function templates with specified glob \
					name patterns or names except those defined by 'Def*'" $=
					("%MapNPLALeafNode", "%TransformToSyntaxNode",
						"%EscapeNodeLiteral", "%LiteralizeEscapeNodeLiteral",
						"%ParseNPLANodeString", "%DefaultGenerateIndent",
						"%ConvertAttributeNodeString", "%ConvertStringNode",
						'Make*', 'Categorize*', 'Is*', 'TermTo*', "%operator==",
						"%get", "%ReferenceTerm", 'AccessTerm*', "%CheckNorm",
						'Combine*Result', "%PassCombiner::operator()",
						"%LookupName", 'FetchValue*', "%ComposeActions"),
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "functions with names %(ConvertDocumentNode, Collapse, \
					CheckReducible, Anchor, DefaultResolve, ComposeActions) or \
					glob name pattern 'Resolve*'"
			),
			/ %NPLA1 $=
			(
				/ "delimiter parameter" @ "functions %(all 2 \
					TransformForSeparator, all 2 \
					TransformForSeparatorRecursive, \
					ReplaceSeparatedChildren, \
					RegisterSequenceContextTransformer)"
					^ "%TokenValue" ~ "%ValueObject",
					// With support of heterogeneous key lookup, this saves \
						some %ValueObject objects being created.
				/ $focred DLDI "TCO" $=
				(
					/ DLDI ^ $dep_from ("%AnchorPtr" @ %NPLA)
						~ "%shared_ptr<void>",
					/ $focred DLDI $dep_from
						("%Environment::GetAnchorPtr" @ %NPLA),
					/ @ "internal temporary maintainence" $=
					(
						/ DLI ^ $dep_from ("%AllocateEnvironment" @ %NPLA)
							~ "%make_shared";
						+ $comp $lib "assertion to ensure allocator equality"
					)
				),
				/ DLI ("allocated environment" @ "function %MakeEnvironment",
					"allocated recursion thunk and cyclic thunk handler"
					@ "function %DefineWithRecursion") @ "namespace %Forms"
					^ $dep_from ("%allocate_shared" @ %NPLA) ~ "%make_shared"
					$dep_from "fixed polymorphic allocated type",
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "functions and function templates with specified glob \
					name patterns or names except those defined by 'Def*'" $=
					("%to_string", "%GetNextTermRef", "%operator==", 'Wrap*',
					'Transform*', "%FetchArgumentN", 'Is*', 'StringTo*'),
					// Result of 'Retain*' is idiomatic to be optionally \
						ignored.
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions or function \
					templates returning non-void with names %(Propress, \
					Prepare, ReadFrom) or glob name pattern 'LoadNode*'",
				/ DLI "optimized vau handler calls" $=
				(
					/ "handled dynamic environment name at construction"
						~ "%operator()",
					- "logging" @ 'defined(NDEBUG)'
				),
				/ DLDI "simplified all 2 function templates %LoadNode"
					^ 'std::forward<TermNode>' ~ 'std::forward<TermNode&&>',
				/ DLDI "simplified function template %CallUnaryAs"
					^ 'std::forward<_tParmas>' ~ 'std::forward<_tParams&&>'
			),
			/ @ "derivation of applicative 'copy-environment'"
				@ "function %LoadGroundContext" @ %Dependency $=
			(
				/ DLI ^ $dep_from ("%AllocateEnvironment" @ %NPLA)
					~ "%make_shared";
				+ $comp $lib "assertion to ensure allocator equality"
			)
		)
	),
	/ "Microsoft VC++ projects" $=
	(
		+ $build "'@echo' command to print notice" @ "NMake build command \
			property 'NMakeBuildCommandLine'" @ "project %YFramework_MinGW32",
			// To eliminate Microsoft VS 2017 warning from \
				"Microsoft.MakeFile.Targets(43,5)": MSB8005.
		- $dev "all items" @ "filters %(include, source)"
			@ "project %YFramework_Android",
			// The target files should not be in filters specific to the host.
		(
		+ "projects %(YSTest, Tools.SHBuild)" @ "platform %Win32";
		/ "enabled multiprocessor compiler option '/MP'" @ "all projects"
			@ "platform %Win32",
		/ "setup project %YSTest as default project" ~ "%YFramework"
			// This is not yet supported, but it should be runnable with \
				patches (with package of FreeType2), even not working properly.
		),
		/ DLD "simplified all 'BuildLog' property using default value"
			@ "all projects"
		- $re_add(b842) $dev "all redundant NMake properties" $effective
			@ "projects %(YBase, YFramework)",
			// Now IntelliSense also does not use outdated settings from \
				platform %DS.
		- $build $lib '/ignore:4006' @ "additional options" @ "project %YBase",
			// Warning LNK 4006 should not occur unless there are bugs of ODR, \
				or there are bugs of compiler or linker (in previous versions \
				of Microsoft VC++).
		/ $dev $build "all configurations %(Debug, Release)"
			=> "%(debug, release)",
		/ $dev "excluded to build %doc/ex.cpp" @ "project %YFramework"
			// This is only for historical notes and currently it is not in \
				the build target.
	)
),

b846
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ DD %MemoryResource $=
			(
				(
				+ "'\note' commands" @ "Doxygen comment"
					@ "class %pool_resource";
				* "missing implementation-defined notices for pools" $since b842
					// See WG21 N4778 [mem.res.pool.options].
					$= (+ "'\note' command" @ "Doxygen comment"
						@ "struct %pool_options")
				),
				+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
					@ "functions and function templates with specified glob \
					name patterns or names" $=
					("%find_pool", "%get_size_of_n", "%options", "%pool_exists",
						'upstream*'),
				+ $dev $lib 'YB_ATTR_nodiscard'
					@ "functions with name %do_is_equal",
				+ $dev $lib 'yimpl(YB_PURE)' @ "function %do_is_equal"
					@ "classes %(pool_resource, monotonic_buffer_resource)"
			),
			+ $re_add(b845) DD '\ingroup YBase_replacement_features'
				@ "Doxygen comment" @ ("class template %basic_string" @ %String,
				"class template %map, function template %swap for %map \
				instances" @ %Map),
			/ %Meta $=
			(
				* "ill-formed instantiation of %is_char_specialized_in_std when \
					there are more than 2 parameters in the template parameter \
					pack" $since b671,
					// See also https://github.com/FrankHB/YSLib/pull/1.
				(
				+ "metafunction %cond";
				/ DLDI "simplified metafunction %cond_t" ^ "%cond"
					~ "%conditonal_t"
				)
			),
			/ %Pointer $=
			(
				/ @ "namespace %ystdex" $=
				(
					+ "2 function templates %to_address",
						// See WG21 P0653R2.
					+ $dev 'YB_ATTR_nodiscard YB_PURE' @ "functions and \
						function templates with names %(get, get_ref, \
						make_observer, operator(!, *, ->, ==, !=, <, bool, \
						pointer)) except overloads with pointer parameter or \
						with %(observer_ptr, pointer_iterator) instances",
						// With some restrictions added to %nptr parameer type.
					+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
						@ "function templates %(get, make_observer, \
						operator(*, ->, ==, !=, <, bool, pointer)) with \
						pointer parameter or with %(observer_ptr, \
						pointer_iterator) instances" $effective "%make_observer"
				),
				+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
					@ "function %operator()" @ "explicit specialization of \
					class template %std::hash for %ystdex::observer_ptr"
					$dep_from ("%std" @ %Memory)
			),
			/ %Memory $=
			(
				/ @ "namespace %ystdex" $=
				(
					+ "function template %try_create",
					+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ "non-deleted \
						functions and function templates without %YB_NORETURN \
						and with specified glob name patterns or names"
						$= ('*_pointer_cast', "'get*' except \
							%get_temporary_buffer or %get_raw with pointer \
							type parameter", "'owns_*' except %owns_any with \
							pointer type parameter", "%operator const \
							pack_type&", "%operator pack_type&", "%size"),
					+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS'
						@ "function templates for pointer type parameter"
						$effective @ "%(get_raw, 'owns_*')",
					+ $dev $lib 'YB_ATTR_nodiscard' @ "non-deleted functions \
						and function templates without %YB_NORETURN and with \
						specified glob name patterns or names"
						$= ('clone_*_ptr', "%get_temporary_buffer", 'make_*',
							'pack*', 'share_*', 'try_*', 'unique_*'),
					/ 'YB_ATTR_nodiscard' @ "function templates implemented by \
						calling %::operator new" $effective ("templates \
						%new_aligned", "function %allocate")
						@ "class template %class_allocator" -> 'YB_ALLOCATOR',
				(
				/ @ "class template %allocator_delete" -> "class templates \
					%(allocator_delete, allocator_guard_delete)" $=
				(
					// See $2018-12 @ %Documentation::Workflow.
					+ "class template %allocator_guard_delete";
						// As old %allocator_delete.
					/ @ "class template %allocator_delete" $=
					(
						// Like WG21 P0316R0, with merged template \
							specializations and 'const' preserved.
						+ "constructor with default count parameter"
							-> "constructor without count parameter but with \
							'ynothrow'",
						+ "constructor template",
						/ "destroyed object before deallocation" @ "%operator()"
							^ $dep_from ("%ystdex::to_address" @ %Pointer)
					),
					+ "function %get_count"
						@ "class template %allocator_guard_delete"
				);
				/ $forced DLDI "alias template %allocator_guard, function \
					template %make_allocator_guard" ^ "%allocator_guard_delete"
					~ "%allocator_delete"
				),
				/ DLDI "simplified metafunction %nested_allocator" ^ $dep_from
					("%cond" @ %Meta) ~ "%conditional"
				),
				/ "namespace %std" >> %Pointer
			),
			/ $re_add(b836) $dev $lib %String $=
			(
				+ 'YB_ATTR_nodiscard' @ "functions and function templates \
					with specified glob name patterns or names"
					$= ('*substr', '*prefix', '*to_*string', "%alph",
						"%begins_with", "%cast", "%compare", 'ends_*', 'find_*',
						"%exists_substr", 'get_*', "%operator+",
						"%operator sv_type", "%quote", "%ston", "%string_begin",
						"%string_end", "%vsfmt");
					// Note %sfmt is ruled out as no [[nodiscard]] is allowed here \
						by ISO C++. See https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/dbxwk5yeCv8.
				+ 'YB_PURE' @ "member functions marked 'YB_ATTR_nodiscard'"
			),
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE' @ "functions and function \
				templates with specified glob name patterns or names" @ %Map
				$= ('*_bound', '*_comp', '*begin', '*end', '*size', 'at*',
					"%equal_range", "%extract", "%find", 'get_*',
					"%operator(==, <, ())")
		),
		/ DLDI ^ "%allocator_traits" ~ "%std::allocator_tratis"
			$effective @ (("function templates %(make_allocator_guard, \
			create_with_allocator, alloc_on_copy, alloc_on_move, \
			alloc_on_swap)", "internal allocator traits" @ "class template \
			%allocator_delete") @ %Memory, "class template %string_traits"
			@ %String),
			// Though the new members of ISO C++ 17 are not used, the \
				namespace prefix is better to be ellisped as most type tratis.
		+ $re_add(b845) DD '\ingroup traits' @ "Doxygen comment"
			@ "class template %string_traits" @ %String,
		* "macro %YB_ALLOCATOR wrongly defined as %YB_ALLOCATOR_EVENT"
			@ 'YB_IMPL_MSCPP >= 1900 && !defined(__EDG__) \
			&& !defined _CORECRT_BUILD' @ %YDefinition $since b842,
		* "ambiguity of %swap caused by order of internal specialiations"
			@ "trait templates %(is_swappable_with, is_swappable, \
			is_nothrow_swappable_with, is_nothrow_swappable)"
			$since b845
	),
	/ %YFramework $=
	(
		/ DD "group %type_traits_operations" @ "'\ingroup' command"
			@ "Doxygen comment for traits class templates" -> "%traits"
			$effective @ ("%PointerHolderTraits" @ %YSLib.Core.YObject,
			"%AXYZValueTraits" @ %YCLib.Video),
		/ %YCLib $=
		(
			/ %Video $=
			(
				/ @ "class template %PixelQuadruple" $=
				(
					+ "aliases %(AWidth, BWidth, GWidth, RWidth)",
					/ "function template %GetStoredComponent"
				),
				/ "functions %FetchOpaque for different platforms"
					-> ("function" @ "namespace %YSLib::Drawing"
					@ %YSLib.Core.YGDIBase),
				(
				/ "functions %(PixelToAlpha, PixelToBlue, PixelToGreen, \
					PixelToRed)" -> ("functions" @ "namespace %YSLib::Drawing"
					^ $dep_from "%ComponentTratis") @ %YSLib.Core.YGDIBase
					^ $dep_from
					"%PixelQuadruple::(AWidth, BWidth, GWidth, RWidth)",
				- ("functions %FetchAlpha for different platforms",
					"functions %(ColorComponentsToPixel; FetchPixel)") $dep_from
					("aliases %(FetchAlpha, ColorComponentsToPixel)"
					@ %YSLib.Adaptor.YAdaptor);
				/ "aliases %(MonoType, AlphaType)"
					>> ("namespace %YSLib::Drawing" @ %YSLib.Core.YGDIBase)
				),
				/ @ "function %InitVideo" $=
				(
					/ "return type" -> "%void" ~ "%bool",
					+ 'yimpl(ynothrow)'
				)
			),
			/ %FileIO $=
			(
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions and function \
					templates with specified glob name patterns or names" 
					// 'Set*locking' is allowed to ignore the result.
					$= ("%CategorizeNode", "%DefaultPMode", "Fetch*', 'Get*',
						"%HaveSameContents", "%IsNodeShared", 'MakePathString*',
						"%SetSize", "%is_open", 'omode_conv*', "%open_check",
						"%operator(*, ->, ==, !=, <)", 'u*'),
				* "missing 'YF_API" @ ("all 2 functions %FetchNumberOfLinks"
					$since b719, "function %IsNodeShared#4" $since b638)
			)
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ %YObject $=
				(
					+ '\ingroup tags' @ "Doxygen comment"
						@ "classes %(OwnershipTag, MoveTag, PointerTag)",
					(
					/ "2 function templates %CreateHolderInPlace"
						-> "%TryCreateHolder" ^ $dep_from ("%ystdex::try_create"
						@ %YBase.YStandardEx.Memory);
					/ $forced DLDI ("static member function template \
						%IValueHolder::CreateHolder",
						"function %Create" @ "class template %PointerHolder")
					),
					/ DD "group %type_traits_operations" @ "'\ingroup' command"
						@ "Doxygen comment"
						@ "class template %PointerHolderTraits" -> "%traits",
					+ $dev 'YB_ATTR_nodiscard YB_PURE' @ "functions and \
						function templates with specified glob name patterns \
						or names"
						// With some restrictions added to virtual functions \
							and template tppe on %AreEqualHeld.
						$= ('*_owner', 'Access*', "%AreEqualHeld", 'Equals*',
							'Get*', "%HoldSame", 'Owns*', "%Ref", "%are_equal",
							"%get", "%operator(==, !=)", "%type"),
					+ $dev $lib 'YB_ATTR_nodiscard' @ "functions and function \
						templates with specified glob name patterns or names"
						$= ('Create*', "%CopyMove", "%EmplaceIfEmpty", 'Make*')
				),
				/ "namespace %Drawing" @ %YGDIBase $=
				(
					+ "class template %ComponentTratis",
					(
					+ "function template %CompositePixelByCMapIndex";
						// This is not fit as a member for 'yconstfn' is \
							needed. In particular, if it defines later than \
							the use position, it would reject by Clang++ 7 \
							(although accepted by G++ 7.1). See also https://stackoverflow.com/questions/29551223/static-constexpr-function-called-in-a-constant-expression-is-an-error.
					/ "member function %Color::operator Pixel" ^ "%DefCvt"
						~ "%ColorComponentsToPixel"
					),
					+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
						@ "functions and function templates with specified \
						glob name patterns or names"
					$= ('*Center', 'Contains*', 'Get*', "%MakeRect",
						"%ScaleMin", 'Transpose*', "%get",
						"%operator (==, +, -, *, &, |, Pixel)", "%to_string"),
					+ $dev $lib 'YB_ATTR_nodiscard YB_STATELESS' @ "functions \
						with specified glob name patterns or names ("%Flip",
						'Rotate*')"
				)
			),
			/ %Adaptor.YAdaptor $=
			(
				(
				- $revert(b839) $forced "aliases %(PixelToAlpha, PixelToBlue, \
					PixelToGreen, PixelToRed)",
				- $revert(b297) $forced "alias %FetchOpaque",
				- $revert(b417) $forced "alias %(MonoType, AlphaType)"
				) $dep_from %YCLib.Video,
				- $revert(b297) "alias %FetchAlpha" $dep_from %Service.YBlend,
				- $revert(b839) "alias %ColorComponentsToPixel" $dep_from
					"%Color::operator Pixel" @ %Core.YGDIBase
			),
			/ %Service $=
			(
				/ DLDI "functor %BlitTransparentPoint" @ %YBlend
					^ ("%PixelToAlpha" $dep_from %Core.YGDIBase) ~ "%FetchAlpha"
				+ $dev $lib 'YB_ATTR_nodiscard' @ "functions and function \
					templates with name prefixes 'Blend' or 'Composite'"
					@ %YPixel
				/ $dev $lib %Pixel $=
				(
					+ 'YB_ATTR_nodiscard YB_STATELESS' @ "function templates \
						names %(CompositeAlphaOver, CompositeComponentOver, \
						BlendComponent, CompositeComponent, BlendCore)",
					+ 'YB_ATTR_nodiscard YB_PURE' @ "function templates \
						names %(Blend, BlendAlpha, Composite)"
				)
			)
		),
		/ "threw for error other than %ENOENT" @ "functions \
			%(InstallHardLink, InstallSymbolicLink)" @ %NPL.Dependency
			^ "%Remove" ~ "%uremove"
			// Also to prevent warning: [-Wunused-result] after \
				'YB_ATTR_nodiscard' added to %uremove.
	),
	/ "traits type names" $=
	(
		* "member %traits_type wrongly named %traits"
			$effective "class template %basic_filebuf"
			@ %YFramework.YCLib.FileIO $since b616,
			// ISO C++ specify the name as public.
		/ DLDI ("private %traits for %allocator_traits instance"
			=> "names with name postfix 'ator_traits'") $effective
			@ ("class template %allcator_delete"
			@ %Memory, "class template %map" @ %Map) @ %YBase.YStandardEx,
			// To be consistent to ISO C++ style, e.g. in \
				[container.node.overview]. And the name 'traits' is for \
				template parameter, which %_tTraits in YSLib code.
		(
		/ "member type %Traits" => "%traits_type" $effective
			@ "class template %PixelQuadruple" @ %YFramework.YCLib.Video;
		/ $forced DLDI ("function %UpdatePixmapBuffer" @ %YCLib.XCB,
			("struct %BlitAlphaPoint" @ %YBlend, "%MaskTrait" @ %YPixel)
			@ %YSLib.Service) @ %YFramework
		),
		/ "member type %traits" => "%traits_type" $effective
			@ "class template %PointerHolder" @ %YFramework.YSLib.Core.YObject
	)
),

b845
(
	/ %Tools $=
	(
		+ $build "configurable variable %SHBuild_BuildDir to specify build path"
			@ "install-sysroot.sh",
		/ %Script $=
		(
			/ $deploy "discard error messages from 'ln' command"
				@ "function %SHBuild_Install_HardLink" @ "%SHBuild-common.sh"
				// If it fails, the fallback is called. The error is then \
					ignored. The error can be caused by unsupported file \
					system or trying to link across file systems.
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				(
				/ ("normailized paths" ^ "SHBuild_2m" ~ "%SHBuild_2w")
					$effective @ "variables %(INCLUDES_freetype, LIBS)";
					// Using '/' is more consistent and better compatible with \
						various shells and terminals (cmd, mintty, etc).
				- $dev "importing %SHBuild_2w"
					@ "'$provide!' expression for internal environment",
				),
				* "missing %LDFLAGS_OPT_DBG" @ "default value"
					@ "basic %LDFLAGS" @ "%SHBuild-YSLib-common.txt" $since b796
					// This would make it inconsistent to \
						%SHBuild-common-options.sh.
			),
			/ "disabled precompiled header" @ "%SHBuild-build.sh"
		)
	),
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ $re_add(b841) "used stricter condition \
				'(!YB_IMPL_CLANGPP || __cplusplus >= 201703L)'"
				@ "macro %YB_ATTR_fallthrough",
				// To eliminate Clang++ error: [-Werror,-Wc++17-extensions].
			(
			+ $re_add(b835) "conditionally-defined macro \
				%__cpp_noexcept_function_type";
			+ "macros %(ynoexcept_param, ynoexcept_qual)"
				// Like libstdc++'s %_GLIBCXX_NOEXCEPT_PARM and \
					%_GLIBCXX_NOEXCEPT_QUAL respectively. The differences are \
					macro arguments. Explicitly specified arguments allows \
					multiple instances to be used in a single template \
					specification.
			),
			+ DD "Doxygen groups %((customization; customization_points), \
				traits)",
			+ DD '\ingroup tags' @ "Doxygen comment" @ "class %raw_tag"
				$dep_from ("Doxygen group %tags" @ %TypeOperation)
		),
		/ %YStandardEx $=
		(
			* "%invoke_result might cause ill-formed template specialization \
				redefinition" @ %Invoke $since b832,
			/ %Swap $=
			(
				/ @ "namespace %ystdex_swap" $=
				(
					/ DLDI "function templates %swap" 
						$=
					(
						/ "reordered overloads declarations";
						- "redundant declarations"
					),
					+ "metafunctions %(swap_t; well_fromed_swap)"
						@ "namespace %dep_swap",
					- $revert(b837) "%swap overload for %byte" $dep_from
						"%ystdex::swap_dependent",
						// Now the fallback shall work.
					+ DD ('\ingroup YBase_replacement_features',
						'\ingroup customization_points') @ "Doxygen comment"
						@ "function templates %swap",
					(
					+ "function template %(iter_swap; swap_ranges)";
					/ "function template %swap for arrays" ^ "%swap_ranges"
						// Now elements swapping is more consistent.
					)
				),
				/ @ "namespace %ystdex" $=
				(
					/ "supported resolution amibiguity from %std::swap \
						introduced by ADL" @ "function template %swap_dependent"
						^ $dep_from "%ystdex_swap::dep_swap::(swap_t, \
						well_fromed_swap)";
					+ DD '\ingroup YBase_replacement_features' @ "Doxygen \
						comment" @ "traits %(is_swappable_with, is_swappable, \
						is_nothrow_swappable_with, is_nothrow_swappable)"
				)
			),
			* $comp "ambiguity %swap when ADL result from %std is effective by \
				calling %ystdex::swap_dependent" @ "%swap"
				@ "class template %map" @ %Map $since b830 $dep_from
				("%ystdex::swap_dependent" @ %Swap),
				// This would have been ill-formed if any %std component \
					without overloaded specialized %swap is looked up, e.g. \
					%std::less instance used by default when \
					'__cpp_lib_transparent_operators >= 201210L'.
			/ %Meta $=
			(
				/ "supported ISO C++17 'noexcept' type qualifiers"
					@ "unary type trait %is_referenceable" ^ $dep_from
					("%(ynoexcept_param, ynoexcept_qual)" @ %YDefinition),
					// This is similar to libstdc++'s solution. Although \
						libc++ has a permissive (even compatible to ISO \
						C++98/03) implementation neutral to the existence of \
						support of WG21 P0012R1, this approach seems more \
						direct.
				+ DD "%tags" @ "'\ingroup' command"
					@ "Doxygen group %type_traits_operations",
				+ DD '\ingroup YBase_replacement_features' @ "Doxygen comment"
					@ "alias templates %(void_t, detected_t, detected_or, \
					detected_or_t, is_detected_exact, is_detected_convertible)"								
			),
			/ %Container $=
			(
				* "out-of-bound access in trying upper boundary of hint"
					@ "function template %search_map with hint parameter"
					@ %Container $since b680,
				(
				- $revert(b408) "class templates %(sequence_container_adaptor; \
					container_adaptor);" $dep_from
					"removal of use of sequence adaptor base";
				* $comp DD "template parameter name" @ "class template \
					%container_adaptor" $mismatch(Documentation.Designation)
					$since b560
					$= (/ DLDI "template parameter %_tSeqCon" => "%_tCon"),
				* $comp "missing association to %ystdex when no template \
					argument in %ystdex is used" $since b843
				* $comp "missing association of %operator!= to %ystdex when no \
					template argument in %ystdex is used" $since b408
				* $comp "missing association to %ystdex of %swap when no \
					template argument in %ystdex is used" $since b408
					// Similar to %mapped_set.
					$= (/ "out-of-class function template %swap"
						-> "in-class friend function definition")
				)
			),
			/ %Set $=
			(
				+ "function template %restore_key"
					@ "class template %mapped_set_traits",
				/ @ "class template %mapped_set" $=
				(
					/ $impl
						"all 4 function templates %insert for single element" $=
					(
						^ "%ystdex::search_map_by" $dep_from
							("%ystdex::search_map" @ %Container);
						/ $comp $dev $lib "avoided emplacement if detected no \
							need to insert",
							// This avoids allocation when the value is \
								already existed. On the contrast, %ystdex::map \
								(as well as libstdc++'s %std::map) does not \
								prevent this when insertion (by "emplace") \
								unique value.
						/ $comp $dev $lib "avoided key move from \
							'value_type&&' parameter if detected no need to \
							insert"
					),
					/ "function templates %(emplace, emplace_hint)" $=
					(
						/ "saved and transferred key" ^ "%traits_type::( \
							get_value_key, extend_key, recover_key)" $dep_from
							("%recover_key", "%ystdex::search_map"
							@ %Container);
						/ $comp DLI "avoided construction of value pair when \
							there is no need to insert the element",
						/ $comp "requirments on emplace parameter types",
						* $comp "missing uses-allocator construction support"
							$since b665
					),
					* "%operator= with std::initializer_list instance \
						parameter wrongly depended on swap propagation" $since
						b665 $= (/ $impl ^ "move %operator=" ~ "%swap")
					* "move constructor wrongly depended on swap propagation"
						$since b665
						$= (/ $impl "move constructor" ^ 'yimpl(= default)'
							$dep_from "fixed move node container")
				),
				+ DD '\ingroup customization traits' @ "Doxygen comment"
					@ "class template %mapped_set_traits" $dep_from
					("Doxygen groups %(customization, traits)" @ %YDefinition)
			),
			/ %MemoryResource $=
			(
				/ "class %pool_resource" $=
				(
					/ DLDI "simplified oversized block deallocation"
						@ "function %do_deallocate",
					* "uncoditionally deallcated after oversized block \
						allocation" @ "function %do_allocate" $since b843
						$= (/ $impl ^ "%(unique_guard, ystdex::dismiss)"
							~ "%make_guard"),
					/ @ "function %do_deallocation" $=
					(
						* "dangling pool access after a new pool is emplaced \
							into the pool vector" @ "chunk deallocation" $since
							b843,
						* "danling chunk access after an empty chunk which is \
							previously cached as an empty chunk is deallocated"
							$since b843
					),
					- DLDI 'virtual' @ "destructor",
					/ DLDI "metadata allocation" ^ 'static_cast'
						~ 'reinterpret_cast'
						// To eliminate G++ warning on platform %DS: \
							[-Wcast-align].
				),
				/ @ !'YB_Has_memory_resource == 1' @ "inline namespace %cpp2017"
					$=
				(
					/ DLDI "simplified various %do_is_equal",
					+ DD '\ingroup YBase_replacement_features'
						@ "Doxygen comment" @ "all declarations",
					+ "classes %(synchronized_pool_resource, monotonic_buffer)",
					/ "%memory_resource implementation class"
						@ '!YB_Impl_aligned_new'
						@ "function %new_delete_resource" $=
					(
						* "leaks on alignment adjust failure" @ "function \
							%do_allocate" $since b843
							^ "%make_unique_default_init",
						/ @ "function %do_deallocate" $=
						(
							/ "asserted for aligned pointer to specific \
								alignment specified by the parameter when \
								'alignment > 1'",
							/ "block pointer adjustment" ^ 'static_cast'
								~ 'reinterpret_cast'
								// To eliminate G++ warning on platform %DS: \
									[-Wcast-align].
						)
					)
				)
			),
			/ DD %TypeOperation $=
			(
				/ "Doxygen group %tags" -> "group without '\ingroup' command"
					@ %YDefinition,
				+ "%tags" @ "'\ingroup' command" @ "Doxygen comment"
					@ "meta type %n_tag"
			),
			+ "alias template %forward_like_t; function template %forward_like"
				@ %Utilities,
			* "ill-formed pointer composite type and functor call"
				@ "%operator< for %observer_ptr instances" @ %Pointer $orig
				(@ %Memory $since b669),
			* "missing inclusion %TypeOperation" @ %Array $since b630
		)
	),
	/ %YFramework $=
	(
		/ @ "class %ValueNode" @ %YSLib.Core.ValueNode $=
		(
			/ "insertion" @ $dep_from ("%(emplace, emplace_hint)"
				@ "%ystdex::mapped_set" @ %YBase.YStandardEx.Set) $=
			(
				* $forced DLDI "possible wrong result" @ "%get_value_key \
					overloads" @ "%Container traits" $since b844,
				* $comp "missing implicit %std::allocator_arg and allocator \
					parameter when insertion subnodes" $since b844
			),
			(
			/ "constructors with container parameter and optional allocator \
				parameter with default-initialized allocator default argument"
				-> "constructors with only container parameter, containers \
				with both container parameter and allocator parameter";
			* $comp "constructed with single container argument unexpectedly \
				used default allocator" $since b844
				// The allocator should be used according to propagation \
					property in traits.
			),
			/ @ "function %MoveContent" $=
			(
				* $impl "wrongly relied on moved-to content perservation \
					behavior %Container move %operator=" $since b806
					$dep_to "fixed move node container",
				* $revert(b844) DD "redundant '\pre' command"
					@ "Doxygen comment" $mismatch $since b844
			),
			* "%ValueObject copy %operator= did not respect to allocator \
				equality" $since b844
				// See also WG21 P0208R1. This bug is not effective because \
					direct copying is rarely used.
				$= (/ $impl ^ "%(get_allocator, ystdex::move_and_swap)"
					~ "%ystdex::copy_and_swap"),
			/ "simplified all 4 function template %CreateRecursively"
				-> "1 function template" ^ $dep_from
				("%ystdex::forward_like" @ %YBase.YStandardEx.Utilities),
			/ DLDI "simplified function %operator[]" ^ "%try_emplace"
				~ "%ystdex::try_emplace",
			(
			+ "static function template %AddValueTo with hint parameter";
			/ DLDI "simplified function templates %AddValue with hint parameter"
				^ "%AddValueTo" ~ "%try_emplace_hint"
			),
			/ "disabled function template %AddValue#1 when 1st argument is \
				convertible to %const_iterator",
				// To be consistent with other functions.
			(
			/ "simplified all 4 function template %AddChild"
				-> "2 function templateds";
			/ $comp "all 2 function templates %AddChild with hint parameter \
				returned %bool result" ~ "%void"
			),
			(
			/ DLDI "all key parameter not used to construction '_tString'"
				-> '_tKey' $effective @ "function %operator[]";
			/ DLDI "all parameter %str with '_tKey&&' type" => "%k"
			)
		),
		/ %NPL $=
		(
			/ %SContext $=
			(
				+ $lib "allocator parameter with default-initialized default \
					argument" @ "function template %Analyze",
				/ "supported %TermNode allocator" @ "function %Reduce"
			),
			/ %NPLA $=
			(
				* $re_add(b844) "missing copy constructor" @ "classes \
					%(TypeError, ValueCategoryMismatch, ListTypeError, \
					ListReductionFailure, InvalidSyntax, ParameterMismatch, \
					ArityMismatch, BadIdentifier, InvalidReference)" $since b691
					$=
				(
					// To eliminate Clang++ warning: [-Wdeprecated].
					/ $impl 'DefDeCtor' -> 'DefDeCopyCtor'
					+ $dev $lib "defaulted copy %operator= for class with a \
						user-declared destructor" ^ "%DefDeCopyAssignment"
				),
				/ "functions %(MapNPLALeafNode, TransformToSyntaxNode) \
					supported %TermNode allocator" ^
					("%(AsIndexNode, AsNode, ValueNode::get_allocator)"
					@ %YSLib.Core.ValueNode),
				(
				/ @ "class %ContextNode" $=
				(
					+ $impl "private memory resource reference",
					/ "default constructor"
						-> "constructor with memory resource reference",
					+ "function %GetMemoryResourceRef"
				);
				/ $forced $impl "function %SwitchToFreshEnvironment supported \
					memory resource"
					/ $= (/ $impl ^ $dep_from
						"%ContextNode::GetMemoryResourceRef")
				),
				/ "supported %TermNode allocator"
					@ "function template %EmplaceLeaf" ^ $dep_from
					("%ValueNode::get_allocator" @ %YSLib.Core.ValueNode),
				/ @ "class %Environment" $dep_from
					("supported uses-allocator construction"
					@ "%ValueNode" @ %YSLib.Core.ValueNode) $=
				(
					(
					/ $impl "private data member initialization";
					/ "default constructor, 2 constructors with value objects"
						-> "6 constructors with allocator or memory resource \
						reference"
					),
					* "constructor with parameter 'const BindingMap&&'" $since
						b788
						$= (/ "parameter type" -> 'const BindingMap&')
				)
			),
			/ $forced "supported %Environment::BindingMap allocator"
				@ "derivation of applicative 'copy-environment'"
				@ "function %LoadGroundContext" @ %Dependency ^ $dep_from
				("%ContextNode" @ %NPLA),
			/ %NPLA1 $=
			(
				/ "functions %(InsertChild, TransformNode, \
					TransformNodeSequence)" ^ ("%(AsNode, \
					ValueNode::get_allocator)" @ %YSLib.Core.ValueNode),
				/ $forced "default constructor %ContextState"
					-> "constructor with memory resource reference" $dep_from
					("%ContextNode" @ %NPLA),
				/ @ "namespace %Forms" $=
				(
					/ $forced "functions %(SetRest, SetRestRef)"
						^ "%TermNode::get_allocator" $dep_from
						("%ValueNode constructors" @ %YSLib.Core.ValueNode)
						$dep_to "forms allocator support",
					/ $forced "functions %(EvalString, EvalStringRef)"
						^ "%TermNode::get_allocator" $dep_from ("%Analyze"
						@ %SContext) $dep_to "forms allocator support",
					/ "functions %(SetFirst, SetFirstRef, BindParameter), vau \
						handler constructor" ^ "%TermNode::get_allocator"
						$dep_to "forms allocator support",
						// The %TermNode::SetContent should be optimal as \
							before when the allocator compares equal. However, \
							it would be degraded otherwise. The non-throwing \
							exception specification would also be dropped for \
							the latter case.
					/ $forced "supported %Environment::BindingMap allocator"
						@ "TCO action internal temporary pointer update, \
						function %MakeEnvironment" ^ $dep_from ("%ContextNode" \
						@ %NPLA) $dep_to "forms allocator support",
					/ $forced DLDI "%operator()" @ "vau handler" $dep_from
						("%ContextNode" @ %NPLA),
					/ $impl "TCO compressor" ^ $dep_from
						("%ContextNode::GetMemoryResourceRef" @ %NPLA)
						$dep_to "forms allocator support"
				),
				+ DD "'\pre' command to exclude support of cases where closure \
					is an ancestor of the term" @ "Doxygen comment"
					@ "function %ReduceCheckedClosure",
				/ "all 2 functions %(TransformForSeparator, \
					TransformForSeparatorRecursive) supported %TermNode \
					allocator" ^ ("%(AsNode, AsIndexNode, \
					ValueNode::get_allocator)" @ %YSLib.Core.ValueNode),
				/ @ "class %REPLContext" $=
				(
					+ $forced "2nd constructor parameter with memory resource \
						reference type and default argument" $dep_from
						"%ContextState";
					+ "data member %Allocator";
					^ "allocator argument for tokenizing" $dep_all_from
						"forms allocator support" $dep_from ("function \
						template %EmplaceLeaf", "constructors %(Environment, \
						ContextNode)" @ %NPLA)
						$= (/ "function %Prepare#3" ^ "%TermNode allocator"
							$dep_from ("%Analyze" @ %SContext))
				)
			)
		),
		/ %YCLib $=
		(
			/ %XCB $=
			(
				+ $re_add(b844) $dev $lib "explicitly defaulted defaulted copy \
					(constructor, %operator=) for class with a user-declared \
					destructor to avoid ISO C++11 deprecation"
					@ "class %XCBException",
					// To eliminate Clang++ warning: [-Wdeprecated].
				/ "class %ConnectionReference" ^ "%tidy_ptr" ~ "%ystdex::nptr"
					$=
				(
					/ "base class, constructors, type %NativeHandle, \
						function %get";
					/ $forced DLDI "functions %(GetError, GetFileDescriptor, \
						GetSetup, GenerateID)"
				),
				/ $forced DLDI ("constructors %(Drawable, Connection#(2,3), \
					WindowData#1)", "destructor %Connection") $dep_from
					"%ConnectionReference constructors",
				/ $forced DLDI "internal global table" ^ $dep_from
					"%ConnectionReference::NativeHandle" $dep_from
					%YBase.YStandardEx.Pointer,
				/ DLDI ^ "%(platform::(string, string_view, Deref, Nonnull), \
					YSLib::(RecordLevel, Err, Informative)), namespace \
					%platform::Threading" ~ "namespace %YSLib",
				* "missing destructor %WindowData to destroy window" $since b563
			)
		)
	),
	/ "classes with class type of static %yconstexpr class data members"
		$effecitve @ %YFramework.YSLib.UI.(YGUI, Hover) $=
	(
		// See %Documentation::YBase @2.1.2.4.2.
		/ "data member %DefaultDuration" -> "%GetDefaultDuration";
		/ $forced $lib "default argument" @ "constructor",
		- $dev "redundant definitions of static %yconstexpr class data members"
			// See WG21 P0386R2. To eliminate Clang++ warning: [-Wdeprecated].
	)
),

b844
(
	/ %YBase.YStandardEx $=
	(
		/ %Set $=
		(
			(
			+ "traits template %mapped_set_traits";
			/ @ "class template %mapped_set" $=
			(
				+ "3rd template paramter with default argument \
					%mapped_set_traits<_type>";
				+ "alias %traits";
				/ "all 2 function templates %insert with 'value_type&&' \
					parameter" ^ "%traits::set_value_move"
					~ "unqualified %set_value_move";
				* $comp $revert(b834) "%set_value_move for %ValueNode"
					$since b834 $dep_to "preserved node key",
				/ "all 2 functions %insert with 'value_type&&' parameter"
					^ "%traits_type::set_value_move" ~ "ADL %set_value_move"
			),
			- "function template %set_value_move" $dep_from "%insert"
				@ "%mapped_set"
			),
			/ "binary %swap for %mapped_set instances" $=
			(
				* "wrong noexcept-specification" $since b843,
				* "missing association to %ystdex when no template argument in \
					%ystdex is used" $since b843
					$= (/ $revert_ex(b843) "out-of-class non-member \
						function template"
						-> "in-calss friend function defenition");
						// Non-friend overload would not work for \
							%ystdex::swap_dependent because primary \
							template namespace %ystdex is not in the set \
							of ADL associated namespace, although it would \
							be accepted with template argument like \
							%ystdex::less<>.
				* $comp "missing ADL %swap support" $since b665
			),
			/ "constructor overloads with parmaeter of tuple but no index \
				sequence" @ "class template %mixin" $=
			(
				* "ill-formed code cuased by wrong SFINAE code out of \
					unevaluated contexts" $since b477
					// G++ accepts but Microsoft VC++ and Clang++ complain.
					$= (/ $impl ^ "template default argument"
						~ "function defualt argument"),
						// Making unevaluated contexts in function arguments \
							is more verbose.
				* "duplicate overloads" $since b477
					$= (/ $impl "merged overloads");
				/ "restricted enabled only when the size of tuple \
					elements equals to the size of bases",
				/ "allowed zero-sized tuple"
			)
		),
		* "invalid constexpr function" @ "function %native_byte_order"
			@ %CStandardInteger $since b695,
			$= (/ ^ 'inline' ~ 'yconstfn_relaxed'),
		* "invalid 'YB_API YB_ATTR_nodiscard'" $effective
			@ "functions %(get_default_resource, new_delete_resource, \
			null_memory_resource)" @ %MemoryResource $since b842
			$= (/ $impl 'YB_API YB_ATTR_nodiscard'
				-> 'YB_ATTR_nodiscard YB_API'),
			// To eliminate Clang++ error: 'nodiscard' attribute cannot be \
				applied to types. Note this is OK with G++.
		* "%operator- for %reverse_iterator used incomplete type" @ %Range
			$since b833,
			// G++ 7.1 and 8.2.1 accept it but Clang++ 7.0.0 does not. This \
				involves CWG 287 which is not resolved yet. Ideally this \
				should be allowed (as per the proposed resolution), but for \
				now it is better to follow the common practice.
			$= (/ "friend function template %operator-"
				-> "non-member function template"),
		* "missing inclusion %CString" @ 'YB_Has_string_view == 1'
			@ %(TStringView, Path) $since b837,
		* $impl "missing dependent key type for %enable_if test"
			@ "function templates for transparent key types" $effective
			@ (%Tree; $comp %Map) $since b830,
			// This would fail in C++, albeit accepted by G++. Code in %Set \
				has no such bug.
		/ %Tree $=
		(
			/ DLDI "minor local changes",
				// For readability and consistency.
			* $revert(b840) "ill-formed local declarations caused by conflict \
				deduced type for 'auto'" @ "tree private functions" $since b840
		),
		+ "%YB_ATTR_novtable" @ "class %cloneable" @ %Base,
		+ "class template %nested_allocator_base" @ %Memory,
		/ %Path $=
		(
			/ @ "class template %path" $=
			(
				/ DLDI "members %(reverse_iterator, const_reverse_iterator, \
					rbegin, rend, crbegin, crend)" ^ "%_tSeqCon"
					~ "private base type",
				(
					+ "type %container_type";
					/ $lib 'using base::get_container;'
						-> "2 functions %get_container",
					(
					+ "3 constructor templates",
					+ "constructor template with %path reference and \
						additional parameter";
						// Probably they are the path and trailing allocator \
							parameters.
					- 'using base::base;',
						// Inherited constructor with base class parameter \
							would be ambiguous for inaccessible private class.
					)
				);
				/ DLDI "private base type" ^ "%_tSeqCon"
					~ "%sequence_container_adaptor<_tSeqCon>";
				/ "base class" ^ ("%_tSeqCon",
					"%nested_allocator_base<_tSeqCon>" $dep_from %Memory)
					~ "%sequence_container_adaptor<_tSeqCon>" $dep_to
					"removal of use of sequence adaptor base"
				/ $comp "constructors supported uses-allocator construction"
			),
			(
			+ "class template specialization of %std::uses_allocator for \
				%ystdex::path instances";
			/ $comp "supported uses-allocator construction for %ystdex::path \
				instances" $dep_from "removal of use of sequence adaptor base"
			),
			(
			* $comp "missing association to %ystdex of %swap when no template \
				argument in %ystdex is used" $since b408
				// Similar to %mapped_set.
				$= (/ "out-of-class function template %swap"
					-> "in-class friend function definition");
			+ $comp 'ynothrow' @ "binary %swap for %path instances"
			)
		)
	),
	/ %YFramework $=
	(
		+ $lib "%YB_ATTR_novtable" @ "macro %YInterface" @ %YBaseMacro,
		/ %YCLib $=
		(
			* $re_add(b838) "missing explicit cast to integer type from %byte \
				or other incompatible operations with %byte" $effecitve @
				($comp "missing guaranteed as integer types with capabilities \
				of arithmetic operations" @ "alias %FAT::EntryDataUnit"
				@ %FileSystem $since b607 $dep_from "%FAT::(EntryDataUnit, \
				Attribute, EntryValues, EntryData, LFN::(FetchLongNameOffset, \
				GenerateAliasChecksum))", "member function \
				%WindowReference::GetOpacity" @ "platform %Win32" @ %HostedGUI
				$since b430, "function %UpdatePixmapBuffer" @ %XCB $since b563),
				// This would be ill-formed once the %byte is %std::byte or \
					other types not implicitly convertible to %char.
			/ @ "namespace %FAT" @ %FileSystem $=
			(
				(
				/ "%EntryType" ^ "%byte" ~ "%std::uint8_t";
				/ $forced DLDI "static assertion"
					@ "function %LFN::GenerateAliasChecksum"
				),
				+ $dev "static assertion to ensure %FAT::EntryType compatible \
					with %byte",
				/ "underlying type" @ "enum class %(Attribute, EntryValues), \
					enumerators %EntryData::(Last, Free)"
					^ ("%octet" $dep_from %YBase.YDefinition) ~ "%byte",
				/ DLDI "cast to %octet" @ "function \
					%LFN::(FetchLongNameOffset, GenerateAliasChecksum), member \
					function %EntryData::GenerateAlias",
				/ DLDI "cast to %EntryDataUnit" @ "member functions \
					%EntryData::(SetDot, ClearAlias, FillLast, WriteAlias, \
					GenerateAlias), function %LFN::GenerateAliasChecksum",
				/ DLDI "adjust initialization of %EntryDataUnit"
					@ "member function %EntryData::FillNewName"
			),
			/ %XCB $=
			(
				* "function %WindowData::GetSize" @  $since b563
					// Also to eliminate Clang++ warning: [-Winfinite-recursion].
						FetchGeometry,
				/ $impl %WindowData $=
				(
					/ "imprvoed ISO C++ compatibility" @ "deleter type"
						@ "WindowData::GetBounds" ^ 'decltype(std::free)&'
						~ 'void(&)(void*)',
						// Otherwise it would be ill-formed due to 'noexcept' \
							mismatch.
				),
				/ DLDI @ "function %UpdatePixmapBuffer" $=
				(
					/ "explicitly cast to '::uint32_t'",
						// To eliminate Clang++ warning: [-Wshorten-64-to-32].
					^ "%ystdex::aligned_store_cast for pointer cast"
						~ 'reinterpret_cast'
				)
			)
		),
		+ $re_add(b689) $dev $impl "defined out-of-line virtual destructor"
			@ "class %DSWindow" @ %('Helper_(DS)'.DSWindow,
			("class %XCBException" @ %XCB, "class %ScreenBufferData"
			@ %HostedGUI) @ %YCLib)
			// To eliminate Clang++ warning: [-Wweak-vtable].
		/ %YSLib $=
		(
			/ %Core.ValueNode $=
			(
				/ @ "class %ValueNode" $=
				(
					- 'ynothrow' @ "function %MoveContent",
					(
					/ "put container assignment before %Value assignment"
						@ "function template %SetContent";
						// Similar to %SetContentWith.
					/ "function %SetContent with 'ValueNode&&' parameter"
						^ "%GetContainerRef" ~ "%SwapContent";
						// This allows different preconditions of this \
							function and %SwapContent.
					/ "functions %(SwapContainer, SwapContent, friend swap)"
						$dep_from "%SetContentWith" $=
					(
						+ "precondition and assertion of allocator equality";
						- 'ynothrow'
					)
					),
					(
					+ "metafunctions %(is_key_t; enable_if_key_t, \
						enable_not_key_t)";
					/ DLDI "function template overload %Remove"
						^ "%enable_if_key_t"
						~ "%ystdex::(is_interoperable, enable_if_t)"
					),
					(
					/ "function template %try_emplace with hint parameter"
						=> "%try_emplace_hint";
					* "ill-formed call caused by missing member function \
						template %try_emplace_hint for %(AddChild, AddValue) \
						with hint paramter" $since b778
					),
					(
					/ $forced $impl "%Container" $dep_from
						("%insert" @ "%mapped_set" @ %YBase.YStandardEx.Set) $=
					(
						/ "friend function %set_value_move"
							-> "private traits class";
						/ "%Container" ^ "private traits class"
					),
					(
					+ "member type %allocator_type" ^ $dep_from
						("%pmr::polymorphic_allocator" @ %YAdaptor.Adaptor)
						$dep_from %NPL.Dependency;
					(
					/ "member type %Container allocator type"
						-> "%allocator_type"
						~ "implicit %std::allocator<ValueNode>";
					/ "all member functions templates %(4 static \
						CreateRecursively, SelectChildren, SplitChildren)"
						^ "%allocator_type parameter" ^ "%get_allocator",
					(
					/ "7 constructors without trailing variadic parameters \
						supported %allocator_type",
					+ "function %get_allocator",
					+ "3 constructors with trailing %allocator_type \
						parameter",
					+ "4 non-templated constructors, 4 constructor templates \
						with name prefix %std::allocator_arg_t and \
						%allocator_type parameters"
					)
					)
					),
					/ $forced $impl "emplace functions" $dep_from
						("%emplace" @ "%mapped_set" @ %YBase.YStandardEx.Set) $=
						(/ $impl "traits functions")
					/ $comp "supported uses-allocator construction"
					)
				),
				/ @ "function template %SetContentWith" $=
				(
					* $re_add(b778) "possible invalid memory accesses caused \
						by circular reference of subnodes" $since b799,
						// This would cause not only leak but also wrong \
							memory reference when potentionally inequal \
							allcators are set for subnodes.
					/ "put container assignment before %Value assignment"
						// This allows container assignment to throw with \
							preserved exception safety.
				),
				+ "overload with allocator parameter for function templates \
					%(AsNode, MakeNode, StringifyToNode, AsIndexNode)"
					^ $dep_from "%ValueNode constructors",
				/ DLDI "simplified all 2 function templates %AccessNode"
					^ $dep_from "%ValueNode::enable_if_key_t"
					~ "%ystdex::(is_interoperable, enable_if_t)"
			),
			+ DLDI 'ynothrow' @ "handler" @ "event %LostFocus"
				@ "constructor %Caret" @ %UI.TextBox
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				- $forced 'ynothrow' @ "function %LiftTerm#1" $dep_from
					("%ValueNode::MoveContent" @ %YSLib.Core.ValueNode),
				* "missing copy constructor" @ "class %NPLException" $since b691
					$=
				(
					// To eliminate Clang++ warning: [-Wdeprecated].
					/ $impl 'DefDeCtor' -> 'DefDeCopyCtor',
					+ $dev $lib "defaulted copy %operator= for class with a \
						user-declared destructor" ^ "%DefDeCopyAssignment"
				)
			),
			/ DLDI "removed %swap for internal types"
				@ "function %Forms::MakeEncapsulationType" @ %NPLA1
				// To eliminate Clang++ warning: [-Wunused-function].
		)
	),
	* $impl "invalid %nemueric_limits<byte> when %byte is not an integer type"
		$effective @ ("function templates %(pack_uint, unpack_uint, \
		read_uint_le, read_uint_be)" @ %(YBase.YStandardEx.CStandardInteger
		$since b604, YFramework.'YCLib_(DS)'.DSIO $since b610)
		$= (/ ^ 'unsigned char' ~ 'byte'),
	+ $re_add(b600) $dev $lib "explicitly defaulted copy %operator= for \
		classes with a user-declared destructor to avoid ISO C++11 deprecation"
		$effective @ ("class %cloneable" @ %YBase.YStandardEx.Base,
		("macro %YInterfaceHead" @ %YBaseMacro, "class %NPLException"
		@ %NPL.NPLA) @ %YFramework),
		// To eliminate Clang++ warning: [-Wdeprecated].
	/ DLDI "removed redandant lambda capture" $effective @ ("constructor \
		%WindowData" @ %YCLib.XCB, ("handler" @ "event %LostFocus"
		@ "constructor %Caret" @ %TextBox, "member function %Button::Refresh"
		@ %Button) @ %YSLib.UI, "functions %(ReduceCheckedClosure, \
		MakeEncapsulationType)" @ %NPL.NPLA1) @ %YFramework
		// To eliminate Clang++ warning: [-Wunused-lambda-capture].
),

b843
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			(
			+ "transformation trait %sizeof_t" @ %Meta;
			+ "function template %is_aligned_ptr" @ %Placement
				^ ("%sizeof_t" @ %Meta)
			),
			/ %Memory $=
			(
				(
				+ "alias template %allocator_guard";
				/ $lib "simplified return type"
					@ "function template %make_allocator_guard"
					^ "%allocator_guard"
				),
				/ @ "class template %allocator_delete" $=
				(
					/ DLDI "private data member name",
						// To get it clearer.
					/ "made stored allocator as mutable allocator data object"
						~ "allocator reference data member",
					/ @ "constructor" $=
					(
						/ "passed allocator by value",
						+ "'1' as 2nd default parameter"
					),
					+ "defaulted (copy, move) (constructor, %operaotr=)"
				),
				/ @ "function templates %make_unique_with" $=
				(
					* "missing variadic function parameters for non-array \
						overload" $since b562,
					* "missing deleter" @ "return type" @ "non-array overload"
						$since b562
				),
				/ %ScopeGuard $=
				(
					* "missing inclusion %Functional" $since b686,
						// For %one_shot.
					- DLDI "inclusion %(Base, Placement)"
				),
				/ DLI "internal" @ "function templates %(alloc_on_copy, \
					alloc_on_move, alloc_on_swap)" ^ "exception specifications"
			),
			* "always wrong result" @ "function %operator!"
				@ "class template %nptr" @ %Pointer
				$orig (@ %Utilities $since b560),
			/ @ "namespace %pmr" @ %MemoryResource $=
			(
				/ @ "member function %memory_resource::allocate" $=
				(
					+ $dev "assertion for post condition" ^ $dep_from
						("%is_aligned_ptr" @ %Placement);
					+ DD "('\pre', '\post') commands" @ "Doxygen comment"
				),
				/ DLDI "%do_is_equal used expressions same to the literal \
					standard text" $effective
					@ "functions %(new_delete_resource, null_memory_resource)",
					// All have used 'this == &other' for consistency.
				(
				/ @ "function templates %construct"
					@ "class template %polymorphic_allocator" $=
				(
					* "ill-formed for dispatching pair" $since b842,
					* "wrongly checked type of value instead of type of \
						constructed object for non-pair overload" $since b842
				),
				* "aligned allocation" @ "function %new_delete_resource" $since
					b842;
				+ "class %pool_resource" ^ $dep_from ("%(allocator_delete, \
					make_unique_with)" @ %Memory, "%nptr" @ %Pointer)
				),
				* "wrongly defaulted instead of deleted %operator="
					@ "class template %polymorphic_allocator" $since b842
			),
			/ DLDI %Map $=
			(
				/ "template parameter %_type" %Map => "%_tMapped",
				/ @ "class template %map" $=
				(
					/ "simlified all 2 function templates %try_emplace without \
						hint" ^ "%ysdex::try_emplace",
						// The logic is exactly the same.
					/ "simlified all 2 function templates %try_emplace with \
						hint",
						// However, hinted overloads do have internal \
							knowledge of node pointers of underlying tree and \
							case for %end(), so %ystdex::try_emplace_hint is \
							not used here. They are extract to common \
							private implementation.
					/ "simlified all 2 function templates %insert_or_assign \
						without hint" ^ "%ysdex::insert_or_assign",
						// The logic is exactly the same.
					/ "simlified all 2 function templates %insert_or_assign \
						with hint" ^ "%ystdex::emplace_hint_in_place",
						// Similar to %try_emplace, \
							%ystdex::insert_or_assign_hint is not used.
				)
			),
			* "missing template argument for ADL %extract_key"
				@ "function template %search_map with hint parameter"
				@ %Container $since b680,
			/ %Set $=
			(
				* "missing function template %swap for %mapped_set instances"
					$since b665,
					// This is an oversight.
				* "missing defaulted default constructor" @ "internal key \
					compare functor" @ "class template %mapped_set" $since b665
					// This would make it unconditionally ill-formed when \
						%key_compare or %value_compare is \
						value-initialized, e.g. in the %mapped_set \
						constructor with a sole allocator parameter.
			)
		)
	),
	/ %YFramework $=
	(
		/ @ "namespace %platform" @ %YCLib.Container $=
		(
			+ 'namespace pmr = ystdex::pmr;';
			/ "all allocator-awared containers and container adaptors \
				using-declarations" -> "alias templates" ^ ($dep_from
				"%polymorphic_allocator" @ %YBase.YStandardEx.MemoryResource)
				$dep_from %YSLib.(Core.YMessage, UI.YStyle),
				// This does not depends on %std::pmr declarations in ISO \
					C++17 standard container headers, as well as with \
					additional %pmr container adaptors not in the standard.
			// NOTE: Allocator default template argument in %basic_string is \
				not changed to avoid %string does not non-throwing convertible \
				to %std::string.
			(
			+ "inline namespace %basic_utilities";
			/ "declarations of names %(forward_as_tuple, get, ignore, \
				make_pair, make_tuple, pair, tie, tuple, tuple_cat, begin, \
				end, size)" @ "inline namespace %containers"
				>> "inline namespace %basic_utilities"
			),
			(
			+ "inline namespace %strings";
			/ "declarations of names %(basic_string, string, u16string, \
				u32string, wstring, basic_string_view, string_view, \
				u16string_view, wstring_view, string_view_t, \
				basic_tstring_view, tstring_view, u16tstring-view, \
				wtstring_view, sfmt, vsfmt, to_string, to_wstring), all 2 \
				static assertions" @ "inline namespace %containers"
				>> "inline namespace %strings"
			);
			+ $forced ('using namespace platform::basic_utilities;',
				'using namespace platform::strings;') @ "namespace %platform_ex"
			)
		),
		/ %YSLib $=
		(
			* $dev "missing protected %BaseType from ADL argument of \
				%std::greater instance" @ "class %MessageQueue" @ %Core.YMessage
				$since b449,
				// The header name was 'ymsg.h'.
			* $dev "missing protected %MapType from ADL argument of \
				%HandlerTable (alias of %unordered_map instance which \
				currently introduce %std name)" @ "class %StyleMap" @ %UI.YStyle
				$since b468,
				// The header name was 'ystyle.h'.
			/ @ "namespace %YSLib" %YAdaptor.Adaptor $=
			(
				/ "all declarations of names from %platform \
					and existed in inline namespaces \
					%platform::(basic_utilities, containers)"
					-> ('using namespace platform::basic_utilities;'
					'using namespace platform::containers;')
					$dep_from ("inline namespaces %platform::(basic_utilities, \
					containers)" @ %YCLib.Container),
				+ 'namespace pmr = platform::pmr;' $dep_from
					("namespace %platform::pmr" @ %YCLib.Container),
				(
				/ "all declarations of names except %reset from %platform and \
					existed in inline namespace %platform::references"
					-> 'using namespace platform::references;';
				+ $comp "name %default_delete from %platform via inline \
					namespace %references"
				)
			)
		),
		* "improper unqualified %swap" @ "derivation of applicative \
			'system-get'" @ "function %LoadModule_std_system"
			@ %NPL.Dependency $since b839,
			// It would be ill-formed when %TermNode::Container does \
				not have names to make %std::swap find by ADL and it \
				does not have specific %swap overload. Actually it is \
				the case when %ValueNode::Container is changed to use \
				custom %pmr::polymorphic_allocator not provided by \
				%std (either no candidate for unqualified %swap, or \
				ambiguity when %ystdex::swap_dependent is called).
			/ $= (/ $impl ^ "%ystdex::swap_dependent" ~ "%swap"
				$dep_from ("%swap" @ %YBase.YStandardEx.Set))
	),
	/ %Tools.Scripts $=
	(
		/ $re_add(b830) $forced $build "updated %LIBS for \
			%YBase.YStandardEx.MemoryResource" @ "%SHBuild-bootstrap.sh"
			$dep_from %YFramework.YCLib.Container,
		* "redundant escape '\' for default variable value %LIBS_RPATH \
			quoted by %SHBuild_QuoteS_" @ "%SHBuild-YSLib-common.txt"
			@ %Scripts $since b797,
			// This was buggy for a long time, but since b838 it was used.
		(
		/ "attached value of variable %LIBS_RPATH to %LDFLAGS when \
			building dynamic targets" @ "applicative 'build-with-conf-opt'"
			@ "%SHBuild-YSLib-common.txt";
		* $comp "variable %LIBS_RPATH not effective" $since b838,
		/ $lib $impl "simplified %LIBS" @ "%SHBuild-YSLib-build.txt"
		)
	)
),

b842
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ "macro %YB_ATTR_novtable",
			/ "improved macro %YB_ALLOCATOR" $=
			(
				+ 'YB_ATTR_nodiscard',
				+ 'YB_ATTR(restrict)' @ 'YB_IMPL_MSVC >= 1900',
				/ $doc "clarified intention as per updated GCC documentation"
					// It should be known '__attribute__((__malloc__))' is \
						more restrictive than '__declspec(restrict)' since \
						this also affects contents of storage returned by \
						design.
			),
			/ DLDI "macro %YB_NONNULL" ^ 'YB_ATTR' ~ '__attribute__'
		),
		/ %YStandardEx $=
		(
			+ "conditionally defined macro %__cpp_lib_optional" @ %Placement,
				// To be consistent with %__cpp_lib_string_view, this \
					feature-testing macro is defined even if the header would \
					be introduced previously.
			/ %Any $=
			(
				(
				+ $lib $dep_from ("%YB_ATTR_novtable" @ %YDefinition)
					@ "class %any_ops::holder",
				/ DLDI "placed 'YB_ATTR(always_inline)' before 'static'"
					// This is consistent to currently documented rules in \
						%Documentation.LanguageConvention.
				),
				+ "struct %pool_options"
			),
			/ %CStandardInteger $=
			(
				* $impl "missing 'std::' before 'uintmax_t'"
					@ "binary type trait %have_same_modulo" $since b440,
				+ "functions %(is_power_of_2, floor_lb, ceil_lb)"
			),
			* $dev "wrong %__has_builtin check for %addressof" @ %AddressOf
				$since b833,
			+ %MemoryResource $=
			(
				+ "inclusion to using implementation of %std::pmr interface \
					from Microsoft VC++ 15.8.2",
				+ "macro %YB_Has_memory_resource";
				+ "namespace %pmr" $=
				(
					+ "inline namespace %cpp2017"
						@ 'YB_Has_memory_resource == 1'
						$= (+ "aliases of interface from %std::pmr"),
					/ @ 'YB_Has_memory_resource != 1' $=
					(
						(
						+ "class %memory_resource" ^ $dep_from
							("%YB_ATTR_novtable" @ %YDefinition,
							"%is_power_of_2" @ %CStandardInteger);
						+ "class template %polymorphic_allocator",
						+ "functions %(new_delete_resource, \
							null_memory_resource, set_default_resource, \
							get_default_resource)"
						),
						+ "struct %pool_options"
					)
				)
			)
		)
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				* "assertions not effective" @ "functions %(LiftFirst, \
					LiftLast)" @ $since b733
					$= (/ $impl ^ "%AssertBranch" ~ "%IsBranch"),
				/ @ "class %ContextNode" $=
				(
					// See $2018-10 @ %Documentation::Workflow.
					+ "virtual destructor",
					(
					/ "data member %(EvaluateLeaf, EvaluateList, \
						EvaluateLiteral, Guard), function %RewriteGuarded"
						>> ("%ContextState" @ %NPLA1);
					/ $forced "friend function %swap"
					)
				),
				+ 'using YSLib::lref;',
				(
				/ "aliases %((TermPasses, EvaluationPasses, LiteralPasses; \
					GPasses), (GuardPasses; Guard))" >> "namespace %NPL::A1"
					@ %NPLA1;
				- $revert(b782) $dev "class name declaration %ContextNode"
				)
			),
			/ %NPLA1 $=
			(
				/ DLI "avoided redundant access of last status in the 1st \
					reduction passes for thunked code",
				(
				+ "class %ContextState" $dep_from "%ContextNode::~ContextNode";
				/ "type" @ "%Root" @ "class %REPLContext" -> "%ContextState"
					~ "%ContextNode";
				/ "class %Continuation" $=
				(
					/ "%operator()" ^ $dep_from "%ContextState"
						~ "data member %Term";
					/ "data member %Term";
					- $forced "term paramter" @ "constructor"
				);
				/ $forced "supported continuation capture" @ "thunked code"
					^ "%ContextState" $effective @ ("functions %(Reduce, \
					ReduceAgain, ReduceOnce, Forms::(Eval, EvalRef), \
					ReduceCheckedClosure, ReduceOrdered, (FormContextHandler, \
					StrictContextHandler)::operator())",
					"%operator()" @ "vau handler")
				),
				/ "TCO" $=
				(
					/ DLDI "refactored TCO compression",
					* "TCO invalidated by %ReduceChecked" $since b841,
					(
					/ $re_ex(b825) "supported temporary cleanup"
						@ "function %ReduceAgain";
					* "temporary lifetime" @ "function %ReduceOrdered" $since
						b823
					)
				),
				/ DLI "optimized away unused internal context object"
					@ "vau handlers",
					// The copy of context was unused since b815.
				/ $forced $dep_from "%ContextNode::(EvaluateLeaf, EvaluateList)"
					$=
				(
					/ DLDI "function %ReduceOnce",
					/ "parameter type 'ContextNode&'" @ "function \
						%SetupDefaultInterpretation" -> 'ContextState&'
				),
				/ $forced $dep_from "%ContextNode::(Guard, RewriteGuarded)" $=
				(
					/ DLDI "function %Reduce",
					/ "parameter type 'ContextNode&'"
						@ "function %SetupTraceDepth" -> 'ContextState&'
				),
				/ $forced DLDI "function %EvaluateLeafToken" $dep_from
					"%ContextNode::EvaluateLiteral"
			),
			/ DLDI ^ $dep_from ("%lref" @ %NPLA) ~ "%ystdex::lref" $effective
				@ ("%(TermReference, Environment::NameResolution, \
				EnvironmentSwitcher, GComposedAction)" @ %NPLA,
				"%Continuation::Context" @ %NPLA1),
			/ $forced DLDI "function LoadGroundContext" @ %Dependency
				$dep_from "%ContextNode::EvaluateLiteral"
				$= (/ $impl $dep_from "%REPLContext::Root")
		),
	),
	* "bogus '-s' option for strip in compiler options for C++"
		@ "%SHBuild-YSLib-common.(txt, sh)" @ %Tools.Scripts $since b839
		$= (- "variable %C_CXXFLAGS_STRIP"),
		// See $2018-10 @ %Documentation::Workflow.
	- $dev "redundant NMake properties" @ "project %YBase"
		@ "Microsoft VC++ projects"
),

b841
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %Memory $=
			(
				/ DD "function templates %(share_copy, share_forward, \
					share_move)" >> "Doxygen groups %helper_funtions",
				+ $re_add(b783) "function templates %(unique_copy, \
					unique_forward, unique_move)"
			),
			/ %Functor $=
			(
				+ 'ynothrow' @ "%operator()"
					@ "instances of functors %(first_of, second_of, ref_eq)",
				+ 'yimpl(ynothrow)' @ "all functors with pointer type \
					specificiations"
					$effective @ "%(greater, less, greater_equal, less_equal)"
					// This is now allowed by [res.on.exception.handling] \
						since ISO C++11 even though ISO C++17 makes it a type \
						and thus it would be a change of ABI (but it is still \
						allowed).
			),
			+ "2nd parameter with default argument" @ "type trait %is_decayed"
				@ %Meta,
			+ $re_add(b586) $dev "explicitly defaulted copy constructor \
				%bad_optional_access" @ %Optional
				// To eliminate Clang++ warning: [-Wdeprecated] due to \
					user-provided destructor declared..
		),
		/ %YDefinition $=
		(
			/ "used stricter condition \
				'(!YB_IMPL_CLANGPP || __cplusplus >= 201703L)'"
				@ "macro %YB_ATTR_nodiscard"
				// To eliminate Clang++ error: [-Werror,-Wc++17-extensions].
			/ $dev "avoided possible redefition of macros \
				%(_CRT_SECURE_NO_WARNINGS, _SCL_SECURE_NO_WARNINGS)"
				@ 'YB_IMPL_MSCPP >= 1400'
				$= (+ "'#ifndef' checks")
		),
		/ $dev "improved Clang++ support" @ %LibDefect.Exception $=
		(
			/ "avoided redefinition concerned with %std::exception_ptr"
				$= (+ "'__GLIBCXX__ < 20170718'" @ "condition")
			/ $dev "avoided possible missing definitions of handler functions"
				$= (+ "!defined(__clang__)" @ "conditions")
		)
	),
	/ %YFramework $=
	(
		+ $re_add(b783) ('using ystdex::unique_copy;', \
			'using ystdex::unique_forward;',
			'using ystdex::unique_move;') @ "inline namespace %references"
			@ %YCLib.Reference $dep_from %YBase.YStandardEx.Memory,
		/ $re_add(b783) @ "namespace %YSLib" @ %Adaptor.YAdaptor $=
		(
			+ 'using platform::owns_unique;',
			+ 'using platform::owns_unique_nonnull;',
			+ ('using platform::unique_copy;',
				'using platform::unique_forward;',
				'using platform::share_move;') $dep_from %YCLib.Reference
		),
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ 'ynothrow' @ "function %RegularizeTerm",
				/ @ "function %ReduceForClosureResult" $=
				(
					/ "2nd parameter type" -> "%ReductionStatus"
						~ 'const ContextNode&';
					/ $forced "regularized term" ^ "2nd parameter"
						~ "%ContextNode::LastStatus"
				),
				+ "deduced return type"
					@ "function template %CheckedReduceWith",
				(
				/ "alias declaration %Reducer" -> "class";
				/ $comp "equality of %Reducer based on %ystdex::ref_eq",
					// This is consistent to equivalence between result of \
						'eq?' and 'eqv?' for continuation type in the object \
						language, which is derived from Kernel 'eq?' vs. \
						'equal?' for continuation.
				),
				/ @ "enum class %ReductionStatus" $=
				(
					+ "1st enumerator %Partial" $dep_to
						"specific partial reduction status",
					- "specified value for %Clean"
				),
				(
				/ "functions %(RelayNext; RelaySwitchedUnchecked; \
					RelaySwitched) returned %ReductionStatus::Partial"
					~ "%Reduction::Retrying";
				/ $forced "returned %true for %ReductionStatus::Partial"
					@ "function %CheckReducible"
				),
				- $revert(b814) "data member %ContextNode::SkipToNextEvaluation"
					$dep_from ("%Reduce" @ %NPLA1),
				/ "enabled check for valid status only in %debug configurations"
					@ "function %CheckReducible",
					// For better performance in other configurations.
				(
					/ "function %ComposeActions" -> "class template \
						%GComposedAction; 2 function template %ComposeActions"
						^ $dep_from ("%is_decayed" @ %YBase.YStandardEx.Meta);
						// This would be slightly inefficient if solely used.
					/ "functions %(RelayNext; RelaySwitchedUnchecked; \
						RelaySwitched)" -> "function template"
						// For better performance (improve can be more than \
							10% in instruction counts tested by callgrind with \
							a heavily recursed program).
				)
			),
			/ %NPLA1 $=
			(
				* "undefined behavior cuased by invalid access in asynchronous \
					action call" @ "functions %Forms::(VauWithEnvironment, \
					VauWithEnvironmentRef)" $since b840,
				/ $lib "supported thunked call for expressions to be evaluated"
					@ "functions %(DefineWithNoRecursion, DefineWithRecursion)",
				(
					+ "class %Continuation";
						// This still does not support first-class \
							continuations. However, this is needed sooner or \
							later.
					/ DLI "asynchronous calls" ^ "%Continuation"
						// Consedered modification to %NPLA and %NPLA1 \
							asynchronous call APIs, it is better to fix to a \
							named type to get more accurate baseline for \
							performance.
				),
				* "missing thunked calls" @ "member function \
					%FormContextHandler::operator()" $since b811,
					// %StrictContextHandler::operator() should work with it \
						together.
				/ 
					@ "member function %StrictContextHandler::operator()" $=
				(
					- "assertion with %AssertBranch";
						// Let underlying form context handler checker to check.
					(
					/ "simplified thunked calls";
					* $comp "multiple wrapped handlers are not sufficiently \
						thunked" $since b811
					)
				),
				(
				/ $forced DLDI "function %ReduceCheckedClosure, TCO action"
					$dep_from ("%ReduceForClosureResult" @ %NPLA);
				/ @ "function %ReduceCheckedClosure" $=
				(
					/ "simplified non-thunked code"
						!^ "%ContextNode::LastStatus" ^ $dep_from
						("%CheckedReduceWith" @ %NPLA),
					/ "set %ContextNode::LastStatus explicitly as asynchronous \
						call result" @ "thunked non-TCO and TCO code"
				)
				),
				(
				/ $comp "internal thunked functions returned \
					%ReductionStatus::Partial" ~ "%Reduction::Retrying"
					$effecitve @ "functions %(ReduceAgain, ReduceChecked, \
					ReduceTail, EvaluateDelayed#2, EvaluateLeafToken)" $dep_from
					("%(RelayNext, RelaySwitched, RelaySwitchedUnchecked, \
					EvaluateDelayed)" @ %NPLA);
				(
				/ DLI "simplified reduction result saving for evaluation passes"
					@ "function %ReduceOnce" ^ "%ContextNode::LastStatus"
					~ "private shared status and \
					%ContextNode::SkipToNextEvaluation";
					// See $2018-10 @ %Documentation::Workflow.
				/ DLDI "simplified function %Reduce for thunked code"
					!^ "%ContextNode::SkipToNextEvaluation",
				* $comp "wrong status setting in distributing thunked \
					evaluation passes" $since b814
					// This is not only redundant, but also wrong for \
						interoperations.
				)
				),
				/ DLDI "optimized TCO action access",
				/ DLDI "simplified internal asynchronous calls and function \
					%ReduceChecked"
					// For performace, partially similar to 'Relay*' templates \
						modification in %NPLA, with about additional 3% \
						improvement.
			)
		),
		- $dev "unused parameter name %tag" @ "function %FetchRootNameEnd_P \
			with %IDTag<YF_Platform_DS> parameter" @ %YCLib.FileSystem
			// To eliminate Clang++ warning: [-Wunused-parameter].
	)
),

b840
(
	/ %YBase.YStandardEx $=
	(
		/ $impl "tree private functions" %Tree $=
		(
			* DLD "minor spelling error" @ "internal functions" $since b830,
			* "leaked node in equal range insertion when the key comparation \
				throws" $since b830,
				// This only effects containers with multiple equivalent keys, \
					which is not implemented in %YBase.YStandard yet.
			/ DLDI "simplified local declarations"
		),
		/ "allowed empty buffer pointer when the length is zero"
			@ "constructor %basic_membuf" @ %StreamBuffer
	),
	/ %YFramework $=
	(
		/ %YCLib.MemoryMapping $=
		(
			/ $lib "destructor %UnmapDelete" @ !"platform %DS"
				@ "class %UnmapDelete" $=
			(
				/ "exception specification 'ynothrow'" -> 'ynothrowv';
				+ "assertion to ensure nonnull parameter value"
			),
			/ @ "class %MappedFile" $=
			(
				/ DLDI @ "platform %Win32" @ "constructor" ^ 'CreateFileMappingW'
					~ 'CreateFileMappign',
				(
				/ "supported empty file" @ "constructors";
					// Although for non Windows or POSIX configurations like \
						platform %DS there is nothing particular to support \
						for a zero-sezed 'new[]', identifying zero length \
						would likely be more efficient by less allocation.
				/ $comp DLI "optimized destructor by avoiding flush on empty \
					files"
					// It would be more efficient when the length is zero to \
						omit deallocation and flush before deallocation.
				)
			)
		),
		* $comp "missing empty file support"
			@ "class %SharedInputMappedFileStream" @ %YSLib.Service.File $since
			b724 $dep_from ("class %MappedFile" @ %YCLib.MemoryMapping),
		/ %NPL $=
		(
			/ @ "namespace %NPL::A1" %Dependency $=
			(
				/ @ "namespace %Forms" $=
				(
					/ "loaded derived functions" @ "function %LoadGroundContext"
						$= (+ "operatives ('$let/d'; '$provide/d!')",),
					/ DLDI "renamed dynamic environment parameters to 'd'"
						$effective @ (("alternative derivation" @ "operatives \
						('$vau', '$vau%', '$lambda', '$lambda%')", \
						"alternative derivations" @ "applicatives \
						'get-current-environment', \
						'lock-current-environment'", "derivation of operatives \
						('$sequence', '$set!', '$defv!', '$defv%!', \
						'$defv/e!', '$defv/e%!', '$setrec!', '$defl!', \
						'$defl%!', '$defw!', '$defw%!', '$defw/e!', \
						'$defw/e%!', '$lambda/e', '$lambda/e%', '$defl/e!', \
						'$defl/e%', '$cond', '$when', '$unless', '$let', \
						'$let/e', '$let*', '$letrec', '$provide!', '$import!')",
						"derivation of applicatives (%map1, 'map-reverse')")
						@ "function %LoadGroundContext",
						"derivation of operative '$binds1?'"
						@ "function %LoadModule_std_environments")
						// This is consistent with '$remote-eval' in Kernel, \
							which has been added later than other RnRK report \
							draft. It is better to differentiate '/e' (with to \
							be evaluated <environment>) and '/d' (with \
							<eformal>) variants of functions here. Since the \
							old name is 'env' in most cases, 'd' also saves \
							space. 
				),
				* $comp "threw on opening empty file" @ "function %OpenFile"
					$since b839 $dep_from
					%(YSLib.Service.File, YBase.YStandard.StreamBuf)
			),
			/ %NPLA $=
			(
				/ "threw exception type" -> "%TypeError" ~ "%NPLException"
					@ "static member function \
					%Environment::ThrowForInvalidType",
				+ "functions %(TermToStringWithReferenceMark, \
					ThrowListTypeErrorForInvalidType), 2 function \
					templates %ResolveTerm",
				/ "function %ResolveEnvironment#2" $=
				(
					/ "threw %ListTypeError for parameter of a list" ^ $dep_from
						"%(ResolveTerm, TermToStringWithReferenceMark)",
						// This improve accuracy of message as it does not \
							treat a list as an empty object.
					+ 'const' @ "parameter type"
				),
				/ "all 2 function templates %AccessTerm threw %ListTypeError \
					for list terms" ^ $dep_from
					"%ThrowListTypeErrorForInvalidType"
			),
			/ %NPLA1 $=
			(
				/ @ "functions %(ReduceCombiner, Forms::MatchParameter)" $=
				(
					/ "simplified exception message"
						^ ("function %TermToString" @ %NPLA),
					/ "distinguished referenced terms" @ "exception messages"
						^ $dep_from ("%(ResolveTerm, \
						TermToStringWithReferenceMark)" @ %NPLA)
				),
				/ @ "namespace %Forms" $=
				(
					/ "minor exception messages tweaks"
						@ "function %MatchParameter",
						// To get more consistent displayed order.
					/ "threw %TypeError on invalid type"
						@ "functions %(WrapOnce, Unwrap)" ~ "%NPLException",
					/ @ "functions %(Cons, ConsRef, SetFirst, SetFirstRef, \
						SetRest, SetRestRef)" $=
					(
						/ "improved %ListTypeError exception messages"
							^ $dep_from
							("%TermToStringWithReferenceMark" @ %NPLA),
						/ "simplified" ^ $dep_from ("%ResolveTerm" @ %NPLA)
					),
					/ @ "functions %(SetFirst, SetFirstRef, SetRest, \
						SetRestRef)" %=
					(
						/ "improved %ValueCategoryMismatch exception messages"
							^ ("%TermToString" @ %NPLA),
						/ DLDI "simplified" ^ "%IsBranch"
					),
					/ DLDI "simplified functions %(Lambda, LambdaRef, Vau, \
						VauRef, VauWithEnvironment, VauWithEnvironmentRef, If)",
					(
					/ "return type %void" @ "functions %(Lambda, LambdaRef, \
						Vau, VauRef, VauWithEnvironment, \
						VauWithEnvironmentRef, DefLazy, DefineWithNoRecursion, \
						DefineWithRecursion)"-> "%ReductionStatus";
						// To be consistent and with less overhead of \
							%WrappedContextHandler, functions not relying on \
							asynchronous reductions are also changed.
					/ $lib "supported thunked call for environment argument"
						@ "functions %(VauWithEnvironment, \
						VauWithEnvironmentRef)"
					)
				),
				/ DLDI "simplified function %(ReduceCombined, ReduceAgain)"
			),
			/ $comp "improved list type check by throwing %ListTypeError on \
				unexpected list arguments" $effective @ ("functions \
				%(Undefine, EvalString, EvalStringRef, MakeEncapsulationType), \
				(function templates %(CallUnaryAs, CallBinaryAs, \
				CallBinaryFold); class templates %(UnaryAsExpasion, \
				BinaryAsExpansion))" @ "namespace %Forms" @ %NPLA1, \
				("applicatives ('string<-', 'regex-match?')" @ "function \
				%LoadModule_std_strings"; "applicative 'system-get'"
				@ "function %LoadModule_std_system") @ %Dependency) $dep_from
				("%AccessTerm" @ %NPLA),
			/ $impl %Lexical $=
			(
				* "wrong use of %string_view" @ "function %Decompose" $since
					b659,
					// This only would work when %string_view::const_iterator \
						is equivalent to the %string_view::const_pointer.
				* $re_add(b838) "missing explicit cast to %YSLib::octet from \
					%byte" @ "member function %LexicalAnalyzer::CheckEscape"
					$since b545
					// This would not work when %byte is %std::byte.
			)
		)
	),
	/ %Tools.Scripts $=
	(
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			+ "applicatives ('safeenv-get', 'safeenv-set'; 'safeenv-empty?', \
				'safeenv-restore') to cache and guard environment variables \
				defined externally based on environment variable setting \
				%SS_DebugEnv" $dep_to "safe environment interops",
				// This relies on encapsulation of SHBuild environment, \
					otherwise call of hooked applicatives would be infinitely \
					recursive.
			+ "aplicative 'ss-verbose-puts' to print message only enabled \
				verbose mode based on environment variable %SS_Verbose"
		),
		/ "optimized environment variables saving and restoring"
			@ ("%SHBuild-YSLib-common.txt", "%SHBuild-YSLib-build.txt")
			$dep_from "safe environment interops" $=
		(
			/ "cached and guarded environment variables" ^ 'safeenv-*'
				~ "environment variable saving";
			/ $comp "allowed debug environment setting with nonempty variable \
				%SS_DebugEnv",
			* $comp "externally set %INCLUDES not effective"
				@ "stage 2 building" $since b838
		),
		/ "applicative 'ld-ext-adjust_win32_subsystem_' printed message of \
			'-mwindows' for Windows GUI programs only when specified verbose \
			mode" ^ $dep_from 'ss-verbose-puts' ~ 'puts'
	),
	/ %YDE $=
	(
		/ @ "%build-all.sh" $=
		(
			/ "required 'SHBuild-common.sh' in %PATH";
			* "wrong default output path caused by ineffective default value \
				of variable %SHBuild_BuildPrefix" $since b741
		),
		* "missing initialization of current time" @ "main function"
			@ %Clock.Main $since b561
			// This would make the clock arms start from zero position. The \
				effect would be easier realized in %release configurations.
	)
),

b840
(
	/ %YBase.YStandardEx $=
	(
		+ "function template %read_all_with_buffer" @ %CStandardIO,
		* "different type returned" @ "%substr" @ "class template %basic_string"
			@ %String $since b833
			$= (+ "member function %substr")
	),
	/ %YFramework $=
	(
		/ %YCLib $=
		(
			/ $re_ex(b709) $lib $impl "supported Microsoft VC++ 2017 15.8"
				@ "class template %basic_filebuf" @ %FileIO,
			/ %Host $=
			(
				/ "functions %platform_ex::(upopen, upclose)"
					@ 'YF_Hosted' @ %Host
					>> "namespace %platform" @ %FileIO,
				(
				/ DLI "simplified function %FetchCommandOutput"
					^ "%ystdex::(temporary_buffer, throw_error)", $dep_from
					("%ystdex::read_all_with_buffer"
					@ %YBase.YStandardEx.CStandardIO) ~ "%YCL_Raise_SysE";
				/ "function %FetchCommandOutput; object \
					%DefaultCommandBufferSize" >> ("namespace %YSLib"
					@ %YSLib.Core.YCoreUtilities) $dep_from
					"%YSLib::(upopen, upclose)" %YSLib.Adaptor.YAdaptor
				),
				(
				- "function %FetchCachedCommandString";
				/ "functions %FetchCachedCommandResult" ^ "%string_view"
					~ "%string",
				/ "functions %LockCommandCache, FetchCachedCommandResult; \
					type %CommandCache"
					>> ("namespace %YSLib" @ %YSLib.Core.YCoreUtilities),
				),
				/ $forced DLDI "improved internal terminal data interface"
					@ !"plaform %Win32" ^ "%(FetchCachedCommandResult, \
					string_view）" ~ "%（FetchCachedCommandString, string)"
					$dep_from "%FetchCachedCommandString",
				(
				/ "function %SetEnvironmentVariable" @ 'YF_Hosted' >> %YCommon
					$dep_from ("%YCL_CallF_CAPI" @ %FileIO);
				+ $comp "function %SetEnvironmentVariable" @ "platform %DS"
				)
			),
			* $comp $doc $re_ex(b693) "missing closing '//@}' for %upclose"
				$since b721 $dep_from
				("%platform_ex::(upopen, upclose)" @ %Host),
			/ %Video $=
			(
				+ "functions %(PixelToAlpha, PixelToBlue, PixelToGreen, \
					PixelToRed, ColorComponentsToPixel)";
				/ DLDI "simplified class %Color"
					^ "%(PixelToAlpha, PixelToBlue, PixelToGreen, PixelToRed, \
					ColorComponentsToPixel)";
				/ "class %Color" >> "namespace %YSLib::Drawing"
					@ %YSLib.Core.YGDIBase $dep_from
					("%YSLib::Drawing::(PixelToAlpha, PixelToBlue, \
					PixelToGreen, PixelToRed, ColorComponentsToPixel)"
					@ %YSLib.Adaptor.YAdaptor)
			),
			/ "macros %(YCL_Raise_SysE, YCL_RaiseZ_SysE, YCL_Trace_SysE, \
				YCL_WrapCall_CAPI, YCL_Call_CAPI, YCL_CallF_CAPI, \
				YCL_TraceWrapCall_CAPI, YCL_TraceCall_CAPI, \
				YCL_TraceCallF_CAPI)" @ %FileIO >> %YCommon
		),
		/ $forced "function %DSConsoleInit" @ "platform %DS"
			@ %'YCLib_(DS)'.DSVideo $dep_from ("%Color" @ %YCLib.Video)
		/ %NPL $=
		(
			/ "namespace %A1" @ %Dependency $=
			(
				/ "namespace %Forms" $=
				(
					/ "function %LoadNPLContextGround" -> ("functions \
						%(LoadGroundContext, (LoadModule_std_strings; \
						LoadModule_std_environments, LoadModule_std_system), \
						LoadModule_std_io") $dep_to "NPLA1 loader functions" $=
					(
						/ "split system module function registration",
						/ "reproduced original input"
							@ "error message for invalid literals",
						/ "loaded derived functions" $=
						(
							// See $2018-09 @ \
								%Documentation::Workflow.
							/ "renamed function name with phrases 'lambdae', \
								'vaue'" -> ('lambda/e', 'vau/e')
								$effective @ ('$lambdae', '$lambdae%', '$vaue',
								'$vaue%'),
							/ DLDI "simplified operative '$defv%!'" ^ '$defv!',
							+ "operatives ('$defv/e!', '$defv/e%!', \
								'$defw/e!', '$defw/e%!', '$defl/e!', \
								'$defl/e%!')",
							/ DLDI "simplified operative '$binds1?'"
								^ $dep_from '$defv/e!',
							/ DLDI "simplified applicative 'env-get?'"
								^ $dep_from '$defl/e!',
							+ "applicative 'list-rest%'; operative '$let/e'",
							/ DLDI "simplified operative '$let'" ^ 'list-rest%',
							+ "operatives ('$bindings/p->environment'; \
								'$bindings->environment')"
						)
					),
					/ "function %LoadNPLContextForSHBuild"
						-> "function %LoadModule_SHBuild" $=
					(
						/ "parameter" ^ "%REPLContext" ~ "%ContextNode",
						/ DLDI "simplified applicative 'SHBuild_RemovePrefix_'"
							$dep_from %YBase.YStandardEx.String
					),
					/ DLDI $revert_ex(b834) "simplified loading code without \
						polymorphic loader",
					+ "function template %LoadModule"
				),
				+ "function %OpenFile"
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified function %Forms::MakeEncapsulationType"
					!^ "%ystdex::exchange",
				/ @ "vau and evaluation TCO" $=
				(
					// See $2018-09 @ %Documentation::Workflow.
					- "function prvalues collection";
					* "environment for operand wrongly removed when \
						environment frame is removed from the record list"
						$since b827
				)
			),
			/ %NPLA $=
			(
				+ $dev "class name declaration %Environment",
				/ DLDI "optimized %ContextNode::Rewrite" ^ "%std::move",
					// Since %Reducer is copyable and passed by value, moving \
						on the parameter is not reliable in general. However, \
						moving should be still more optimal here.
				/ @ "class %Environment" $=
				(
					- "assertion" @ "static function %DefaultResolve",
						// Indirect call of %Environment::LookupName would \
							account.
					(
					/ "supported unbound calls" ^ "thunked call"
						~ "%Redirect";
					* "ignored environments other than front element in an \
						environment list" $since b798,
						// This bug of missing backtracking only occurs for \
							list with more than one element and the name \
							cannot be look up successfully in the first one.
					- $revert(b798) "static function %DefaultRedirect; \
						data member %Redirect"
					)
				)
			)
		),
		/ %YSLib $=
		(
			/ @ "namespace %YSLib" @ %Adaptor.YAdaptor $=
			(
				+ ('using platform::upopen;', 'using platform::upclose;')
					$dep_from "%platform_ex::(upopen, upclose)"
					@ %YCLib.Host,
				/ @ "namespace %Drawing" $=
				(
					+ ('using platform::PixelToAlpha;',
						'using platform::PixelToBlue;',
						'using platform::PixelToGreen;',
						'using platform::PixelToRed;'
						'using platform::ColorComponentsToPixel;')
						$dep_from ("%platform::(PixelToAlpha, PixelToBlue, \
						PixelToGreen, PixelToRed, ColorComponentsToPixel)"
						@ %YCLib.Video),
					- DLDI "redundant 'using platform::Pixel;'"
				),
				+ 'using platform::SetEnvironmentVariable;' $dep_from
					("%SetEnvironmentVariable" @ %YCLib.Host)
			),
			/ DLDI %Service.YPixel $=
			(
				/ $forced "header inclusion" $dep_from %Video,
				/ "possibly truncated cast to %AlphaType"
					@ "function templates %(Blend, BlendAlpha, Composite"
					@ "class template specialization %GBlender"
					// To eliminate Microsoft VC++ 2017 warning: C4244.
				/ "possibly truncated cast to '_tDstInt'" @ "function \
					templates %(BlendComponent, CompositeComponent)",
					// To eliminate Microsoft VC++ 2017 warning: C4244.
				* $re_add(b691) DD "missing '!'" @ "end of '/*'"
					@ "multiline Doxygen comment" $orig
					(@ "function templates %Blend" $since b561)
			),
			+ "function %LockCommandArguments" @ %Core.YCoreUtilities
				$dep_from ("%CommandArguments" @ %YCLib.Host)
		)
	),
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			/ "NPLA1 context initialization" $=
			(
				/ $forced DLDI $dep_from ("%Forms::(LoadNPLContextGround, \
					LoadNPLContextForSHBuild)"
					@ %YFramework.NPL.Dependency),
				(
				/ "applicative %load returned %ValueToken::Unspecified";
					// This is consistent with current klisp. See http://klisp.org/docs/Ports.html#Ports.
				/ "applicative %load" >> (("derived functions"
					@ "%LoadGroundContext") ^ $dep_from "%A1::OpenFile"
					@ %YFramework.NPL.Dependency)
				),
				(
				/ "applicative 'system-get'" >> ("derived functions"
					@ "%LoadModule_std_system" @ %YFramework.NPL.Dependency),
				/ "applicative 'env-set'" >> ("derived functions"
					@ "%LoadModule_std_system" @ %YFramework.NPL.Dependency)
					$dep_from ("%SetEnvironmentVariable"
					@ %YFramework.YSLib.Adaptor.YAdaptor),
				(
				/ "saved monostate" @ "applicative 'cmd-get-arg'" ^ $dep_from
					("%LockCommandArguments"
					@ %YFramework.YSLib.Core.YCoreUtilities);
				/ "applicative 'cmd-get-args'" >> ("derived functions"
					@ "%LoadModule_std_system" @ %YFramework.NPL.Dependency)
				);
				/ "called loader functions to load in separated environments \
					%std.(environments, strings, io, system)"
					$dep_from "NPLA1 loader functions" $dep_to
					"importing from standard environments" ^ $dep_from
					("%LoadModule" @ %YFramework.NPL.Dependency)
				),
				/ "saved NPL ground environment before registration of \
					%env_SHBuild_"
					// Now ground environment bindings are not mutable.
			),
			/ DLDI "simplified" ^ ("%A1::OpenFile" @ %YFramework.NPL.Dependency)
		),
		/ %Scripts $=
		(
			/ "%SHBuild-common-options.sh" %=
			(
				+ "variables %(C_CXXFLAGS_STRIP, LDFLAGS_STRIP) with default \
					value '-s'";
				/ "split '-s' from default values"
					@ "variables %(CXXFLAGS_IMPL_OPT, LDFLAGS_IMPL_OPT)",
				+ '$C_CXXFLAGS_STRIP' @ "default value"
					@ "variable %C_CXXFLAGS_COMMON",
				+ '$LDFLAGS_STRIP' @ "default value"
					@ "variable %LDFLAGS_OPT_DBG";
				* "missing '-s' as strip option when the tool is not 'g++'"
					$since b547
			),
			/ $build "%SHBuild-build.sh" $=
			(
				/ "set %(C_CXXFLAGS_GC, LDFLAGS_GC' to '' to prevent section \
					removal",
				/ "set %(C_CXXFLAGS_STRIP, LDFLAGS_STRIP) to '' to prevent \
					stripping" $dep_from ("%(C_CXXFLAGS_STRIP, LDFLAGS_STRIP)"
					@ "%SHBuild-common-options.sh"),
					// Preserving symbol would make debugging easier.
				/ "set %CXXFLAGS_OPT_DBG with value '-Og -g'"
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				/ "'$import!' statement" $=
				(
					* "missing ('SHBuild_QuoteS_!', 'SHBuild_RaiseError_', \
						'SHBuild_BuildGCH_mkpdirp_')" $since b839,
					- "redundant 'SHBuild_EnsureDirectory_'"
				),
				/ "applicative 'build-with-conf-opt' detected variables \
					%(C_CXXFLAGS_STRIP, LDFLAGS_STRIP) separated '-s' option \
					as %SHBuild-common-options.sh"
			),
			/ $forced DLDI "importing" $dep_from "loader functions"
				$= (/ "imported names from modules %std.(environments, \
					strings, io, system)" @ "%(SHBuild-YSLib-common.txt, \
					SHBuild-YSLib-build.txt)" 
					$dep_from "importing from standard environments")
		)
	)
),

b838
(
	/ %YBase.YStandardEx $=
	(
		/ DLI @ "class %task_pool" @ %Concurrency $=
		(
			+ 'ynothrow' @ "lambda-expression" @ "function templates %(wait, \
				wait_for, wait_until)",
			+ $design "simplified" @ "member function template %wait_to_enqueue"
				!^ "lambda-expression"
		),
		/ "constructors" !@ '__cpp_inheriting_constructors >= 201511L' $=
		(
			// As per https://gcc.gnu.org/projects/cxx-status.html, P0136R1 is \
				implemented since GCC 7. So the older versions would not work. \
				Lacking of the change would break builds in platform %Android.
			* "ambiguous constructors" 
				@ "class template %basic_string" @ %String $since b833
				$= (/ "inherited constructor" -> "7 explicitly declared \
				constructors"),
			* $impl "missing default constructor" @ "underlying %optional data"
				@ %Optional $since b591
				// The defaulted constructor would not be provided by \
					the implementation in derived classes without P0136R1.
		),
		* $comp "ill-formed node handle data when instantiated" \
			!@ '__cpp_inheriting_constructors >= 201511L'
			@ %Tree $since b830 $dep_from %Optional,
			// This would be instantiated in %YFramework.YSLib.UI.Menu, for \
				example.
		/ "ignored empty path elements" @ "all 2 funtions %operator/="
			@ "class template %path" @ %Path
			// This is consistent with %std::filesystem::path in general. Note \
				empty elements can still be accepted by %push_back.
	),
	/ %YFramework $=
	(
		/ %YCLib.Keys $=
		(
			* "missing explicit cast to integer type from %byte"
				@ "function %MapKeyChar#2" @ "platform %Win32" $since b489,
			* "missing implementation support" @ '_GLIBCXX_BITSET'
				@ ("function %FindFirstKey" $since b486,
				"function %FindNextKey" $since b487) $mismatch
				// See https://bitbucket.org/FrankHB/yslib/wiki/Developments.zh-CN.md.
		),
		/ %NPL $=
		(
			/ %Dependency $=
			(
				+ "operatives ('$letrec', '$import!')"
					@ "loaded derived functions"
					@ "function %LoadNPLContextGround",
				/ @ "function %LoadNPLContextForSHBuild" $=
				(
					/ "loaded derived functions" $=
					(
						+ "applicative to avoid duplicate double quotes" $dep_to
							"added applicative for protected quotes"
						* $revert(b834) "environment captured failed to work \
							after switched in the context"
							@ "applicative %SHBuild_EchoVar" $since b834
					),
					(
					/ "did not call %LoadNPLContextGround";
					/ 'REPLContext' @ "parameter"
						@ "function %LoadNPLContextForSHBuild" -> 'ContextNode',
					)
				),
				/ DLDI "avoided implicit conversion to %ContextNode reference"
					@ "loading" @ "functions %(LoadNPLContextGround, \
					LoadNPLContextForSHBuild)" $dep_from ("%(RegisterForm, \
					RegisterStrict, RegisterStrictUnary, RegisterStrictBinary)"
					@ %NPLA1) $dep_to "loader disambiguity",
				* $lib "redundant 'YF_API'" @ "definition"
					@ "function %LoadNPLContextGround" $since b834,
				+ "function template %GetModuleFor"
			),
			/ %NPLA $=
			(
				+ "function template %SwitchToFreshEnvironment" @ %NPLA,
				+ "3 function templates %EmplaceLeaf"
					^ "%ValueNode::insert_or_assign",
				(
				- $revert(b674) "function templates %(RegisterContextHandler, \
					RegisterLiteralHandler)";
				/ "aliases %(ContextHandler, LiteralHandler)"
					>> ("namespace %NPL::A1" @ %NPLA1)
				),
				/ $revert_ex(b817) "function %CombineActions"
					=> "%ComposeActions",
					// To avoid confusion with concept of combiners in the \
						object language.
			),
			/ %NPLA1 $=
			(
				* "spelling error" @ %NPLA1 $since b806
					(/ "%TryLoadSouce" => "%TryLoadSource"),
				/ DLDI "simplified environment switching" @ "vau handlers"
					^ ("%SwitchToFreshEnvironment" @ %NPLA),
				(
				/ "function template %RegisterStrict" ^ "%StrictContextHandler"
					~ "ADL %ToContextHandler",
				/ $impl ^ "%StrictContextHandler" ~ "%ToContextHandler"
					$effective @ "functions %Forms::(Lambda, LambdaRef, \
					MakeEncapsulationType, Wrap, WrapOnce)";
				- $revert(b733) "function template %ToContextHandler"
				),
				(
				/ $impl "function templates %(RegisterForm, RegisterStrict)"
					^ (($dep_from "%NPL::EmplaceLeaf"
					~ "%NPL::RegisterContextHandler") @ %NPLA)
					$dep_to "removal of RegisterContextHandler call";
				* $comp "subterms of bound object not cleared" $orig
					(@ "function template %RegisterFunction" @ $since b696)
				),
				/ "function templates %(RegisterForm, RegisterStrict; \
					RegisterStrictUnary, RegisterStrictBinary)" $=
				(
					/ 'ContextNode' @ "1st parameter type"
						-> "template argument" $dep_from "loader disambiguity",
					/ 'string' @ "2nd parameter" -> 'string_view',
				),
				/ @ "function %MakeEncapsulationType" $=
				(
					* "missing unique type creation" $since b834
					/ "simplified" ^ "%ystdex::exchange, temporary object"
						~ "%(swap, TermNode::AddValueTo"
				)
			)
		),
		/ %YSLib $=
		(
			* $comp "ill-formed conflict %String constructors" \
				!@ '__cpp_inheriting_constructors >= 201511L' @ %Core.String
				$since b833 $dep_from %YBase.YStandardEx.String,
			* $comp "ill-formed instantiations" \
				!@ '__cpp_inheriting_constructors >= 201511L' @ %UI.Menu
				$since b833 $dep_from %YBase.YStandardEx.Tree,
			/ %Service $=
			(
				/ ("overload for %String parameter"
					-> "2 overloads with %ypath and templated path parameter")
					@ "%operator/=" @ "class %Path" @ %FileSystem,
					// Now %string_view can be used as parameter type of \
						%operator/=, being consistent as the constructors.
				/ @ "constructors %UniqueLockedOutputFileStream" @ %File $=
				(
					(
					* $impl "missing parameter for specifiying stream open \
						mode to guarantee open mode synchonization between \
						underlying system stream and output stream"
						@ "underying constructors" $since b724;
					+ "binary open mode as 3rd parameter"
						@ "constructor template#1",
					* "missing parameter for specifiying binary and other \
						stream open modes" @ "all 2 constructor templates"
						$since b724
					),
					/ $revert_ex(b727) "swapped 1st and 2nd parameter"
						@ "all 2 constructor templates",
						// This is consistent with %std::ofstream constructors.
				)
			)
		),
		/ %Helper $=
		(
			/ "avoided setting termination handler" @ 'YF_Hosted'
				@ %Environment,
				// This provides better debug experience with various hosted \
					implementations.
			/ %Initialization $=
			(
				/ $forced DLDI "functions %(LoadNPLA1File, SaveConfiguration)"
					$dep_from %YSLib.Service.File,
				* $re_add(b837) $impl "missing explicit cast to %size_t type \
					from %byte" @ "platform %Win32" @ "function %LoadComponents"
					$since b725
					// This would not work when %byte is %std::byte.
			)
		)
	),
	* $comp "build failure" @ "platform %Android" $dep_from
		%YFramework.YSLib.(Core.String, UI.Tree) $since b830,
	/ %Tools $=
	(
		/ %Scripts $=
		(
			/ "%SHBuild-YSLib-common.txt" $=
			(
				+ $design "installation functions",
				/ @ "applicatives ('compile-ok', 'get-thread-option',
					'system-or-puts')" $=
				(
					* "possibly missing quotes on paths" $since b796
						^ 'system-quote',
					/ $impl "simplified" ^ 'cons-cmd'
				),
				/ "applicative 'build-with-conf-opt' accepted separated \
					argument to specify loader extra arguments adjustment",
			),
			/ "%SHBuild-YSLib-build.txt" $=
			(
				(
				+ "variables ('env-os', 'env-arch'; %SHBuild_Host_Platform; \
					'env-host-lib')";
				(
				/ $impl "simplified stage 1 library build code"
					!^ "%SHBuild_BuildGCH" $dep_to
					"avoided SHBuild_Install_HardLink";
				/ "imporved robustness of quoted on path and tools in command"
					^ 'system-quote'
				),
				/ "imported installation functions" @ "%SHBuild-YSLib-build.txt"
					^ $dep_from (('$import!' @ %YFramework.NPL.Dependency),
					"installation functions" @ "%SHBuild-YSLib-build.txt"),
				/ $impl "imported stagee 1 SHBuild path"
					~ "%SHB_GetToolPath call" $dep_to "avoided SHB_GetToolPath"
				),
				/ "proteced user environment variables %(INCLUDES, LIBS, \
					LIBS_RPATH) at first" $dep_to
					"proteced user environment variables",
				+ "variables (%SHBuild_Host_Platform; 'env-host-lib')",
				+ "rest command arguments as variable 'extra-opts'",
					// For stage 2 building.
				/ "improved quotes" $dep_from
					"added applicative for protected quotes"
			),
			+ $forced DLDI "importing statement from SHBuild environment \
				%env_SHBuild_ at first" $dep_from "SHBuild environment object"
				^ ('$import!' @ %YFramework.NPL.Dependency)
		),
		/ @ "%install-sysroot.sh" $=
		(
			/ "simplified" $=
			(
				/ DLD "all stage 1 installation code"
					>> ("%SHBuild-YSLib-build.txt" @ %Scripts);
				+ DLD "passed environment variables %(SHBuild_ToolDir, \
					SHBuild_BaseDir, SHBuild_UseDebug, SHBuild_UseRelease, \
					SHBuild_NoStatic, SHBuild_NoDynamic) to stage 1 SHBuild \
					call";
				/ DLD "stage 2 SHBuild building code"
					>> ("%SHBuild-YSLib-build.txt" @ %Scripts) $dep_from
					"proteced user environment variables" ^ $dep_from
					'build-with-conf-opt' @ "%SHBuild-YSLib-common.txt";
				+ $comp "stage 2 builds output %(CXXFLAGS, LDFLAGS, SHBOPT) \
					before calling build command" $dep_from ("%SHBuild_EchoVar"
					@ "%LoadNPLContextForSHBuild" @ %YFramework.NPL.Dependency),
				/ $dev "simplified variable names" $=
				(
					/ "%SHBuild_S1_BuildDir" => "%S1_BuildDir",
					/ "%SHBuild_S1_SHBuild" => "%S1_SHBuild",
					/ $revert_ex(b740) "exported variable %SHBuild_PCH_stdinc_h"
						-> "specified only for call of %SHBuild-build.sh",
					- "variable %SHBuild_YSLib_Platform",
						// Use %SHBuild_Host_Platform instead.
					- "exported variables %(INCLUDES_freetype, \
						CFLAGS_freetype_other, SHBuild_NoStatic, \
						SHBuild_NoDynamic)"
						// They are not used in stage 1.
				),
				/ DLI "simplified source inclusion" ^ "%SHBuild-common.sh"
					~ "%SHBuild-common-options.sh"
			),
			+ $lib $comp "assertions for nonnull arguments in installation",
			(
			- $revert(b563) "all 'SHB_*' functions";
			* $comp "missing fallback in installation of hard links" $since
				b659 $dep_from "avoided SHBuild_Install_HardLink"
			),
			/ "avoided silence errors when installing 3rd libaray files",
			- "applicative %SHBuild_BuildGCH" $dep_from
				"avoided SHBuild_Install_HardLink",
			- $revert(b837) "applicative %SHB_GetToolPath" $dep_from
				"avoided SHB_GetToolPath",
			/ $forced DLDI "stage 1 build" $dep_from 'build-with-conf-opt'
				@ "%SHBuild-YSLib-common.txt"
		),
		/ "NPL source loading" @ %SHBuild.Main $=
		(
			/ $forced DLDI ("%TryLoadSouce" @ %YFramework.NPL.NPLA1),
			/ "NPL environment initialization" $dep_to
				"SHBuild environment object" $=
			(
				+ "environment object %env_SHBuild_",
				/ $forced $impl "loading environment for SHBuild initialization"
					$dep_from
					("%LoadNPLContextForSHBuild" @ %YFramework.NPL.Dependency)
					$= (/ "all variables initialized specifically for SHBuild"
						>> $dep_from "environment object %env_SHBuild_"
						^ "%GetModuleFor" @ %YFramework.NPL.Dependency)
			)
		)
	)
),

b837
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			/ %Placement $=
			(
				/ "condition for <optional> inclusion" $=
				(
					// For %YB_Has_optional.
					* "missing check of %_MSVC_LANG" @ 'YB_IMPL_MSCPP >= 1910'
						$since b835,
					* "over-strict value of macro %__cpp_lib_string_view"
						@ "conditon" $since b831,
						// This is particular significant since P0032R3 is \
							explicitly avoided, see https://bitbucket.org/FrankHB/yslib/wiki/StandardUsing.en-US.md.
						$= (/ '201606L' -> '201603L'),
					/ $re_add(b835) "loosed '__cplusplus >= 201703L'"
						-> "'__cplusplus >= 201603L'"
				),
				* "wrong type of %(in_place_type, in_place_index)"
					@ "inline namespace %ystdex::cpp2017" @ "<optional> or \
					<experimental/optional> not used"
					$since b831
					// This is now condition 'YB_Has_optional == 0'.
			),
			/ %StringView $=
			(
				/ "condition for <string_view> inclusion" @ 
					// For %YB_Has_string_view.
					$= (+ 'YB_IMPL_MSCPP >= 1910 && _MSVC_LANG >= 201706'),
				+ "conditionally defined macro %__cpp_lib_string_view"
			),
			/ $re_add(b835)  "loosed '__cplusplus >= 201703L'"
				-> "'__cplusplus >= 201411L'" @ %Memory,
			/ $re_ex(b835) "condition '__cplusplus >= 201703L' for \
				'using std::basic_string;', excluding %std::hash specialization \
				for %ystdex::basic_string templates" @ %String
				-> '__cpp_lib_string_view >= 201606L || __cplusplus >= 201606L'
				$dep_from ("%__cpp_lib_string_view" @ %StringView),
			* "missing extensions %(make_optional_inplace, ref_opt, \
				optional_last_value)" @ 'YB_Has_optional == 1' @ %Optional $since
				b831,
			/ %TStringView $=
			(
				* "missing headers" @ "<string_view> used" $since b831
					// This is now condition 'YB_Has_string_view == 1'.
			),
			/ %Path $=
			(
				+ $doc "requirements of specializations" @ "Doxygen comments"
					@ "class template %type_traits";
				/ @ "class template %path" $=
				(
					+ "function %has_leaf_nonempty";
					* "missing rooted relative path support" @ "%operator/="
						$since b836 ^ "%has_leaf_nonempty",
					+ "functions %(has_leaf; remove_leaf); 2 functions \
						%redirect"
				)
			),
			/ %Swap $=
			(
				// These would not work if %std::byte is used.
				* "missing overload for %ystdex::byte" @ "%ystdex_swap::swap"
					$since b834,
				* "missing disabled ADL for non-class type"
					@ "function template %swap_dependent"
			),
			* "missing explicit cast to integer type from %byte or other \
				incompatible operations with %byte" $effecitve @ (("member \
				function %ifile_iterator::(sputbackc, operator++)"
				@ %CStandardIO $since b607, ("function %native_byte_order"
				$since b695, "function template %pack_uint" $since b603)
				@ %CStandardInteger, "function template %trivially_fill_n"
				$since b603, "function operator*"
				@ "class template %bitseg_traits" @ %BitSegment $since b507))
				// This would be ill-formed once the %byte is %std::byte or \
					other types not implicitly convertible to %char.
		),
		/ %YDefinition $=
		(
			/ "%octet" @ 'CHAR_BIT' ^ "%std::uint8_t" ~ "%byte",
			+ DD "Doxygen groups %(YBase_replacement_features, \
				YBase_replacement_extensions; language_compatibility_features)",
			/ DD "Doxygen groups %lang_impl_hints"
				=> "%language_implementation_hints"
		)
	),
	* "ill-formed in-place tags" @ "<optional> or <experimental/optional> not \
		used" $since b831 $effecitve @ ("all 2 function templates %make_any"
		@ %YBase.YStandardEx.Any, ("function template %CreateHolderInPlace, 5 \
		constructor templates %ValueObject using in-place tag argument"
		@ %YObject, "function template %PlaceValue" @ "class %ValueNode"
		@ %ValueNode) @ %YSLib.Core, "function %Forms::DefineWithRecursion"
		@ %NPL.NPLA1, "platform %DS" @ "constructor %Environment"
		@ %Helper.Environment)
		$= (/ $impl ^ "%in_place_type" ~ "%in_place"),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core.YEvent $=
			(
				/ DLDI "simplified" @ "class template specialization %GHEvent"
					^ "member %FuncType",
				* "missing inclusion %YBase.YStandardEx.Tuple"
					@ "<string_view> used" @ %Core.YEvent $since b831
			),
			/ %Service.FileSystem $=
			(
				(
				+ $doc "traits operation requirements" @ "struct %PathTraits";
				+ DLDI 'ynothrow' @ "lambda-expression"
					@ "function template %ParsePathWith";
				),
				* "missing explicit cast to path value type" @ "root path \
					construction" @ "function template %ParsePath" $since b836
					$dep_to "root path construction parsing",
				/ @ "class %Path" $=
				(
					(
					/ "merged constructors %Path of single string path"
						^ "%ParsePath<u16string_view>" ~ "%ParsePath<String>"
						$dep_from "root path construction parsing";
					/ $comp DLI "decreased %String constructions",
					* $comp "constructor with parameter of \
						%std::initializer_list instance ineffective" $since
						b599
					),
					+ ('using ypath::has_leaf;',
						'using ypath::has_leaf_nonempty',
						'using ypath::redirect;', 'using ypath::remove_leaf')
						^ $dep_from "%path::(has_root, has_root_nonempty")
						@ %YBase.YStandardEx.Path
				),
				(
				/ "handled root path" @ "function template ParsePathWidth";
				/ $forced DLDI "simplified function template %ParsePath";
				* "wrong root path handling"
					@ "function template %ResolvePathWithBase" $since b836
					$dep_from "%Path::redirect"
				),
				/ @ "function %DeleteTree" $=
				(
					* $impl "missing qualifying underlying function call by \
						'IO::'" $orig $since b639;
					* $comp $impl "missing qualifying %Remove by 'IO::'"
						 $since b711
				)
			),
			+ 'using platform::uspawn;' @ "namespace %YSLib" @ %Adaptor.YAdaptor
				$dep_from %YCLib.YCommon
		),
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				+ "function %LockCurrentEnvironment",
				/ @ "function %MatchParameter" $=
				(
					* "missing support of reference term for empty list \
						parameter" $since b803,
						// Empty list arguments as lvalues would be never \
							matched without this fix. Some functions like \
							derivation of '$provide!' rely on this fix.
					* "missing exclusion of empty list"
						@ "ellipsis symbol check for last term" $since b777
						// The last '()' parameter would always not work \
							without this fix.
				)
			),
			/ %Dependency $=
			(
				/ @ "loaded derived functions"
					@ "function %LoadNPLContextGround" $=
				(
					(
					+ "applicative 'lock-current-environment'" ^ $dep_from
						("%LockCurrentEnvironment" @ %NPLA1);
						// This cannot be derived from \
							'get-current-environent' and 'lock-environment' \
							because lifetime of a uniquely referenced \
							environment is not guaranteed.
					+ "alternative derivation" @ "applicative \
						'get-current-environment'" ^ 'lock-current-environment',
					/ DLDI "reordered alternative operatives ('$lambda', \
						'$lambda%', '$sequence')",
					+ "operative '$provide!'"
					),
					* "2nd alternative derivation" @ "applicative 'list%'"
						$since b828
						$= (/ $impl ^ '$lambda' ~ '$lambda%'),
					+ "alternative derivations" @ "operatives ('$vau', '$vau%')"
						// These derivatives depend on primitive \
							'get-current-environment' to avoid infinite \
							recursion.
				),
				+ "applicative for testing path absolute predicate"
					@ "loaded derived functions"
					@ "function %LoadNPLContextForSHBuild",
				/ DLDI "all names %(expr1, expr2, expr)" @ "derivations"
					-> "%(e, expr, e)" $effective
					@ "function %LoadNPLContextGround"
					// This is consistent to type description in \
						%Documentation.NPL.
			)
		),
		* $comp "failed initialization of root path caused by failure of \
			following symbolic link '/proc/self/exe'" @ "platform %Linux"
			@ %Helper.Initialization $dep_from ("%ResolvePath"
			@ %YFramework.YSLib.FileSystem) $since b836,
		/ %YCLib $=
		(
			+ "function %uspawn" @ %YCommon,
			* $comp "missing explicit cast to integer type from %byte or other \
				incompatible operations with %byte by missing guaranteed as \
				integer types with capabilities of arithmetic operations"
				@ "%(MonoType, AlphaType) aliaes" @ %Video $since b417 $dep_from
				("%octet" @ %YBase.YDefinition)
		)
	),
	/ %Tools $=
	(
		/ %SHBuild.Main $=
		(
			/ "help message" $=
			(
				+ "clearer description of ignored subdirectories in SRCPATH"
				/ "clarified option '-xd,' accepted paths"
			),
			/ "command calls" $=
			(
				+ "class %Command" ^ $dep_from
					("%uspwan" @ %YFramework.YSLib.Adaptor.YAdaptor);
				/ DLD "member functions %BuildContext::(RunTask; \
					CallWithException; Call)" ^ "%Command" ~ "%string";
				/ $comp DLDI "simplified message output",
				/ $comp "command line call" @ "platform %Win32" $dep_to
					"loosed SHBuild command line length limit" $=
				(
					- $comp "dependencies on '%COMSPEC%' and 'cmd.exe'",
					/ $comp "loosed constraint of command line length in bytes \
						to 32767" ~ "8192"
				)
			),
			(
			+ "namespace %SHBuild";
			/ "all declarations except %::main" >> "namespace %SHBuild";
			/ $forced DLDI "function %::main"
			),
			/ DLD ("parameter type" @ "member function %BuildContext";
				"return type" @ "member function %Rule::GetCommandType")
				-> 'string_view' ~ 'const string&'",
			+ $lib "assertion to ensure nonnull data pointer in %string_view \
				parameter" $effective
				@ "member functions %Rule::(GetCommandType, LookupCommand)",
			* $re_ex(b634) "spelling error" @ "waiting message"
				@ "concurrent tasks run" $since b624
		),
		/ %Scripts $=
		(
			/ "%SHBuild-YSLib-common.txt" $=
			(
				+ "operative '$assert'";
				(
				/ $dev $impl "simplified operative '$assert-nonempty'"
					^ '$assert';
				/ $comp "more precise error message" @ '$assert-nonempty',
					// It still does not support non-string types, though.
				),
				+ "operative '$assert-absolute-path'" ^ $dep_from ('$assert',
					"applicative for testing path absolute predicate"
					@ "loaded derived functions" @ "function \
					%LoadNPLContextForSHBuild" @ %YFramework.NPL.Dependency),
				+ "applicative %SHB_GetToolPath"
			),
			/ "%SHBuild-YSLib-build.txt" $=
			(
				/ $dev "refined loading to preserve only export symbols"
					^ $dep_from ('$provide!' @ %YFramework.NPL.Dependency),
				(
				/ $build "ensured absolute paths used" $dep_from
					"loosed SHBuild command line length limit" $=
				(
					// The command line is length and easily grow longer than \
						8192 which is limited by 'cmd.exe' in platform %Win32.
					/ "attached output path with name prefix from environment \
						variable %YSLib_BuildDir";
					/ "asserted for absolute paths of values" $effective
						@ "variables %(YSLib_BaseDir, YSLib_BuildDir)"
						^ $dep_from (('$assert-absolute-path'
						~ '$assert-nonempty') @ "%SHBuild-YSLib-common.txt")
						// These paths are enough to determine all absolte \
							paths in commands.
				);
				/ $comp "absolute path shown" @ "platform %Win32"
					// Now slashes are same for root and non-root paths.
				),
				- "public interface of applicative 'skip-or-build'" $dep_from
					"libraries build merging"
				(
				/ $impl "simplified" ^ $dep_from "%SHB_GetToolPath"
					@ "%SHBuild-YSLib-common.txt";
				* $revert_ex(b805) "wrong 'system-quote' call on \
					%SHBuild environment variable" $since b805
				),
				+ $dev "lifted global variables ('env-os', 'env-arch') as \
					whole script varabiles"
					// These variables are public to be loaded.
			)
		),
		/ @ "%install-sysroot.sh" $=
		(
			- "%(SHBuild_Pushd, SHBuild_Popd) call for building YSLib libraries"
				$dep_from ("ensured absolute paths used"
				@ "%SHBuild-YSLib-build.txt" @ %Scripts);
			/ "simplified building stage 2 libraries" $=
			(
				/ $lib "simplified libraries building code"
					>> "%SHBuild-YSLib-build.txt";
				/ $lib "merged all libraries building as one pass of NPL"
					$dep_to "libraries build merging",
				- $comp "'Done.' messages after build of debug or release \
					configrations completed"
			)
		)
	),
	- $repo $revert(b563) "glob pattern'Tools/SHBuild/SHBuild*'"
		@ "file %.hgignore"
),

b836
(
	/ %YBase.YStandardEx $=
	(
		/ %TypeOperation $=
		(
			* "invalid result of defered metafunction instead of applying \
				result" @ ("metafunction %underlying_cond_type_t" $since b671,
				"%cond_or" $since b723),
			/ $forced DLDI "metafunction %cond_or_t" $dep_from "%cond_or",
			* "metafunction %common_underlying_t" $dep_from
				"%underlying_cond_type_t" $since b671
		),
		* $comp "wrong result" @ "metafunction %cond_or_t" @ %Memory $since b723
			$dep_from ("%cond_or" @ %TypeOperation),
		+ "alias template %string_view_t" @ %StringView,
		/ %Algorithm $=
		(
			// Parts of LWG 2350.
			+ "inline namespace %cpp2014";
			+ ('using std::min;', 'using std::max') @ '__cplusplus >= 201402L'
				@ "inline namespace %cpp2014",
			/ "function template %(min, max)" @ "namespace %ystdex"
				>> "inline namespace %cpp2014"
		),
		/ %String $=
		(
			+ "3 function templates %string_empty",
			+ $dev $lib 'YB_ATTR_nodiscard YB_PURE'
				@ "all 3 function template overloads %string_length",
			/ "exception specification 'ynothrow'"
				@ "function template %string_length#1" -> 'ynothrowv'
		),
		/ %Path $=
		(
			+ DD "Doxygen comments for rationale",
			/ @ "class template %path_traits" $=
			(
				+ DD "Doxygen comments for rationale",
				/ $dev "class-key 'class'" -> 'struct',
					// To be consistent with %std::char_traits and other \
						traits classes.
				- "definition" @ "primary template",
				+ "specialization for %void",
				/ @ "specialization for %basic_string_view instances" $=
				(
					/ "parameter type 'const value_type&'"
						@ "static function %is_self" -> "%view_type",
						// This was missed to change.
					+ "static functions %(has_root_name, has_root_path, \
						have_same_root_names)"
				),
				/ "static functions or function templates %is_root"
					=> "%is_absolute"
			),
			/ @ "class template %path" $=
			(
				+ DD "Doxygen comments for rationale",
				+ "function %root_diverged" $dep_from "%path_traits",
				/ @ "operator/= with path parameter" $=
				(
					/ "switched path when the parameter is not relative path \
						or it is has different root name as per the traits"
						^ $dep_from "%root_diverged",
						// WG21 P0492R2 US 77, CA 6.
					* "missing strong exception guarantee exception"
						$mismatch(Documentation.YBase) $since b651
						$= (+ "'\warning' command" @ "Doxygen comments")
				),
				+ "2 rvalue reference overloads for %operator/="
			);
			/ $forced "avoided separation character sequence at end of root"
				@ "function template %(to_string, to_string_d)"
		)
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "class %String" @ %Core.YString $=
			(
				/ $re_add(b835) "enabled overloads with paramaters of \
					character pointers only when the character type is not \
					%char16_t",
					// This is never ambiguous as there is no constructor \
						overload of pointer types. However it is still \
						preferred to using inherited constructor instead.
				- "constructor with parameter %u16string_view"
					// This is now inherited from base. It also caused \
						ambiguity resolved at b835.
			),
			/ %Service.FileSystem $=
			(
				/ @ "class %Path" $=
				(
					* "wrong non-throwing exception specification"
						@ "constructor with 'const u16string&' parameter"
						$orig (@ "constructor with 'const ucs2string&'" $since
						b403),
					/ "function template %ParsePath with 3 parameters"
						-> "function template %ParsePathWith" ^ $dep_from
						("%string_view_t" @ %Adaptor.YAdaptor),
					/ @ "function templates %(ParsePath, \
						ResolvePathWithBase)" $=
					(
						(
						/ $forced $impl ^ "%ParsePathWith";
						* $comp "ambiguity when passed 2 arguments for \
							%ParsePath" $since b708
						),
						(
						/ $impl ^ "%IO::ParsePathWith"
							~ "%PathTraits::AdjustForRoot" $dep_to
							"simplified root adjustment";
						/ $comp "avoided absolute paths overriden when input \
							path parameter is not empty",
						/ "supported UNC paths" @ "platform %Win32" $dep_to
							"UNC path support"
						)
					),
					/ "simplified struct %PathTraits" $=
					(
						/ "static function template %is_root" $=
						(
							- "overload with parameter of %basic_string_view \
								instances";
							/ "return type" @ "overload for string" ^ 'bool',
							(
							/ $forced DLDI "call of 'FetchRootNameLength'"
								-> 'IO::FetchRootPathLength' ^ $dep_from
								("%IO::FetchRootPathLength" @ %Adaptor.YAdaptor)
								$dep_from ("%IO::FetchRootNameLength"
								@ %Adaptor.YAdaptor);
							/ "unexpected ADL %FetchRootNameLength call" $since
								b654
							);
							/ $forced -> "%is_absolute"
								$dep_from ("%path" @ %YBase.YStandardEx.Path),
							/ $impl ^ $dep_from ("%ystdex::string_empty"
								@ %YBase.StandardEx.String)
						),
						(
						+ $dep_from "base class %ystdex::path_traits<void>"
							@ %YBase.YStandardEx.Path;
						- "static function templates %(is_parent, is_self)"
						),
						- "static function template %AdjustForRoot"
							$dep_all_from "simplified root adjustment",
						+ $forced "static function templates %(has_root_name, \
							has_root_path)" $dep_from ("%path::operator/="
							@ %YBase.YStandardEx.Path ^ $dep_from
							("%ystdex::string_empty" @ %YBase.StandardEx.String)
					)
				),
				/ "function template %ResolvePathWithBase" $=
				(
					/ "cleared base path at first if the path to be resolved \
						is absolute",
						// Like %Path::operator/= with path parameter now.
					/ ^ $dep_from ("%string_view_t" @ %Adaptor.YAdaptor),
					/ "simplified and supported underlying paths"
						^ "%Path::operator/=" ~ "%ParthTraits::AdjustRoot"
						$dep_from ("%operator/= with path parameter" @ "%path"
						@ %YBase.YStandardEx.Path, "%PathTraits") $dep_to
						"simplified root adjustment"
				)
			),
			/ @ "namespace %YSLib" @ %Adaptor.YAdaptor $=
			(
				- $forced 'namespace ColorSpace = platform::ColorSpace;'
					@ "namespace %Drawing" $dep_from
					%YCLib.Video,
				/ @ "namespace %IO" $=
				(
					+ 'using platform::FetchRootPathLength;' $dep_from
						("%FetchRootPathLength" @ %YCLib.FileSystem),
					+ 'using platform::FetchRootNameEnd;' $dep_from
						("%FetchRootNameEnd" @ %YCLib.FileSystem),
					/ "alias %NativePathView" >> %Service.FileSystem
				),
				- DLDI "condition branch of '__cplusplus >= 201402L'"
					$dep_from %Algorithm,
				+ 'using platform::string_view_t;' $dep_from %YCLib.Container
			),
			/ $forced DLDI %Core.YConsole $dep_from ("%ColorSpace"
				@ %Adaptor.YAdaptor)
		),
		(
		/ %Helper $=
		(
			/ DLDI "DS console initialization" @ "platform %DS"
				@ "constructor %Environment" @ %Environment
				!^ "default argument",
			/ $comp "supported UNC path as intialization module path"
				@ %Initialization @ "platform %Win32" $dep_from
				"UNC path support"
		),
		- "all 2 color default arguments" @ "platform %DS"
			@ %'YCLib_(DS)'.DSVideo $dep_from %Helper.Environment
		/ %YCLib $=
		(
			/ %Video $=
			(
				/ @ !"platforms %(Win32, DS)" $=
				(
					* "red and blue components inversed"
						@ "function %FetchOpaque" $since b507,
					* "wrong parameter type" @ "function %FetchPixel" $since
						b417
						$= (/ "all parameter type %AlphaType" -> "%MonoType")
				),
				/ "namespace %ColorSpace" @ "namespace %platform"
					>> ("namespace %YSLib::Drawing" @ %YGDIBase) $dep_from
					%'YCLib_(DS)'.DSVideo;
				/ $forced @ "class %Color" $=
				(
					/ "constructor with %ColorSet parameter" -> "constructor \
						with enumeration parameter with same underlying type \
						to %Pixel" ^ $dep_from "%ystdex::underlying_cond_t"
						@ %YBase.YStandardEx.TypeOperation;
					- "alias %ColorSet"
				)
			),
			+ 'using ystdex::string_view_t;' @ "inline namespace \
				%platform::containers" @ %Container $dep_from
				%YBase.StandardEx.StringView,
			/ %FileSystem $=
			(
				+ "function templates %(FetchRootNameEnd_P; FetchRootNameEnd)"
					^ $dep_from ("string_view_t" @ %Container),
				+ "function templates %(FetchRootPathLength_P; \
					FetchRootPathLength)" ^ $dep_from
					("string_view_t" @ %Container),
					// As %FetchRootNameLength in previous revisions.
				(
				* "wrong results for cases with subsequent colons or cases of \
					colon not found" @ "function template \
					%FetchRootPathLength_P with parameters of \
					%IDTag<YF_Platform_DS> and %basic_string_view instance"
					$since b693;
				/ "function tmeplates %(FetchRootNameLength_P; \
					FetchRootNameLength) returned before first slash not in \
					root name" ^ $dep_from "%FetchRootNameEnd_P"
				),
				/ DLDI "simplified %FetchRootName",
				+ "overload to support string class cast to %basic_string_view \
					instance" @ "function templates %FetchRootNameLength_P"
					^ $dep_from ("string_view_t" @ %Container);
				/ "support UNC roots detection for %IDTag<YF_Platform_Win32> \
					parameter overloads" @ "function templates \
					%(FetchRootNameLength_P, FetchRootPathLength_P)"
					// See $2018-08 @ %Documentation::Workflow.
			)
		),
		/ $forced DLDI "namespaces" @ "platform %DS" @ %(Helper.Environment,
			YReader.Main) $dep_from ("namespace %ColorSpace"
			@ "namespace %platform" @ %YCLib.Video)
	),
	/ $re_add(b833) $dev $lib "normailized attribute in lexicographic order"
		$effective @ %(YBase.YStandardEx.(CStandardInteger, Tree, TypePun,
		CString), YFramework.(YCLib.(Keys, Debug, FileSystem, FileIO),
		YSLib.(Core.YCoreUtilities, Service.TextFile), NPL.Dependency),
		'YCLib_(Win32)'.(MinGW32, Registry))
		// Mainly for ('yconftn_relaxed', 'inline') %(YB_PURE, YB_STATELESS, \
			YB_NONNULL).
),

b835
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				/ "(function template %CallBinaryAs; class tmeplate \
					%BinaryAsExpansion; function template \
					%RegisterStrictBinary) supported and required separated \
					template parameters for arguments",
				/ "function %EvaluateUnit" -> "%EvalUnit" ^ $dep_from
					"%CallBinaryAs" $=
				(
					(
					/ DLI "removed redundant capture by copy of %REPLContext";
					/ "avoided explicit copy of %REPLContext",
					)
					/ "reserved evaluation result"
						$= (/ "returned %ReductionStatus::Retained")
						// Though not clarified, the old function would only \
							preserve the side effects.
				),
				+ "functions %(EvalString, EvalStringRef)",
				/ "supported term reference" @ "function %Undefine",
				/ DLI "vau and evaluation TCO" ^ "%shared_ptr::use_count"
					~ "%shared_ptr::unique"
					// WG21 P0521R0. Although it is safe in current \
						assumption, deprecated feature should not used. This \
						is implemented since Microsoft VC++ 15.5, see https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes-v15.5.
			),
			/ %Dependency $=
			(
				/ @ "loaded derived functions"
					@ "function %LoadNPLContextGround" $=
				(
					+ "applicative 'eval-string'" ^ $dep_from
						("%EvalString" @ %NPLA1),
					+ "applicative 'eval-string%'" ^ $dep_from
						("%EvalStringRef" @ %NPLA1),
					+ "applicative 'eval-unit'" ^ $dep_from
						("%EvalUnit" @ %NPLA1),
					/ $forced DLDI "applicative 'string-contains-ci?'" $dep_from
						("%CallBinaryAs" @ %NPLA1)
				),
				/ $forced DLDI "loaded derived applicatives %(SHBuild_EchoVar, \
					SHBuild_Install_HardLink)" @ "function \
					%LoadNPLContextForSHBuild" $dep_from
					("%CallBinaryAs" @ %NPLA1)
			),
			/ DLI "member function %Environment::IsOrphan"
				^ "%shared_ptr::use_count" ~ "%shared_ptr::unique"
				// WG21 P0521R0. See comment of similar use case in %NPLA1.
		),
		/ %YSLib $=
		(
			* "ambiguous constructor overloads %String" @ %Core.String $since
				b645
				$= (/ "enabled overloads with paramaters of \
					%(basic_string, basic_string_view) instances only when \
					the character type is not %char16_t"),
			/ "function %CopySliceFrom" %Service.TextManager $=
			(
				/ "returned %u16string" ~ "%string";
				* $comp "narrowed string without conversion" $since b397
			)
		),
	),
	/ $forced DLDI "loaded derived applicative 'env-set'" @ %Tools.SHBuild.Main
		$dep_from ("%CallBinaryAs" @ %YFramework.NPL.NPLA1),
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			/ 'inline' @ "%nullptr_t" @ '!YB_HAS_BUILTIN_NULLPTR'
				-> 'yconstfn',
			/ @ "macro %YB_NORETURN" $=
			(
				+ "condition 'YB_IMPL_MSCPP >= 1900' and \
					'__cplusplus >= 201103L' as acceptable option of condition \
					to enable '[[noreturn]]'",
				+ "fallback conditional definition '__declspec(noreturn)'"
					@ 'YB_IMPL_MSCPP >= 1200'
			),
			+ $dev $lib '#pragma warning(disable: 4646)'
				@ 'YB_IMPL_MSCPP >= 1200',
				// C4646 warns about non void return type with 'noreturn' \
					(effective with both '[[noreturn]]' and \
					'__declspec(noreturn)'). However, such type can be \
					sometimes intended, e.g. in implementation of %in_place in \
					%YStandardEx.Placement.
			+ "conjunction conditon '!defined(__clang__)'"
				@ "macro %YB_IMPL_MSCPP",
				// To excluded Clang/C2. Note only frontend featrues of \
					compiler are used directly now.
			+ $re_add(b454) $dev "macro %_SCL_SECURE_NO_WARNINGS"
				@ 'YB_IMPL_MSCPP >= 1400',
				// Similar to %_CRT_SECURE_NO_WARNINGS.
			+ $doc "explicit support note" @ "pseudo keyword %ythrow",
			* $comp "wrong value checked for %__cplusplus" @ "macros \
				%(__cpp_lib_integer_sequence, __cpp_lib_integer_sequence)"
				$since b832 $dep_from "feature macro dates",
				// These features should be available in ISO C++14 (as \
					previous revisions of the checks), so the lower boundary \
					should not be '201702'.
			/ "accepted condition 'YB_IMPL_GCC >= 70100'" @ "check"
				@ "macro %__cpp_lib_byte"
				// See note in https://gcc.gnu.org/onlinedocs/libstdc++/manual/status.html#status.iso.2017.
		),
		/ %YStandardEx $=
		(
			/ DLDI "friend class template declarations" @ %(Tree, Map),
				// To eliminate Microsoft VC++ 2017 warning: C4099.
			/ %Optional $=
			(
				+ $lib 'explicit' @ "constructor" @ "class %nullopt_t",
				/ $dev $lib "split class and object definition"
					@ "definitions %(nullopt_t, nullopt)" @ 'YB_IMPL_MSCPP',
					// This is an effective workaround, even <optional> is \
						provided by Microsoft VC++ 2017.
			),
			* "ambiguous overloads %trail" @ %Container $since b567
				$= (/ "refined overloads with pack parameter only effetive for \
					calls more than 1 argument to initialize the value"),
					// Note %emplace_back is not fit for %basic_string, so \
						overload using %push_back should be preserved.
			/ $lib "alias %used_cache_type" @ "all 2 class template \
				specializations %used_list_cache_traits" @ %Cache
				^ "%allocator_traits" ~ "allocator member %rebind",
				// WG21 P0174R2.
			/ %Placement $=
			(
				/ "accepted condition 'YB_IMPL_MSCPP >= 1910'"
					@ "check of <optional> availability",
				(
				(
				+ "inline namespace %cpp2017";
				+ ('using std::destroy_at;', 'using std::destroy;', \
					'using std::destroy_n;') @ '(YB_IMPL_MSCPP >= 1911 \
					&& _MSVC_LANG >= 201606) || (((YB_IMPL_GNUCPP >= 80000 \
					&& __GLIBCXX__ > 20160914) || _LIBCPP_VERSION > 4000) \
					&& __cplusplus >= 201606L) \
					|| __cpp_lib_raw_memory_algorithms >= 201606L',
				+ ('using std::uninitialized_default_construct;',
					'using std::uninitialized_default_construct_n;',
					'using std::uninitialized_value_construct;',
					'using std::uninitialized_value_construct_n;',
					'using std::uninitialized_move;',
					'using std::uninitialized_move_n;')
					@ '(YB_IMPL_MSCPP >= 1911 && _MSVC_LANG >= 201606) \
					|| (((YB_IMPL_GNUCPP >= 80000 && __GLIBCXX__ > 20160920) \
					|| _LIBCPP_VERSION > 4000) && __cplusplus >= 201606L) \
					|| __cpp_lib_raw_memory_algorithms >= 201606L'
				),
				/ DLI "%(destroy, destroy_n)" ^ "%ystdex::addressof"
					~ "%std::addressof";
					// For more probable 'constexpr'.
				/ "function templates %(destroy_at, destroy, destroy_n, \
					uninitialized_default_construct, \
					uninitialized_default_construct_n, \
					uninitialized_value_construct, \
					uninitialized_value_construct_n, uninitialized_move, \
					uninitialized_move_n)" >> "inline namespace cpp2017"
					@ "no clashing names from %std used"
				),
				/ "function %operator()" @ "class template %placement_delete"
					^ "%ystdex::destroy_at" ~ "ADL %destroy_at"
			),
			/ %Memory $=
			(
				+ "function templates %(get_temporary_buffer, \
					return_temporary_buffer) with condition check \
					'__cpp_aligned_new >= 201606L' for over aligned types")
					@ '(YB_IMPL_MSCPP >= 1912 && _MSVC_LANG >= 201606) \
					|| (__GLIBCXX__ && (__GLIBCXX__ <= 20150815 \
					|| YB_IMPL_GNUCPP < 90000)) || __cplusplus >= 201611L'
					// WG21 P0174R2.
				+ ('using std::get_temporary_buffer;', \
					'using std::return_temporary_buffer;')
					!@ '(YB_IMPL_MSCPP >= 1912 && _MSVC_LANG >= 201606)\
					|| (__GLIBCXX__ && (__GLIBCXX__ <= 20150815 \
					|| YB_IMPL_GNUCPP < 90000)) || __cplusplus >= 201611L';
				/ "class %temporary_buffer_delete"
					^ "%ystdex::return_temporary_buffer"
					~ "%std::return_temporary_buffer",
				/ "constructor %temporary_buffer"
					^ "%ystdex::get_temporary_buffer"
					~ "%std::get_temporary_buffer"
			),
			/ %Range $=
			(
				/ $lib "loosed condition '__GLIBCXX__'" @ "macro \
					%YB_Use_std_reverse_iterator" -> '!(__GLIBCXX__ && \
					(__GLIBCXX__ < 20180808 || YB_IMPL_GNUCPP < 60800))',
				/ "condition check" @ "inline namespace %cpp2014" $=
				(
					/ '__GLIBCXX__ >= 20150119' -> '__GLIBCXX__ > 20150119',
					* "wrong libc++ version macro" $since b624
						$= (/ '_LIBCXX_VERSION' -> '_LIBCPP_VERSION')
				),
				/ '__GLIBCXX__ < 20180808' @ "negative condition check"
					@ "inline namespace %cpp2017" -> '__GLIBCXX__ <= 20180808'
			),
			/ %Algorithm $=
			(
				+ "inline namespace %cpp2017";
				(
				/ "adjusted function template %clamp"
					-> "2 function template overloads as WG21 P0025R1";
					// As WG21 P0025R0, rage is preferred to %clamp_range. \
						However, this is preserved here for now as no range \
						interface is adopted.
				+ $re_add(b834) "conditionally-defined macro %__cpp_lib_clamp",
				);
				/ "all 2 function templates %clamp"
					>> "inline namespace %cpp2017"
					@ !'__cpp_lib_clamp >= 201603L',
				+ 'using std::clamp;' @ "inline namespace %cpp2017"
					@ '__cpp_lib_clamp >= 201603L'
			),
			* "wrong use of condition check for swapping traits" @ %Swap $since
				b834
				$= (/ $impl '__cpp_lib_bool_constant >= 201505'
					-> '__cpp_lib_is_swappable >= 201603L'),
			/ %CCharacterType $=
			(
				* "wrong call of underlying %std function templates"
					@ "%(towlower, towupper)" $since b823,
				* "wrong result" @ "functions %(tolower, toupper), functions \
					%(towlower, towupper)" $since b823
			)
		),
		/ $dev "checked %__cplusplus value with '>=' and lower boundary \
			exactly with defined value equal to the date in definition"
			@ "macros '__cpp_*'" @ $effective @ %(YDefinition,
			YStandardEx.(AddressOf, Functor, Invoke, Memory, Range, Tuple)),
			$dep_to "feature macro dates",
		+ $dev "suffix 'L'" @ "defined values" @ "feature testing macros"
			$effective @ %(YDefinition,
			YStandardEx.(AddressOf, Functor, Invoke, Memory, Range, Tuple)),
			// See $2018-08 @ %Documentation::Workflow.
		+ $dev "suffix 'L'" @ "condition expression with feature testing macros"
			@ "condition inclusions" $effective @ %(YDefinition, YStandardEx.(
			AddressOf, Algorithm, Functor, IntegerSequence, IntegralConstant,
			Invoke, IteratorOperation, Map, Meta, Memory, Placement, Set, Swap,
			String, StringView, Tuple, TypeInspection, Utilities)
			// Ditto.
	),
	* $comp "deprecated features avoidence of WG21 P0174R2" $mismatch $since
		b834 $dep_from %YBase.YStandardEx.Cache,
		// See https://bitbucket.org/FrankHB/yslib/wiki/StandardUsing.en-US.md.
	/ %YReader $=
	(
		* "narrowed string result" @ "member function %ShlTextReader::GetSlice"
			@ %ShlReader $since b397 $dep_from
			%YFramework.YSLib.Service.TextManager
			$= (/ "returned %String" ~ "%string");
		/ @ "constructor, function %LoadBookmarks" @ "class %BookmarkPanel" $=
		(
			/ $impl "simplified string loading" ^ "%String" ~ "%string";
			* $comp "narrowed string loaded for bookmarks" $since b397 
		),
		* $comp "ineffective enabled state caused by wrong extension comparison"
			@ %ShlExplorer $since b825 $dep_from
			%YBase.YStandardEx.CCharacterType
	)
),

b834
(
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* "rational operators parameters with other iterators"
				@ "class template %reverse_iterator" @ %Range,
				// This did not resolve LWG 2858, either. Now keeping LWG \
					280, until LWG 2858 is adopted. This is not needed in \
					%ystdex since there is nothing like %std::rel_ops which is \
					deprecated in C++20.
			/ DLDI "simplified noexcept-specifications" @ "member functions"
				@ "tree class template" @ %Tree,
			/ %Container $=
			(
				^ "%ystdex::(begin, end)" ~ "ADL %(begin, end)" $effective
					@ "%function templates %(make_container, range_size, \
					erase_all_if, sort_unique, (search_map; search_map_by, \
					try_emplace, try_emplace_hint, insert_or_assign))";
				- "function template %make_container for %initializer_list \
					instances"
			),
			/ %String $=
			(
				^ "%ystdex::(begin, end)" ~ "ADL %(begin, end)" $effective
					@ "%function templates %(string_begin, string_end)",
				+ "friend function %swap" @ "class template %basic_string"
			),
			/ "adapted to ISO C++17" @ %Range $=
			(
				- $revert(b664) "%(empty, cbegin, cend) overloads for array \
					rvalues",
					// To be consistent with the standard. Anyway the result \
						can be handled by 'const&' parameter version with no \
						difference (in case of %empty) or there is no sense \
						(for cases of %(cbegin, cend)).
				(
				+ $re_add(b833) "conditionally-defined macros \
					%(__cpp_lib_nonmember_container_access, \
					__cpp_lib_array_constexpr)",
				+ "inline namespace %cpp2017" $=
				(
					+ ('using std::size;', 'using std::empty;',
						'using std::data;')
						@ '__cpp_lib_nonmember_container_access >= 201411',
					+ "3 function templates %(begin, end)" $dep_all_from
						("disambiguity of end", %(Container, String))
						!@ '__cpp_lib_array_constexpr >= 201603'
						// WG21 P0031.
				);
				(
				/ $comp "supported previously probably missing 'constexpr' on \
					%(begin, end) for array lvalues"
				),
				(
				/ ('using std::begin;', 'using std::end;')
					@ "inline namespace %cpp2011" >> "namespace %cpp2017"
					@ '__cpp_lib_array_constexpr >= 201603',
					// WG21 P0031.
				- "inline namespace %cpp2011"
				),
				/ "all function templates for array rvalues" @ "inline \
					namespace %(cpp2011, cpp2014)" >> "namespace %ystdex",
					// As extensions.
				/ ('using std::rbegin;', 'using std::rend;',
					'using std::crbegin;', 'using std::crend;')
					@ "inline namespace %cpp2014"
					>> ('__cpp_lib_array_constexpr >= 201603'
					@ "inline namespace %cpp2017"),
				/ ("function templates %(rbegin, rend, crbegin, crend)")
					@ "inline namespace %cpp2014" -> ("function templates with \
					'yconstfn'" @ !'__cpp_lib_array_constexpr >= 201603'
					@ "inline namespace %cpp2017"),
				/ "%(cbegin, cend)" ^ "%ystdex::(begin, end)"
					~ "%std::(begin, end)",
				/ "function templates %(empty, data, size) except for %data \
					overload for array rvalues" >> "inline namespace %cpp2017"
					!@ '__cpp_lib_nonmember_container_access >= 201411'
					// N4080.
				)
			),
			* "missing 'const'" @ "return type" @ "%operator* with 'const&&'"
				@ "class template %optional" @ %Optional $since b675
			/ %Base $=
			(
				+ "namespace %base";
				/ "all base classes, class templates %(noncopyable, \
					nonmovable, cloneable, deref_self, derived_entity)"
					-> ("entities" @ "namespace %base",
					"declarations of names" @ "%namespace %ystdex")
					// To avoid unintended ADL.
			),
			/ %BitSegment $=
			(
				+ "namespace %nodep";
				/ "traits %(bitseg_traits, ordered_bitseg_traits)"
					-> ("entities" @ "namespace %nodep", "alias template \
					declarations of names" @ "%namespace %ystdex")
					// To avoid unintended ADL.
			),
			/ %Swap $=
			(
				+ "type traits %((is_swap_movable; enable_if_swap_movable_t), \
					is_nothrow_swap_movable)",
				+ "namespace ystdex_swap";
				+ "2 function templates %swap" $dep_from (%(YBase.(Base,
					BitSegment), YFramework.YSLib.Core.(YEvent, YString)),
					"moving swapping traits")
			),
			(
			/ %TypeTraits $=
			(
				/ "type traits %(is_swappable_with, is_swappable, \
					is_nothrow_swappable_with, is_nothrow_swappable)"
					>> "inline namespace %ystdex::cpp2017" @ %Swap
					$dep_to "moving swapping traits";
				/ "namespace %dep_swap" >> "namespace %ystdex_swap" @ $dep_from
					("namespace %ystdex_swap" @ %Swap);
				+ "inclusion %Swap" $dep_from %Swap
			);
			/ $forced DLDI "inclusion %Swap" @ "%Pointer" -> "%TypeTraits"
			),
			(
			/ $dev "exposed macro %YB_Use_std_reverse_iterator" @ %Range;
			/ $forced DLDI ^ "%YB_Use_std_reverse_iterator" %IteratorOperation
			),
			(
			/ $dev "exposed macro %YB_Has_optional" @ %Placement;
			/ $forced DLDI ^ "%YB_Has_optional" %Optional
			),
			/ %StringView $=
			(
				/ $dev "exposed macro %YB_Has_string_view";
				/ $forced DLDI ^ "%YB_Has_string_view",
				* $comp "wrong string view inclusion check" $since b833
			),
			+ $re_add(b833) "conditionally-defined macro \
				%__cpp_lib_allocator_traits_is_always_equal" @ %Memory
		),
		/ %YDefinition $=
		(
			* "condition" @ "macro %__cpp_inheriting_constructors" $since b833
				$= (/ 'YB_IMPL_MSCPP >= 1914'
					-> '(YB_IMPL_MSCPP >= 1914 && _MSVC_LANG >= 201511)'),
			+ $re_add(b833)
				"conditionally-defined macro %__cpp_lib_is_swappable"
		),
		- $revert(b454, b458, b483, b503, b575) DLB "workarounds for Microsoft \
			VC++ 2013" $effective @ ("class templates %(container_adaptor, \
			sequence_container_adaptor)" @ %Container, "metafunction \
			specialization %project" @ %Tuple, "class %cloneable" @ %Base,
			"class templates %(pseudo_iterator, transformed_iterator, \
			indirect_input_iterator, transposed_iterator)" @ %Iterator)
			@ %YStandardEx
			// NOTE: Microsoft VC++ is not supported yet since the support was \
				revoked. Currently, with VC++ 15.7 (compiler version 19.14), \
				the remained error in compilation of %YBase are all in \
				%YStandardEx.Operators, which is due to known preprocessor \
				bugs (acknowledged officially, see \
				https://docs.microsoft.com/en-us/cpp/visual-cpp-language-conformance#note_D).
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ "class %TextFileBuffer::iterator" @ %Service.TextManager
				^ "iterator traits members"
				~ "%std::iterator instance as base class",
			/ %Core $=
			(
				/ %ValueNode $=
				(
					/ "%AccessNodePtr#(1, 2, 5, 6)" ^ "%ystdex::end"
						~ "ADL %end" $dep_to "disambiguity of end",
					/ @ "class %ValueNode" $=
					(
						/ DLI "forwarded key parameter"
							@ "friend function %set_value_move",
							// This improves performance a bit in NPLA.
						/ "function templates (static %CreateRecursively; \
							CreateWith) supported overloads with full 4 \
							orthogonal overloads of ref-qualifiers and 'const'",
						/ DLDI "renamed key parameter"
							@ "static function template %AddValueTo"
							// To be consistent with %AddValue.
					),
					/ "function template %SetContentWith supported forwarding \
						node parameter" $dep_from "%ValueNode::CreateWith"
				),
				+ "friend function %swap for %Comparer parameters"
					@ "class template specialization %GHEvent" @ %YEvent
					^ $dep_from("%DefSwp" @ %YBaseMacro),
					// To avoid ambiguity due to ADL when %ystdex introduces \
						generaic %swap function template.
				+ "friend function" @ "class %String" @ %YString ^ $dep_from
					("%DefSwp" @ %YBaseMacro,
					"friend function %swap" @ "class template %basic_string"
					@ %YBase.YStandardEx.String)
					// Ditto.
			)
		),
		/ $impl "function %ValidateName" @ %YCLib.FileSystem
			^ "%ystdex::(begin, end)" ~ "ADL %(begin, end)" $dep_to
			"disambiguity of end"
		/ %NPL $=
		(
			/ "constructor %Session#3" @ %SContext ^ "%ystdex::(begin, end)"
				~ "ADL %(begin, end)" $dep_to "disambiguity of end"
			/ %NPLA $=
			(
				/ "function %LiftTermIndirection" $=
				(
					- "2nd parameter",
					/ "moved source term" $dep_from
						("%SetContentWith" @ %YSLib.Core.ValueNode),
						// This reduces copy of key of nodes.
				),
				/ $forced DLI "function call of %LiftTermIndirection"
					@ "functions %(LiftToReturn, LiftToSelfSafe)",
				(
				+ "exception class %TypeError";
				/ "base class %NPLException" @ "class %ListReductionFailure"
					-> "%TypeError",
				+ "exception classes %(ValueCategoryMismatch, ListTypeError)"
				)
			),
			/ %Dependency $=
			(
				+ "function %LoadNPLContextGround with all operations except \
					registration of 'SHBuild_*' objects of \
					%LoadNPLContextForSHBuild";
				/ DLDI "simplified function %LoadNPLContextForSHBuild"
					^ "%LoadNPLContextGround",
				/ @ "loaded derived functions"
					@ "function %LoadNPLContextGround" $=
				(
					+ "appicative 'set-first!'" ^ $dep_from
						("%SetFirst" @ %NPLA1),
					+ "appicative 'set-first%!'" ^ $dep_from
						("%SetFirstRef" @ %NPLA1),
					+ "appicative 'set-rest!'" ^ $dep_from
						("%SetRest" @ %NPLA1),
					+ "appicative 'set-rest%!'" ^ $dep_from
						("%SetRestRef" @ %NPLA1),
					/ "returned %ValueToken::Unspecified" @ "applicative %puts",
					+ "appicative 'make-encapsulation-type'" ^ $dep_from
						("%MakeEncapsulationType" @ %NPLA1)
				)
			),
			/ @ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					+ "functions %(SetFirst, SetFirstRef, SetRest, SetRestRef)"
						^ $dep_from
						("%(ValueCategoryMismatch, ListTypeError)" @ %NPLA),
					/ "exception type for failure of list check"
						@ "functions %(Cons, ConsRef)" -> $dep_from
						("%ListTypeError" @ %NPLA) ~ "%InvalidSyntax",
					+ "function %MakeEncapsulationType"
				),
				+ "friend function %swap" @ "classes %(FormContextHandler; \
					StrictContextHandler), class template \
					%WrappedContextHandler" ^ $dep_from
					("%DefSwap" @ %YBaseMacro) %dep_from %Core.YEvent,
				/ DLDI "class-key" @ "class template %WrappedContextHandler"
					-> 'class' ~ 'struct'
					// To be consistent with other similar types.
			)
		),
		/ %YBaseMacro $=
		(
			/ "macro %DefSwap" => "%DefSwapMem";
			+ "macro %DefSwap";
			/ DLDI "simplified %DefSwapMem" ^ "%DefSwap" ~ "%PDefH"
		)
	),
	* "missing strong exception safety" @ "applicative 'system-get'"
		@ "loaded derived functions" @ %Tools.SHBuild.Main $since b791
),

b833
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			* "condition" @ "macro %__cpp_lib_transformation_trait_aliases"
				$since b832
				$= (/ 'YB_IMPL_MSCPP >= 1600' -> 'YB_IMPL_MSCPP >= 1800'),
			+ "macro %YB_ATTR_nodiscard for ISO C++17 '[[nodiscard]]'"
				// WG21 P0189R1. Also with names %clang::warn_unused_result, \
					%gnu::warn_unused_result and %warn_unused_result.
			+ "macro %YB_ATTR_maybe_unused for ISO C++17 '[[maybe_unused]]'",
				// WG21 P0189R1. Also with names %gnu::unused and %unused.
			+ $re_add(b832) "conditionally-defined macros \
				%(__cpp_lib_as_const, __cpp_inheriting_constructors)",
			* "condition" @ "macro %__cpp_lib_exchange_function" $since b832
				$= (/ '__cplusplus >= 201703L' -> '__cplusplus > 201103L'),
			/ "macro %yunused" ^ 'void' ~ 'static_cast<void>'
				// This is a breaking change. It aims to avoid comma \
					expressions to be used unconciously.
		),
		/ %YStandardEx $=
		(
			/ %Tree $=
			(
				+ DLI "enabled static assertions" ^ "%is_invocable"
					@ "tree class template",
				(
				+ "inclusion %Range" @ %Tree;
				/ $comp "ensured inclusion %Range" @ %(Map, Set, Tree),
					// As the standard library.
				/ $forced $impl "%(reverse_iteartor, const_reverse_iterator)"
					@ "tree class template" ^ $dep_from
					("%ystdex::reverse_iterator" @ %Range)
					~ "%std::reverse_iterator" $dep_from
					("%ystdex::make_reverse_iterator" @ %IteratorOperation)
					// The return type should be same, otherwise user code \
						would actually be broken.
				)
			),
			(
			/ "transformation traits %(remove_rcv, remove_rcv_t)"
				@ %TypeOperation -> ("%(remove_cvref, remove_cvref_t)" @ %Meta);
			/ "transformation traits %(remove_cvref, remove_cvref_t)"
				@ '__cplusplus > 201703L' -> ('using std::remove_cvref;',
				'using std::remove_cvref_t;') @ %Meta
			),
			/ "function templates %ystdex::addressof without '= delete'"
				@ %AddressOf $=
			(
				+ $dep_from '%YB_ATTR_nodiscard' @ %YDefinition,
					// As extension of WG21 P0600R1. Microsof VC++ is also \
						using [[nodiscard]] in current version on \
						%std::addressof.
				+ "single template" "%__builtin_addressof"
					@ '__has_builtin(addressof)',
				* "missing 'ynothrow'" $orig
					(@ "%constfn_addressof" $since b660)
			),
			/ ("metafunctions %(conjunction, disjunction, negation)"
				>> "inline namespace %cpp2017") @ "namespace %ystdex"
				@ %IntegralConstant,
			(
			/ DLDI "inclusion %Tuple" @ %TypeOperations -> "%IntegerSequence",
			/ %Functional $=
			(
				/ "metafunction %parameter_of" ^ "%std::tuple_element_t"
					~ "%tuple_element_t";
				/ DLDI "inclusion %TypeOperations" -> (%Tuple, '<tuple>'),
			);
			/ "function template %apply" >> "inline namespace %cpp2017"
				!@ '__cpp_lib_apply >= 201603' @ %Tuple
			),
			/ %Tuple $=
			(
				+ $re_add(b832) "conditionally-defined macros \
					%(__cpp_lib_apply, __cpp_lib_make_from_tuple)",
				/ "function template %make_from_tuple" >> "inline namespace \
					%cpp2017" !@ '__cpp_lib_make_from_tuple >= 201606',
				/ @ "inline namespace %cpp2017" $=
				(
					+ 'using std::apply;' @ '__cpp_lib_apply >= 201603',
						// WG21 N3915.
					+ 'using std::make_from_tuple;'
						@ '__cpp_lib_make_from_tuple >= 201606'
						// WG21 P0209R2.
				)
			),
			/ %Utilities $=
			(
				+ 'using std::as_const;' @ '__cpp_lib_as_const >= 201510',
					// WG21 P0007R1.
				/ !@ '__cpp_lib_as_const >= 201510' $=
				(
					/ "function template %as_const"
						>> "inline namespace %cpp2017"
					+ "defaulted as deleted function template overload \
						%as_const with 'const' forwarding reference parameter"
				)
			),
			/ DD "Doxygen groups %(iterators, iterator_adaptors)" @ %Iterator
				>> %Range,
			(
			/ %Range $=
			(
				/ "inclusion %YDefinition" -> "%AddressOf";
				+ @ "inline namespace %cpp2017" $=
				(
					+ 'using std::reverse_iterator;'
						@ '__cplusplus >= 201703L && !__GLIBCXX__ \
						&& !YB_IMPL_MSCPP'
					+ "class template %reverse_iterator"
						!@ '__cplusplus >= 201703L && !__GLIBCXX__ && \
						!YB_IMPL_MSCPP'
				);
				/ "all remained 'std::reverse_iterator'"
					@ "inline namespace %cpp2014" -> 'reverse_iterator'
			);
			/ @ %IteratorOperation $=
			(
				+ "inline namespace %cpp2014",
				/ "refined 'using std::make_reverse_iterator;' with condition \
					'__cplusplus >= 201703L && !__GLIBCXX__ && !YB_IMPL_MSCPP'",
				/ "%make_reverse_iterator" ^ "%reverse_iterator"
					~ "%std::reverse_iterator";
				/ "all %make_reverse_iterator" >> "inline namespace %cpp2014"
			)
			),
			(
			// Refelecting dependencies of WG21 P0254R2.
			/ "inclusion '<string>'" @ %CString -> '<libdefect/string.h>';
			/ "inclusion %String" @ %StringView -> %CString $dep_from
				%(YFramework.(CHRLib.CharacterProcessing, YCLib.Container),
				"cleanup string test"),
			/ "inclusions (%CString, '<libdefect/string.h>')" @ %String
				-> %StringView;
			/ %String $=
			(
				+ "metafunction %stream_str_t",
				/ @ "inline namespace %cpp2017"
				(
					// See also $2018-07 @ %Documentation::Workflow.
					+ 'using std::basic_string' @ '__cplusplus >= 201703L',
					+ "class template %basic_string"
						!@ '__cplusplus >= 201703L';
						// With LWG 2193, WG21 P0254R2, LWG 2583, LWG 2757, \
							LWG 2758, LWG 2771. LWG 2836 and other 'noexcept' \
							for 'find'-like functions instance are not \
							implemented as the cases seem still changing as \
							active LWG issues.
					+ "template specialization %std::hash for %basic_string"
						!@ '__cplusplus >= 201703L',
					+ 'using string = basic_string<char>;',
					+ 'using u16string = basic_string<char16_t>;',
					+ 'using u32string = basic_string<char32_t>;',
					+ 'using wstring = basic_string<wchar_t>;'
				),
				// NOTE: Only returned strings are necessary to be the new \
					type. Some of return values can be implicitly converted \
					and using new types is complicated (e.g. %to_string), so \
					not touched for simplicity.
				/ "function template %vsfmt" ^ "%basic_string"
					~ "%std::basic_string",
				/ "function template specialization %sfmt" ^ "%string"
					~ "%std::string",
				/ $forced $lib $impl "function template %ston supported cases \
					of %basic_string different to %std::basic_string",
				/ $forced @ "%to_string" $=
				(
					/ "return type" ^ $dep_from "%(string, wstring, \
						stream_str_t)" ~ "%std::(string, wstring)",
					+ "overloads with arithmetic types supported by \
						%std::to_string"
				)
				),
				* "wrong %size_type" @ "function template %extract" $since b565,
					// This would mismatch with actual type if allocator does \
						not use %size_t as its %size_type.
				+ $dev $lib 'YB_NONNULL(1)' @ "function templates \
					%(string_begin, string_end) with pointer parameter"
			),
			- 'using base::to_string;' @ "class template %basic_tstring_view"
				@ %TStringView,
			/ %StringView $=
			(
				(
				+ "inclusion %Range";
				/ $comp "ensured inclusion %Range" @ %(String, StringView)
					$dep_to "string view range access"
					// LWG 2812.
				),
				/ "adapted to ISO C++17 %std::basic_string_view except for \
					features depending on core language (i.e. deduction \
					guides) specializations for other library components"
					~ "%std::experimental::basic_string_view" $=
				(
					// WG21 P0254R2.
					(
					/ "%operator<< with %basic_string_view instances"
						^ "explicit string cast" ~ "%to_string";
					- "function template %to_string"
						@ "class template %basic_string_view" $dep_from
						"avoiding string_view to_string"
					),
					- $forced "constructor, conversion operator with \
						%std::basic_string instances" $dep_from
						(("%basic_string" @ %YFramework.YCLib.Container),
						%TStringView),
					/ @ "class template %basic_string_view" $=
					(
						// LWG 2778.
						+ 'yconstfn_relaxed' @ "functions %operator=",
						(
						/ ("const_reverse_iterator"; $comp "reverse_iterator")
							^ $dep_from ("string view range access";
							("%ystdex::reverse_iterator" @ %Range))
							~ "%std::reverse_iterator";
						+ 'yconstfn'
							@ "functions %(rbegin, rend, crbegin, crend)"
						)
					);
					+ "inline namespace %cpp2017";
					/ $lib "class template %basic_string_view"
						>> "inline namespace %cpp2017"
					+ "conditional inclusion with feature tests"
						// See https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/1rO2FiqWgtI, \
							and https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79433.
				)
			)
			),
			/ "%(reverse_iteartor, const_reverse_iterator)" @ "class template \
				%mapped_set" ^ $dep_from ("%ystdex::reverse_iterator"
				@ %Range) ~ "%std::reverse_iterator",
			/ %Path $=
			(
				/ $dev $lib "inclusion %StringView" -> "%String";
				/ $forced "all 'std::basic_string'" -> 'basic_string'
					$dep_from %String
			),
			/ @ "class template %ifile_iterator" @ %CStandardIO $=
			(
				- "protected alias %traits_type";
				* $comp "wrong traits with deprecated %std::iterator used"
					$since b245
			)
		)
	),
	+ ($dep_from "%YB_ATTR_nodiscard" @ %YDefinition) "as standard library"
		$effective @ ((("function %empty" @ ("class %block_buffer"
		@ %CStdandardIO, "class teamplate %map" @ %Map, "class template \
		%set" @ %Set, "class template %basic_string_view" @ %StringView), "all \
		4 function templates %size" @ %Range, "function %allocate" @ "class \
		template %class_allocator" @ %Memory, "detailed" @ %Tree)
		@ %YBase.YStandardEx), "function %empty" @ ("class template %GEvent"
		@ %YEvent, "class %ValueNode" @ %ValueNode) @ %YFramework.YSLib.Core),
		// As WG21 P0600R1.
	/ $dev $lib "normailized attribute in lexicographic order even with linkage"
		$effective %(Documentation.LanguageConvention, ("function \
		%CheckReducible" @ %NPL.NPLA, ("functions %(MBCSToWCS, WCSToMBCS)"
		@ %NLS, "functions %MakeFile" @ %MinGW32) @ 'YCLib_(Win32)',
		(("function template %CheckBOM" @ TextFile, "function template \
		%Traverse" @ %FileSystem) @ %Service, "function templates %(FetchSign, \
		FetchSignFromInterval, HalfDifference)" @ %Core.YCoreUtilities)
		@ %YSLib, ("function templates %(FindColon, FetchSeparator)"
		@ %FileSystem, ("functions %(GetFileAccessTimeOf, \
		GetFileModificationTimeOf, GetFileModificationAndAccessTimeOf, \
		MakePathStringW, MakePathStringU)", "friend %operator==" @ "class \
		%FileDescriptor") @ %FileIO) @ %YCLib, ("function %MBCToUC, function \
		template %MakeMBCS" @ %CharacterProcessing,
		"%(FetchMapperPtr_TryUCSMapper, FetchMapper_Default)" @ %MappingEx)
		@ %CHRLib, "details" @ %'YCLib_(DS)'.DSIO) @ %YFramework, ("function \
		templates %(read_uint_be, read_uint_le, write_uint_be, write_uint_le"
		@ %CStandardInteger, "function templates %(ntctscmp, ntctschr, \
		const_ntctscmp, const_ntctsfind, is_null)" @ CString, "function \
		%native_little_bit_order" @ %CStandardInteger, "constructors #(1, 2)"
		@ "class template specialization %basic_tstring_view" @ %TStringView,
		"functions %data, function templates %access" @ "class template \
		%standard_layout_storage" @ %TypePun, "details" @ %Tree, "conversion \
		operator template" @ "class template %lref" @ %Ref, "constructors #(2, \
		3), functions %compare#(4, 5, 6)" @ "class template %basic_string_view"
		@ %StringView, "static function template %are_equal" @ "classes \
		%examiners::(equal, always_equal)" @ %Examiner) @ %YBase.YStandardEx),
		// Syntax rules now comes first.
	/ %YFramework $=
	(
		(
		* "missing inclusion %YBase.YStandardEx.String"
			@ (%CHRLib.CharacterProcessing $since b641,
			%YCLib.Container $since b640);
			// The use of internal header dependency was not guaranteed then.
		/ @ "inline namespace %containers" @ %YCLib.Container $=
		(
			/ "%basic_string" ^ $dep_from ("%ystdex::basic_string"
				@ %YBase.YStandardEx.String) ~ "%std::basic_string" $dep_from
				($forced %YBase.YStandardEx.StringView, %(YFramework.(YSLib.(
				Core.(YException, YCoreUtilities), Adaptor.Font), YCLib.Host,
				'YCLib_(Win32)'.NLS)), YReader.(BookmarkUI, ShlExplorer),
				Tools.ProjectGenerator.Main),
				// Modification of %StringView is required to avoid ambiguity.
			+ $dev $lib "2 static assertion to ensure santiy among \
				%(std::string, string, string_view) types",
			- $forced 'using std::to_string;' $dep_from
				("%to_string" @ %YBase.YStandardEx.String),
				// Now %to_string returns %ystdex::string when introduced from \
					namespace %ystdex. This should be consistent to \
					%YSLib::to_string.
			/ 'using std::to_wstring' -> 'using ystdex::to_wstring;'
				// Same to %to_wstring.
		)
		),
		/ %YSLib $=
		(
			/ %Core $=
			(
				/ $lib "constructor"
					-> 'using MessageException::MessageException;'
					@ "class %MessageSignal" @ %YException,
				/ $forced "2nd parameter 'const std::string& = {}'"
					-> 'const string& = {}' @ "function templates \
					%(CheckLowerBound, CheckUpperBound, CheckArithmetic, \
					CheckNonnegative, CheckPositive)" @ %YCoreUtilities
					$dep_from ("%basic_string" @ %YCLib.Container)
			),
			/ "constructor" ^ "%string_view" ~ "%std::string"
				@ "class %FontException" @ %Adaptor.Font,
		),
		/ $forced DLDI "constructor" @ ("class %platform_ex::Exception"
			@ %YCLib.Host, "class %LoggedEvent" @ %YSLib.Core.YException)
			!^ "%std::string constructor initialized from %string_view"
			$dep_from ("%basic_string" @ %YCLib.Container),
			// ISO C++17 is not guaranteed available here.
		* $lib "wrong return type" @ "definition" @ "function \
			%FetchNLSItemFromRegistry" @ %'YCLib_(Win32)'.NLS $since b556,
		/ DLDI "platform %DS" @ %'YCLib_DS'.DSIO ^ "%string"
			~ "%string_view::to_string" $effective
			@ "constructor %DEntry#4, function %Mount"
	),
	/ $dev $lib %Test.YBase $=
	(
		/ "cleanup %string" $dep_to "cleanup string test" $=
		(
			/ "inclusion '<ystdex/container.hpp>'" -> '<ystdex/string.hpp>',
			(
			/ "avoided 'using namespace std;'";
			/ "%std::string" -> "%string"
			),
			/ "%to_string calls" @ "%basic_string_view test"
				-> "%string constructions"
		),
		* "'YB_HAS_CONSTEXPR' test had no effect" @ "main function" $since b628
			$= ('YB_HAS_CONSTEXPR' -> '__cpp_constexpr >= 200704')
	),
	/ "%basic_string_view" ^ "explicit string cast" ~ "%to_string"
		$effective @ ("constructor %DirectoryFindData#1"
		@ %'YCLib_(Win32)'.MinGW32, "function %InitializeKeyModule"
		@ %Helper.Initialization) @ %YFramework $dep_to
		"avoiding string_view to_string",
	/ DLDI %YReader $=
	(
		/ "avoided 'using namespace std;'" @ %(BookmarkUI, ShlExplorer),
		/ "avoided %to_string relying on distinction between %ystdex::string \
			and %std::string" @ "constructor %ShlExplorer" @ %ShlExplorer
	),
	/ "avoided 'using namespace std;'" @ %Tools.ProjectGenerator.Main
),

b832
(
	/ %YBase $=
	(
		/ %YDefinition $=
		(
			+ $re_add(b831) "conditionally-defined macros %(__cpp_lib_byte, \
				__cpp_lib_transformation_trait_aliases, \
				__cpp_lib_is_invocable, __cpp_lib_is_null_pointer)",
			/ "alias %byte" ^ 'using std::byte;' @ '__cpp_lib_byte >= 201603'
				$dep_from "%__cpp_lib_byte",
			- DLDI "'|| __cplusplus >= 201703L'" @ "condition"
				@ "macro %yconstexpr_inline",
				// As SD-6 feature testing recommendations, '__cplusplus' \
					often gives wrong answer. Also cleaner.
			+ ' || __cplusplus > 201103L' @ "condition" @ "macros \
				%(__cpp_lib_integer_sequence, __cpp_lib_exchange_function, \
				__cpp_lib_tuple_element_t)",
			+ ' || __cplusplus >= 201703L' @ "condition"
				@ "macros %(__cpp_lib_bool_constant, __cpp_lib_void_t)"
		),
		/ %YStandardEx $=
		(
			(
			+ %(IntegralConstant, (TypeInspection; Meta)) "from %TypeTraits" $=
			(
				/ DD "Doxygen groups %(template_meta_programing, meta_types, \
					meta_operations, metafunctions)" >> %IntegralConstant,
				/ DD "Doxygen groups %(type_traits_operations, \
					unary_type_traits, binary_type_traits, \
					transformation_traits)" >> %Meta,
				/ "aliases %(integral_constant, true_type, false_type), types \
					'*_'" >> %IntegralConstants,
				/ "meta type %bool_constant"
					>> ("inline namespace %cpp2017" @ %IntegralConstant),
				(
				/ "metafunctions %(and_, or_, not_, conjunction, disjunction, \
					negation)" >> %IntegralConstant,
				/ "type traits with name pattern 'is_*' except %is_literal_type"
					@ "inline namespaces" >> %TypeInspection,
				+ "inclusion %(IntegralConstant, TypeInspection)" @ %Meta;
				+ "binary type traits %(is_explicitly_constructible, \
					is_explicitly_nothrow_constructible, \
					is_implicitly_constructible, \
					is_implicitly_nothrow_constructible)" @ %Meta
				),
				/ "type traits %(has_virtual_destructor, alignment_of, rank, \
					extent)" >> %TypeInspection,
				+ "unary type trait %is_null_pointer"
					@ "inline namespace %cpp2014" @ %TypeInspection ^ $dep_from
					("%__cpp_lib_is_null_pointer" @ %YDefiniton),
				(
				/ "transformation traits" @ "inline namespaces" >> %Meta,
				/ "unary and binary type traits" @ "namespace %ystdex" >> %Meta;
				/ "metafunctions %(always; well_formed_t, void_t, (when; \
					when_valid, enable_when), cond_t, exclude_self_t, \
					'enable_if_*')" >> %Meta,
				),
				/ "types %(nonsuch, any_constructible); metafunctions \
					('_*detected', 'detected_*')" >> %Meta,
			),
			+ DLDI "inclusion %TypeTraits" @ %(Functor, Swap),
			+ DLDI "inclusion %IntegerSequence" @ %Memory; 
			/ DLDI "inclusion %TypeTraits" @ %AddressOf
				-> "%(IntegralConstant, Meta)",
			/ DLDI "inclusion %TypeTraits"
				@ %(DereferenceOperation, Future, TypeInfo, Variadic)
				-> "%Meta",
			- DLDI "inclusion %TypeTraits" @ %Thunk
			),
			- DLDI "static assertion for %nullopt type" @ %Optional,
			/ %TypeTraits $=
			(
				// These traits are deprecated in ISO C++17.
				- "type trait %is_literal_type" $dep_from %Optional,
				- "type traits %(result_of_t; result_of)" $dep_from
					(%(Ref, Iterator), "removal of result_of",
					%YFramework.YSLib.Core.YFunc)
			),
			/ %AddressOf $=
			(
				+ "conditionally defined macro %__cpp_lib_addressof_constexpr";
				/ "condition for 'using std::addressof';"
					-> '__cpp_lib_addressof_constexpr >= 201606'
					~ '__cplusplus >= 201703L'
			),
			/ %Ref $=
			(
				+ "condition '|| __cplusplus >= 201402L'"
					@ "macro %__cpp_lib_transparent_operators",
				+ "condition '|| __cplusplus >= 201703L'"
					@ "macro %__cpp_lib_invoke",
				(
				+ "inclusion %Invoke" $dep_from %Invoke;
				/ @ "function %operator()" @ "class template %lref"
					$dep_from %Invoke $=
				(
					/ "return type" ^ "%invoke_result_t" ~ "%result_of_t";
					/ "call" ^ "%invoke"
				)
				)
			),
			- DLDI '|| __cplusplus >= 201402L' @ "condition"
				@ "inline namespace %cpp2014" @ %Functor $dep_from
				("%__cpp_lib_transparent_operators" @ %Ref),
			(
			+ "condition '|| __cplusplus > 201103L'" @ "macro \
				%__cpp_lib_robust_nonmodifying_seq_ops" @ %Functor;
			- DLDI '__cplusplus > 201103L' @ "condition"
				@ "function template %equal"
			),
			- DLDI '|| __cplusplus > 201103L' @ "conditions" @ %IntegerSequence
				$dep_from ("%__cpp_lib_integer_sequence" @ %YDefinition),
			/ %Memory $=
			(
				+ '|| __cplusplus > 201103L' @ "condition"
					@ "macro %__cpp_lib_make_unique";
				- DLDI '|| __cplusplus > 201103L' @ "condition"
					@ 'using std::make_unique;'
			),
			/ %Range $=
			(
				* "wrong feature testing macro \
					'__cpp_lib_nonmember_container_access__cplusplus'"
					$since b831,
				+ "conditionally defined macro %__cpp_lib_make_reverse_iterator"
			),
			- '|| __cplusplus > 201103L' @ "condition" @ "%std::exchange"
				@ %Swap $dep_from ("%__cpp_lib_exchange_function"
				@ %YDefinition),
			- DLDI '|| __cplusplus > 201103L' @ "condition"
				@ 'using std::tuple_element_t;' @ %Tuple
				$dep_from ("%__cpp_lib_tuple_element_t" @ %YDefinition),
			- DLDI '|| __cplusplus > 201103L' @ "condition"
				@ 'using std::make_reverse_iterator;' @ %IteratorOperation
				$dep_from ("%__cpp_lib_make_reverse_iterator" @ %Range),
			+ %Invoke "from %Functional" $dep_from %Meta $=
			(
				/ $dep_from "macros %(__cpp_lib_transparent_operators, \
					__cpp_lib_invoke)" @ %Ref >> %Invoke,
				+ "transformation traits %(invoke_mem_fn_ref_t, \
					invoke_mem_fn_deref_t, invoke_mem_obj_ref_t, \
					invoke_mem_obj_deref_t, invoke_other_t)",
				+ "unary type trait %is_std_reference_wrapper";
				+ "traits %(is_invocable, is_invocable_r, \
					is_nothrow_invocable, is_nothrow_invocable_r, \
					invoke_result, invoke_result_t)"
					@ "inline namespace %cpp2017" ^ $dep_from
					("%__cpp_lib_is_invocable" @ %YDefinition,
					"%is_implicitly_nothrow_constructible" @ %Meta),
					// WG21 P0604R0.
				/ "transformation trait %member_target_type_t" @ %TypeOperation
					>> %Invoke;
				(
				/ "struct pseudo_output; metafunctions %(nonvoid_result_t, \
					object_result_t)" @ %Ref >> %Invoke;
				/ "function templates %(invoke, invoke_nonvoid)" >> %Invoke $=
					// WG21 P0604R0.
				(
					/ "return type" ^ "%invoke_result_t" ~ "%result_of_t",
					+ "noexcept-specification" ^ $dep_from
						"%is_nothrow_invocable",
					/ "supported overloads specific to %reference_wrapper \
						instances"
				)
			),
			/ "function template %call_value_for" -> "%invoke_value_for"
				@ %Functional ^ $dep_from "%invoke_result_t" ~ "%result_of_t",
			/ "guaranteed type %void" @ "macros %(yconstraint, yassume)"
				@ %CAssert,
			/ %Iterator $=
			(
				/ "%transformed_iterator traits" @ %Iterator
					^ "%invoke_result_t" ~ "%result_of_t";
				/ "call" @ "function %operator*"
					@ "class template %transformed_iterator" @ %Iterator
					^ $dep_from ("%ystdex::invoke" @ %Invoke)
			)
		)
	),
	/ @ "all Microsoft VC++ projects" @ "platform %Win32" $=
	(
		/ $re_ex(b617) DLB "updated 'WindowsTargetPlatformVersion' value to \
			'10.0.17134.0'" ~ '8.1',
			// This makes them use project default settings defaulted by \
				toolchain settings.
		/ "specified 'PlatformToolset' value to 'v141'"
			// This defaults VS 2010.
		/ "specified language option '/std:c++latest'"
	),
	* $comp "probable wrong behavior with overloaded %operator, on parameters"
		$effective % $dep_from %YBase.YStandardEx.CAssert $effective
		@ %YBase.YStandardEx.(Algorithm, CString, Functional, $dep_from Invoke,
		Pointer, String, StringView) $since b612,
		// This only occurs as 'return yconstraint', first in \
			%YBase.YStandardEx.Functional.
	/ $dev "all remained use of %ystdex::result_of_t" -> $dep_from
		("%ystdex::invoke_result_t" @ %YBase.YStandard.Invoke)
		$effective @ (%("function templates %retry_on_cond" @ %Functional,
		"alias templates %(future_result_t, packed_task_t)" @ %Future,
		"return type" @ "all 2 function templates %make_thunk" @ %Thunk)
		@ %YBase.YStandardEx, (DLDI %'YCLib_(DS)'.DSIO),
		("function templates %(CallNothrow, RetryOnError, RetryOnInterrupted)"
		@ %YCommon, DLDI %FileIO) @ %YCLib, "return type" @ "%TryInvoke"
		@ %YSLib.Core.YException) @ %YFramework) $dep_to "removal of result_of",
	/ %YFramework.YSLib $=
	(
		/ "function template %Call" -> "%Invoke" @ "class template \
			%GHandlerRegisterBase" @ Core.YFunc
			^ "%ystdex::(invoke_result_t, invoke)" ~ "%ystdex::result_of_t";
		/ $forced DLDI
			"member functions WidgetLoader::(DetectWidgetNode, LoadUILayout)"
	)
),

b831
(
	/ $re_add(b830) DLDI "all template parameter '_tValue' not designating \
		container elements" => '_type' $effective @ ("all 3 %any_cast \
		overloads with reference parameter" @ %YBase.YStandardEx.Any,
		("member function %ValueNode::SetContent" @ %ValueNode,
		"class template %GRecursiveCallContext" @ %YFunc) @ %YFramework.Core),
		// To be consistent in conventional use in \
			%Documentation::Designation.
	/ %YBase $=
	(
		/ %YStandardEx $=
		(
			* DLDI "misleading '__cpp_lib_nonmember_container_access >= 201411'"
				@ "condition for hint" @ %Map $since b830,
			+ "allowed using ISO C++14 declarations with condition \
				'__cpp_lib_nonmember_container_access__cplusplus >= 201411'"
				@ %Range,
			+ $doc "explicit incomplete key type support"
				@ "class template %mapped_set",
				// It is supported since b830. Previously it was transparent \
					to implentation of %std::map. It worked for client code \
					with recursive type as %YSLib::ValueNode because libstdc++ \
					can support incomplete key. Now there is no such \
					requirement of implemenation assumption.
			/ %TypeTraits $=
			(
				+ "condition '__cplusplus >= 201703L' for %void_t"
				(
				+ "inline namespace %cpp2017";
				/ $lib "type trait %void_t" >> "inline namespace %cpp2017"
				),
				/ "namespace %dep_swap"
					-> "top-level namespace %ystdex_dep_swap"
					// To avoid potentional ambiguity caused by %swap in \
						%ystdex.
			),
			/ DLDI "all 2 function template %stable_unique" @ %Algorithm
				^ "%std::iter_swap" ~ "ADL swap",
			* $revert(b576) "missing header inclusion '<initialization_list>'"
				@ %Container $since b576,
			(
			+ DLDI "header %Memory"
				@ %(Any, Tree $dep_all_to "tree header dependencies"),
			/ "header %Memory" @ %Utilities -> %Placement
			),
			+ DLDI "header %Utilities" @ %Tree $dep_all_to
				"tree header dependencies",
			(
			+ %Swap;
			/ "function template %swap_dependent" -> ("%swap" @ %Swap)
				^ "%is_nothrow_swappable",
			/ "function templates %(all 2 vswap, \
				copy_and_swap, move_and_swap)" @ %Utilities >> %Swap,
			/ "function templates %(all 3 swap_volatile, swap_underlying, \
				cpp2014::exchange)" @ %Utilities >> %Swap
			),
			/ %Functional $=
			(
				- "header %Memory",
				/ "header %Utilities" @ %Functional -> $dep_from %Swap $dep_from
					"tree header dependencies"
				* "ill-formed call" @ "function template %apply" $since b810
			),
			(
			/ %Placement $=
			(
				+ "namespace %uniformed_tags";
				/ "struct %in_place_tag, alias %in_place_t, alias templates \
					%(in_place_type_t, in_place_index_t), all 3 function \
					overloads %in_place" >> "namespace %uniformed_tags" $dep_to
					"independent uniformed tags"
				+ "inline namespace %cpp2017" $=
				(
					+ "<optional> and <experimental/optional> detection";
					+ $forced "entities %(in_place_t, in_place_type_t, \
						in_place_index_t, in_place, in_place_type, \
						inplace_index)" $dep_from "independent uniformed tags"
				),
				/ 'inline' @ "function templates %(construct_default_within, \
					construct_within)" -> 'yconstfn'
				/ 'inline' @ "function templates %(construct_default_in, \
					construct_in, destroy_at, destroy, destroy_n, destruct_in)"
					-> 'yconstfn_relaxed',
				+ 'yconstfn_relaxed' @ ("function template %destruct_range"
					$dep_from "%ystdex::destruct", ("function template \
					%construct" $dep_from "%ystdex::construct_in";
					"functions %(destroy; destroy_nothrow)" $dep_from
					"%ystdex::destruct_in") @ "class template %tagged_value")
			);
			/ %Optional $=
			(
				/ "adapted to ISO C++17 %std::optional except for features \
					depending on core language (i.e. deduction guides) \
					specializations for other library components"
					~ "%std::experimental::optional" $=
				(
					// The not changed specialized interface include LWG 2766 \
						(swap) and WG21 P0513R0 (std::hash).
					/ $lib "object %nullopt" ^ $dep_from
						("%yconstexpr_inline" @ %YDefinition) ~ "%yconstexpr",
					(
						+ $lib "overrder %what";
							// To keep 'what()' result unchanged.
						/ "base class %std::logic_error"
							@ "class %bad_optional_access" -> "%std::exception",
							// LWG 2806, LEWG 72.
					)
					/ "returned newly constructed value"
						@ "all 2 member function templates %emplace",
						// LWG 2857.
					+ 'constfn' @ "(copy, move) constructors" $dep_from
						("%construct" @ "%tagged_value" @ %Placement)
						// LWG 2900.
					(
					+ "metafunction %optional_relop_t";
					* "rational operation definitions in terms of underlying \
						rational operations" !^ "%totally_ordered" $since b591,
						// WG21 N3765.
					),
					+ "(copy, move) (constructors, operator=) with conditonal \
						'explicit'",
						// LWG 2756.
					+ DLI "conditional 'yconstfn', 'yconstfn_relaxed'"
						@ "internal object access functions"
				),
				+ "inline namespace %cpp2017";
				/ $lib "type %nullopt_t, object %nullopt, class %optional"
					>> "inline namespace %cpp2017"
				+ "conditional inclusion with feature tests"
					// See https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/1rO2FiqWgtI, \
						and https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79433.
			)
			),
			// It should be noted %ystdex::any is different and not a direct
			//	replacement of %std::any, no action is taken now like %Optional.
			(
			/ ("function templates %constfn_addressof"
				-> "function templates %addressof") @ %AddressOf
			(
				/ "adapted ISO C++11 %std::addressof"
					@ '__cplusplus >= 201703L',
				+ "overload to avoid prvalue arguments"
					!@ '__cplusplus >= 201703L'
			);
			/ "functor %is_equal" @ %Functor ^ "%ystdex::addressof"
				~ "%std::addressof"
			)
		),
		/ %YDefinition $=
		(
			+ $re_add(b628) "conditionally-defined macro %__has_include",
			(
			+ $re_add(b628) "conditionally-defined macro \
				%__cpp_inline_variables";
			+ $re_add(b246) "pseudo keyword %yconstexpr_inline",
			)
		)
	),
	/ DLDI "simplified ADL swap" ^ ("%ystdex::swap_dependent" @ %Swap)
		~ "explicit 'using std::swap' and ADL swap call", $effective
		@ (("move constructor" @ "all 2 class template specializations \
		%one_shot" @ %Functional, "constructor %indirect_input_iterator"
		@ %Iterator, "function templates %(vswap#1, copy_and_swap, \
		move_and_swap)" @ %Swap, "function template %alloc_on_swap" @ %Memory,
		"function %swap" @ ("class template %optional" @ %Optional, "class \
		template %nptr" @ %Pointer), "node handle base swap" @ %Tree) @ %YBase,
		("friend function %swap" @ "class template %GHEvent" @ %Core.YEvent,
		"function templates %(SwapLabel, SwapText, SwapTextBox)"
		@ "class %TextPlaceholder" @ %UI.TextBox) @ %YFramework.YSLib),
	/ %Test.YBase $=
	(
		/ $forced "2 case for %ystdex::constfn_addressof"
			-> "%ystdex::addressof" $dep_from
			("%ystdex::constfn_addressof" @ %YBase.AddressOf),
		* $comp "ill-formed 1 case for %ystdex::apply" $since b810 $dep_from
			("%ystdex::apply" @ %YBase.YStandardEx.Functional)
	)
),

b830
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				(
				+ "function %LiftSubtermsToReturn";
				/ "function %ReduceBranchToListValue lifted only top-level \
					elements" ^ "%LiftSubtermsToReturn"
					~ "%LiftSubtermsToSelfSafe",
				),
				/ "member function %Environment::IsNotReferenced"
					=> "%IsOrphan",
					// This sounds more reasonable.
				+ 'const' @ "parameter" @ "function %ResolveEnvironment#1",
				/ $comp DLI "performance of name lookup with %string_view \
					parameter like function %LookupName improved significantly"
					@ "class %Environment" $dep_from
					("%AccessNodePtr" @ %YSLib.Core.ValueNode)
			),
			/ %NPLA1 $=
			(
				/ "function %Forms::Cons lifted only top-level elements"
					^ $dep_from ("%LiftSubtermsToReturn"
					~ "%LiftSubtermsToSelfSafe") @ %NPLA,
				/ DLDI "simplified TCO action access",
				/ DLDI "simplified" ^ "%call_value_or"
					@ "function %Forms::%BindParamete, vau handlers"
			),
			/ $comp @ "loaded derived functions"
				@ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ "applicative %list would lift only top-level elements"
					$dep_from ("%ReduceBranchToListValue" @ %NPLA),
				/ "applicative %cons would lift only top-level elements"
					$dep_from ("%Forms::Cons" @ %NPLA)
			)
		),
		(
		/ $forced ('#include <map>'; 'using std::map;')
			-> ('#include <ystdex/map.hpp>', 'using ystdex::map;');
			@ %YSLib.YAdaptor.Container $dep_from %YBase.YStandardEx.MappedSet
			// This is needed for avoiding ambiguity for client code (e.g. in \
				%Tools.RevisionPatcher.Main), even though it is not a \
				recommend style. This also makes template code less bloating.
		/ $comp "supported transparent keys lookup" @ "function templates \
			%(ValueNode::AccessPtr; AccessNodePtr)" @ %ValueNode
		)
	),
	/ DLDI "removed all explicit argument" @ "%ystdex::get_less instances"
		$effective @ ("class %Partition" @ "platform %DS" @ %'YCLib_(DS)'.DSIO,
		"class %MenuHost" @ %YSLib.UI.Menu),
	/ $fmt @ "%.clang-format" $=
	(
		* "invalid keyword 'SpaceAfterTemplate'" $since b826
			$= (/ 'SpaceAfterTemplate' -> 'SpaceAfterTemplateKeyword'),
			// See also https://reviews.llvm.org/D23317.
		+ $re_ex(b826) 'IndentPPDirectives: AfterHash',
			// This is also supported by Clang 6.
		(
		+ $re_ex(b826) 'AlignEscapedNewlines: DontAlign';
		/ $lib "commented out 'AlignEscapedNewlinesLeft: false"
		),
		+ 'SortUsingDeclarations: false',
		+ 'AlignAfterOpenBracket: DontAlign',
		/ "uncommented 'AlignConsecutiveDeclarations: false'",
		/ 'AlignTrailingComments: true' -> 'AlignTrailingComments: false',
		(
		/ "uncommented 'AlwaysBreakAfterReturnType: All'";
		/ $lib "commented 'AlwaysBreakAfterDefinitionReturnType: All'"
		),
		(
		/ 'BreakBeforeBraces: Allman' -> 'BreakBeforeBraces: Custom';
		+ 'BraceWrapping:';
		+ '  AfterClass: true',
		+ '  AfterControlStatement: true',
		+ '  AfterEnum: true',
		+ '  AfterExternBlock: true',
		+ '  AfterFunction: true',
		+ '  AfterNamespace: true',
		+ '  AfterStruct: true',
		+ '  AfterUnion: true',
		+ '  BeforeCatch: true',
		+ '  BeforeElse: true',
		+ '  IndentBraces: false',
		+ '  SplitEmptyFunction: false',
		+ '  SplitEmptyRecord: false',
		+ '  SplitEmptyNamespace: false'
		),
		+ 'CompactNamespaces: false'
	),
	/ %YBase.YStandardEx $=
	(
		* "missing avoiding overloaded %operator& being used for user-provided \
			template argument" @ "all 2 function template %access" @ "class \
			template %standard_layout_storage" @ %YBase.YStandardEx.TypePun
			$since b692
			$= (/ $impl ^ "%ystdex::constfn_addressof"),
		/ %Memory $=
		(
			+ "2 function templates %alloc_on_copy",
			+ "function template %alloc_on_move",
			+ "function template %alloc_on_swap",
			+ "inline namespace %cpp2017" $=
			(
				+ "traits template %allocator_traits same to \
					%std::allocator_traits" $=
				(
					// The availability inclusion condition is \
						'__cpp_lib_allocator_traits_is_always_equal >= 201411 \
						|| __cplusplus >= 201703L.
					+ "'using std::allocator_traits'"
						@ "ISO C++17 %std::allocator_traits availble",
					+ "custom implementation for %is_always_equal based on \
						%std::allocator_traits otherwise"
				)
			),
			/ DLDI "template parameter '_tValue'" @ "function template \
				%make_unique with instance of %std::initializer_list parameter"
				=> '_tElem'
				// To be consistent in conventional use in \
					%Documentation::Designation.
		),
		(
		+ "transformation traits %(first_t, second_t)" @ %TypeTraits;
		+ "functors %(first_of, second_of)" @ %Functor
		),
		(
		+ %Tree;
		+ %Map
			$= (+ "class template %map" ^ $dep_from (%Memory,
				"%swap_dependent" @ %Utilities, "%first_of" @ %Functor))
				// Some performance increase about 10%~20% is implied by \
					underlying "friend" swapping, supposed in respect of \
					inlining.
		),
		/ "class template %mapped_set" @ %Set $=
		(
			(
			/ $impl ^ $dep_from ("%map" @ %Map) ~ "%std::map";
			/ $comp "supported incomplete key types without \
				implementation-dependent extensions",
				// Previously libstdc++ supported this but libc++ not.
			/ $comp "libstdc++ debug not enabled for %mapped_set underlying \
				containers",
				// As %ystdex::map does not support debug interface. However, \
					this makes it more efficient in client code (e.g. roughly \
					30% increase in NPL measured by root environment \
					loading time).
			/ "enabled transparent key lookup support unconditionally"
			),
			/ DLDI "simplified aliases" ^ ("%alloctor_traits" @ %Memory)
				~ "%std::allcator_tratis"
			/ "supported exception specification" @ "member functions \
				%(operator=, swap)" ^ ("%alloctor_traits" @ %Memory)
		),
		/ "relaxed internal allcator type" @ "class template %mapped_set" @ %Set
			^ 'std::allocator_traits<_tAlloc>::template rebind_alloc',
		+ $doc $impl "need of 'public' when a member function is used"
			@ %Operators,
		* "unaccessible %operator->" @ "class %ifile_iterator" @ %CStandardIO
			$since b678
			/ $impl $revert(b678)
				"base class %input_iteratable<ifile_iterator, const byte&>"
				^ 'public' ~ 'private',
		+ "function template %swap_dependent" @ %Utilities
	),
	/ DD $re_ex(b534) "all '另行约定' -> '另行指定'" $effective
		@ %(YBase.Concurrency, YFramework.'YCLib_(DS)'.DSIO, YCLib.(FileIO,
		Platform), NPL.NPLA1, YSLib.(Core.YGraphics, Service.YDraw),
		Documentation.(CHRLib, CommonRules, Dependencies, Designation,
		LanguageConvention, NPL, ProjectRules, Test, YBase, YCLib, YFramework,
		YSLib)),
		// "Unless otherwise specified", not "unless otherwise agreed" \
			which is not used currently.
	/ $re_add(b758) $forced $build "updated %LIBS for \
		%YBase.YStandardEx.Tree" @ "%SHBuild-bootstrap.sh" $dep_from
		%YFramework.YCLib.Container
),

b829
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ "all 2 function %Collapse" $=
			(
				/ "return type 'TermReference'" -> 'pair<TermReference, bool>';
				/ "exposed initial status of reference by 2nd compoment of \
					return type"
			);
			+ "function %ResolveIdentifier",
			+ 'explicit' @ "conversion operator" @ "class %TermReference",
			// To make ease of overloading resolution on constructors.
			- $lib "redundant assertion of %AssertBranch"
				@ "function %ReduceBranchToList",
				// This is preferre by indirection one in %RemoveHead, and \
					also makes it consistent with implementation of \
					%ReduceBranchToListValue.
		),
		/ %NPLA1 $=
		(
			/ @ "namespace %Forms" $=
			(
				/ @ "function %BindParameter" $=
				(
					* "inconsistent binding for sigil '%' versus '&'" $since
						b828,
					/ DLI "optimized copy bindings with sigil '&'"
						^ "reference move" ~ "reference copy",
					/ "moved value for sigil '&' on list rvalue operand"
						$dep_to "binding list reference by value moving"
						// In this case it always create dangling refrerence \
							after term cleanup. So copy is necessary. \
							Otherwise there have to be a lot cumbersome \
							instance of 'idv' for each rvalue list argument \
							bound to '&' parameter. This also is consistent to \
							behavior of retaining of 'list%'.
				),
				/ $forced DLDI "functions %(Cons, ConsRef)" $dep_from
					("%TermReference" @ %NPLA),
				* "missing indirected value test" @ "functions %(And, Or, If)"
					$since b800
			),
			/ @ "function %EvaluateIdentifier" $=
			(
				/ $forced "simplified" ^ ($dep_from
					"%ResolveIdentifier") $dep_from "%TermReference" @ %NPLA;
				* $comp "inconsistent promotion of prvalues" $since b828
					// This could cause the held values moved away from the \
						environment by bindings.
			),
			(
			/ "improved TCO"  $=
			(
				/ DLI "disabled weak roots by default",
					// They are not used currently.
				/ "supported saving of temporary operands" $=
				(
					(
					+ "saved active frame operand" @ "TCO action";
					+ "temporary operand trasferring"
					),
					/ @ "environment switching"
					(
						/ "frame record list element type";
						+ "temporary operand cleanup"
					);
				);
				+ "universe insertion of temporary operands for TCO action"
					@ "%operator()" @ "vau handler",
				+ "detection for saved operand of TCO action and used its \
					anchor for %TermReference constructed from rvalue operands"
					@ "function %Forms::BindParameter"
			);
			* "missing preserving operands before switching to new environment \
				and overrding term" @ "functions %Forms::(Eval, \
				EvalRef), %operator() of vau handlers" $orig
				(@ "%Forms::Lambda" $since b735)
			)
		),
		/ @ "loaded derived functions" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			(
			+ "applicative 'resolve-identifier'" ^ $dep_from
				("%ResolveIdentifier" @ %NPLA) $dep_from
				("%EvaluateIdentifier" @ %NPLA1);
			* $comp "wrong environment used to evaluate lvalues"
				@ "applicative %forward" $since b828 ^ 'resolve-identifier';
			(
			* "invalid access of prvalue members" @ "applicative 'first%'"
				$dep_from "%forward" $dep_to "forwarding member access";
				// This would usually crash.
			- $revert(b828) "applicative %forward",
			/ DLI "optimized applicative 'unfoldable?'" ^ 'rest%' ~ "%rest"
			),
			+ "applicative 'list*%'" $dep_all_from
				"binding list reference by value moving"
			),
			/ "supported passing reference result" @ "operatives ('$when', \
				'$unless')" $impl ^ ('$defv%!', 'eval%') ~ ('$defv!', "%eval"),
			/ "supported forwarding reference result" ^ $dep_from "%forward"
				$dep_all_from "binding list reference by value moving" $=
			(
				@ "applicatives %(accl, accr)" $impl ^ '$defl%!' ~ '$defl!',
				(
				@ "applicative %foldr1" $impl ^ ('$defl%!', 'first%', 'rest%')
					~ ('$defl!', "%(first, rest)") $dep_from
					("%accr", "forwarding member access");
				(
				@ "applicative 'list-concat'" $impl ^ 'cons%' ~ "%cons";
				@ "applicative %append"
				),
				@ "applicative %map1" $impl ^ ('$defw%!', 'cons%', 'eval%')
					~ ('$defw!', "%(cons, eval)");
				@ "applicative '$let'" $impl ^ ('eval%', '$defv%!', $dep_from
					'list*%', "%idv", '$lambda%', 'first%') ~ ("%eval",
					'$defv!', 'list*', '$lambda', "%first", 'list-rest');
				@ "applicative '$let*'" $impl ^ ('eval%', '$defv%!', 'list%',
					$dep_from 'list*%', "%idv", 'first%', 'rest%')
					~ ("%eval", '$defv!', "%list", 'list*', "%(first, rest)")
				)
			),
			/ DLDI "simplified applicative 'bound?'",
			/ DLDI "qualified with 'const'" @ "template parameter"
				@ "function template %RegisterStrictUnary to get immutable \
				values" $effective @ "applicative 'weaken-environment'",
			- "applicative 'list-rest'" $dep_from '$let',
			/ DLI "optimized applicative 'first-null?'" ^ 'first%' ~ "%first",
			+ "applicative %move",
			/ $forced DLDI "applicative 'unfoldable?'" $dep_from "%accr"
				^ $dep_from "%forward"
		)
	)
),

b828
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			* $impl "invalid 'yconstfn_relaxed' used" @ "static member \
				function %Environment::DefaultRedirect" $since b798,
			(
			+ "function %LiftTermOnRef";
			/ "function %LiftTermRefToSelf" $=
			(
				/ DLDI "simplified" ^ "%LiftTermOnRef";
				/ "return type" -> 'bool' ~ 'void'
			),
			/ DLDI "simplified function %LiftToReference" ^ "%LiftTermOnRef"
			),
			- $revert(b800) "function %LiftTermOrRef",
			* DD "'\throw' command" @ "Doxygen comment"
				@ "function %LiftToReference" $mismatch $since b822,
			+ "functions %((LiftToReturn, RegularizeTerm; \
				ReduceForClosureResult), IsReferenceTerm)",
			/ DLI "referent of parameter type" @ "all 2 function templates \
				%AccessTerm" -> "%TermNode" ~ "%ValueNode",
			(
			/ @ "class %TermReference" $=
			(
				+ $impl "data member to distinguish value initialized from a \
					reference term";
					// Now lvalue reference and rvalue reference can be \
						distinguished.
				+ "member function %IsTermReferenced",
				(
				+ "2 constructors with explicit mark of reference term";
				/ DLDI "simplified all 2 constructors without explicit mark of \
					reference term" ^ "%IsReferenceTerm"
				),
				+ "constructor with explicit mark of reference term and \
					%TermReference value"
			);
			+ "2 functions %Collapse respecting to mark of reference term"
			),
			+ "function %IsLValueTerm" ^ $dep_from
				"%TermReference::IsTermReferenced"
		),
		/ %NPLA1 $=
		(
			* "invlaid container access" @ "function prvalue handling" @ "TCO"
				@ "environment switching" since b825,
			/ @ "namespace %Forms"=
			(
				/ @ "function %BindParameter" $=
				(
					* "empty name bound for parameter '.&', or '&'" $since b822
						$= (/ "ellipsis detection" ^ "%ReferenceTerm"),
					/ "trailing sequence binding" $=
					(
						/ DLDI "avoided unnecessary container from creation",
						+ "parameter of copy",
							// This allows copy by reference.
						/ $revert_ex(b821) "symbol binding" !^ "%LiftToSelf",
							// See above. %LiftToSelf now only remains using \
								in parameter tree.
					),
					/ "object binding" $=
					(
						(
						+ $forced "copy parameter" $dep_from
							"object copy parameter";
						/ $impl "optimized passed by value"
							^ "%(YSLib::SetContentWith, ValueObject::MakeCopy, \
							ValueObject::MakeMove)"
							~ "%(LiftToSelf, LiftTermIndirection)";
						+ "copy for object passed by reference" $dep_from
							"object copy parameter",
						/ "supported one level indirection" ~ "recursive \
							lifting" $dep_to "object value lifting",
						* $comp "reference almost always passed by move \
							instead of copy" $since b803,
							// %ValueObject::MakeMoveCopy basically does not \
								work because the object can be in the \
								environment (as a lvalue or part of it to be \
								accessed by name), or there can be other \
								referece unknown by the object.
						),
						/ $forced DLDI "simplified handler parameter type"
							$dep_from "simplified object parameter handler type"
					),
					/ $forced DLDI "explicitly set '{}' for copy" $dep_from
						"top-level parameter copy control",
					/ DLDI "simplified with extracted templated code of both \
						handlers",
					/ "support of prefixed '&'" -> "sigils ('&', '%')" $dep_to
						"sigil bindings" $=
					(
						/ "supported bindings of nested lvalues by '&'",
							// This ensures accessors can handle \
								subobjects of lists properly (i.e. getting \
								reference values without undefined \
								behavior) without lifting the results.
						+ "prefix '%'"
							// The sigil '%' is different to '&' as it \
								remains the value category.
					)
				),
				/ @ "function %MatchParameter" $=
				(
					/ "list parameter matching" $=
					(
						/ "deferred indirection access after traling \
							parameter check",
						* "desructive binding" $since b800
							!^ "%LiftTermRefToSelf" $dep_to
							"fixed invalid reference binding in list",
						(
						/ "aforehand recursive binding of list element"
							-> "explicit resolution of one level \
								indirection of %TermReference copy"
								$dep_from "object value lifting",
							// This is more similar to both C++ and 'box' \
								in Scheme-like dialects, though it may be \
								unsafe to binding multiple level of \
								reference when the indirection is \
								performed only once.
						+ $forced "copy parameter" @ "sequence parameter \
							handler" $dep_from ("parameter of copy"
							@ "trailing sequence binding"
							@ "function %BindParameter");
						/ $comp "supported binding of referenced list \
							subnodes by copy"
						)
					),
					+ "copy parameter to protected operand being moved"
						$dep_to "top-level parameter copy control",
					/ @ "function type" @ "object parameter handler" $=
					(
						+ "copy parameter 'bool'" $dep_to
							"object copy parameter",
						/ "simplified 2nd parameter" ^ 'TermNode&'
							~ 'TermNode&&' $dep_to
							"simplified object parameter handler type"
					)
				)
			),
			/ "result lifting" @ "end of closure" $dep_to
				"result regulation" $=
			(
				(
				/ $impl "simplified" ^ "%ReduceForClosureResult"
					~ "%LiftToSelfSafe";
				/ $comp "resoved only outermost one level reference \
					instead of recursive resolution on reference"
					// Similar to parameter matching, result of a call now \
						also reserves indirect references.
				),
				/ DLDI "simplified" ^ ("%RegularizeTerm" @ %NPLA)
			),
			+ "5th parameter 'bool' specifying whether to lift the result"
				@ "function %ReduceCheckedClosure",
			/ @ "function %EvaluateIdentifier" $=
			(
				/ $impl "simplified %EvaluateIdentifier" ^ $dep_from
					("%Collapse#2" @ %NPLA);
				/ $comp "supported tracking of value category represented \
					by term"
			)
		),
		/ @ "loaded derived functions" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			(
			/ "combiners ('$vau&', '$vaue&', '$lambda&', '$lambdae&', \
				'$defv&!', '$defl&!', '$defw&!', 'eval&', 'cons&', 'list%')"
				=> ('$vau%', '$vaue%', '$lambda%', '$lambdae%', '$defv%!',
				'$defl%!', '$defw%!', 'eval%', 'cons%', 'list%');
			* "references not kept in result" @ "alternative derivation"
				@ "operative '$seqence'" $since b789 ^ $impl ('cons&',
				'eval%', 'vaue%', 'vau%'),
			/ DLI "operative '$quote'" ^ '$vau%' ~ '$vau',
			+ "alternative derivation" @ "applicative 'list%'" ^ '$vau%',
			+ "alternative derivations" @ "applicatives (%list, 'list%')"
				^ "('$lambda', '$lambda%')"
			),
			/ $forced DLDI "alternative derivation" @ "applicative %list"
				$dep_from ("result regulation", "%BindParameter" @ %NPLA1),
				// The single symbol for lifting does not work any longer \
					to behave as %NPL::ReduceBranchToListValue.
			+ "applicatives %(id, idv)"
				^ ($dep_from ("%LiftToReturn" @ %NPLA), "sigil bindings"),
			+ "applicative 'reference?'" ^ $dep_from
				("%IsReferenceTerm" @ %NPLA),
			+ "applicative 'lvalue?'" ^ $dep_from ("%IsLValueTerm" @ %NPLA),
			+ "applicatives ('rest%', 'rest&')" $dep_from ("fixed invalid \
				reference binding in list", "%BindParameter" @ %NPLA1),
			(
			+ "applicative 'first&'",
			+ "applicative (%forward; 'first%')" ^ $dep_from
				('lvalue?', "%idv"),
			/ "supported passing reference result" $dep_from ("fixed \
				invalid reference binding in list", "sigil bindings") $=
			(
				// Without the dependency, the behavior is undefined \
					because it would access the object was destructed by \
					binding.
				@ "applicative %apply" $impl ^ $dep_from ('$defl%!', 'eval%',
					'cons%', 'first&') ~ ('$defl!', "%(eval, cons, first)");
				@ "operative '$cond'" $impl ^ $dep_from ('$defv%!', '$lambda%',
					'eval%') ~ ('$defv!', '$lambda', "%eval")
			)
		)
	),
	/ %Tools $=
	(
		* $comp "stage 1 SHBuild would crash on build" $since b725
			$dep_from ("environment switching" @ %YFramework.NPL.NPLA1),
		* $re_ex(b739) "missing Win32 source file" @ "%SHBuild-bootstrap.sh"
			@ %Scripts $since b735
			// Though %Registry.cpp is not directly used by default (being \
				optimized), it would go wrong if called by custom script \
				with debug options.
	)
),

b827
(
	/ DLB "3rdparty files" @ "Microsoft VC++ project" $=
	(
		* "wrong directorie in paths" $since b700,
		* "missing removing unused files" $since b826
			// On the other hand, Code::Blocks project files would be \
				regenerated on release.
	),
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ DLI "avoided redundant anchor reference of weakly held parent \
				environment" @ "vau handlers",
			/ "improved TCO" @ "environment switching" $=
			(
				* "missing remove entry for newly added temporary object"
					$since b825,
				// See $2018-06 @ %Documentation::Workflow.
				/ $revert_ex(b886) "refactored entry of TCO frame checking";
				/ "suppored collection of indirect referenced environments by \
					separated record compressor"
					~ ("check loop" @ "basic frame record list traverse")
			),
			/ "all functions %(ResolveName, 2 ResolveEnvironment)" >> %NPLA
		),
		/ $comp "supported PTC" @ "alternative derivation"
			@ "operative '$sequence'" @ "loaded derived functions"
			@ "function %LoadNPLContextForSHBuild" @ %Dependency
	)
),

b826
(
	+ $dev $impl "workaround of GCC issue 85792" @ "class template %optional"
		@ %YBase.YStandardEx.Optional,
		// To eliminate G++ 8.1.0 warning: [-Wctor-dtor-privacy]. See \
			https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85792.
	/ DLB "file %3rdparty/freetype/build/config.mk" $=
	(
		+ "support of non-Windows toolchains"
			$= (- "removed '.exe' postfix on commands"),
		/ $impl ^ "prefix"
	),
	/ %YFramework $=
	(
		/ $dev $impl "local type name" @ "static member function %is_parent"
			@ "trait template %PathTraits" @ %YSLib.Core.FileSystem,
			// To eliminate G++ 8.1.0 warning: [-Wshadow].
		/ $forced DLDI ^ ('void*' ~ 'int') @ "opaque file information \
			descriptor" @ "device operation table" @ "platform %DS"
			@ %'YCLib_(DS)'.DSIO $dep_from "devkitARM r48",
			// NOTE: The %DSIO implementation change is required since \
				devkitARM r46 (otherwise it would not compile).
		/ DLB $impl @ "platform %DS" @ %YCLib.NativeAPI $=
		(
			+ $forced "declaration %__io_dsisd",
			/ $forced ^ ("%::isDSiMode" ~ "%::__dsimode") $dep_from
				"devkitARM r48",
				// NOTE: %::get_io_dsisd is not used due to linking problem. \
					The %DSIO implementation change is required since \
					devkitARM r46 (otherwise it would not compile).
			+ 'const' @ "declaration %_io_dldi_stub",
			+ "weak definition %__secure_area__"
		)
	),
	(
	(
	/ DLB "removed targets generated from 'objcopy -O binary'"
		@ "all DS makefiles";
		// See $2018-02 @ %Documentation::Workflow.
	+ $forced $build '-h 0x200' @ "%ndstool command" @ "makefile"
		@ "platform %DS" @ %YSTest,
		// See $2018-02 @ %Documentation::Workflow.
	),
	+ "touch screen initialization" @ "main function" @ %YReader.Main_ARM7
		@ "project %YSTest_ARM7";
		// Otherwise the touch screen would not be responsible after devkitARM \
			and libnds update.
	/ DLP "toolchain and library using" $=
	(
		/ @ "platform %DS" $=
		(
			/ "installing source" ^ "devkitPro official pacman repositories";
				// See %Documentation::Dependencies. See \
					https://devkitpro.org/viewtopic.php?f=13&t=8711&sid=b0e9dc739b08dc00b42a5be10a7ef61e for annoucement.
			^ $re_ex(b662) "updated devkitARM release 48"
				~ "devkitARM release 45" $dep_to "devkitARM r48",
			^ $re_ex(b662) "updated libnds 1.7.2" ~ "libnds 1.5.12"
		),
		(
		(
		/ DLB "optimized %CFLAGS" @ "freetype";
		/ DLP "updated library %freetype" @ "library using"
			$= (^ $re_ex(b700) "updated freetype 2.9.1 with several files \
				remained from freetype 2.4.11" ~ "freetype 2.6.3")
			// See [Documentation::Dependencies @@2.2.3].
		),
		- "unused freetype headers";
		/ "updated library %freetype" @ "platforms %(DS, MinGW32)"
			$dep_from "3rdparty libraries"
			$= (^ $re_ex(b700) "updated freetype 2.9.1 with several files \
				remained from freetype 2.4.11" ~ "freetype 2.6.3")
			// See [Documentation::Dependencies @@2.2.4].
		)
	)
	),
	/ @ "%.clang-format" $=
	(
		+ $re_ex(b665) $fmt 'SpaceAfterTemplate: false',
			// This requires newer 'clang-foramt' since then. See wiki page \
				%Development.zh-CN.md for update.
		+ "copyright notice"
	),
	/ $dev $repo $re_add(b688) "all edited file with module name not the same \
		as base filename" ^ 'hg mv' $effective
		@ %YReader.Main_ARM7.("%main.cpp" => "%Main.cpp")
),

b825
(
	/ %YBase.YStandardEx $=
	(
		+ $revert_ex(b823)  "'CHAR_MIN < 0' detection"
			@ "functions %(tolower, toupper)" @ %CCharacterType,
			// To eliminate G++ warning: [-Wtype-limits], as in %iscntrl_C0.
		* "potential wrong comparison results" @ "function template %ntctsicmp"
			@ %CString $since b823 ^ "%ystdex::towlower" ~ "%ystdex::tolower",
		/ DLDI "simplified unary trait %is_decayed" @ %TypeTraits
	),
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Core $=
			(
				- DLDI "redundant 'typename'" @ "class %ValueNode"
					@ %ValueNode,
				/ @ "class template %GHEvent" @ %YEvent $=
				(
					/ DLDI ^ "static assertion to ensure decayed functor type \
						for equality",
					/ "constructor with function type of \
						%ystdex::make_expanded handled equality" $dep_to
						"expanded equality of handlers",
					+ "workaround for GCC LTO"
						@ "constructor with callable object parameter"
						$dep_to "LTO workaround"
						// G++ 7.1.0 fails with multiple definitions on \
							linking enabled with LTO.
				)
			),
			+ DLDI "workaround for nonconforming %ftell return type"
				@ %Adaptor.Image
				// Both ISO C and POSIX require the %ftell returning 'long'. \
					However, the newlib declaration from devkitARM r48 breaks \
					the conformance by using %off_t and it is equivalent to \
					'long long' rather than 'long' in devkitARM r48. See also \
					https://github.com/devkitPro/newlib/issues/5.
		),
		(
		* $comp "potential wrong case insensitive filename comparison results"
			@ %YCLib.FileSystem $since b823 $dep_from
			("%ntctsicmp" @ %YBase.YStandardEx.String);
		* $comp "failed to load typefaces" @ "platform %DS"
			@ %Helper.Initialization $since b823
		),
		/ DLDI "simplified alias declarations and inclusion directives"
			@ %CHRLib.CharacterProcessing,
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ $revert_ex(b823) "'CHAR_MIN < 0' detection"
					@ "function %IsDelimeter";
					// Also to eliminate G++ warning: [-Wtype-limits].
				/ "functions %(IsGraphicalDelimeter, IsDelimeter)"
					-> "%(IsGraphicalDelimiter, IsDelimiter)";
				/ $forced DLDI "function %Decompose"
			),
			/ @ "class %Environment" @ %NPLA $=
			(
				+ "member function %GetAnchorPtr",
					// Similar to %EnvironmentReference::GetAnchorPtr.
				+ "static member function %Deduplicate"
			),
			/ %NPLA1 $=
			(
				* "lifetime of dynamic environments not necessarily kept" $since
					b823
					// For PTC of invocation of 'f' in \
						'$defl! f (n) $seq2 n (f n);', while '$seq2' is from \
						'$defv! $seq2 (x y) env eval (list $sequence x y) env'.
					$= (- "TCO dynamic anchors" @ "vau handlers"),
				* "wrong result of %Forms::EqualValue result for functors"
					$dep_from "expanded equality of handlers" $since b748,
				/ DLDI "simplified type of guards" @ "TCO action"
					^ "%ContextHandler" ~ "%ValueObject",
				/ "improved TCO" @ "environment switching" $=
				(
					* "prvalue function value compression dropped order \
						guarantee" $since b824 ^ "%ystdex::erase_all" $dep_from
						"TCO action",
						// The old handler was kept. This is corrected by \
							always emplacement at end, deduplication and then \
							adding the new value by swapping (with respect to \
							strong exception guarantee).
					/ DLDI "simplified" !^ "lambda-expression",
					* "unexpected copying of handlers" $since b824,
					(
					/ "allocated function prvalue of head term in frame of \
						activation records";
					/ $comp "allowed optimized lifetime adjust of function \
						prvalues"
					* $comp "lifetime of temporary object introduced by \
						function prvalues interleaved across call boundaries"
						$mismatch $since b821
					),
					* "impossible parent weak pointers compression" $since b823
						^ $dep_from ("%Environment::GetAnchorPtr" @ %NPLA),
						// The reference count would never meet the condition \
							of %Environment::IsNotReferenced.
					/ DLDI "simplified frame merging" ^ $dep_from
						("%Environment::Deduplicate" @ %NPLA),
					/ "supported collection of fram with more than one level \
						parent indirection"
						// It still allows one frame per collection turn only, \
							so cyclic references of environment are not \
							collected; however, this is alread undefined \
							behavior in object language.
				),
				/ "removed environment term to cleanup reference counter"
					@ "functions %Forms::(Eval, EvalRef)"
			),
			/ @ "function %LoadNPLContextForSHBuild"
				@ "loaded derived functions" @ %Dependency $=
			(
				/ $revert_ex(b823) DLB $impl "simplified for 'CHAR_MIN < 0' \
					detection" ^ "%ystdex::tolower" ~ "%std::to_lower"
					@ "applicative 'string-contains-ci?'",
					// To eliminate G++ warning: [-Wtype-limits].
				* $comp "wrong 'eqv?' result of comparison on functions"
					$since b759 $dep_from ("%Forms::EqualValue" @ %NPLA1)
					// For instance, the value of 'eqv? eq? eqv?' was \
						'#t'.
			)
		)
	),
	* $re_ex(b823) "contract violated by missing exclusion of invalid value \
		for %std::tolower" @ "extension comparison for files"
		@ "getting entry type" @ %YReader.ShlExplorer $since b390
		^ "%ystdex::tolower" ~ "%std::tolower",
		// See ISO C11 7.4/1.
	* $build "missing commented out redundant '-ldswifi7 -lmm7'"
		@ "variable %LIBS" @ "ARM7 makefile" @ "project %YSTest"
		@ "platform %DS" $orig (@ "project makefile") $mismatch $since b132,
		// The libraries DS Wifi and MaxMod were never publicly used as \
			dependencies.
),

/ b824
(
	/ %YBase.YStandardEx $=
	(
		/ %Functor $=
		(
			* "wrong %second_argument_type as %result_type" @ "binary functors"
				@ %Functor $since b656,
			/ "functor %ref_eq" $=
			(
				(
				/ $impl ^ "macro";
				+ $comp "specialization for %void",
				+ $comp "types %(first_argument_type, second_type, result_type)"
					@ "primary template"
				),
				* "parameter type wrongly qualified by 'const'" $orig
					(@ %Utilities $since b193),
				* "possibly wrong result for types with overloaded %operator&"
					^ "ystdex::constfn_addressof" (@ %Utilities $since b193)
			)
		),
		/ %Functional $=
		(
			/ @ "functor %get_less" $=
			(
				/ $impl "alias template" -> "template"
				+ "default temlate argument 'void'",
				+ "specialization for %void"
			),
			+ "functor %get_equal_to"
		)
	),
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ DLDI "simplified friend function %operator==" @ "class %TermValue"
				^ $dep_from ("%ystdex::ref_eq" @ %YBase.YStandardEx.Functor),
			+ "equality comparison operations" @ "class %EnvironmentReference"
				$=
			(
				+ "friend function %operator==";
				+ "private base class \
					%ystdex::equality_comparable<EnvironmentReference>"
			),
			+ "function %GetAnchorPtr" @ "class %Environment"
		),
		/ %NPLA1 $=
		(
			/ DLDI "simplified functions %(ReduceOrdered, Forms::(And, Or, \
				If))",
			/ "TCO" @ "function %ReduceCombiner" $=
			(
				* "dead loop" @ "compressing frames" @ "TCO" $since b823,
				/ DLI "optimized" !^ "%unique_ptr",
				/ "avoided keep duplicate combiner prvalue in guard" $dep_from
					"vau equality"
			),
			* "clousre construction moved name of term" @ "vau handler" $since
				b769,
				// This would cause empty name violating the convention of term.
			* "missing leaf element transformation"
				@ "function %TransformForSeparatorRecursive" $since b736,
			/ @ "functions %(TransformForSeparator, \
				TransformForSeparatorRecursive)" $=
			(
				/ "transformed terms with single subterm directly as a single \
					subterm without enclosing list term"
					// This guarantees the transformed result is optimized, \
						consistent with the term after lifted like in \
						%ReduceOnce. For example, 'f; f n' is transformed as \
						'$sequence n (f n)', rather than '$sequence (n) (f n)'.
				+ "overloads with 'TermNode&&' parameter" $dep_to
					"destructive separator transformation",
				/ DLDI "simplified" ^ "%ValueNode::AddChild"
					~ "%ValueNode::emplace"
			),
			/ "optimized function %ReplaceSeparatedChildren to guanrantee no \
				redundant copy of values" $dep_from
				"destructive separator transformation",
			/ "vau handlers allows equality comparison" $dep_from
				("%EnvironmentReference" @ %NPLA) $dep_to "vau equality",
				// This provides more precise beta-eta equivalence of vau \
					abstraction.
		),
		/ @ "function %LoadNPLContextForSHBuild" @ %Dependency $=
		(
			/ "loaded derived functions" $=
			(
				(
				* $comp "operatives with name prefixes ('$vau', '$lambda') \
					constructed invalid term with no name" $since b769 $dep_from
					("vau handler" @ %NPLA1);
					// It can fail to be evaluated later, see below.
				* $comp "failed evaluating nested function returning forms as \
					parameter of list constructor" $since b769
					// Like 'cons (apply ($lambda (i) $def! f $lambda (x) ()) \
						(list 7)) ()' would never be supported smoothly before \
						the fix, even many operations are not provided then.
				)
			),
			/ $comp "ensured PTC from result of ';' transformation" $dep_from
				("%ReduceCombiner" @ %NPLA1)
				// Only b823 would result in non-PTC compliant separator \
					combiner prvalues.
		)
	)
),

b823
(
	/ %YBase.YStandardEx.CCharacterType $=
	(
		+ "function %isspace",
		(
		* "contract violated by missing exclusion of invalid value for \
			%std::(tolower, toupper, towlower, towupper)"
			@ "(function, function templates) %(tolower, toupper)"
			$since b605;
			// See ISO C11 7.4/1 and ISO C11 7.30.1/5.
		/ "function templates %(tolower, toupper)"
			=> "%(towlower, towupper)";
		+ $doc "guaranteed no other overloads for each function name"
		)
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				+ $revert_ex(b772) "function %Forms::Sequence"
					^ "%RemoveHead",
				/ @ "function %ReduceOrdered" $=
				(
					* DD "wrong precondition" @ "wrong '\pre' Doxygen command"
						$since b772,
					/ "supported PTC of last reduced subterm",
					- "branch check and head form handling" $dep_from
						'$sequence' @ %Dependency
				),
				/ @ "function %RegisterSequenceContextTransformer" $=
				(
					/ "removed symbol dependency" $=
					(
						- "2nd and 3rd parameters";
						/ $comp "avoided redundant deferred name lookup",
						/ $comp "avoided %FormContextHandler construction"
					),
					(
					* "unordered infix transforamtion" $=
					(
						/ $impl ^ ("%StrictContextHandler",
							$dep_from ("%ReduceBranchToList" @ %NPLA))
							~ "%ReduceChildren";
						* $comp "empty evaluation result for any expressions"
							$since b817;
						* $comp "redundant head" $since b769
					);
					/ "avoided reduced head form twice unnecessarily"
						^ $dep_from "Forms::%Sequence"
						// It would be still unnecessary even if it is safe \
							because the prefix object is totally predictable \
							when the unnecessary symbol is ignored.
					)
				),
				* $dev $impl "ill-formed alternative implementation"
					@ "function %ReduceCheckedClosure" $since b822,
				/ DLDI "simplified TCO" ^ ($dep_from "%RelaySwitchedUnchecked"
					~ "%RelaySwitched") @ %NPLA,
				/ "function %AssertBranch" >> %SContext,
				/ DLDI "simplified %StrictContextHandler::operator()"
					^ "%AssertBranch",
				/ DLI "vau handler" $=
				(
					/ DLI "vau handlers stored anchor of nonowning static \
						environments" $dep_to "anchor of static environments",
					/ "referenced parent" ^ ($dep_from "%EnvironmentReference"
						@ %NPLA) ~ "%weak_ptr<Environment>" $dep_to
						"reversed reference for parent",
					/ "saved shared local environment pointer"
						$dep_to "saved local environment"
						// This should be in turn held by extension guard in \
							TCO frame.
				),
				/ $forced "function %ResolveEnvironment" ^ ($dep_from
					"%EnvironmentReference" @ %NPLA) ~ "%weak_ptr<Environment>" 
					$dep_from "%Environment::DefaultRedirect",
				/ @ "vau and evaluation TCO" $=
				(
					* $comp "parent static environment removed too aggressively"
						$since b821 $dep_from "anchor of static environments",
					/ DLDI "simplified" ^ "anchors" ~ "weak environment list",
					(
					* $comp "local environment wrongly compressed away" $since
						b821 $dep_from ("reversed reference for parent",
						"saved local environment");
						// Expression 'list ($lambda x () ($lambda x $if)) 1' \
							would not evaluated normally in result of \
							'() make-environment'. It is now conservative so \
							it can miss some chance of PTC.
					* "dynamic environment wrongly compacted as parant of \
						static environment" $since b821 $dep_from "vau handler";
					* "insufficient optimizable cases" $since b821 $=
					(
						/ DLDI "reversed insertion order of frames";
						+ "indirectly nested environment elimination"
					)
					)
				)
			),
			/ %Dependency $=
			(
				/ @ "function %LoadNPLContextForSHBuild" $=
				(
					/ "loaded derived functions" $=
					(
						/ "operative '$sequence'"
							^ ($dep_from "%Sequence" ~ "%ReduceOrdered" @ %NPLA)
							$=
						(
							* "operative '$sequence' reduced head form twice \
								unnecessarily" $since b772,
							/ $re_add(822)
								"supported PTC of last evaluated expression",
							/ $comp "allowed return of reference value"
						),
						+ $re_add(b822) "operative '$defw&!'",
						/ DLI "optimized away branch check" @ ("applicative \
							%list" ^ ("%ReduceBranchToListValue"
							~ "%ReduceToListValue") @ %NPLA,
							"applicative 'list&'" ^ ("%ReduceBranchToList"
							~ "%ReduceToList") @ %NPLA),
						/ $forced "applicatives ('lock-environment',
							'copy-environment', 'weaken-environment')"
							^ ($dep_from "%EnvironmentReference" @ %NPLA)
							~ "%weak_ptr<Environment>"
					),
					/ "registration of seperators" $=
					(
						/ $forced "omitted symbol for name lookup to be \
							replaced by prefix object" $dep_from
							("%RegisterSequenceContextTransformer" @ %NPLA1);
						* $comp $doc "name pollution '$;' and '$,' on root \
							environment" $since b758,
							// This is observable by symbol construction like \
								'string->name' though it would be parsed to \
								more than one token.
						* $comp "infix ',' transformation" $dep_from
							"unordered infix transforamtion"
						(
						* "operative '$sequence' reduced head form twice \
							unnecessarily" $since b772 ^ $dep_from
							"%Forms::Sequence",
						/ $comp "allowed return of reference value"
						)
					),
					/ $impl ^ "%ystdex::isdigit" ~ "%std::isdigit" $=
					(
						/ "avoided effect of nonconforming implemntation of \
							%std::isdigit",
						* "missing exclusion of invalid value for %std::isdigit"
							$since b758
							// See ISO C11 7.4/1.
					)
				),
				* "missing exclusion of invalid value for %std::isspace"
					@ "functions %(DecomposeMakefileDepList, \
					LoadNPLContextForSHBuild)" $since b623 $=
					(/ $impl "simplified" ^ ($dep_from "%ystdex::isspace"
						@ %YBase.YStandardEx.CCharacterType) ~ "%isspace")
			),
			/ %NPLA $=
			(
				(
				+ "function %RelaySwitchedUnchecked";
				/ DLDI "simplified function %RelaySwitched"
					^ "%RelaySwitchedUnchecked"
				),
				(
				+ "functions %(ReduceBranchToList, ReduceBranchToListValue)"
					$dep_from ("%AssertBranch" @ %SContext);
				/ DLDI "simplified function %ReduceToList"
					^ "%ReduceBranchToList",
				/ DLDI "simplified function %ReduceToListValue"
					^ "%ReduceBranchToListValue"
				),
				/ ("data member %AnchorPtr" -> "function %GetAnchorPtr")
					@ "class %TermReference",
				(
				+ "class %EnvironmentReference";
				/ "supported %EnvironmentReference" ~ "%weak_ptr<Environment>"
					@ "static member function %Environment::DefaultRedirect"
				),
				/ $impl "function %(IsNPLAExtendedLiteral, \
					IsNPLAExtendedLiteralPrefix)"
					^ "%ystdex::isdigit" ~ "%std::isdigit" $=
				(
					/ "avoided effect of nonconforming implemntation of \
						%std::isdigit",
					* "missing exclusion of invalid value for %std::isdigit"
						$since b771
						// See ISO C11 7.4/1.
				)
			),
			/ DLI "function %IsDelimeter" @ %Lexical !^ "magic number"
		),
		* $impl "missing exclusion of invalid value for %std::isalpha"
			@ "function %MapKeyChar#2" @ "platform %Win32" @ %YCLib.Keys $since
			b490
			// See ISO C11 7.4/1.
	)
)

b822
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ $revert(b771) "accepted empty symbol" @ ("functions \
				%(CategorizeBasicLexeme, IsNPLAExtendedLiteral)";
				$comp "functions %(CategorizeLexeme; IsNPLASymbol)") $=
			(
				- "precondition for empty lexeme";
				/ "categorized empty lexeme as symbol"
			),
			+ "class %InvalidReference",
			/ "base class %NPLException" @ "class %BadIdentifier"
				-> "class %InvalidSyntax",
			(
			+ "function %LiftSubtermsToSelfSafe";
			/ DLDI "simplified function %ReduceToListValue"
				^ "%LiftSubtermsToSelfSafe" ~ "%LiftToSelfSafe"
			),
			* "missing recursive call" @ "function %LiftToSelfSafe" $since b821,
			* "missing lifting reference value of top-level subterm"
				@ "function %LiftToSelf" $since b800
		),
		/ %NPLA1 $=
		(
			/ @ "vau abstraction" $=
			(
				/ "supported empty symbol" $=
				(
					* "assertion failure on empty symbol" $since b771 $=
					(
						/ $comp @ "vau abstraction" $dep_from
							("%IsNPLASymbol" @ %NPLA)
							// Empty symobl should be first-class object and \
								it can be constructed by 'string->symbol ""'.
						/ $revert(b790) "supported empty symbol"
							@ "function %Forms::MatchParameter" $=
						(
							- "precondition for empty lexeme";
							/ "treated empty string not as '.' prefixed symbol"
						)
					),
					/ "accepted empty symbol" @ "function template %CheckSymbol"
						$dep_from ("%IsNPLASymbol" @ %NPLA)
				),
				+ $impl "support of mark for avoiding lifting" $dep_to
					"no lifting mark"
			)
			/ @ "namespace %Forms" $=
			(
				/ "supported reference binding" $dep_to
					"'&' support for reference binding" $=
				(
					- "lifting for leaves" @ "function %MatchParameter",
					/ @ "function %BindParameter" $=
					(
						* $re_add(b821) "missing lifting of bound trailing \
							terms" $since b803 ^ "%LiftToSelf"
							~ "%LiftTermRefToSelf",
						/ "supported binding by reference for symbols with \
							'&' prefix" ^ $dep_from
							("%InvalidReference" @ %NPLA),
						/ "ignored empty leaf symbol"
							// To be consistent with trailing terms binding.
					)
				),
				/ $lib "exception type" @ "cyclic reference detection"
					@ "recursive vau abstraction introduced by \
					%DefineWithRecursion" -> ($dep_from "%InvalidReference"
					~ "%NPLException" @ %NPLA)
				+ "token name" @ "exception message"
					@ "function template %CheckSymbol",
				+ "term value" @ "exception message for invalid last term of \
					parameter" @ "function %MatchParameter",
				+ "functions %(ConsRef, LambdaRef, VauRef, \
					VauWithEnvironmentRef, EvalRef)" $dep_from "no lifting mark"
			),
			- DLI "term check" @ "TCO action construction" $effective
				@ "functions %(ReduceAgain, ReduceCombined, \
				ReduceCheckedClosure, Forms::Eval), %operator() of vau \
				handlers",
			/ $re_add(b821) "elimiated shared frame" @ "TCO action" $dep_to
				"shared frame TCO"
		),
		/ "loaded derived functions" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			* $re_add(b821) $comp "unsafe applicative %cons" $since b800,
				// This is now also consistent with 'list'.
			+ "applicative 'cons&'" ^ $dep_from ("%ConsRef" @ %NPLA1),
				// Similar to 'list&'.
			/ $dev $lib "rearranged alternative derivation" @ "forms" $=
			(
				+ "macros to control forms with conditional inclusion",
				+ "derivation of operative '$lambda'" ^ $dep_from
					("%cons", "'&' support for reference binding")
			),
			* "wrong dynamic environment for arguments after 1st argument"
				@ "operative '$sequence'" $since b799,
				// This would cause '$let ((x 2)) $let () $sequence 1 x' to \
					fail as well as make Kernel-style of implementation of \
					'$letrec' wrong.
			/ DLDI "simplified operative '$lambdae'",
			/ DLI "all infix ';' inside combiner definitionss"
				-> "'$sequence' form" $effective
				@ "applicatives %(accl, accr, map-reverse)",
				// To be consistent in style. Note this would make it slightly \
					inefficent for interpretion overhead on symbol \
					'$sequence', and significant addtional cost when native \
					form '$sequence' not used.
			/ "all symbols bounded directly except '#ignore'"
				@ "all derived combiners" ^ $dep_from "'&' support for \
				reference binding" $dep_from ("%LiftToSelf" @ %NPLA) $effective
				@ "%list, '$quote', '$set!', '$defv!', '$setrec!', '$defl!', \
				%(first, rest, apply), 'list*', '$defw!', '$lambdae', \
				'$sequence', '$cond', 'not?', '$when', '$unless', \
				'first-null?', 'list-rest', %(accl, accr, foldr1, map1), \
				'list-concat', %append, '$let', '$let*', 'unfoldable?', \
				'map-reverse', 'for-each-ltr', '$binds1?', 'env-empty?'",
				// This allows modification being exposed, so not merely an \
					optimization. Indirect binidngs in 'eval' expressions \
					are not supported yet.
			/ DLI "simplified operative '$cond'" !^ '$sequence',
			+ "operative ('$vau&'; '$defv&!')" ^ $dep_from
				("%Forms::VauRef" @ %NPLA),
			+ "operative ('$vaue&'; '$lambdae&')" ^ $dep_from
				("%Forms::VauWithEnvironmentRef" @ %NPLA),
			/ DLDI "operative '$setrec!'" ^ '$defv!' ~ '$def!',
			+ "operatives ('$lambda&'; '$defl&!')" ^ $dep_from
				("%Forms::LambdaRef" @ %NPLA),
			+ "operative 'eval&'" ^ $dep_from ("%Forms::EvalRef" @ %NPLA),
			/ $comp "supported PTC of evaluated expression"
				@ "applicative %eval" $dep_from "shared frame TCO"
		)
	)
),

b821
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ DLI "function %ReduceCombined" $=
				(
					/ "avoided shared handler" ^ "%make_unique"
						~ "%shared_move",
						// The handler is still shared, but not stored in \
							multiple actions with shared semantics. As the \
							order of ending of lifetime is bounded \
							determinately, it should be safe.
					/ "kept combining reduction mark untouched when adding \
						guard failed" @ "TCO action",
						// This should have no much effect since the action \
							would normally just be destructor. However, it is \
							better to move torwards the strong exception \
							guarantee (even if this is not guaranteed yet).
					* $comp "rvalue combiner unexpectedly copied" $orig
						(@ "function %ReduceContextFirst" $since b772)
				),
				* "missing cleanup before TCO action"
					@ "function %ReduceCheckedClosure" $since b819,
					// This has significant memory overhead. Any way, it \
						should be.
				(
				/ $forced "return type" @ "function %ResolveName" -> $dep_from
					"%Environment::NameResolution" @ %NPLA
					~ 'observer_ptr<ValueNode>' $dep_from
					("%Environment::Resolve" @ %NPLA);
				/ "stored environment pointer" @ "term reference"
					@ "function %EvaluateIdentifier" $dep_from
					("%TermReference" @ %NPLA)
				),
				/ "vau and evaluation TCO" $=
				(
					/ "improved to support PTC for specific cases" $dep_from
						("ContextNode::IsNotReferenced" @ %NPLA),
						// If the frame is not be lexically hidden, the frame \
							is one of the known dynamic environment pointer \
							before leaving the tail context, or there is some \
							non trivially destructible object lied in the \
							frame, it would not be collected. However, this \
							already serves typical direct or mutual recursive \
							cases in other languages.
					/ DLDI "simplified" ^ $dep_from
						("%EnvironmentSwitcher" @ %NPLA)
				),
				/ @ "function %Forms::BindParameter" $=
				(
					* "missing lifting of bound leaf terms" $since b803
						^ "%LiftToSelf" ~ "%LiftTermRefToSelf",
						// This would cause list processed by '$lambda x x' \
							with reference elements for lvalues.
					/ DLDI "simplified" ^ $dep_from
						("%LiftTermIndirection" @ %NPLA)
				),
				/ DLDI "simplified function %ReduceCheckedClosure" ^ $dep_from
					("%LiftToSelfSafe" @ %NPLA)
			),
			/ %NPLA $=
			(
				/ @ "class %TermReference" $=
				(
					+ "data member %AnchorPtr";
					+ "constructor template",
					- $forced 'yconstfn' @ "constructor, conversion functions"
				),
				/ @ "class %Environment" $=
				(
					(
					+ "alias %NameResolution";
					/ "return type" @ ("function type"
						@ "data member %Resolve", "function %DefaultResolve")
						-> "%NameResolution" ~ 'observer_ptr<ValueNode>'
					),
					+ "functions %(Anchor, IsNotReferenced)"
				),
				+ "class %EnvironmentSwitcher",
				/ "alias %Reducer" @ "class %ContextNode" >> "namespace %NPL",
				/ DLDI "simplified function %ReduceToListValue",
				+ "functions %(LiftTermIndirection; LiftToSelfSafe; \
					ReduceToListValue)"
			),
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				* "unsafe applicative %list" $since b800 ^ ($dep_from
					"%ReduceToListValue" ~ "%ReduceToList") @ %NPLA,
					// This is now also consistent with lifting behavior in \
						implemention by vau.
				+ "applicative 'list&'" ^ ("%ReduceToList" @ %NPLA)
			)
		),
		* "unsequenced %errno access" @ "function %LoadNPLA1File"
			@ %Helper.Initialization $since b506,
			// It would lead to undefined behavior when %errno is implemented \
				as backed by a volatile lvalue (currently at least on platform \
				%Android).
		+ 'ynothrow' @ "constructor" @ "class template %RefHolder"
			@ %YSLib.YObject
	)
),

b820
(
	/ %YBase.YStandardEx $=
	(
		/ "constructor" @ "all specializations" @ "function template %one_shot"
			@ %Functional -> "constructor supporting forwarding",
		/ %ScopeGuard $=
		(
			/ "supported function and state arguments forwarding" @ "function \
				templates %(unique_guard, unique_state_guard)" $dep_from
				("%one_shot" @ %Functional),
			/ @ "constructor template" @ "class templatee %guard" $=
			(
				* $re_add(b717) "missing exclusion of self type" $since b605,
				* "wrong exception-specification" $since b606
					^ "%is_nothrow_constructible" ~ "%is_contructible"
			)
		),
		* "deleted copy and move constructors for trivially destructible types \
			as parameter" @ "class template %optional" $since b591
	),
	/ %YFramework.NPL.NPLA1 $=
	(
		+ DLDI "internal static assertion to ensure thunked implementation as \
			the premise of TCO",
		* $re_add(b755) "missing subterm cleanup before moving result"
			@ "function %ReduceCheckedClosure" $since b735,
			// This would led to redundant term retained when the last \
				reduction status is %ReductionStatus::Clean.
		+ DLI "fused TCO action support" @ "functions %(ReduceCombiner, \
			ReduceAgain)" $dep_from %YBase.StandardEx,
			// Note this still does not guarantee proper tail call.
		/ DLDI "guard for switching environment"
			@ "function %Forms::Eval, %operator() of vau handlers"
			// To reduce redundancy.
		(
			^ "user-defined type of guard function"
				~ "lambda-expressions",
			^ "non-templated guard types"
		)
	)
),

b819
(
	/ $dev DD $term "all" ('守护' -> '守卫'),
		// To prevent from confusion of guards with demons.
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ "supported directly using of next action if current action \
				provided by the parameter is empty" @ "functions"
				("%CombineActions"; $comp "%RelayNext"),
			* $doc "wrong '\pre' command" @ "Doxygen comment"
				@ "function %RelayNext" $since b815
		),
		/ %NPLA1 $=
		(
			/ "supported proper tail call" @ "vau and evaluation calls" $=
			(
				/ $impl "entended capability of internal action type \
					specific to TCO with states for both guards and \
					lifting operations";
				/ "merged call of environment resetting guard for only \
					outermost tail context"
			),
			/ "subterm reduction" @ "functions %(ReduceAgain, ReduceChecked, \
				ReduceChildrenOrdered, ReduceCheckedClosure, \
				Forms::(And, Or, If))" $=
			(
				/ "separated %ContextNode::SkipToNextEvaluation update and \
					next action",
				* "missing guaranteed retrying as %RecuceChecked with \
					direct style implementation" @ "functions other than \
					%ReduceAgain" $since b817,
				/ DLI "simplified TCO actions"
			),
			(
			* "missing clearing %ContextNode::SkipToNextEvaluation before \
				entering evaluation passes" @ "function %ReduceOnce" $since
				b814;
				// For several cases like in %ReduceOnce, setting the flag \
					always to 'true' may skip a whole turn of evaluation of a \
					term. This is not significant when there is an enclosing \
					trampoline to reduce the term again because all the effect \
					remained is %ReductionStatus::Retrying.
			/ DLI "simplified function %ReduceAgain"
				// This would add some overhead when there is an empty current \
					action, which should be rare.
			)
		)
	)
),

b818
(
	/ %YBase.YStandardEx $=
	(
		+ "function template %move_and_swap" @ %Utilities,
		+ "move %operator=" @ "class template %one_shot specializations with \
			explicitly defined move constructor" @ %Functional ^ $dep_from
			("%move_and_swap" @ %Utilities),
			// To support functions without workable move %operator= but with \
				move constructor (e.g. some closure objects), and for better \
				diagnostics of %unique_guard result, etc.
	),
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ DLI "function %CombineActions" @ %NPLA ^ "custom functor"
				~ "lambda-expression"
				// For better performance. This can have effect scale of \
					about 8% in allocation counts.
			/ DLI %NPLA1 $=
			(
				/ "function %Forms::Eval, %operator() of vau handlers"
					^ "custom functor" ~ "lambda expression",
					// For better performance. This can have effect scale of \
						about 230% (i.e. only about 30% of old one) in \
						allocation counts, mostly contributed by elision of \
						%shared_ptr, and now it is almost equal to revisions \
						before b816 where also no %shared_ptr is introduced in \
						evaluation failure (but buggy).
				/ "merged call of term lifting for only outermost tail context \
					for vau and evaluation calls specifically as TCO action"
					@ "function %ReduceCheckedClosure",
					// See $2018-02 @ %Documentation::Workflow.
				/ "resolved term before guard construction"
					@ "function %Forms::Eval"
					// This makes it possible to receive term reference for \
						TCO action in future.
			)
		)
	),
	/ %Tools $=
	(
		/ @ "%install-sysroot.sh" $=
		(
			+ "deployment of NPLA1 library module %SHBuild-YSLib-common.txt in \
				'bin' directory",
			+ "exported variable %CFLAGS_freetype_other with default value \
				provided by attempt of call 'pkg-config --cflags-only-other'"
		);
		/ "building command for library %YFramework"
			@ "%SHBuild-YSLib-build.txt" @ %Scripts $=
		(
			+ "flags from variable %CFLAGS_freetype_other";
			* $comp "missing non-header flags in commands when 'pkg-config' \
				call of 'freetype2' provides other flags"
				$orig (@ "%install-sysroot.sh" @ %Tools $since b563)
				// This did not occur in tested platforms, though. Note \
					'-mms-bitfields' may be provided by MSYS2's \
					mingw-w64-{i686, x86_64}-freetype package, but it was not \
					used supported platforms in YSLib by default.
		)
	)
),

b817
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ DLDI "simplified function %ReduceCheckedClosure" ^ "%std::bind",
			(
			/ "supported thunked tail calls" @ "function %ReduceChildren";
				// This now reuse the implementation of \
					%ReduceChildrenOrdered, although it still does not expose \
					the guarantee of order in the API level.
			/ $comp "supported thunked tail calls" @ "function %ReduceArguments"
			),
			(
			/ DLDI "synchronized use of %ReduceChecked";
			/ @ "functions %ReduceChecked" $=
			(
				/ "supported thunked tail calls",
				+ "return value %ReductionStatus::Retrying"
			);
			/ DLI "simplified functions (%Forms::(And, Or, Eval, If), \
				%operator() of vau handlers)" ^ $dep_from
				("function %CombineActions" @ %NPLA)
			),
			* "exception thrown from function %Forms::Eval or %operator() \
				of vau handlers corrupted environment" $since b815 $dep_from
				("%RelayNext" @ %NPLA)
		),
		/ %NPLA $=
		(
			+ "function %CombineActions";
			/ "ensured order of destruction of captured actions in result as \
				parameter order" @ "function %RelayNext" ^ "%CombineActions"
		)
	)
),

b816
(
	/ %YFramework.NPL.NPLA1 $=
	(
		* "missing restoring environment at current context on exit by \
			exception" @ "%operator()" @ "vau handlers" $since b815,
		- DLI "redundant guard" @ "functions %(ReduceChecked, ReduceChildren)",
		* "missing saving %Context::SkipToNextEvaluation in guard"
			@ "function %ReduceChildren" $since b814,
		/ @ "function %ReduceOnce" $=
		(
			/ DLDI "simplified",
			* "forwarding nested evaluation of subexpressions"
				$dep_to "nested evaluation forwarding fix"
				// This would cause nested evaluation terminate unexpectedly \
					if %ReduceOnce (rather than %Reduce or with a loop) is \
					used in %RelayNext as the first action.
		),
		(
		/ "supported thunked tail calls" @ "function %ReduceCheckedClosure"
			$dep_from "nested evaluation forwarding fix";
		/ $comp "allocated activation records on free store" @ "vau handlers"
			// The memory would still grow due to recursive construction of \
				handlers in %RelayNext. Nevertheless, it would (hopefully) \
				incur no stack overflow in typical host implementations.
		),
		/ DLDI "simplified function %ReduceAgain" $dep_from
			"nested evaluation forwarding fix"
	)
),

b815
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			- "function templates %(RelayNextActions; RelaySetup)";
			- "class template %RelaySetupTest"
			),
			- "function %SetupAction",
			- "function template %ResumeCall",
			/ @ "class %ContextNode" $=
			(
				+ "functions %(SwitchEnvironmentUnchecked; \
					SwitcEnvironment)";
				/ DLDI "simplified constructor"
			)
		),
		/ %NPLA1 $=
		(
			/ DLI "simplified function %ReduceOnce",
			(
			/ "supported thunked tail calls" @ ("function %operator()"
				@ "vau handler", "function Forms::Eval"; "function \
				%ReduceCheckedClosure) ^ ($dep_from
				("%ContextNode::SwitchEnvironmentUnchecked" @ %NPLA),
				"%ystdex::unique_guard") ~ "creation of new local context";
			/ $comp "supported saving current action"
				@ "function %ReduceCheckedClosure"
			),
			/ DLI "evaluated subexpressions with deferred term"
				@ "function %(ReduceChildrenOrdered, Forms::(And, Or, If))"
				// Not all case allow combining next continuation even \
					if %ContextNode::LastStatus is maintained correctly.
		)
	)
),

b814
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			(
			/ DLI "supported saving current action" $=
			(
				/ "function %Forms::Eval and vau handlers"
					^ ("%RelayNext" ~ "%ContextNode::SetupTail") @ %NPLA,
				/ "function %Forms::(If, And, Or)" ^ ("%RelayNext"
					~ "%RelayNextActions") @ %NPLA $dep_from "%ReduceAgain"
			);
			/ DLI "simplified function %ReduceCombined"
				^ ("%RelayNext" ~ "%RelayNextActions") ~ @ %NPLA
			),
			(
			/ "supported thunked tail calls" @ "function %Reduce" $=
			(
				/ "saved and restored current action and skip state"
					$dep_from 
					("%ContextNode::SkipToNextEvaluation" @ %NPLA);
				- "precondition"
				// This is needed, otherwise %REPL::LoadFrom would fail for \
					assertion when worked with following implementation.
			);
			/ $impl "function %ReduceAgain" ^ $dep_from
				("%(ContextNode::SkipToNextEvaluation, RelayNext)"
				~ "%ContextNode::SetupBoundedTail" @ %NPLA);
			/ "function %ReduceOnce" !^ ("%PushActions" @ %NPLA),
			* $comp "state not restored" @ "exited by native exception" $since
				b813 $=
			(
				* "some resources hold by current action not cleared",
				* "assertion failure when entered a new round of reduction \
					immediately"
					// So reduction would fail immediately after a previous \
						failed REPL session.
			)
			)
		),
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				+ "data member %SkipToNextEvaluation",
				- "function template %SetupBoundedTail" $dep_from
					("%RecduceAgain" @ %NPLA1)
			),
			- $revert(b809) "function %PushActions" $dep_from
				("%ReduceOnce" @ %NPLA1)
		)
	)
),

b813
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "functions %(RelayNext, RelaySwitched)";
				/ $revert_ex(b812) $impl "function %PushActions"
					^ "%RelaySwitched",
					// To simplify frame escape. This only has a little \
						overhead shown by times of allocation compared to \
						%MoveAction calls, but far less than with \
						%RelayNextActions.
				/ @ "class %ContextNode" $=
				(
					+ "data member %LastStatus";
					/ "assigned status to %LastStatus in each call"
						@ "function %ApplyTail"
				)
			),
			/ %NPLA1 $=
			(
				* $comp "multiple frames not skipped on retrying" $since b812
					$dep_from ("function %PushAction" @ %NPLA),
					// This can also be achived with delimited marker frame, \
						but it is more complicated.
				(
				/ DLI "simplified functions \
					%(StrictContextHandler::operator(), \
					(ReduceChildrenOrdered; ReduceOrdered; ReduceCombined))"
					^ $dep_from ("%RelayNext" ~ "%RelayNextActions")
					@ %NPLA;
				/ $comp "supported saving current action"
					@ "functions %(StrictContextHandler::operator(), \
					(ReduceChildrenOrdered; ReduceOrdered))"
				)
			)
		)
	)
),

b812
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				+ "2 functions %Push with reducer parameter";
				/ DLDI "simplified function %Push without parameter"
			),
			* $doc "redundant precondition" @ "function template \
				%PushActionsRange"; "function %PushActions") $since b809,
				// The current action would be saved by %Switch before the \
					call to %ContextNode::SetupTail, so it is safe to \
					setup the action.
			/ DLDI "function %SetupAction" ^ "%ImplExpr" ~ "%ImplRet",
			+ "function %MoveAction",
			/ @ "function %PushActions" $=
			(
				(
				* "failed to relay original action" $since b809,
				- "function templates %(PushActionsRange; \
					RelayNestedNextActions)" !^ "%PushActionsRange";
				/ "exposed inner actions to %Delimited" ^ $dep_from
					"%MoveAction" 
					// See the comments on implementation for the purpose.
				),
				/ "avoided copy of handlers when captured to actions"
			)
		),
		/ %NPLA1 $=
		(
			* $revert(b811) "functions %(Forms::(If, And, Or), Reduce, \
				ReduceNested) set wrong trailing actions for subterm \
				evaluation" $since b811,
				// Trailing evaluation passes should be bypassed in the \
					case. The original case was proved correct, guaranteed \
					by the reset operation of each action setup by \
					%NPL::ReduceWithNextActions.
			/ DLDI "simplified function %ReduceOnce",
			* DLDI "ill-formed synchronous referential code" @ "vau handler"
				$since b811,
				// Redundant 'const' would cause it ill-formed.
			* DLDI "unexpected modification on current action for \
				synchronous referential code" @ ("function %ReduceAgain"
				$since b807, "function %ReduceChildren" $since 809)
		)
	)
),

b811
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				* "missing 'ynothrow'" @ "move constructor" $since b788,
					// This is also needed allow capture of local context \
						in vau handler in %NPLA1.
				(
				+ $doc "precondition to enure non-throwing move construction \
					on assigned function object type except for %Reduce";
					// This is not a static assertion to allow functors with \
						%Reducer object captured.
				+ $doc "requirement of non-throwing move \
					construction on %Reducer type";
				+ 'ynothrow' @ "function %Pop";
				+ "function %Transit";
				/ "changed termination condition" @ "function %Rewrite"
				)
			),
			/ "moved passed by value parameter" @ "function templates \
				%(RelayNextActions, RelayNestedNextActions)",
				// This ensures the parameter not to be copied unnecessarily, \
					while still capable to have stored value bound during the \
					whole call.
			(
			+ "class tmplate %RelaySetupTest; function templates \
				%RelaySetup";
			/ "supported overriding result by setup routines"
				@ "function template %RelayNextActions"
			)
		),
		/ %NPLA1 $=
		(
			* $doc "redundant precondition" @ "function %ReduceOnce" $since
				b809,
			(
			/ DLDI "function %ReduceFirst" ^ "%ReduceOnce" ~ "%ReduceNested";
			- $revert(b807) "function %ReduceNested"
			),
			/ $comp $revert(b810) "avoided trailing actions exposed as actions"
				// See $2017-12 @ %Documentation::Workflow.
			),
			(
			/ "kept handler in setup function to make it live long enough"
				@ "function %ReduceCombined with asynchronous call";
			/ "supported thunked tail calls"
				@ "function %StrictContextHandler::operator()";
			/ "setup current action" @ "vau handler calls"
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		* $doc "spelling error" @ "comments" @ "function template %general_cast"
			@ %Cast $orig (@ %YCast $since b175),
		- DLDI "redundant inclusion %TypeTraits" @ %Exception
	)
),

b810
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			/ "supported thunked tail calls" @ (("function %ReduceOrdered"
				^ "%CheckNorm"; "function %ReduceChildrenOrdered")
				^ "%RelayNextActions", "function %Forms::Eval"
				^ "%ContextNode::SetupTail"),
			/ $forced DLDI "functions %(Forms::(If, And, Or), Reduce, \
				ReduceNested)" $dep_from ("%ContextNode::Reducer" @ %NPLA),
			/ $forced DLDI "functions %(ReduceOrdered, ReduceCombined, \
				Forms::(And, Or, If))" $dep_from
				("%RelayNextActions" @ %NPLA),
			/ @ "function %ReduceNested" $=
			(
				/ $forced DLDI $dep_from ("%RelayNestedNextActions" @ %NPLA),
				/ DLDI ^ $dep_from "%ContextNode::(Push, Pop)";
				* "trailing actions exposed as actions" $since b808
					^ $dep_from ("%ContextNode::Push" @ %NPLA)
			)
		),
		/ %NPLA $=
		(
			/ @ "class %ContextNode" $=
			(
				- "parameters" @ "type %Reducer, function %ApplyTail";
				(
				- $foced "1st parameter" @ "functions %(ApplyTail; Rewrite)";
				/ $forced DLDI "function %RewriteGuarded"
				),
				/ $forced DLDI "function template %SetupBoundedTail",
				/ "%TailAction" => "%Current",
				+ "data member %Delimited; functions %(Push, Pop)"
			),
			/ $doc "tail actions" => "current actions",
			/ "supported variadic arguments" @ "function template %ResumeCall",
			(
			/ $forced "function templates %(ReduceWithNextActions, \
				ReduceWithNestedNextActions)"
				-> "%RelayNextActions, RelayNestedNextActions" $dep_from
				"%(ContextNode::Reducer, ResumeCall)";
			/ $forced DLDI "function template %PushActionsRange" $dep_from
				"%ContextNode::Reducer"
			),
			/ "all forwarding function templates" ^ "%invoke" ~ "%call"
				$effective @ "%(ResumeCall, RelayNextActions, \
				PushActionsRange)" $dep_from %YBase.YStandardEx.Functional
		)
	),
	/ %YBase.YStandardEx $=
	(
		- DLDI "unused parameter" @ "function templates %(owns_any, \
			owns_nonnull)#1" @ %Memory
			// To eliminate Clang++ warning: [-Wunused-parameter].
		/ %Functional $=
		(
			/ @ "class template %call_projection" $=
			(
				/ $dev "trailing-return-type"
					@ "all static member function templates" ^ 'yimpl',
				/ "static member function templates %(call, invoke) for tuple \
					instances" => "%(apply_call, apply_invoke)"
					// To reduce potential ambiguity.
			);
			/ "disambiguated %(invoke, apply_call, apply_invoke)"
				@ "class template %expand_proxy" $=
			(
				+ "using-declaration",
				+ "function template"
			)
		)
	)
),

b809
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			(
			+ "function template %ResumeCall",
			+ DLDI 'const' @ "reducer parameter type" @ "setup tail action"
				@ "function template %ReduceWithNextActions",
			/ "return type 'ReductionStatus'" -> 'void' @ ("function templates \
				%(ReduceWithNestedNextActions; ReduceWithNextActions)"
				^ $dep_from "%ResumeCall"), "(function template %PushRange; \
				function %Push), function template %SetupBoundedTail; function \
				template %SetupTail",
				// Since this is not always returns across term boundries, \
					it should better not imply a default status.
			+ "function %SetupAction";
			/ "member function %ContextNode::Push, member function \
				template %PushRange)" -> "(function %PushActions, function \
				template %PushActionsRange) which saving current tail \
				action before next reduction"
				^ "%(ReduceWithNestedNextActions, SetupAction)")
			),
			* "wrong use of 'std::move' on next action" @ "function template \
				%ReduceWithNestedNextActions" $since b808,
			+ '&&' @ "parameter" @ "function template %(SetupTail, \
				SetupBoundedTail)" @ "class %ContextNode"
				// To avoid excessive memory allocation, also better \
					performance for debugging.
		),
		/ %NPLA1 $=
		(
			/ DLDI "avoided call of %ReduceChildrenOrdered for leaf node"
				@ "function %ReduceOrdered",
				// A minor optimization.
			* "stray retrying status possibly left not reduced"
				@ "functions %(ReduceChildrenOrdered; ReduceOrdered)" $since
				b807 ^ "%ReduceChecked" ~ "%Reduce",
				// Other functions are not effected since only these ones \
					are intended to be bound to forms like '$sequence' \
					directly.
			/ $forced DLDI "functions %(ReduceCombined, ReduceChecked, \
				Forms::(And, Or, If))" $dep_from
				("%ReduceWithNextActions" @ %NPLA),
			/ $forced DLDI "function %ReduceAgain" $dep_from
				("%ContextNode::SetupBoundedTail" @ %NPLA),
			/ @ "function %ReduceChildren#1" $=
			(
				* "missing keeping precondition for %Reduce" $since b807
					^ "%ystdex::swap_guard" $dep_to
					"saved tail action before children reduction",
				* "missing keeping full reduction on retrying status"
					$since b807 ^ "%ReduceChecked" ~ "%Reduce"
			),
			(
			/ "function %ReduceOnce" $=
			(
				/ $forced DLDI $dep_from ("%ContextNode::Push" @ %NPLA);
				/ $comp "saved current tail action before leaf and branch \
					reduction"
			);
			/ $forced DLDI $dep_from @ "function %ReduceNested"
				("%ReduceWithNestedNextActions" @ %NPLA),
				// Some tail actions are still lost. This is to be resolved \
					with more actions differentiated for different activation \
					records.
			/ "function %ReduceCombined" $=
			(
				/ $impl "simplified";
				/ $comp $forced DLDI $dep_from
					("%ReduceWithNextActions" @ %NPLA)
			)
			),
			/ DLDI "internal extractor" ^ "non-throwing exception \
				specifications" @ "function %ReduceCombined"
		)
	)
),

b808
(
	/ "function templates %(unique_guard, unique_state_guard)"
		%YBase.YStandard.ScopeGuard $=
	(
		* $revert_ex(b779) "empty state forwarded by default" $since b779
			$dep_to "invalid guard initialization",
			// This broke compatibility as well as consistency with \
				%ystdex::make_guard.
		* "missing arguments" @ "exception specification" $since b779
	),
	* $comp "guard disabled without non-empty state passed to \
		%ystdex::unique_ptr" $since b779 $dep_from
		"invalid guard initialization" $effective @ ("function template \
		%AddExitGuard" @ %YSLib.Core.YApplication, "static member function \
		%WindowThread::DefaultGenerateGuard" @ %Helper.HostRenderer,
		"member function %DirectoryFindData::GetNodeCategory"
		@ %YCLib_(Win32).MinGW32) @ %YFramework,
	/ %YFramework $=
	(
		/ @ "constructor templates with function object"
			@ "class template specialization %GHEvent" @ %YSLib.Core.YEvent $=
		(
			(
			/ $revert(b494) "direct '_fCallable'"
				-> "rvalue references for callable type '_fCallable&&'"
				@ "constructor %GHEvent with precisely matched callable object \
				parameter";
				// Move-only functions are now supported by a style of \
					forwarding call wrapper. See $2014-04 @ \
					%Documentation::Workflow. This is also \
					consistent to avoid the bug below.
			* $comp "ambiguity for imprecisely match function object as 1st \
				argument to construct" $since b494
				// For example, an instance of %std::bind result.
			),
			* "missing decaying target type" @ "%enable_if_t test" $since b494
		),
		/ %NPL $=
		(
			+ "function templates %(ReduceWithNextActions; \
				ReduceWithNestedNextActions)" @ %NPLA,
			/ %NPLA1 $=
			(
				/ "supported thunked tail calls" $=
				(
					/ @ "functions %ReduceNested"
						^ $dep_from ("%ReduceWithNestedNextActions" @ %NPLA),
					/ @ "functions %((Forms::(If, And, Or)), ReduceCombined)"
						^ $dep_from ("%ReduceWithNextActions" @ %NPLA)
				),
				/ @ "function %ReduceFirst" $=
				(
					/ DLDI ^ $dep_from "%ReduceNested";
					* "invalid state set for branch node"
						@ "function %ReduceFirst" $since b807
						// The wrong behavior was caused by the bug of \
							%ystdex::unique_guard. However, the real bug here \
							is originally a typo to misuse 'unique_guard' \
							instead of 'make_guard', even if now it should \
							dismiss the guard to cleanup the tail action in \
							time when retrying is needed. This is also \
							corrected in an inactive referential implementaion \
							protected by 'false' conditional inclusion in \
							%ReduceNested.
				),
				/ DLDI "simplified function %ReduceAgain"
					^ "%ContextNode::SetupBoundedTail",
				/ "reduced directly on term parameter"
					~ "reduced in new term and copied back the result"
					@ "function %ReduceCheckedClosure"
					// This makes it easy to transform to CPS style, also \
						more efficient for direct-style calls.
			)
		)
	),
	/ %YBase.YStandardEx $=
	(
		* $re_ex(b750) "missing check for first element in non empty sequence"
			@ "function templates %for_each_if" @ %Algorithm
			$since b531,
			// The bug fix was still wrong since b750 because of typo.
		* "missing wrapping to move iterator" @ "function template %concat#2"
			@ %Container $since b546
	)
),

b807
(
	/ %YFramework.NPL $=
	(
		/ %NPLA $=
		(
			+ "functions %(CombineReductionResult; \
				CombineSequenceReductionResult)",
			/ DLDI "simplified member function %PassesCombiner::operator()"
				^ $dep_from "%CombineReductionResult",
			/ @ "class %ContextNode" $=
			(
				(
				+ "function %Switch";
				/ DLDI "simplified function %ApplyTail" ^ "%Switch",
				),
				(
					+ "function template %SetupBoundedTail",
					+ "function template %PushRange" ^ $dep_from
						"%(CombineSequenceReductionResult, Switch)";
					+ "function function %Push" ^ "%PushRange"
				),
				/ @ "function %Rewrite" $=
				(
					/ "lifted reduce parameter out of loop"
						^ "%SetupTail" $dep_from "decoupling reduction status",
						// This depends on correct state management on tail \
							action.
					(
					/ "loop invariant" ^ "%TailAction" ~ "%CheckReducible";
						// See $2017-10 @ \
							%Documentation::Workflow.
					/ $forced "return value determination" ^ "%CheckNorm"
						~ "%TailAction call results"
						// This is consistent to new loop invariant.
					)
				)
			)
		),
		/ %NPLA1 $=
		(
			(
			+ "function %ReduceNested";
			/ @ "function %ReductionFirst" $=
			(
				/ DLDI "function %ReduceFirst" ^ "%ReduceNested" $dep_to
					"direct nested reduction";
				/ $impl "deferred reduction" ^ "%ContextNode::SetupTail"
					~ "%ReduceNested"
					// This does not require %ReduceNested but it is \
						preserved for reference.
			)
			),
			/ @ "function %ReduceOnce" $=
			(
				/ "expanded handlers as tail calls" ^ ($dep_from
					("%ContextNode::Push" ~ "%ContextNode::SetupTail")
					@ %NPLA) $dep_from "direct nested reduction";
				* $comp "local term and context parameter not bound in \
					continuations" @ "function %CallOnce" $since b806
					// Thus it could be wrong when not in the loop of \
						%Context::Rewrite directly.
			),
			(
			+ "function %ReduceAgain" ^ $dep_from
				("%ContextNode::PrependTail" @ %NPLA);
			/ "trivial retrying" ^ "%ReduceAgain" @ %NPLA1 $effective
				@ ("functions %(ReduceOnce, ReduceTail, ReduceLeafToken, \
				Forms::(And, Or, If))") $dep_to "decoupling reduction status"
				// This decouples reduction status as condition of loop in \
					rewriting and as jump action to specific target. Now no \
					%ReduceOnce is implicitly depended as the default \
					reduction action.
			),
			/ $comp "%Reduce allowed returning %ReductionStatus::Retrying"
				$dep_from ("%ContextNode::Rewrite" @ %NPLA)
		)
	),
	* "wrong template argument" @ "return type" @ "function templates \
		%unique_guard" @ %YBase.YStandardEx.ScopeGuard $since b686
),

b806
(
	/ %Tools.Scripts $=
	(
		/ @ "%SHBuild-YSLib-common.txt" $=
		(
			* "wrong toolchain default value"
				$orig (@ "%SHBuild-common-toolchain.sh" $since b791) $=
			(
				* "missing setting default value 'g++' for variable %CXX",
				* "missing setting variables %(AR, ARFLAGS, LD)",
					// This can occasionally work for %SHBuild except %LD \
						which has value in the script different than default \
						value in %SHBuild.
				* "missing export variables %(CXX, AR, ARFLAGS, LD)"
			),
			* "missing filtered out dynamic library build options for \
				application executable building" @ "%LDFLAGS" $since b805,
			+ "applicative %SHBuild_GetPlatformStrings"
		),
		/ DLDI "simplified %SHBuild-YSLib-build.txt" ^ $dep_from
			("%SHBuild_GetPlatformStrings" @ "%SHBuild-YSLib-common.txt")
	),
	* $impl "ill-formed 'const auto' as function declarator"
		@ "function template %extract_mapped with traling-return-type"
		@ %YBase.YStandard.Container $since b792
		// This was a typo. As per N4687 [dcl.fct]/2, only a single 'auto' is \
			allowed here. Though G++ accepts it, Microsoft VC++ 2017 complains \
			it correctly with (one case which is not well-documented of) error \
			C3551.
	/ %YFramework $=
	(
		/ %YSLib.Core $=
		(
			+ "function %MoveContent" @ "class %ValueNode" @ %ValueNode,
			+ "friend function %swap" @ "class template %GHEvent" @ %YEvent
		),
		/ %NPL $=
		(
			/ %Lexical $=
			(
				+ 'using YSLib::set',
				/ @ "class %LexicalAnalyzer" $=
				(
					/ DLDI "simplified" ^ "brace-initializer '{}', \
						defaulted constructor",
					+ "function %GetLeftQuotes",
					/ "stored left quote positions" @ "function %ParseByte"
				),
				/ DLDI "function %Tokenize" ^ "%string::front" ~ '[0]'
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ "applicative %SHBuild_TrimOptions_" @ "loading forms" $=
				(
					* "subsequent spaces in quoted string wrongly replaced \
						as single space" $since b796,
					* "redundant spaces wrongly added token containing \
						left quote" ^ $dep_from
						("%LexicalAnalyzer::GetLeftQuotes" @ %Lexical)
						// This has efffect on '-I"path"', which would be \
							wrongly converted to deprecated form \
							'-I "path"' (though it still worked).
				),
				/ DLDI "simplified recored getting by cacheing result of \
					%ContextNode::GetRecordRef"
			),
			/ %NPLA $=
			(
				(
				/ DLDI "simplified function %LiftTerm with 2 %TermNode \
					reference parameters" -> "inline function" ^ $dep_from
					("%ValueNode::MoveContent" @ %YSLib.Core.ValueNode);
				+ 'ynothrow' @ "all 3 functions %LiftTerm"
				),
				/ @ "class %ContextNode" $=
				(
					+ "alias %Reducer";
					+ "data member %TailAction";
					+ "function template %SetupTail",
					+ "functions %(ApplyTail; Rewrite, RewriteGuarded)"
						^ $dep_from "%TailAction"
				)
			),
			/ %NPLA1 $=
			(
				/ DLDI "simplified %ContextNode::GetBindingsRef call"
					@ "vau handler" @ "namespace %Forms",
				/ "direct reduction for proper tail call"
					@ "functions %ReduceTail" ^ "%ReductionStatus::Retrying"
					~ "recursive %Reduce call",
				(
				+ "function %ReduceOnce with perper tail calls" $=
				(
					// This is exact the %Reduce without outer loop, with some \
						tail call considerations. The calls of tail contexts \
						now use parent context directly, which should be \
						equivalent to previous implementation.
					/ $impl "direct proper tail call"
						^ "%ReductionStatus::Retrying",
					/ $impl "reduction of evaluation passes for perper tail \
						call" ^ $dep_from ("%ContextNode::SetupTail" @ %NPLA)
				);
				/ DLDI "simplified function %Reduce" ^ $dep_from
					("%ReduceOnce", "%ContextNodeRewrite" @ %NPLA),
					// Now the loop is implemented in %ContextNode::Rewrite. \
						It is easier to implement proper tail calls.
				/ $forced $impl "functions %(ReduceFirst, ReduceChecked, \
					ReduceChildren, ReduceChildrenOrdered, \
					 REPLContext::(LoadFrom#2, Process#3))"
					^ $dep_from "%ReduceContextGuarded"
				)
			)
		)
	)
),

b805
(
	/ %YFramework $=
	(
		/ %YSLib $=
		(
			/ %Service $=
			(
				+ "function templates %(SkipBOM; OpenSkippedBOMtream)"
					@ %TextFile,
				/ @ "class %SharedInputMappedFileStream" @ %File $=
				(
					/ $revert(b804) "reverted as nonmovable class" $=
					(
						- "move constructor";
						* $comp "invalid state of lock after move"
							@ "move constructor" $since b804,
							// This would cause invalid reference on \
								%UniqueFile.
						/ "base class %SharedIndirectLock<const UniqueFile>"
							-> "%SharedIndirectLockGuard<const UniqueFile>"
					),
					/ "%operator bool" -> ('using basic_ios::operator!;',
						'using basic_ios::operator bool;'),
					* $comp "seeking did not work" $since b724 $dep_from
						("%basic_membuf" @ %YBase.YStandardEx.StreamBuffer)
				)
			),
			/ $re_add(b774) @ "class %ValueNode" @ %Core.ValueNode $=
			(
				// Avoid redundant object creation like unifying assignment. \
					Note even with WG21 P0135R1, the construction of parameter \
					will still not be elided.
				/ "constructor with 1 container parameter"
					-> "2 constructors with container reference parameter"
				/ "constructor template with container parameter as 1st \
					parameter" -> "2 constructors template with container \
					reference parameter as 1st parameter"
			)
		),
		/ %NPL $=
		(
			+ "function template %TryLoadSouce" @ %NPLA1,
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					/ "applicative 'nullv?'" => 'nullrv?',
						// To be consistent with 'eqv?' and 'eqr?'.
					+ "applicative 'system-quote'",
					/ "applicatives %(SHBuild_EchoVar_N, SHBuild_BuildGCH)"
						>> ("%SHBuild-YSLib-common.txt" @ %Tools.Scripts)
				)
			)
		)
	),
	/ %Tools $=
	(
		/ %SHBuld.Main $=
		(
			/ $forced DLDI "simplified command 'RunNPLFile'" $dep_from
				("move constructor %SharedInputMappedFileStream"
				@ %YFramework.YSLib.Service.File)
				$= (/ DLDI ^ $dep_from ("%OpenSkippedBOMtream"
					@ %YFramework.YSLib.Service.TextFile)),
			/ DLDI "simplified command 'RunNPL', 'RunNPLFile'" ^ $dep_from
				("%TryLoadSouce" @ %YFramework.NPL.NPLA1)
		),
		/ %Scripts $=
		(
			/ @ "%SHBuild-YSLib-build.txt" $=
			(
				* DLDI "redundant %AR assignment"
					$orig (@ "SHBuild-YSLib-common.sh" $since b795),
				/ $forced DLDI $dep_from
					('build-with-conf-opt' @ "%SHBuild-YSLib-common.txt"),
				* "missing quotes for %SHBuild commond from environment \
					%SHBuild" $orig (@ "%SHBuild-YSLib-common.sh"$since b791)
					// This should not cause troble normally because it was \
						mostly only used internally, although it was a real bug.
					$= (/ $impl ^ $dep_from
						('system-quote' %YFramework.NPL.Dependency))
			),
			/ @ "applicative 'build-with-conf-opt'"
				@ "%SHBuild-YSLib-common.txt" $=
			(
				(
				+ "application mode support";
				+ "'-mwindows' and detection output" @ "%LDFLAGS"
					@ "application mode and %SHBuild_NoAdjustSubsystem is not \
					set" @ "platform %Win32"
				),
				/ DLDI "simplified applicative 'system-or-puts'"
			),
			- "exports %(SHBuild_YSLib_LibNames, SHBuild_YSLib_Flags, \
				SHBuild_Debug, SHBuild_Static)" @ "%SHBuild-YSLib-BuildApp.sh"
		)
	),
	* "missing protected overrider %(seekoff, seekpos)"
		@ "class template %basic_membuf" @ %YBase.YStandardEx.StreamBuffer
		$since b711
),

b804
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA1 $=
			(
				/ @ "namespace %Forms" $=
				(
					+ "functions %(Equal, EqualLeaf)",
					/ "extended %EqualValue of list comparison for object \
						language"
				),
				/ DLDI "simplified" ^ '<const TermReference>'
					~ "%ystdex::as_const" $effective
					"functions %Forms::(Cons, Eval)"
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI @ "loading forms" $=
				(
					* $comp "applicative 'eqv?' always resulted in #t for lists"
						$since b789 $dep_from ("%Forms::EqualValue" @ %NPLA1),
					(
					+ "applicative 'eql'?" $dep_from
						("%Forms::EqualLeaf" @ %NPLA1);
					/ DLDI "applicative 'not?'" ^ 'eql?' ~ 'eqv?'
						// This is efficient as before.
					),
					+ "applicative 'eq?'" $dep_from ("%Forms::Equal" @ %NPLA1),
					+ "applicative 'eqr?'"
				)
			),
			/ %NPLA $=
			(
				/ DLDI "explicitly qualified 'const'" ^ '<const TermReference>'
					$effective "functions %(ReferenceTerm#1, LiftTermOrRef, \
					LiftTermRefToSelf, LiftToReference)",
				(
				/ "avoided special handling for %TokenValue"
					@ "lifting routines" $=
				(
				/ "functions %LiftTermRef#(1, 2)" ^ "%ValueObject"
					~ "%LiftTermObject";
				/ $comp "all type of values are treated the same"
				);
				- "function %LiftTermObject"
				),
				/ @ "class %ContextNode" $=
				(
					+ DLDI "brace-initializer '{}'" @ "data member %Trace",
					+ "copying %Trace" @ "copy constructor" $dep_from
						%YFramework.YCLib.Debug,
					(
					* "missing swapping of %Trace" @ "function %swap" $since
						b803 ^ $dep_from ("%swap" @ %YCLib.Debug);
					* $comp "missing moving of %Trace" @ "move constructor"
						$since b803
					)
				)
			)
		),
		* "deleted move constructor" @ "class %SharedInputMappedFileStream"
			@ %YSLib.Service.File $since b724 $=
		(
			(
			/ $impl ^ "%SharedIndirectLock" ~ "%SharedIndirectLockGuard";
			/ $forced DLDI "constructor with 1 parameter",
			),
			+ "move constructor"
				// Implicit one would still does not work for %std::basic_ios. \
					It is still not necessary to initialize the base \
					%std::basic_ios instance explicitly for semantic reasons.
		),
		/ @ "class %Logger" @ %YCLib.Debug $=
		(
			* "missing copying %FilterLevel" @ "(copy, move) constructors"
				$since b803,
			(
			+ "friend function %swap";
			/ DLDI "simplified move constructor" ^ "%swap"
			)
		)
	),
	/ %Tools $=
	(
		/ "main function" @ %SHBuild.Main $=
		(
			/ @ "command 'RunNPLFile'" $=
			(
				+ "shared input stream support" ^ "%SharedInputMappedFileStream"
					~ "%ifstream",
				+ "support for ignoring UTF BOM" $dep_from
					%YFramework.YSLib.Service.File
			)
			* "unexpected NPLA1 tracing messages" @ "running command 'RunNPL' \
				or 'RunNPLFile'" @ "stage 1 execution" $since b803 $dep_from
				("copy constructor %ContextNode" @ %YFramework.NPL.NPLA)
				// See $2017-09 @ %Documentation::Workflow.
				$= (/ $impl "setting filter level to %Informative" ~ "%Debug")
		),
		/ %Scripts $=
		(
			/ @ "%(SHBuild-YSLib-common.txt, SHBuild-YSLib-build.txt)" $=
			(
				/ $lib $design "normalized *.txt with CR+LF EOL",
				/ "saved *.txt as UTF-8 + BOM" $dep_from %SHBuild.Main
			),
			/ @ "%SHBuild-YSLib-common.txt" $=
			(
				* "operatives ('$assert-nonempty', '$set-system-var!')"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b795),
				* "operative '$env-de!'"
					$orig (@ "%SHBuild-common-toolchain.sh" $since b791)
			)
		),
		* $comp "failed 1st stage boostraping caused by exception raised by \
			mismatched type of unevaluated symbols" $since b803 $dep_from
			(('$assert-nonempty', '$set-system-var!', '$env-de!')
			@ "%SHBuild-YSLib-common.txt" @ %Scripts)
			// Mangled type names \
				'N6ystdex14derived_entityINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJN3NPL7NPLATagEEEE' \
				and 'NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE' are \
				shown in exception message (of %ystdex::bad_any_cast) in case \
				using libstdc++.
	)
),

b803
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "function templates %(TraverseSubnodes, PrintContainedNodes; \
					TraverseNodeChildAndPrint)",
				/ DLDI "simplified function %PrintNode" ^ $dep_from
					"%TraverseSubnodes",
				(
				/ DLDI "simplified function %PrintNodeChild" ^ $dep_from
					"%TraverseNodeChildAndPrint" ~ "%PrintNodeChild";
				- "function %PrintNodeChild"
				),
				- "all 2 function templates %InvokePasses",
				+ "data member 'YSLib::Logger Trace;'" @ "class %ContextNode"
					$dep_from ("class %Logger" @ %YCLib.Debug),
				(
				+ "function %LiftTermOrRefToSelf";
				/ DLDI "function %(LiftTermToSelf, LiftToOther)"
					^ "%LiftTermRefToSelf" ~ "%LiftTermOrRef"
				)
			),
			/ %NPLA1 $=
			(
				(
				/ DLDI "function %Reduce" ^ "%ContextNode members"
					~ "functions %(InvokeGuard, InvokeList, InvokeLeaf)";
				- "functions %(InvokeGuard, InvokeList, InvokeLeaf)"
				),
				- "function %AccessLiteralPassesRef" $dep_from %Dependency,
				(
				/ DLDI "function %EvaluateLeafToken"
					^ "%ContextNode::EvaluateLiteral"
					~ "function %InvokeLiteral";
				- "function %InvokeLiteral"
				),
				(
				/ DLDI ^ "%ContextNode members"
					~ "functions %(AccessListPassesRef, AccessLeafPassesRef)"
					@ "function %SetupDefaultInterpretation";
				- "functions %(AccessListPassesRef, AccessLeafPassesRef)"
				),
				(
				/ DLDI ^ "%ContextNode::Guard" ~ "function \
					%AccessGuardPassesRef" @ "function %SetupTraceDepth";
				- "function %AccessGuardPassesRef"
				),
				/ @ "namespace %Forms" $=
				(
					/ "simplified trace" ^ $dep_from ("%ContextNode::Trace"
						@ %NPLA) ~ "%YTraceDe",
					/ "all non boolean condition treated as '#t'"
						@ "function %If",
					/ "%function %Eval" $=
					(
						/ $impl ^ "%AccessPtr" ~ "%LiftToOther";
						* "unexpected recursive evluations on symbol terms"
							$since b772;
							// The fix would break some code which wrongly \
								assumed it to work.
						* $comp "always convert lvalue operands to \
							rvalues recursively" $since b800,
						// The fix also reduces performance penalty on deep \
							tree transformation of the operand.
					),
					/ DLDI "simplified functions %(Vau, VauWithEnvironment)"
						^ "%ReferenceTerm" ~ "%LiftToSelf",
					/ "operands handling"
						@ "functions %(MatchParameter, BindParameter)" $=
					(
						/ $impl ^ $dep_from ("%LiftTermRefToSelf" @ %NPLA)
							~ "%LiftToSelf";
						* $comp "redundant lvalue-to-rvalue conversion on \
							unbound recursive terms" $since b800
					)
				)
			),
			/ "function %LoadNPLContextForSHBuild" @ %Dependency $=
			(
				/ DLDI ^ "%ContextNode::EvaluateLiteral"
					~ "function %AccessLiteralPassesRef",
				/ DLDI @ "loading forms" $=
				(
					+ $doc "guarantee of no evaluation of bodies"
						@ "operatives ('$vau', '$vaue', '$lambda', '$lambdae')";
					/ "simplified alternative derivation"
						@ "operative '$sequence'" ^ '$set!' ~ '$setrec!',
					/ "simplified operatives ('$defl!', '$defw!')" ^ '$defv!'
						~ ('$def!', '$vau'),
					/ "simplified applicatives %(first, rest, apply)" ^ '$defl!'
						~ ('$def!', '$lambda'),
					/ "simplified applicatives ('list*', %(accl, accr))"
						^ '$defl!' ~ ('$defrec!', '$lambda'),
					/ "simplified operatives ('$cond', '$let*')" ^ '$defv!'
						~ ('$defrec!', '$vau')
				)
			)
		),
		/ %YCLib.Debug $=
		(
			/ @ "class %Logger" $=
			(
				+ DLDI "brace-initializer '{}'" @ "mutex member";
				+ $lib 'DefDeCtor(Logger)';
				+ "constructors allowing specifying filter and sender",
				+ "(copy, move) (constructors; %operator=)"
			),
			/ DLDI "simplified destructor %AndroidLogSender"
				@ "platform %Android" ^ "%ImplDeDtor"
		)
	),
	* "'$if' applicative" @ %Documentation.NPL $since b792
		$dep_from ("%Forms::If" @ %YFramework.NPL.NPLA1)
		// The text contradicted with Scheme RnRS, but was consistent with \
			implementation. This is now corrected after %Forms::If modification.
),

b802
(
	/ %YFramework.NPL $=
	(
		/ %NPLA1 $=
		(
			* "empty lists and symbols could not be referenced" $since b800
				// They are now true first-class objects.
				$= (/ $impl "simplified by referencing term directly"
					@ "function %EvaluateIdentifier"),
			/ @ "namespace %Forms" $=
			(
				* "missing lvalue support" @ "function %MakeEnvironment"
					$since b800 ^ "%ReferenceTerm",
				/ DLDI "protected term reference against unexpected \
					modification on %ReferenceTerm result" @ "functions \
					%(EqualReference, EqualValue, Cons)"
					^ "%ystdex::as_const",
				/ DLDI "simplified vau handlers" $dep_from
					^ "%ReduceCheckedClosure" ~ "%CheckNorm",
				* "unsafe evaluation" @ "function %Eval"
					$since b772 ^ "%ReduceCheckedClosure" ~ "%Reduce"
					// See $2017-09 @ %Documentation::Workflow.
			),
			/ $lib "supported external contexts" @ "class %REPLContext" $=
			(
				(
				+ "3 functions %Prepare";
				(
				+ "2 functions %ReadFrom";
				/ "all 2 functions %LoadFrom" -> "function templates"
					^ "%ReadFrom" ~ "%Process"
				),
				/ "all 2 function without term node" -> "function templates"
					^ "%ReadFrom" ~ "%Reduce"
				),
				(
				+ "function %Process with term node and context parameter";
				/ $dev $design $impl "simplified function %Process with \
					term node parameter" ^ "newly added overload"
				)
			),
			/ "function %ReduceCheckedClosure returned %ReductionStatus \
				value based on resulted term" ^ "%CheckNorm"
		),
		/ "loading forms" @ "function %LoadNPLContextForSHBuild"
			@ %Dependency $=
		(
			+ "operative '$lambdae'",
			+ "applicatives 'lock-environment'; 'make-standard-environment'",
				// Alternative implementation of standard environment \
					construction without dependency on environment locking is \
					also provided. Nevertheless, with environment locking, it \
					is simpler a lot.
			/ $dev $impl "simplified alternative derivation" @ "operative \
				'$sequence'" ^ $dep_from 'make-standard-environment',
			/ $impl @ "applicative 'map-reverse'" $=
			(
				* "invalid exposure of %cxrs" $since b791 ^ ('$let',
					$dep_from 'make-standard-environment'),
				/ "simplified" ^ $dep_from '$lambdae'
			),
			+ $impl 'ynothrow' @ "handler"
				@ "applicative 'weaken-environment'"
		),
		/ @ "function template %ComposeReferencedTermOp" @ %NPLA $=
		(
			/ $dev "trailing-return-type" ^ 'yimpl';
			/ "accepted non-unary functions" ^ "%ystdex::compose_n"
				~ "%ystdex::compose"
		)
	),
	* "strict ISO C++ conformance on declaration of primary template" $effective
		@ "using of %std::hash" @ %YBase.YStandardEx.(Memory, Optional, \
		Rational, StringView) $since b590
		// This behavior was undefined. For clarification, see https://groups.google.com/a/isocpp.org/forum/#!topic/std-discussion/6VNskbSBRIs.
),

b801
(
	+ $re_add(b705) $dev $repo "tag 'V0.8' to revision 672",
	/ %YFramework $=
	(
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			/ DLDI "member function %FileInfo::Read" ^ 'ythrow' ~ 'throw',
				// Also to eliminate G++ warning: [-Wdeprecated].
			/ $re_add(b793) DLI "marked fallthrough" @ "constructor %FileInfo"
				^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ @ "class %Partition" $=
			(
				/ @ "private constructor" $=
				(
					+ DLDI "'YB_NONNULL' attribute for 1st parameter",
					/ "exception messages",
					^ "nested exceptions with %std::errc::io_error on reading \
						failure for verification and finding"
					* "partition initialzation faliure on verifying FAT \
						partition when the 0 sector is not ready and the \
						master partition is valid and readable" $since b611
						// See $2017-08 @ %Documentation::Workflow.
				),
				/ $lib $design "asserting string" @ "function %CreateFSInfo",
			)
		),
		/ %NPL $=
		(
			/ @ "namespace %Forms" @ %NPLA1 $=
			(
				/ DLDI "simplified subterms cleanup"
					!^ "%TermNode::LiftTerm" @ "functions %(And, Or)",
				(
				/ @ "exception messages"
					@ "functions %(ReduceCombined, MatchParameter)" $=
				(
					/ $impl ^ $dep_from ("%TermToString" @ %NPLA);
					/ $comp "compressed external representation of term \
						with subnode number",
				);
				/ $comp "term represented as name if possible"
					@ "exception messages" @ "function %MatchParameter"
				)
			),
			+ "functor %ReferenceTermOp; function template \
				%ComposeReferencedTermOp" @ %NPLA,
			/ "loading forms" @ "function %LoadNPLContextForSHBuild"
				@ %Dependency $=
			(
				+ "applicative 'null?'" => 'nullv?';
				+ "applicative 'null?'" ^ $dep_from
					("%ComposeReferencedTermOp" @ %NPLA)
			)
		),
		* "missing %release call on %UniqueFile after initialization success"
			@ '!__GLIBCXX__' @ "constructor %basic_filebuf with %UniqueFile \
			parameter" @  %YCLib.FileIO $since b709
			// This bug would leave a bad file descriptor in the stream buffer \
				after the constructor call.
	),
	/ %Tools $=
	(
		/ %ProjectGenerator.Main $=
		(
			+ $re_add(b794) '-Wno-noexcept-type' @ "options",
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			* "wrong prefixes for paths in link creation destinations for \
				generatoed .cbp file of YSTest %debug_DLL configurations" $since
				b739
				// This would cause correct .dll files not found on running \
					the built executable files.
		);
		/ $re_ex(b700) "regenerated Code::Blocks projects"
			^ ("%GenerateProjects.sh" @ %Scripts)
	),
	/ %YBase.YStandardEx $=
	(
		* "wrong allocator for internal map violated allocator-aware container \
			requirement on %value_type" @ "class template %mapped_set"
			@ %Set $since b665,
		/ "supported forwarding reference parameters"
			@ "all 3 function templates %quote" @ %String
	)
),

b800
(
	/ %YFramework $=
	(
		/ %NPL $=
		(
			/ %NPLA $=
			(
				+ "class %TermReference, 2 functions %ReferenceTerm; 2 \
					function templates %(AccessTermPtr, AccessTerm), functions \
					%(LiftTermOrRef; LiftToSelf; LiftToOther)",
				/ "function %ReferenceValue" -> "%LiftToReference" $dep_from
					"%LiftTermOrRef",
				- "all 3 functions %LiftTermRef" $dep_from
					("%EvaluateIdentifier" @ %NPLA1),
			),
			/ %NPLA1 $=
			(
				- 'const' @ "return type" @ "function %ResolveName",
				/ @ "namespace %Forms" $=
				(
					+ "type" @ "exception message"
						@ "functions %(WrapOnce, Unwrap)",
					+ "function %ResolveEnvironment for %TermNode reference"
						^ $dep_from ("%ReferenceTerm" @ %NPLA),
					/ "handled %TermReference to allow reference value used as \
						first-class object" $=
					(
						/ "function %(ReduceCombined, Forms::(And, Or, If))"
							^ $dep_from ("%AccessTermPtr" @ %NPLA)
							~ "%AccessPtr",
						/ "functions %Forms::(VauWithEnvironment, Eval)"
							^ $dep_from "%ResolveEnvironment",
						/ "function templates %Forms::(CallUnaryAs, \
							CallBinaryAs, CallBinaryFold)" ^ $dep_from
							("%NPL::AccessTerm" @ %NPLA),
						/ "functions %Forms::(Eval, ValueOf)" ^ $dep_from
							("%LiftToOther" @ %NPLA) ~ "%LiftTerm"
							// See $2017-08 @ \
								%Documentation::Workflow.
						/ "function %Forms(DefineLazy, DefineWithNoRecursion, \
							DefineWithRecursion, Lambda, Vau, \
							VauWithEnvironment)" ^ $dep_from "%LiftToSelf",
						/ "functions %Forms::(EqualReference, \
							EqualValue, MatchParameter, BindParameter, \
							ReduceCheckedClosure)" ^ $dep_from
							("%ReferenceTerm" @ %NPLA),
						/ "handled reference term" @ "function %Forms::Cons"
					);
					* "list reference cannot be replaced as real lvalue"
						@ "function %EvaluateIdentifier" $since b768 $dep_from
						"%ResolveName"
						$= (/ $revert_ex(b799) $impl ^ ($dep_from
							"%(ReferenceTerm, TermReference)" @ %NPLA)
							~ "%LiftTermRef")
					),
					/ $comp ("allowed returning list as last element"
						~ "non-list value") @ "function %Or"
				)
			),
			/ $forced DLDI "handled %TermReference" @ "loading forms"
				@ "function %LoadNPLContextForSHBuild"
				@ %Dependency $dep_from ("%EvaluateIdentifier" @ %NPLA1) $=
			(
				/ "%ref" ^ (("%LiftToReference" ~ "%ReferenceValue") @ %NPLA),
				/ 'bound?' ^ $dep_from ("%AccessTermPtr" @ %NPLA)
					~ "%AccessPtr",
				/ ('string<-', 'regex-match?') ^ $dep_from
					("%AccessTerm" @ %NPLA) ~ "%Access"
			)
		),
		/ %YCLib $=
		(
			/ "limited %FAT::LFN::(MaxLength, MaxMBCSLength) value as '255'"
				 @ FileSystem,
				// See $2017-08 @ %Documentation::Workflow.
			/ @ "platform %DS" @ %NativeAPI $=
			(
				+ "worked arounded missing %__sync_synchronize stub for \
					devkitARM r46",
					// See https://devkitpro.org/viewtopic.php?f=13&t=8643&start=10.
				/ $impl ^ "%::isDSiMode" ~ "%::__dsimode" $dep_from
					"libnds update"
			),
			/ @ "function %omode_conv with %std::ios_base::openmode parameter"
				@ %FileIO $=
			(
				/ $impl "simplified" ^ "%OpenMode::CreateExclusive"
					~ "%OpenMode::(Create, Exclusive)";
				* "wrong result for %platform::ios_nocreate"  $since b722
			),
			/ $re_add(b793) "marked fallthrough" @ "function \
				%ExecuteShellCommand" @ "platform %Win32" @ %HostedGUI
				^ "%YB_ATTR_fallthrough"
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		),
		/ @ "platform %DS" @ %'YCLib_(DS)'.DSIO $=
		(
			* "wrong check for exclusively creation flags"
				@ "constructor %FileInfo" $since b722,
			(
			/ @ "class %DEntry" $=
			(
				/ DLDI "simplified function %QueryNextFrom"
					$= (- "redundant volume check"),
				/ @ "constructors" $=
				(
					* "name position not correctly initialized for all cases \
						require the value" $since b656,
					* "missing keeping last component name after check for path"
						@ $since b656;
					* $comp "%std::errc::not_a_directory thrown for leaf with \
						%OpenMode::CreateExclusive" $since b721
						// The value of %errno is overriden later.
				)
			);
			* $comp "%Partition::IncrementPosition assertion failure"
				@ "%debug configurations" $since b762
			)
		),
		/ $re_add(b793) "marked fallthrough" @ "function \
			%TryCategorizeNodeDevice" @ %'Helper_(Win32)'.MinGW32
			^ "%YB_ATTR_fallthrough",
			// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
		/ DLDI "cast to %SDst" @ %YSLib.Service.TextRenderer
			// To eliminate warning: [-Wsign-conversion].
	),
	/ %Tools $=
	(
		/ @ "default value" @ "variable %CXXFLAGS_IMPL_WARNING"
			@ "%Toolchain.options.mk" @ %Scripts $=
		(
			+ $re_add(b794) '-Wno-noexcept-type',
				// To eliminate G++ 7 warning: [-Wnoexcept-type].
			+ '-Wno-ignored-attributes'
				// To eliminate G++ 7 warning: [-Wignored-attributes] which is \
					enabled by default. It is at least offending to \
					%PixelQuadruple in %YFramework.YCLib.Viedo and being hard \
					to turned off by pragma in single file since it may \
					propagate in template declarations.
		),
		/ %RevisionPatcher.Main $=
		(
			* "wrongly ignored newly added files"
				@ %RevisionPatcher.Main $since b791
				$= (/ $revert_ex(b791) $impl "detected prefix without 'a/'"),
			/ $re_add(b793) "marked fallthrough" ^ "%YB_ATTR_fallthrough",
				// To eliminate G++ 7 warning: [-Wimplicit-fallthrough=].
			/ DLDI "simplified patched lines filtering"
		)
	),
	/ %YBase.LibDefect $=
	(
		/ %String $=
		(
			+ "support of %_GLIBCXX_USE_CXX11_ABI detection",
			+ "support of %_GLIBCXX_USE_C99_STDLIB detection"
		),
		+ "support of GCC greater than 7.0 which has bug 58938 fixed"
			@ %Exception,
			// NOTE: Other headers like %YBase.YStandard.Future are still to \
				be updated. Currently these features are not required at lease \
				on platform %DS.
		+ "support of %__ISO_C_VISIBLE detection" @ 'defined(_NEWLIB_VERSION)'
			@ %CStandardIO
			// To eliminate GCC warning: [-Wredundant-decls].
	),
	* $comp "file creation failure with %errno value 138" @ "platform %DS"
		@ "function %LoadNPLA1File" @ %Helper.Initialization $since b721
		$dep_from ("constructors %DEntry" @ %'YCLib_(DS)'.DSIO),
		// See also %'YCLib_(DS)'.DSIO correction for %FileInfo constructor \
			which is hidden by this bug.
	/ DLP "platform %MinGW32 toolchain"
	(
		^ $resolve(#30) $re_ex(b700) "MinGW[gcc version 7.1.0 (Rev2, Built by \
			MSYS2 project)] mingw32/mingw-w64-i686-gcc-7.1.0-2" ~ "MinGW[gcc \
			version 5.4.0 (Rev3, Built by MSYS2 project)] \
			mingw32/mingw-w64-i686-gcc-5.4.0-1" @ "platform %MinGW32",
			// Unchanged: Target=i686-w64-mingw32, Thread model: posix, \
				Exceptions implementation: Dwarf2.
		^ $re_ex(b700) "mingw-w64-i686-binutils 2.28-2 from MSYS2"
			~ "mingw-w64-i686-binutils 2.25.1-5"
	),
	/ $re_ex(b700) "updated %SUBTITLE2 year" @ "makefile" @ "platform %DS"
		@ "project %YSTest",
	/ $re_ex(b700) "regenerated Code::Blocks projects"
		^ ("%GenerateProjects.sh" @ %Tools.Scripts)
);

////

