/*
	© 2010-2015 FrankHB.

	This file is part of the YSLib project, and may only be used,
	modified, and distributed under the terms of the YSLib project
	license, LICENSE.TXT.  By continuing to use, modify, or distribute
	this file you indicate that you have read the license and
	understand and accept it fully.
*/

/*!	\file Definitions.txt
\ingroup Documentation
\brief 方法和公共域定义与说明。
\version r13018
\author FrankHB <frankhb1989@gmail.com>
\since 早于 build 132
\par 创建时间:
	2010-01-26 19:34:51 +0800
\par 修改时间:
	2015-01-22 18:53 +0800
\par 文本编码:
	UTF-8
\par 模块名称:
	Documentation::Definitions
*/


/*

体例说明：
引用标记参见 [Documentation::CommonRules @@0.1] 。

基本内容参考 [Documentation::CommonRules @@1.3.1] 。

以下为附加语法和语义说明。

$ //作用于受限制的字符序列（语言规范中定义的标识符或关键字）前，表示此字符序列不由编译程序提供语义实现。

$region $name_expr //表示字符序列 $name_expr 标记的位置，可用于标记段落。供文档规格化工具使用。

$import //导入实体。
$export //导出实体，显式使用表示强调无论实现如何，应向外部提供形式上和之后说明一致的接口。

$code {} //表示（源）代码片段。
$dir //表示目录。
$header $header_n //头文件：指称一个头文件。头文件名标识字符序列 $header_n 是可变部分，同语言标准中 #include $header_n 的用法，或为通配符。
$unit $unit_n //单元：指称一个编译单元（一般应为语言规范中定义的翻译单元）。单元名称 $unit_n 为可变部分，是语言规范中定义的标识符或关键字。仅在非头文件的实现中使用。

*/

$region $synopsis $begin

// 既定宏污染列表。
// ! 默认由外部（如预定义标识符或编译器命令行）提供。
// # 可能由外部提供。
// 非外部提供的非头文件守护宏的保留宏名可能被 #undef 取消定义。

!NDEBUG // ISO C 非调试状态宏，可能取消定义。

$dir YBase
{

YB_* // 保留给 YBase 使用。（除了 ydef.h 中定义的宏和包含守护宏外，可能使用后被 #undef 取消定义。）
YPP_* // 是通用于预处理阶段的辅助宏。
YB_INC_*

$header YDefinition
{
YB_IMPL_CPP
YB_IMPL_MSCPP
YB_IMPL_GNUCPP
#__has_feature(...)
#__has_extension(...)
#__has_builtin(...)
YPP_Empty
YPP_Comma
YPP_Join(_x, _y)
YPP_Concat(_x, _y)
yimpl
YB_HAS_ALIGNAS
YB_HAS_ALIGNOF
YB_HAS_BUILTIN_NULLPTR
YB_HAS_CONSTEXPR
YB_HAS_NOEXCEPT
YB_ABORT
YB_ATTR(...)
YB_ALLOCATOR
YB_EXPECT(_expr, _constant)
YB_LIKELY(_expr)
YB_UNLIKELY(_expr)
YB_NONNULL
YB_NORETURN
YB_PURE
YB_STATELESS
!YB_DLL
!YB_BUILD_DLL
YB_API
YB_Use_YAssert @ !defined(NDEBUG) && !defined(YB_Use_YAssert)
YB_Use_YTrace
YB_USE_EXCEPTION_SPECIFICATION
yalignof(_type)
yconstexpr
yconstfn
ythrow(*)?
ynothrow
ynoexcept(*)?
yconstraint(_expr)
yassume(_expr)
yoffsetof(_type, _member)
yforward(_expr)
yunseq
}
$dir ystdex
{
$header TypeOperation
{
YB_TYPE_OP_TEST_2(_n, _expr)
}
$header CAssert
{
YAssert(*)
YTrace(*)
}
} // $dir ystdex;
} // $dir YBase;

$dir YFramework // YFramework 既定宏污染列表。
{

YF_* // 保留给 YFramework 使用。
YFM_* // 保留给 YFramework 使用作为模块包含文件宏。
YCL_* // 保留给 YFramework::YCLib 使用。
YSL_* // 保留给 YFramework::YSLib 使用。
NPL_* // 保留给 YFramework::NPL 使用。
INC_* // 公开头文件守护宏，保留给 YFramework 的其它部分和客户程序使用。
Inc_* // 非公开头文件守护宏，保留给 YFramework 的其它部分和客户程序使用。
YCL_INC_* // YCLib 公开头文件包含守护宏。
YCL_Inc_* // YCLib 非公开头文件包含守护宏。
YSL_INC_* // YSLib 公开头文件包含守护宏。
YSL_Inc_* // YSLib 非公开头文件包含守护宏。
YSL_DEBUG_*

$dir YCLib
{
$header Platform
{
YF_API
YF_DLL
YF_Platform_*
YF_Platform
YF_Multithread
YF_Hosted
YCL_API_*
YCL_DS
YCL_MinGW32
}
$header Debug
{
YCL_Log
YCL_Trace
YCL_Use_TraceSrc
YTraceDe
}
$header NativeAPI
{
#if YCL_Win32
mkdir
#endif
}
$header FileSystem
{
YCL_PATH_DELIMITER
YCL_PATH_SEPARATOR
YCL_PATH_ROOT
}
$header Video
{
YCL_PIXEL_FORMAT_XYZ555
} // $dir YCLib;
$header Input
{
YCL_KEY*
}
} // $dir YCLib;

$dir YCLib_(MinGW32)
{
$header MinGW32
{
YF_Raise_Win32Exception(...)
YF_Raise_Win32Exception_On_Failure(_expr, ...)
}
} // $dir YCLib_(MinGW32);

$dir CHRLib
{
$header CHRLib
{
}
} // $dir CHRLib;

$dir YSLib
{
$dir Adaptor
{
$header Config
{
YSL_USE_MEMORY_DEBUG
YSL_USE_COPY_ON_WRITE
YSL_USE_YASLI_VECTOR
YSL_USE_FLEX_STRING
YSL_OPT_SMALL_STRING_LENGTH
YSL_DEBUG_MSG
}
} // $dir Adaptor;

$dir Core
{
$header YBaseMacro
{
YInterface
YInterfaceHead(_n)
PDeclI(_n)
DeclI(_attr, _n)
DeclDerivedI(_attr, _n, ...)
ImplI(...)
ImplA(...)
DeclIEntry(_signature)
EndDecl
DeclSEntry(...)
ImplS(...)
DefExtendClass1(_n, _b, _a)
PDefH(_t, _n, ...)
PDefHOp(_t, _op, ...)
PDefCvt(_t)
ImplExpr(...)
ImplRet(...)
ImplThrow(...)
ImplUnseq(...)
TryExpr(...)
TryRet(...)
CatchExpr(_ex, ...)
CatchRet(_ex, ...)
DefEmptyDtor(_t)
ImplEmptyDtor(_t)
DefDeCtor(_t)
DefDelCtor(_t)
DefDeCopyCtor(_t)
DefDelCopyCtor(_t)
DefDeMoveCtor(_t)
DefDelMoveCtor(_t)
DefDeCopyMoveCtor(_t)
DefDeDtor(_t)
DefDelDtor(_t)
DefDeCopyAssignment(_t)
DefDelCopyAssignment(_t)
DefDeMoveAssignment(_t)
DefDelMoveAssignment(_t)
DefDeCopyMoveAssignment(_t)
DefDeCopyMoveCtorAssignment(_t)
DefCvt(_q, _t, ...)
DefCvtBase(_q, _t, _b)
DefCvtMem(_q, _t, _m)
DefNeg
DefBoolNeg(_spec, ...)
DefPred(_q, _n, ...)
DefPredBase(_q, _n, _b)
DefPredMem(_q, _n, _m)
DefGetter(_q, _t, _n, ...)
DefGetterBase(_q, _t, _n, _b)
DefGetterMem(_q, _t, _n, _m)
DefSetter(_t, _n, _m)
DefSetterDe(_t, _n, _m, _defv)
DefSetterBase(_t, _n, _b)
DefSetterBaseDe(_t, _n, _b, _defv)
DefSetterMem(_t, _n, _m)
DefSetterMemDe(_t, _n, _m, _defv)
DefSetterEx(_t, _n, _m, _e)
DefSetterDeEx(_t, _n, _m, _defv, _e)
DefClone(_q, _t)
DefSwap(_q, _t)
DefSubscriptor(_q, _type, ...)
DefSubscriptorBase(_q, _type, _tBase, _vBaseN, ...)
DefFwdFn(_q _type, _name, ...)
DefFwdTmpl(_q, _type, _name, ...)
DefBitmaskAnd(_tBitmask, _tInt)
DefBitmaskOr(_tBitmask, _tInt)
DefBitmaskXor(_tBitmask, _tInt)
DefBitmaskNot(_tBitmask, _tInt)
DefBitmaskAndAssignment(_tBitmask, _tInt)
DefBitmaskOrAssignment(_tBitmask, _tInt)
DefBitmaskXorAssignment(_tBitmask, _tInt)
DefBitmaskOperations(_tBitmask, _tInt)
DefBitmaskEnum(_tEnum)
}
$header YEvent
{
EventT(_tEventHandler)
DefExtendEventMap(_n, _b)
}
$header YMessageDefinition
{
SM_Null
SM_Set
SM_Quit
SM_Bound
SM_Task
SM_Paint
SM_Input
DefMessageTarget
}
} // $dir Core;
$dir UI
{
$header YControl
{
DefEventTypeMapping(_n, _tEventHandler)
}
$header WidgetIteration
{
DefWidgetSubscriptor(...)
DefWidgetSubscriptorBase(_tBase, ...)
DefWidgetBegin(_tIter)
DefWidgetEnd(_tIter)
DefWidgetChildrenGetter
DefWidgetMemberIterationOperations(_tIter)
DefWidgetMemberIteration(...)
DefWidgetMemberIterationBase(_tBase, ...)
}
$header Loader
{
DeclDynWidget(_t, _n, ...)
DeclDynWidgetN(_t, _n, ...)
DeclDynWidgetNode(_t, _n)
}
$unit Scroll
{
YSL_UI_ATRACK_PARTIAL_INVALIDATION
}
} // $dir UI;
} // $dir YSLib;

$dir Helper
{
$header YShellHelper
{
DefDynInitRef(_t, _n, _e)
}
} // $dir Helper;
} // $dir YFramework;


// YFramework 中非 YSLib 本体或 YGlobal 定义列表。

// 非 YSLib 本体函数列表。
$header YSLib::Core::YApplication
{
extern Application&
FetchAppInstance() ynothrow;
} // $header YSLib::Core::YApplication;

$unit Helper::YGlobal
{
#if YCL_Android
extern void
::y_android_main();
#endif
} // $unit Helper::YGlobal;

// 非 constexpr 非自动生存期块作用域变量所在实体列表。

$dir YBase::YStandardEx
{

$header Utilities
{
	template<typename _type, typename, typename...>
	inline _type&
	parameterize_static_object()
	{
		static _type obj;
	}

	template<typename _type, typename, size_t...>
	inline _type&
	parameterize_static_object()
	{
		static _type obj;
	}

	class template nifty_counter
	{
	private:
		static size_t&
		get_count() ynothrow
		{
			ythread size_t count;
		}
		static object_type*&
		get_object_ptr() ynothrow
		{
			ythread object_type* ptr;
		}
	};
}

} // $dir YBase::YStandardEx;

$dir YFramework
{

$dir YCLib
{

$unit YCommon
{
#if YCL_DS
	bool
	platform_ex::AllowSleep(bool)
	{
		static bool bSleepEnabled;
	}
#endif
}

$unit JNI
{
	void
	JNIBase::EnsureDetachJNIAtThreadExit(::JavaVM&, ::JNIEnv&)
	{
#if YB_HAS_THREAD_LOCAL
		ythread JNIBase guard;
#elif YF_Use_POSIXThread
		static TLSKey key;
#endif
	}
}
$unit XCB
{
$unit.impl:
	shared_ptr<GlobalTable>
	FetchGlobalTablePtr()
	{
		static auto p(make_shared<GlobalTable>());
	}
} // $unit XCB;

} // $dir YCLib;

$dir YSLib
{

$dir Adaptor
{

$unit YNew
{
	MemoryList&
	GetDebugMemoryList()
	{
		static recursive_mutex mtx;
	}
}

$unit Image
{
	string
	to_string(const ImageTag&, ImageMetadataModel)
	{
		static mutex mtx;
	}
}

} // $dir Adaptor;

$dir Core
{

$header YStorage
{
	class template GLocalStaticCache
	{
	private:
		static inline PointerType&
		GetStaticPtrRef() ynothrow
		{
			static PointerType ptr;
		}
	};
}

} // $dir Core;

$dir Service
{

$header YTimer
{
	template<class _tClock = HighResolutionClock>
	inline typename _tClock::time_point
	FetchEpoch()
	{
		static auto start_time(_tClock::now());
	}
}

} // $dir Service;

$dir UI
{

$unit YGUI
{
	GUIState&
	FetchGUIState() ynothrow
	{
		static GUIState state;
	}

	GUIConfiguration&
	FetchGUIConfiguration()
	{
		static GUIConfiguration conf;
	}
}

} // $dir UI;

} // $dir YSLib;

} // $dir YFramework;


// 非 constexpr 的命名空间作用域变量和类静态变量列表。

$dir YFramework
{

$dir YCLib
{

$unit YDebug
{
namespace platform
{
#if YCL_DS
$unit.impl:
	bool bUninitializedTimers;
	volatile std::uint32_t system_tick;
#endif
}
}

$dir CHRLib
{

$header MappingEx
{
namespace CHRLib
{

//编码转换表。
#if !CHRLIB_NODYNAMIC_MAPPING
extern "C"
{
extern const byte cp113[];
//extern const byte cp2026[13658];
}
#else
extern byte* cp17;
extern byte* cp113;
extern byte* cp2026;
#endif
} // namespace CHRLib;
}

} // $dir CHRLib;

} // $dir YCLib;

$dir YSLib
{

$dir Core
{

$header YCounter
{
class template GMCounter
{
	static count_t nCount, nTotal;
};
}

$unit YGDIBase
{
namespace Drawing
{
class template GBinaryGroup
{
	static const GBinaryGroup Invalid;
};

class Size
{
	static const Size Invalid;
};

class Rect
{
	static const Rect Invalid;
};
}
}

$header YStorage
{
	class template GStaticCache
	{
		static PointerType _ptr;
	};
}

} // $dir Core;

$dir Service
{

$unit YTimer
{
namespace Timers
{
namespace
{
	bool NotInitialized;
}
}
}

} // $dir Service;

$dir UI
{

$header Caret
{
	$impl Caret::caret_animation;
} // $header Caret;

} // $dir UI;

} // $dir YSLib;

} // $dir YFramework;

///

$region $synopsis $end;

